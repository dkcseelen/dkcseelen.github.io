{"version":3,"sources":["Computing/ChannelColors.ts","MachineStore/DefaultMachines/MoveMachine.ts","Computing/Direction.ts","MachineStore/DefaultMachines/StartMachine.ts","MachineStore/MachineStore.ts","Computing/Setup.ts","Components/Constants.ts","Components/Machine/Machine.tsx","Components/Channel/Channel.tsx","Components/MachineInstance/MachineInstance.tsx","Components/Cell/Cell.tsx","Components/Grid/Grid.tsx","Components/Game/Game.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ChannelColor","Direction","MoveMachine","Id","Color","BorderColor","NumberOfOutputs","NumberOfInputs","Name","Type","message","returnValue","push","Content","Channel","Green","StartMachine","MachineStore","machines","this","init","machine","Error","Setup","GridSetup","LoadSetup","undefined","machineStore","NumberOfRows","NumberOfColumns","MachineInstances","Cell","Row","Column","Channels","Down","InputChannels","Machine","GetMachine","Right","Constants","CellSize","machineSize","borderSize","machineStyle","position","height","width","backgroundColor","props","borderStyle","borderColor","borderWidth","borderRadius","marginLeft","marginTop","style","React","Component","onClicked","bind","channelStyle","ChannelMap","rotate","Left","Up","rotation","transform","onClick","event","newDirection","OnChanged","MachineInstance","channels","map","c","index","key","channelMap","OnChannelChanged","draggable","channel","machineInstance","i","onDrop","border","float","marginRight","Message","Grid","ChannelChanged","rows","rowIndex","row","columnIndex","foundMachineInstance","foundMessage","Messages","newGridSetup","mi","Game","startMachines","inputChanged","startComputation","GetStartMachines","CalculateNextMessages","GridSetupChanged","Move","gridSetup","LoadGridSetup","state","Computing","Input","Output","e","setState","target","value","messageLocations","direction","messageLocation","setTimeout","nextMessages","messageCell","find","nextContents","Act","nextContent","cm","cell","gridSizeStyle","className","onChange","title","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.af643792.chunk.js","sourcesContent":["export enum ChannelColor {\r\n    Green = \"green\",\r\n    Red = \"red\",\r\n    Blue = \"blue\",\r\n    Yellow = \"yellow\",\r\n}","import { IMachine } from \"../IMachine\";\r\nimport { Message } from \"../../Computing/Message\";\r\nimport { ChannelColor } from \"../../Computing/ChannelColors\";\r\n\r\nexport class MoveMachine implements IMachine {\r\n    public readonly Id: number = 2;\r\n    public readonly Color: string = \"green\";\r\n    public readonly BorderColor: string = \"lightgreen\";\r\n\r\n    public readonly NumberOfOutputs: number = 1;\r\n    public readonly NumberOfInputs: number = 1;\r\n    public readonly Name: string = \"Move\";\r\n\r\n    public readonly Type = \"Default\";\r\n\r\n    public Act(message: Message): Message[]{\r\n        const returnValue: Message[] = [];\r\n        returnValue.push({Content: message.Content, Channel: ChannelColor.Green});\r\n        return returnValue;\r\n    }    \r\n}","export enum Direction {\r\n    Up = \"UP\",\r\n    Down = \"DOWN\",\r\n    Left = \"LEFT\",\r\n    Right = \"RIGHT\",\r\n}","import { IMachine } from \"../IMachine\";\r\nimport { Message } from \"../../Computing/Message\";\r\nimport { ChannelColor } from \"../../Computing/ChannelColors\";\r\n\r\nexport class StartMachine implements IMachine {\r\n    public readonly Id: number = 1;\r\n    public readonly Color: string = \"darkgreen\";\r\n    public readonly BorderColor: string = \"red\";\r\n    public readonly NumberOfOutputs: number = 1;\r\n    public readonly NumberOfInputs: number = 1;\r\n    public readonly Name: string = \"Start\";\r\n    public readonly Type = \"Default\";\r\n\r\n    public Act(message: Message): Message[] {\r\n        const returnValue: Message[] = [];\r\n        returnValue.push({ Content: message.Content, Channel: ChannelColor.Green });\r\n        return returnValue;\r\n    }\r\n}","import { MoveMachine } from \"./DefaultMachines/MoveMachine\";\r\nimport { IMachine} from \"./IMachine\";\r\nimport { StartMachine } from \"./DefaultMachines/StartMachine\";\r\n\r\nexport class MachineStore{\r\n\r\n    private machines: IMachine[];\r\n\r\n    constructor() {\r\n        this.machines = [];\r\n        this.init();\r\n    }\r\n    private init(): void{\r\n        this.machines = [];\r\n        this.machines.push(new StartMachine());\r\n        this.machines.push(new MoveMachine());\r\n    }\r\n\r\n    public GetMachine(Id: number, Type: \"Custom\" | \"Default\"): IMachine\r\n    {\r\n        for (const machine of this.machines)\r\n        {\r\n            if (machine.Id === Id && machine.Type === Type)\r\n            {\r\n                return machine;\r\n            }\r\n        }\r\n        throw new Error(\"No machine found with id \" + Id + \" and type \" + Type);\r\n    }\r\n}","import { GridSetup } from \"./GridSetup\";\r\nimport { MachineStore } from \"../MachineStore/MachineStore\";\r\nimport { Direction } from \"./Direction\";\r\nimport { ChannelColor } from \"./ChannelColors\";\r\n\r\nexport class Setup {\r\n\r\n    private GridSetup: GridSetup | undefined;\r\n    constructor() {\r\n        this.LoadSetup();\r\n    }\r\n\r\n    public LoadGridSetup(): GridSetup {\r\n        if (this.GridSetup === undefined) {\r\n            throw new Error(\"Setup not loaded\");\r\n        }\r\n\r\n        return this.GridSetup;\r\n    }\r\n\r\n    LoadSetup(): void {\r\n        const machineStore = new MachineStore();\r\n\r\n        this.GridSetup = {\r\n            NumberOfRows: 3,\r\n            NumberOfColumns: 4,\r\n            MachineInstances: [{\r\n                Cell: { Row: 0, Column: 1 },\r\n                Channels: [{ Channel: ChannelColor.Green, Direction: Direction.Down }],\r\n                InputChannels: undefined,\r\n                Machine: machineStore.GetMachine(1, \"Default\")\r\n            },\r\n            {\r\n                Cell: { Row: 1, Column: 1 },\r\n                Channels: [{ Channel: ChannelColor.Green, Direction: Direction.Right }],\r\n                InputChannels: undefined,\r\n                Machine: machineStore.GetMachine(2, \"Default\"),\r\n            },{\r\n                Cell: { Row: 1, Column: 2 },\r\n                Channels: [{ Channel: ChannelColor.Green, Direction: Direction.Down }],\r\n                InputChannels: undefined,\r\n                Machine: machineStore.GetMachine(2, \"Default\")\r\n            }]\r\n        };\r\n\r\n    }\r\n}\r\n","export class Constants{\r\n    public static CellSize = 100; \r\n}","import React from \"react\";\r\nimport { Props } from \"./Props\";\r\nimport { Constants } from \"../Constants\";\r\n\r\nexport class Machine extends React.Component<Props>\r\n{\r\n    public render() {\r\n        const machineSize = Constants.CellSize / 5 * 3\r\n        const borderSize = machineSize/10;\r\n\r\n        const machineStyle: React.CSSProperties = {\r\n            position: \"absolute\",\r\n            height: machineSize,\r\n            width: machineSize,\r\n            backgroundColor: this.props.Machine.Color,\r\n            borderStyle: \"solid\",\r\n            borderColor: this.props.Machine.BorderColor,\r\n            borderWidth: borderSize,\r\n            borderRadius: \"50%\",\r\n            marginLeft: ((Constants.CellSize - machineSize)/2 - borderSize),\r\n            marginTop: ((Constants.CellSize - machineSize)/2 - borderSize)\r\n        };\r\n\r\n        return (\r\n            <div style={machineStyle}>\r\n               \r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport { Props } from \"./Props\";\r\nimport { Direction } from \"../../Computing/Direction\";\r\nimport { Constants } from \"../Constants\";\r\n\r\nexport class Channel extends React.Component<Props>{\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.onClicked = this.onClicked.bind(this);\r\n    }\r\n    public render() {\r\n\r\n        const width = 20;\r\n        const height = 4;\r\n        const channelStyle: React.CSSProperties = {\r\n            position: \"absolute\",\r\n            height: Constants.CellSize / 50 * height,\r\n            width: Constants.CellSize / 50 * width,\r\n            backgroundColor: this.props.ChannelMap.Channel,\r\n            marginLeft: Constants.CellSize / 50 * (25 + height / 2),\r\n            marginTop: Constants.CellSize / 50 * (25 - height / 2)\r\n        }\r\n\r\n        let rotate: string = \"\";\r\n        switch (this.props.ChannelMap.Direction) {\r\n            case Direction.Down:\r\n                rotate = \"rotate(90deg)\";\r\n                break;\r\n            case Direction.Left:\r\n                rotate = \"rotate(180deg)\";\r\n                break;\r\n            case Direction.Up:\r\n                rotate = \"rotate(270deg)\";\r\n                break;\r\n            case Direction.Right:\r\n                rotate = \"rotate(0deg)\";\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        const rotation: React.CSSProperties = {\r\n            transform: rotate,\r\n            height: Constants.CellSize,\r\n            width: Constants.CellSize\r\n        }\r\n\r\n        return (\r\n            <div style={rotation}>\r\n                <div style={channelStyle} onClick={this.onClicked}></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public onClicked(event: React.MouseEvent<HTMLDivElement, MouseEvent>): void {\r\n        let newDirection: Direction = Direction.Left;\r\n        switch (this.props.ChannelMap.Direction) {\r\n            case Direction.Down:\r\n                newDirection = Direction.Left;\r\n                break;\r\n            case Direction.Left:\r\n                newDirection = Direction.Up;\r\n                break;\r\n            case Direction.Up:\r\n                newDirection = Direction.Right;\r\n                break;\r\n            case Direction.Right:\r\n                newDirection = Direction.Down;\r\n                break;\r\n        }\r\n        this.props.OnChanged({Direction: newDirection, Channel: this.props.ChannelMap.Channel});\r\n\r\n    }\r\n}","import React from \"react\";\r\nimport { Props } from \"./Props\";\r\nimport { Machine } from \"../Machine/Machine\";\r\nimport { Channel } from \"../Channel/Channel\";\r\nimport { ChannelMap } from \"../../Computing/ChannelMap\";\r\nimport { MachineInstance as MachineInstanceModel } from \"../../Computing/MachineInstance\";\r\n\r\n\r\nexport class MachineInstance extends React.Component<Props>\r\n{\r\n    public render() {\r\n        const channels = this.props.MachineInstance.Channels.map((c, index) => <div key={index}><Channel OnChanged={(channelMap) => this.OnChannelChanged(channelMap, index)} ChannelMap={c} /></div>);\r\n\r\n        return (\r\n            <div draggable>\r\n                <Machine Machine={this.props.MachineInstance.Machine} />\r\n                {channels}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private OnChannelChanged(channel: ChannelMap, index: Number): void {\r\n        const machineInstance: MachineInstanceModel = {\r\n            Cell: this.props.MachineInstance.Cell,\r\n            Machine: this.props.MachineInstance.Machine,\r\n            Channels: this.props.MachineInstance.Channels.map((c, i) => (i === index) ? channel : c),\r\n            InputChannels: this.props.MachineInstance.InputChannels\r\n        }\r\n\r\n        this.props.OnChanged(machineInstance);\r\n    }\r\n\r\n}","import React from \"react\";\r\nimport { Props } from \"./Props\";\r\nimport \"../../App.css\";\r\nimport { MachineInstance } from \"../MachineInstance/MachineInstance\";\r\nimport { Constants } from \"../Constants\";\r\n\r\nexport class Cell extends React.Component<Props>{\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.onDrop = this.onDrop.bind(this);\r\n\r\n    }\r\n    public render() {\r\n        const style: React.CSSProperties = {\r\n            height: Constants.CellSize,\r\n            width: Constants.CellSize,\r\n            border: \"1px solid #999\",\r\n            float: \"left\",\r\n            marginTop: -1,\r\n            marginRight: -1,\r\n            position: \"relative\",\r\n\r\n        }\r\n        return (\r\n            <div style={style} onDrop={this.onDrop}>\r\n                {this.props.message !== undefined ? this.props.message.Message : \"\"}\r\n                {this.props.machineInstance !== undefined ? <MachineInstance MachineInstance={this.props.machineInstance} OnChanged={this.props.OnChanged}/> : \".\"}\r\n\r\n            </div >\r\n        );\r\n\r\n    }\r\n    private onDrop(event: React.DragEvent<HTMLDivElement>): void{\r\n        \r\n    }\r\n\r\n}","import React from 'react';\r\nimport '../../App.css';\r\nimport { GridProps } from './Props';\r\nimport { Cell } from '../Cell/Cell';\r\nimport { MachineInstance } from '../../Computing/MachineInstance';\r\nimport { MessageLocation } from '../../Computing/MessageLocation';\r\nimport { GridSetup } from '../../Computing/GridSetup';\r\n\r\nexport class Grid extends React.Component<GridProps>{\r\n\r\n    constructor(props: GridProps) {\r\n        super(props);\r\n        this.ChannelChanged = this.ChannelChanged.bind(this);\r\n    }\r\n    public render() {\r\n        var rows = [];\r\n        for (var rowIndex = 0; rowIndex < this.props.GridSetup.NumberOfRows; rowIndex++) {\r\n            var row = [];\r\n            for (var columnIndex = 0; columnIndex < this.props.GridSetup.NumberOfColumns; columnIndex++) {\r\n                let foundMachineInstance: MachineInstance | undefined = undefined;\r\n                let foundMessage: MessageLocation | undefined = undefined;\r\n\r\n                for (const machineInstance of this.props.GridSetup.MachineInstances) {\r\n                    if (machineInstance.Cell.Column === columnIndex && machineInstance.Cell.Row === rowIndex) {\r\n                        foundMachineInstance = machineInstance;\r\n                    }\r\n                }\r\n\r\n                for (const message of this.props.Messages) {\r\n                    if (message.Cell.Column === columnIndex && message.Cell.Row === rowIndex) {\r\n                        foundMessage = message;\r\n                    }\r\n                }\r\n\r\n                row.push(<Cell key={columnIndex} machineInstance={foundMachineInstance} message={foundMessage} OnChanged={this.ChannelChanged} />);\r\n            }\r\n            rows.push(<div key={rowIndex}>{row}</div>);\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                {rows}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private ChannelChanged(machineInstance: MachineInstance) {\r\n        const newGridSetup: GridSetup = {\r\n            NumberOfColumns: this.props.GridSetup.NumberOfColumns,\r\n            NumberOfRows: this.props.GridSetup.NumberOfRows,\r\n            MachineInstances: this.props.GridSetup.MachineInstances.map((mi) =>\r\n                (mi.Cell.Column === machineInstance.Cell.Column && mi.Cell.Row === machineInstance.Cell.Row) ?\r\n                    machineInstance\r\n                    :\r\n                    mi)\r\n        };\r\n\r\n        this.props.OnChanged(newGridSetup);\r\n    }\r\n}\r\n\r\n\r\n","import { Props } from \"./Props\";\r\nimport React from \"react\";\r\nimport { Setup } from \"../../Computing/Setup\";\r\nimport { Grid } from \"../Grid/Grid\";\r\nimport { State } from \"./State\";\r\nimport { MessageLocation } from \"../../Computing/MessageLocation\";\r\nimport { Cell } from \"../../Computing/Cell\"\r\nimport { MachineInstance } from \"../../Computing/MachineInstance\";\r\nimport { Direction } from \"../../Computing/Direction\";\r\nimport { ChannelColor } from \"../../Computing/ChannelColors\";\r\nimport { Constants } from \"../Constants\";\r\nimport { GridSetup } from \"../../Computing/GridSetup\";\r\n\r\nexport class Game extends React.Component<Props, State>{\r\n    private startMachines: MachineInstance[] = [];\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.inputChanged = this.inputChanged.bind(this);\r\n        this.startComputation = this.startComputation.bind(this);\r\n        this.GetStartMachines = this.GetStartMachines.bind(this);\r\n        this.CalculateNextMessages = this.CalculateNextMessages.bind(this);\r\n        this.GridSetupChanged = this.GridSetupChanged.bind(this);\r\n\r\n        this.Move = this.Move.bind(this);\r\n\r\n        const setup = new Setup();\r\n        const gridSetup = setup.LoadGridSetup();\r\n        this.state = { Computing: false, Messages: [], GridSetup: gridSetup, Input: \"\", Output: \"\" };\r\n        this.GetStartMachines();\r\n    }\r\n    private inputChanged(e: React.ChangeEvent<HTMLInputElement>): void {\r\n        this.setState({ Input: e.target.value });\r\n    }\r\n    private startComputation(): void {\r\n\r\n        const messageLocations: MessageLocation[] = [];\r\n        for (const machineInstance of this.startMachines) {\r\n            const direction = machineInstance.Channels[0].Direction;\r\n            const messageLocation: MessageLocation = { Message: this.state.Input, Direction: direction, Cell: machineInstance.Cell };\r\n            messageLocations.push(messageLocation);\r\n        }\r\n\r\n        this.setState({ Computing: true, Messages: messageLocations });\r\n        setTimeout(this.CalculateNextMessages, 1000);\r\n    }\r\n\r\n    private GetStartMachines(): void {\r\n        this.startMachines = [];\r\n        for (const machineInstance of this.state.GridSetup.MachineInstances) {\r\n            if (machineInstance.Machine.Id === 1 && machineInstance.Machine.Type === \"Default\") {\r\n                this.startMachines.push(machineInstance);\r\n            }\r\n        }\r\n    }\r\n\r\n    private CalculateNextMessages(): void {\r\n        const nextMessages: MessageLocation[] = [];\r\n        for (const message of this.state.Messages) {\r\n            let machine: MachineInstance | undefined;\r\n            let messageCell: Cell | undefined = message.Cell;\r\n\r\n            while (machine === undefined) {\r\n                messageCell = this.Move(messageCell, message.Direction);\r\n                if (messageCell === undefined) {\r\n                    this.setState({ Output: message.Message, Computing: false, Messages: [] });\r\n                    return;\r\n                }\r\n\r\n                machine = this.state.GridSetup.MachineInstances.find((mi) => mi.Cell.Column === messageCell!.Column && mi.Cell.Row === messageCell!.Row);\r\n            }\r\n\r\n            let channel = ChannelColor.Green;\r\n            if (machine.Machine.NumberOfInputs > 1) {\r\n            }\r\n\r\n            const nextContents = machine.Machine.Act({ Content: message.Message, Channel: channel });\r\n            for (const nextContent of nextContents) {\r\n                const channelMap = machine.Channels.find((cm) => cm.Channel === nextContent.Channel);\r\n                if (channelMap === undefined) {\r\n                    throw Error(\"Channelmap \" + nextContent.Channel + \"undefined\");\r\n                }\r\n\r\n                const messageLocation: MessageLocation = { Cell: machine.Cell, Message: nextContent.Content, Direction: channelMap.Direction}\r\n                nextMessages.push(messageLocation);\r\n            }\r\n        }\r\n\r\n        this.setState({Messages: nextMessages});\r\n        setTimeout(this.CalculateNextMessages, 1000);\r\n    }\r\n\r\n    private Move(cell: Cell, direction: Direction): Cell | undefined {\r\n        switch (direction) {\r\n            case Direction.Down:\r\n                if (cell.Row === this.state.GridSetup.NumberOfRows - 1) {\r\n                    return;\r\n                }\r\n                return { Column: cell.Column, Row: cell.Row + 1 };\r\n            case Direction.Up:\r\n                if (cell.Row === 0) {\r\n                    return;\r\n                }\r\n                return { Column: cell.Column, Row: cell.Row - 1 };\r\n            case Direction.Right:\r\n                if (cell.Column === this.state.GridSetup.NumberOfColumns - 1) {\r\n                    return;\r\n                }\r\n                return { Column: cell.Column + 1, Row: cell.Row };\r\n            case Direction.Left:\r\n                if (cell.Row === 0) {\r\n                    return;\r\n                }\r\n                return { Column: cell.Column - 1, Row: cell.Row };\r\n        }\r\n    }\r\n\r\n    public render() {\r\n\r\n        const height = this.state.GridSetup.NumberOfRows * (Constants.CellSize +2);\r\n        const width = this.state.GridSetup.NumberOfColumns * (Constants.CellSize + 2);\r\n        const gridSizeStyle: React.CSSProperties = { height: height, width: width };\r\n\r\n        return (\r\n            <div>\r\n                Hello World\r\n                <div className=\"App\" style={gridSizeStyle}>\r\n                    <Grid GridSetup={this.state.GridSetup} Computing={this.state.Computing} Messages={this.state.Messages} OnChanged={this.GridSetupChanged}/>\r\n                </div>\r\n                <input\r\n                    value={this.state.Input}\r\n                    onChange={this.inputChanged} />\r\n                <button onClick={this.startComputation} title={\"start\"}>Start</button>\r\n                <label>Output: {this.state.Output}</label>\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n    private GridSetupChanged(newGridSetup: GridSetup): void\r\n    {        \r\n        this.setState({GridSetup: newGridSetup});\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport { Game } from './Components/Game/Game';\n\nconst App: React.FC = () => {\n  \n  return (\n    <Game/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}