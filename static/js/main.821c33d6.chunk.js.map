{"version":3,"sources":["Models/ChannelColorsEnum.ts","Components/NumberInput/NumberInput.tsx","Helper/StoreHelper.ts","Redux/GameDataReducer/Actions.ts","Computing/MessageCleaner.ts","MachineStore/DefaultMachines/AddStarMachine.ts","MachineStore/DefaultMachines/AddZeroMachine.ts","MachineStore/DefaultMachines/CompareMachine.ts","MachineStore/DefaultMachines/CopyMachine.ts","MachineStore/DefaultMachines/DeleteMachine.ts","MachineStore/DefaultMachines/GreenStartMachine.ts","MachineStore/DefaultMachines/IncrementMachine.ts","MachineStore/DefaultMachines/MoveMachine.ts","MachineStore/DefaultMachines/RedStartMachine.ts","MachineStore/DefaultMachines/RotateMachine.ts","MachineStore/IMachine.ts","Components/Constants.ts","Helper/Guid.ts","Helper/TextInputHelper.ts","Models/DirectionEnum.ts","Levels/Levels/AppendLength.ts","Redux/GameDataReducer/PlayerReducer/LevelData.ts","Levels/Levels/GetLength.ts","Levels/Levels/GetType.ts","Levels/Levels/IsEmpty.ts","Levels/Levels/KeepNumbers.ts","Levels/Levels/PlusOne.ts","Levels/Levels/RemoveRepeats.ts","Levels/Levels/RotateBackwards.ts","Levels/Levels/Sandbox.ts","Levels/Levels/ReverseLimited.ts","Levels/Levels/Reverse.ts","Levels/Levels/CopyAll.ts","Levels/Levels/Decrement.ts","Levels/Levels/IncrementAll.ts","Levels/Levels/IncrementIncreasing.ts","Levels/Levels/JoinAll.ts","Levels/Levels/MakeTwins.ts","Levels/Levels/RemoveIfDuplicate.ts","Levels/Levels/RemoveUntilRepeat.ts","Levels/Levels/Trigger.ts","Levels/LevelStore.ts","Redux/GameDataReducer/Level/Reducer.ts","Helper/NewChannelSet.ts","Models/CellModel.ts","Components/Grid/Cell/MachineInstance/MachineDrawer/DrawConstants.ts","Helper/AngleHelper.ts","Helper/ColorHelper.ts","Helper/ArrayHelper.ts","Redux/GameDataReducer/PlayerReducer/GridSetup/GridSetupReducer.ts","Redux/GameDataReducer/PlayerReducer/GridSetup/MachineInstances/MachineInstancesReducer.ts","Helper/SetupHelper.ts","Redux/GameDataReducer/PlayerReducer/CustomMachinesHelper.ts","Redux/GameDataReducer/PlayerReducer/TypeProvider.ts","Redux/GameDataReducer/PlayerReducer/PlayerReducer.ts","Models/MachineApi.ts","Redux/GameDataReducer/GameReducer.ts","Redux/Store.ts","MachineStore/DefaultMachines/JoinActor.ts","MachineStore/DefaultMachines/JoinMachine.ts","MachineStore/DefaultMachines/SplitMachine.ts","MachineStore/DefaultMachines/BlueStartMachine.ts","MachineStore/DefaultMachines/YellowStartMachine.ts","MachineStore/MachineStore.ts","Redux/GameDataReducer/Level/Actions.ts","Redux/GameDataReducer/PlayerReducer/GridSetup/Actions.ts","Computing/Computer.ts","Components/Dashboard/Dashboard.tsx","Redux/GameDataReducer/PlayerReducer/GridSetup/MachineInstances/Actions.ts","Components/DragItemTypes.ts","Components/MessageFormatter.ts","Components/Grid/Cell/MachineInstance/ChannelClickArea/ChannelClickArea.tsx","Components/Grid/Cell/MachineInstance/ChannelClickArea/ChannelGroup.tsx","Components/Grid/Cell/MachineInstance/MachineDrawer/MachineDrawer.ts","Components/Grid/Cell/MachineInstance/MachineDrawer/MachineCircleDrawer.ts","Components/Grid/Cell/MachineInstance/MachineDrawer/MachineSquareDrawer.ts","Components/Grid/Cell/MachineInstance/MachineDrawer/MachineCanvasHolder.tsx","Components/Grid/Cell/MachineInstance/InputChannelClickArea/InputChannelClickArea.tsx","Components/Grid/Cell/MachineInstance/MachineInstance.tsx","Components/Grid/Cell/Cell.tsx","Components/Grid/Grid.tsx","Models/OutputStatusEnum.ts","Components/LevelDisplay/TestDisplay/MessageDisplay/MessageDisplay.tsx","Components/LevelDisplay/TestDisplay/TestDisplay.tsx","Components/LevelDisplay/LevelDisplay.tsx","Components/MachineCollection/StoredMachine/MachineDisplay/MachineDisplay.tsx","Redux/GameDataReducer/PlayerReducer/Actions.ts","Components/MachineCollection/StoredMachine/StoredMachine.tsx","Components/MachineCollection/MachineCollection.tsx","Helper/ClickHelper.ts","Components/Game/GameMenu/ChangeSizeComponent.tsx","Components/Game/GameMenu/EditMachine/EditMachine.tsx","Components/Game/GameMenu/GameMenu.tsx","Components/MachineCollection/DraggedMachine/DraggedMachine.tsx","Components/Grid/MovingElement.tsx","Components/Game/Game.tsx","Components/StartMenu/Dialog/Player/NameDialog.tsx","Components/StartMenu/Dialog/ImportDialog.tsx","Components/StartMenu/Dialog/PlayersDialog.tsx","Components/StartMenu/MenuBox.tsx","Components/StartMenu/StartMenu.tsx","Components/LevelSelectsScreen/LevelPreview/LevelPreview.tsx","Components/LevelSelectsScreen/LevelSelectScreen.tsx","App.tsx","index.tsx"],"names":["ChannelColorEnum","NumberInput","props","style","marginLeft","marginRight","onClick","valueChanged","value","GetActivePlayer","state","players","find","p","id","activePlayerId","GetActiveMachine","player","machines","m","Id","activeMachineId","GetCellSize","cellSize","SwitchScreen","screen","type","CleanStars","message","starNumber","replaceAll","RestoreStars","AddStarMachine","actor","Act","returnValue","content","Content","push","Channel","Green","Promise","resolve","this","Style","BorderColor","Color","Name","Description","Api","InputChannels","OutputChannels","DependingOn","DirectlyDependingOn","AddZeroMachine","CompareMachine","channel","length","Red","position","indexOf","substring","CopyMachine","index","DeleteMachine","GreenStartMachine","IncrementMachine","newMessage","char","String","fromCharCode","charCodeAt","slice","MoveMachine","RedStartMachine","RotateMachine","IsDefaultMachine","IsStartMachine","Constants","CreateGuid","array","Int32Array","window","crypto","getRandomValues","text","forEach","s","toString","CleanInput","input","CellSize","MinimumColumns","MinimumRows","MenuBackGround","DirectionEnum","LevelState","AppendLength","AllowedMachines","LevelDescription","MachineDescription","Direction","Right","Status","Tests","inputs","Order","expectedOutputs","Cell","Row","Column","GetLength","Up","GetType","Blue","Down","IsEmpty","UseMachineColor","KeepNumbers","PlusOne","RemoveRepeats","RotateBackwards","Sandbox","ReverseLimited","Reverse","CopyAll","Decrement","IncrementAll","IncrementIncreasing","JoinAll","MakeTwins","RemoveIfDuplicate","RemoveUntilRepeat","Trigger","LevelStore","levels","init","level","l","undefined","Error","levelStore","LevelReducer","draft","action","levelId","GetStore","GetLevel","tests","map","t","actualOutputs","editable","allowedMachines","description","name","LoadLevel","newTest","Math","max","filter","testId","test","outputs","outputMessage","maxOrder","i","newInput","concat","newInputs","order","newOutputs","o","inputsUpdated","UpdateTest","GetNewChannelSet","api","includeInput","outputChannels","inputChannels","direction","color","GetDirectedChannelSet","hasMultipleInputs","inputChannelModels","c","orderedOutputChannels","group","AreEqual","cell","otherCell","halfSquareFactor","outputSplitFactor","DrawConstants","aperture","armLength","armAngle","PI","circleRadius","borderWidth","halfSquareSize","shadeOffset","outputSplit","outputLength","outputRadius","outputWidth","outputStartLength","center","apertureAngle","defiatingAngle","protrudingArm","asin","cos","GetAngleFromMonitor","monitor","offsetX","offsetY","xyCoord","xyCoordInit","AppStore","getState","atan2","y","x","GetAngleFromOffsets","getClientOffset","getInitialSourceClientOffset","GetAngleFromDirection","Left","CheckColorString","Option","toLowerCase","GetColorModel","startsWith","colors","split","red","Number","green","blue","enteredColor","GetColorCode","parseInt","GetOpaqueColor","opacity","model","error","GetLighterColor","amount","GetGrayScaleColor","average","GetRandomColor","floor","random","Minimum","valueSelector","minimum","Infinity","minimumElement","element","Maximum","maximum","maximumElement","GridSetupReducer","typeProvider","borderColor","machineFixed","Setup","MachineInstances","mi","machineInstanceId","MachineId","DependingOnDeleted","machine","channelIndex","findIndex","relevantChannels","angle","newChannelArray","dc","inserted","baseAngle","draggedSplit","sin","machineInput","ic","some","maxId","machineInstance","machineId","newCell","GetMachineType","iac","MachineInstancesReducer","setup","deltaRow","deltaColumn","minimumColumn","minimumRow","maximumColumn","maximumRow","excessColumns","min","excessRows","NumberOfColumns","NumberOfRows","ResizeGrid","Move","GetStartMachines","startMachines","UpdateMachineStatus","newOutputChannel","matchingOutput","outputChannel","inputChannel","TypeProvider","customMachines","MachineStore","customMachine","cm","CreateNewMachine","ExitCells","EnrichState","dependingDirectly","depending","activeMachine","d","machineType","depMachine","DetermineDependencies","exitCells","cells","starts","cellModel","existingChannel","CalculateExits","deletedMachines","exitColors","ec","Yellow","newApi","first","second","dependentMachines","dp","dependentMachine","CheckMachineStatus","UpdateStatusDependentMachines","SetApi","GameReducer","produce","messages","movingOutput","existingPlayer","data","newPlayer","GetNewPlayer","activePlayer","levelData","ld","LastUsedMachineId","State","NoMachineLinked","activeLevel","showAnimations","show","stepTime","newMachine","levelModel","InProgress","usedInLevel","directlyDependentMachines","updatedMachines","dm","PlayerReducer","CheckValidMachinesUsed","isCompleted","every","j","expected","Completed","NonValidMachineUsed","CheckLevelCompleted","gameData","mu","am","createStore","localStorage","setItem","JSON","stringify","getItem","removeItem","parse","getInitialState","__REDUX_DEVTOOLS_EXTENSION__","AppState","JoinActor","greenInput","redInput","returnMessage","JoinMachine","SplitMachine","firstCharacterLength","BlueStartMachine","YellowStartMachine","parentStarNumber","FindMachine","GetActor","CreateCustomActor","computer","Computer","cleanedMessage","RunInput","then","mm","machineStore","ClearTestOutput","SetMessages","activeSetup","store","starNumberCounter","HandleNextMessages","bind","CalculateNextMessages","RunComputation","SetDelay","StopComputation","dispatch","orderedOutputs","catch","reason","reject","results","messageLocations","GetStartMachine","messageLocation","OrderNewCalculation","callback","args","timeout","clearHandle","setTimeout","cancelComputation","clearTimeout","nextMessages","outputMessages","stepCount","doneMessages","messageCell","cachedMachine","nextContents","nextContent","channelMap","doneMessage","Dashboard","connect","ShowAnimations","StepTime","UpdateStepTime","UpdateShowAnimations","display","justifyContent","width","height","paddingRight","title","flexDirection","ChangeChannel","DragItemTypes","FormatMessage","formattedMessage","seekPosition","lastIndex","ChannelClickArea","useDrag","item","MachineInstanceId","OffsetX","OffsetY","begin","OnClick","end","dropResult","didDrop","outputItem","adjustedAngle","collect","isDragging","drag","preview","channelStyle","widthFactor","marginFactor","heightFactor","pointerEvents","useEffect","getEmptyImage","captureDraggingState","ref","newDirection","ChannelGroup","ChannelModels","heightOffset","margin","baseOffsetX","baseOffsetY","deltaX","deltaY","channelSetStyle","marginTop","rotate","tempBaseOffsetX","rotation","transform","key","OnChanged","MachineDrawer","ctx","innerColor","draggedOutput","draggedDirection","backgroundColor","drawConstants","MachineStyle","sort","MovingOutput","BackgroundColor","DrawBody","DrawInputGradient","outputGroup","DrawOutputGroup","DraggedOutputDrawer","DrawNoInputOutline","startIndex","endIndex","DrawInputOutline","shadowColor","shadowOffsetX","shadowOffsetY","isShade","ClearShadowStyle","filteredOutputs","increasedSplit","draggedIsDrawn","DrawOutputChannel","output","DrawDraggedOutput","offset","firstX","firstY","endX","endY","beginPath","moveTo","gradient","createRadialGradient","addColorStop","arcTo","lineTo","strokeStyle","lineWidth","stroke","mainAngle","outputOffset","differenceAngle","MachineCircleDrawer","arc","fillStyle","fill","startDirection","endDirection","localcenter","startDirectionAngle","startAngle","startInnerX","startInnerY","startOuterX","startOuterY","endDirectionAngle","endAngle","endInnerX","endInnerY","endOuterX","endOuterY","SetShadowStyle","directionAngle","endOuterAngle","startOuterAngle","grd","MachineSquareDrawer","closeSide","farSide","innerClose","innerFar","armProtrudingClose","armProtrudingFar","armWidthClose","armWidthFar","rect","currentDirection","createLinearGradient","MachineCanvasHolder","canvasRef","useRef","current","getContext","clearRect","IsDefault","DrawMachine","InputChannelClickArea","onClicked","event","React","Component","MachineInstance","ownProps","background","MachineInstanceProp","machineStyle","ChangeOwnChannel","ChangeInputChannel","FixMachine","onInputChannelClick","currentIndex","newChannel","machineSize","borderBottom","boxSizing","machineMargin","oc","cellId","exit","Exit","Message","OnNewMachine","OnMovedMachine","useDrop","accept","drop","itemProps","smallHeigth","smallWidth","border","float","ExitThickness","borderRight","borderLeft","borderTop","marginBottom","OutputStatus","Grid","Rows","Columns","rows","rowIndex","row","columnIndex","borderStyle","MessageDisplay","flexFlow","Input","statusStyle","Fullfilled","Editable","NotFullfilled","NotMatched","Remove","AllowedInputColors","onChange","OnMessageChanged","target","cc","TestDisplay","RemoveTest","RemoveInput","UpdateInput","AddInput","useState","setError","Test","NotChecked","actuals","valid","indexActual","splice","flexGrow","alignSelf","LevelDisplay","Level","AddTest","a","size","MachineDisplay","MachineType","AddNewMachine","StoredMachine","status","LoadCustomMachine","showMenu","changeShow","isDefault","MachineCollection","GetAllMachines","disallowedMachines","allowedStartMachines","usedStartMachines","nextStartMachine","allowedCustomMachines","dis","storedMachines","overflow","StopPropagation","stopPropagation","ChangeSizeComponent","ChangeCellSize","setSize","channels","padding","newSize","currentTarget","className","Close","EditMachine","SetName","SetDescription","SetColor","SetBorderColor","setColor","setBorderColor","dialogBorderColor","colorChanged","borderChanged","cols","GameMenu","hasActiveMachine","dialog","setdialog","alignItems","DraggedMachine","MovingElement","calculatedHeight","calculatedWidth","WindowWidth","leftStart","setLeftStart","WindowHeight","topStart","setTopStart","finalOffset","setFinalOffset","result","offSet","getDifferenceFromInitialOffset","useDragLayer","getItemType","left","top","children","Game","HasActiveMachine","MachineName","ClearMessages","SetMovingOutput","RemoveMachine","menu","setMenu","innerHeight","setHeight","innerWidth","setWidth","document","addEventListener","handleKeyPress","handleResize","removeEventListener","isOver","dragPreviewElement","draggedOutputAngle","allowedInputColors","opagueBackground","textAlign","MultipleInputsAllowed","AllowedInputs","NameDialog","setName","onKeyUp","close","ImportDialog","ImportPlayerData","setData","setMessage","setState","playerModel","PlayersDialog","active","ChangePlayerName","DeletePlayer","SwitchPlayer","AddPlayer","setDialog","selectedPlayer","setSelectedPlayer","playerIdToBeDeleted","setPlayerIdToBeDeleted","playerData","setPlayerData","disabled","SetExportDialog","navigator","clipboard","writeText","MenuBox","StartMenu","continueLevel","playerName","LevelPreview","Data","showLabel","setShowLabel","onMouseOver","onMouseOut","fontFamily","LevelSelectScreen","levelModels","setLevelModels","GetAllLevels","models","maxColumn","completedLevels","lm","completedLevel","nextLevel","cl","App","backend","HTML5Backend","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.821c33d6.chunk.js","sourcesContent":["export enum ChannelColorEnum {\n    Green = \"green\",\n    Red = \"red\",\n    Blue = \"blue\",\n    Yellow = \"#fff020\",\n}","import React from \"react\";\nimport { Props } from \"./Props\";\n\nconst NumberInput: React.FC<Props> = (props) => {\n    const IncreaseValue: () => void = () => {\n        props.valueChanged(props.value + 1);\n    };\n    const DecreaseValue: () => void = () => {\n        props.valueChanged(props.value - 1);\n    };\n\n    const style: React.CSSProperties = { marginLeft: 5, marginRight: 5 };\n\n    return (<div>\n        <button style={style} onClick={DecreaseValue}>-</button>\n        <label >{props.value}</label>\n        <button style={style} onClick={IncreaseValue}>+</button>\n    </div>);\n};\n\nexport default NumberInput;","import { GameData } from \"../Redux/GameDataReducer/GameModel\";\r\nimport { PlayerModel } from \"../Redux/GameDataReducer/PlayerReducer/PlayerModel\";\r\nimport { CustomMachineModel } from \"../Redux/GameDataReducer/PlayerReducer/GridSetup/CustomMachineModel\";\r\n\r\nexport function GetActivePlayer(state: GameData): PlayerModel|undefined {\r\n    return state.players.find((p) => p.id === state.activePlayerId);\r\n}\r\n\r\nexport function GetActiveMachine(state: GameData): CustomMachineModel | undefined {\r\n    const player = GetActivePlayer(state);\r\n\r\n    const newActiveMachine = player?.machines.find((m) => m.Id === player.activeMachineId);\r\n\r\n    return newActiveMachine;\r\n}\r\n\r\nexport function GetCellSize(state: GameData): number{\r\n    return GetActivePlayer(state)!.cellSize;    \r\n}","import { MovingOutputChannel } from \"../../Components/DragItemTypes\";\r\nimport { ScreenType } from \"./GameModel\";\r\nimport { PlayerModel } from \"./PlayerReducer/PlayerModel\";\r\n\r\ninterface SwitchScreen {\r\n    type: \"SwitchScreen\";\r\n    screen: ScreenType;\r\n}\r\n\r\nexport function SwitchScreen(screen: ScreenType): ActionTypes {\r\n    return {\r\n        type: \"SwitchScreen\",\r\n        screen\r\n    };\r\n}\r\n\r\ninterface ChangePlayerName {\r\n    type: \"ChangePlayerName\";\r\n    id: string;\r\n    name: string;\r\n}\r\n\r\nexport function ChangePlayerName(name: string, id: string): ActionTypes {\r\n    return {\r\n        type: \"ChangePlayerName\",\r\n        id,\r\n        name\r\n    };\r\n}\r\n\r\ninterface ImportPlayerData {\r\n    type: \"ImportPlayerData\";\r\n    data: PlayerModel;\r\n}\r\n\r\nexport function ImportPlayerData(data: PlayerModel): ActionTypes {\r\n    return {\r\n        type: \"ImportPlayerData\",\r\n        data\r\n    };\r\n}\r\n\r\ninterface SwitchPlayer {\r\n    type: \"SwitchPlayer\";\r\n    id: string;\r\n}\r\n\r\nexport function SwitchPlayer(id: string): ActionTypes {\r\n    return {\r\n        type: \"SwitchPlayer\",\r\n        id\r\n    };\r\n}\r\n\r\ninterface DeletePlayer {\r\n    type: \"DeletePlayer\";\r\n    id: string;\r\n}\r\n\r\nexport function DeletePlayer(id: string): ActionTypes {\r\n    return {\r\n        type: \"DeletePlayer\",\r\n        id\r\n    };\r\n}\r\n\r\n\r\ninterface AddPlayer {\r\n    type: \"AddPlayer\";\r\n    name: string;\r\n}\r\n\r\nexport function AddPlayer(name: string): ActionTypes {\r\n    return {\r\n        type: \"AddPlayer\",\r\n        name\r\n    };\r\n}\r\n\r\n\r\ninterface UpdateStepTime {\r\n    type: \"UpdateStepTime\";\r\n    stepTime: number;\r\n}\r\n\r\nexport function UpdateStepTime(stepTime: number): ActionTypes {\r\n    return {\r\n        type: \"UpdateStepTime\",\r\n        stepTime\r\n    };\r\n}\r\n\r\ninterface UpdateShowAnimations {\r\n    type: \"UpdateShowAnimations\";\r\n    show: boolean;\r\n}\r\n\r\nexport function UpdateShowAnimations(show: boolean): ActionTypes {\r\n    return {\r\n        type: \"UpdateShowAnimations\",\r\n        show\r\n    };\r\n}\r\ninterface SetMovingOutput {\r\n    type: \"SetMovingOutput\";\r\n    outputChannel: MovingOutputChannel | undefined;\r\n}\r\n\r\nexport function SetMovingOutput(outputChannel: MovingOutputChannel | undefined): ActionTypes {\r\n    return {\r\n        type: \"SetMovingOutput\",\r\n        outputChannel\r\n    };\r\n}\r\nexport type ActionTypes = UpdateStepTime | UpdateShowAnimations | SwitchScreen\r\n| ChangePlayerName | SetMovingOutput | ImportPlayerData | SwitchPlayer | DeletePlayer | AddPlayer;","export function CleanStars(message: string, starNumber: number): string {\n    return message.replaceAll(\"*\", `{${starNumber}}`);\n};\n\nexport function RestoreStars(message: string, starNumber: number): string {\n    return message.replaceAll(`{${starNumber}}`,\"*\");\n};","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\n\r\nexport class AddStarMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            const content = \"*\" + message.Content;\r\n\r\n            returnValue.push({ Content: content, Channel: ChannelColorEnum.Green });\r\n            return Promise.resolve(returnValue);\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Style: {\r\n                BorderColor: \"blue\",\r\n                Color: \"grey\",\r\n                Name: \"Add *\",\r\n                Description: \"Puts a star in front of the string. Each machine adds a unique star, so the star added can only be equal to another star added by this machine\"\r\n            },\r\n            Api: {\r\n                InputChannels: [ChannelColorEnum.Green],\r\n                OutputChannels: [ChannelColorEnum.Green],\r\n            },\r\n            DependingOn: [],\r\n            DirectlyDependingOn: []\r\n        };\r\n    }\r\n    public id = \"10\";\r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\n\r\nexport class AddZeroMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            const content = \"0\" + message.Content;\r\n\r\n            returnValue.push({ Content: content, Channel: ChannelColorEnum.Green });\r\n            return Promise.resolve(returnValue);\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Style: {\r\n                BorderColor: \"#fff020\",\r\n                Color: \"darkorange\",\r\n                Name: \"Add 0\",\r\n                Description: \"Puts a zero in front of the string\"\r\n            },\r\n            Api: {\r\n                InputChannels: [ChannelColorEnum.Green],\r\n                OutputChannels: [ChannelColorEnum.Green],\r\n            },\r\n            DependingOn: [],\r\n            DirectlyDependingOn: []\r\n        };\r\n    }\r\n    public id = \"11\";\r\n}\r\n","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\n\r\nexport class CompareMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            let channel: ChannelColorEnum = ChannelColorEnum.Green;\r\n            if (message.Content.length < 2) {\r\n                channel = ChannelColorEnum.Red;\r\n            } else {\r\n                if (message.Content[0] !== \"{\") {\r\n                    if (message.Content[0] !== message.Content[1]) {\r\n                        channel = ChannelColorEnum.Red;\r\n                    }\r\n                } else {\r\n                    const position = message.Content.indexOf(\"}\");\r\n                    const starNumber = message.Content.substring(0, position + 1);\r\n                    if (message.Content.length < starNumber.length * 2) {\r\n                        channel = ChannelColorEnum.Red;\r\n                    } else {\r\n                        const secondPart = message.Content.substring(position + 1, position + starNumber.length + 1);\r\n                        if (secondPart !== starNumber) {\r\n                            channel = ChannelColorEnum.Red;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            returnValue.push({ Content: message.Content, Channel: channel });\r\n            return Promise.resolve(returnValue);\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Style: {BorderColor: \"red\",\r\n            Color: \"green\",\r\n            Name: \"Compare\",\r\n            Description: \"Compares the first two characters in the string. If they are the same, exits green. If they are different exits red\"},\r\n            Api: {\r\n                InputChannels: [ChannelColorEnum.Green],\r\n                OutputChannels: [ChannelColorEnum.Green, ChannelColorEnum.Red],\r\n            },\r\n            DependingOn: [],\r\n            DirectlyDependingOn: []\r\n        };\r\n    }\r\n    public id = \"9\";\r\n}\r\n","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\n\r\nexport class CopyMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            let content: string;\r\n            if (message.Content.length < 1) {\r\n                content = \"\";\r\n            } else {\r\n                if (message.Content[0] !== \"{\") {\r\n                    content = message.Content[0] + message.Content;\r\n                } else {\r\n                    const index = message.Content.indexOf(\"}\");\r\n                    content = message.Content.substring(0, index + 1) + message.Content;\r\n                }\r\n            }\r\n\r\n            returnValue.push({ Content: content, Channel: ChannelColorEnum.Green });\r\n            return Promise.resolve(returnValue);\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Style: {\r\n                BorderColor: \"green\",\r\n                Color: \"yellow\",\r\n                Name: \"Copy\",\r\n                Description: \"Copies the first character of the string and puts it in front of the string\"\r\n            },\r\n            Api: {\r\n                InputChannels: [ChannelColorEnum.Green],\r\n                OutputChannels: [ChannelColorEnum.Green],\r\n            },\r\n            DependingOn: [],\r\n            DirectlyDependingOn: []\r\n        };\r\n    }\r\n    public id = \"6\";\r\n}\r\n","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\n\r\nexport class DeleteMachine implements IMachine {\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            let content: string;\r\n            if (message.Content.length < 1) {\r\n                content = \"\";\r\n            } else {\r\n                if (message.Content[0] !== \"{\") {\r\n                    content = message.Content.substring(1);\r\n                } else {\r\n                    const index = message.Content.indexOf(\"}\");\r\n                    content = message.Content.substring(index + 1);\r\n                }\r\n            }\r\n\r\n            returnValue.push({ Content: content, Channel: ChannelColorEnum.Green });\r\n            return Promise.resolve(returnValue);\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Style: {\r\n                BorderColor: \"firebrick\",\r\n                Color: \"red\",\r\n                Name: \"Delete\",\r\n                Description: \"Deletes the first character of the string\"\r\n            },\r\n            Api: {\r\n                InputChannels: [ChannelColorEnum.Green],\r\n                OutputChannels: [ChannelColorEnum.Green],\r\n            },\r\n            DependingOn: [],\r\n            DirectlyDependingOn: []\r\n        };\r\n    }\r\n    public id = \"7\";\r\n}\r\n","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\n\r\nexport class GreenStartMachine implements IMachine {\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            returnValue.push({ Content: message.Content, Channel: ChannelColorEnum.Green });\r\n            return Promise.resolve(returnValue);\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Style: {\r\n                Color: \"white\",\r\n                BorderColor: \"green\",\r\n                Name: \"Start\",\r\n                Description: \"Starting point of the computation. Acts as a move machine for all other purposes\"\r\n            },\r\n            Api: {\r\n                InputChannels: [ChannelColorEnum.Green],\r\n                OutputChannels: [ChannelColorEnum.Green],\r\n            },\r\n            DependingOn: [],\r\n            DirectlyDependingOn: []\r\n        };\r\n    }\r\n    public readonly id = \"0\";\r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\n\r\nexport class IncrementMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            let newMessage = \"\";\r\n            if (message.Content.length > 0) {\r\n                const char = message.Content[0];\r\n\r\n                if ((char >= \"0\" && char <= \"8\") || (char >= \"a\" && char < \"z\") || (char >= \"A\" && char < \"Z\")) {\r\n                    newMessage = String.fromCharCode(char.charCodeAt(0) + 1) + message.Content.slice(1);\r\n                } else if (char === \"9\") {\r\n                    newMessage = \"0\" + message.Content.slice(1);\r\n                } else if (char === \"z\") {\r\n                    newMessage = \"a\" + message.Content.slice(1);\r\n                } else if (char === \"Z\") {\r\n                    newMessage = \"A\" + message.Content.slice(1);\r\n                } else {\r\n                    newMessage = message.Content;\r\n                }\r\n            }\r\n\r\n            returnValue.push({ Content: newMessage, Channel: ChannelColorEnum.Green });\r\n            return Promise.resolve(returnValue);\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Style: {\r\n                BorderColor: \"DodgerBlue\",\r\n                Color: \"MediumVioletRed\",\r\n                Name: \"Increment\",\r\n                Description: \"Increases a number in front of the string by 1, makes a letter the next letter in the alphabet. 9 becomes 0, z becomes a. All other starting characters are not changed\"\r\n            },\r\n            Api: {\r\n                InputChannels: [ChannelColorEnum.Green],\r\n                OutputChannels: [ChannelColorEnum.Green],\r\n            },\r\n            DependingOn: [],\r\n            DirectlyDependingOn: []\r\n        };\r\n    }\r\n    public id = \"12\";\r\n}\r\n","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\n\r\nexport class MoveMachine implements IMachine {\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            returnValue.push({ Content: message.Content, Channel: ChannelColorEnum.Green });\r\n            return Promise.resolve(returnValue);\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Style: {\r\n                Color: \"green\",\r\n                BorderColor: \"lightgreen\",\r\n                Name: \"Move\",\r\n                Description: \"Does nothing with the string, only used to get the message to the right place\"\r\n            },\r\n            Api: {\r\n                InputChannels: [ChannelColorEnum.Green],\r\n                OutputChannels: [ChannelColorEnum.Green],\r\n            },\r\n            DependingOn: [],\r\n            DirectlyDependingOn: []\r\n        };\r\n    }\r\n    public readonly id = \"5\";\r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\n\r\nexport class RedStartMachine implements IMachine {\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            returnValue.push({ Content: message.Content, Channel: ChannelColorEnum.Green });\r\n            return Promise.resolve(returnValue);\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Style: {\r\n                Color: \"white\",\r\n                BorderColor: \"red\",\r\n                Name: \"Start\",\r\n                Description: \"Starting point of the computation. Acts as a move machine for all other purposes\"\r\n            },\r\n            Api: {\r\n                InputChannels: [ChannelColorEnum.Green],\r\n                OutputChannels: [ChannelColorEnum.Green],\r\n            },\r\n            DependingOn: [],\r\n            DirectlyDependingOn: []\r\n        };\r\n    }\r\n    public readonly id= \"1\";\r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\n\r\nexport class RotateMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            let content: string;\r\n            if (message.Content.length < 2) {\r\n                content = message.Content;\r\n            } else {\r\n                if (message.Content[0] !== \"{\") {\r\n                    content = message.Content.substring(1) + message.Content.substring(0, 1);\r\n                } else {\r\n                    const index = message.Content.indexOf(\"}\");\r\n                    content = message.Content.substring(index + 1) + message.Content.substring(0, index + 1);\r\n                }\r\n            }\r\n\r\n            returnValue.push({ Content: content, Channel: ChannelColorEnum.Green });\r\n            return Promise.resolve(returnValue);\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Style: {\r\n                BorderColor: \"blue\",\r\n                Color: \"cyan\",\r\n                Name: \"Rotate\",\r\n                Description: \"Removes the first character of the string, and adds it to the end of the string\"\r\n            },\r\n            Api: {\r\n                InputChannels: [ChannelColorEnum.Green],\r\n                OutputChannels: [ChannelColorEnum.Green],\r\n            },\r\n            DependingOn: [],\r\n            DirectlyDependingOn: []\r\n        };\r\n    }\r\n    public id = \"8\";\r\n}\r\n","import { IActor } from \"./IActor\";\r\nimport { IMachineType } from \"./IMachineType\";\r\n\r\nexport interface IMachine {\r\n    GetActor(): IActor;\r\n    GetType(): IMachineType;\r\n    id: string;\r\n}\r\n\r\nexport function IsDefaultMachine(id: string): boolean {\r\n    return id.length < 6;\r\n}\r\n\r\nexport function IsStartMachine(id: string): boolean {\r\n    return id === \"0\" || id === \"1\" || id === \"2\" || id === \"3\";\r\n}","export class Constants {\n    public static CellSize = 100;\n    public static MinimumColumns = 6;\n    public static MinimumRows = 5;\n    public static MenuBackGround = \"rgba(255,255,255,0.86)\";\n}","export function CreateGuid(): string {\r\n    let array = new Int32Array(4);\r\n    array = window.crypto.getRandomValues(array);\r\n    let text = \"\";\r\n    array.forEach((s) => {text += s.toString(16)});\r\n\r\n    return text;\r\n}","export function CleanInput(input: string): string{\r\n    input = input.replaceAll(\"(\",\"\").replaceAll(\")\",\"\").replaceAll(\"{\",\"\").replaceAll(\"}\",\"\");\r\n\r\n    return input;\r\n}","export enum DirectionEnum {\n    Up,\n    Right,\n    Down,\n    Left\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const AppendLength: LevelModel = {\r\n    AllowedMachines: [\"0\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"],\r\n    LevelDescription: \"The machine should append the length of the input string to the string\",\r\n    MachineDescription: \"Appends the length of the input string to the string\",\r\n    Name: \"AppendLength\",\r\n    Id: \"13\",\r\n    Style: {\r\n        Color: \"Brown\",\r\n        BorderColor: \"RebeccaPurple\",\r\n    },\r\n    InputChannels: [],\r\n    OutputChannels: [\r\n        { Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Right, Status: \"Exists\" },\r\n    ],\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"four\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"four4\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"aabccd\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"aabccd6\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"1\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"11\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"0\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"This is hard\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"This is hard12\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"This might even be harder\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"This might even be harder25\" }]\r\n        }\r\n    ],\r\n    Cell: {\r\n        Row: 1,\r\n        Column: 7\r\n    }\r\n};","export interface LevelData {\r\n    readonly Id: string;\r\n    readonly State: LevelState;\r\n    readonly LastUsedMachineId: string | undefined;\r\n}\r\n\r\nexport enum LevelState {\r\n    NoMachineLinked,\r\n    InProgress,\r\n    NonValidMachineUsed,\r\n    Completed\r\n}\r\n\r\n","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const GetLength: LevelModel = {\r\n    AllowedMachines: [\"0\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"],\r\n    LevelDescription: \"The machine should return the length of the input string\",\r\n    MachineDescription: \"Returns the length of the input string\",\r\n    Name: \"GetLength\",\r\n    Id: \"15\",\r\n    Style: {\r\n        Color: \"GoldenRod\",\r\n        BorderColor: \"Orchid\",\r\n    },\r\n    InputChannels: [],\r\n    OutputChannels: [\r\n        { Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Up, Status: \"Exists\" },\r\n    ],\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"four\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"4\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"aabccd\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"6\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"1\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"1\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"0\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"This is hard\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"12\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"This might even be harder\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"25\" }]\r\n        }\r\n    ],\r\n    Cell: {\r\n        Row: 2,\r\n        Column: 7\r\n    }\r\n};","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const GetType: LevelModel = {\r\n    AllowedMachines: [\"0\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"],\r\n    LevelDescription: \"The machine should exit green if the first character is a number, exit red if it is a letter and exit blue otherwise\",\r\n    MachineDescription: \"Exits green if the first character is a number, exits red if it is a letter and exits blue otherwise\",\r\n    Name: \"GetType\",\r\n    Id: \"16\",\r\n    Style: {\r\n        Color: \"Orange\",\r\n        BorderColor: \"LightGoldenRodYellow\",\r\n    },\r\n    InputChannels: [],\r\n    OutputChannels: [{ Channel: ChannelColorEnum.Blue, Direction: DirectionEnum.Down, Status: \"Exists\" },\r\n    { Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Right, Status: \"Exists\" }\r\n    ],\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"42\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"42\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"this starts with a letter\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Red, Content: \"this starts with a letter\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \",#@%!\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Blue, Content: \",#@%!\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Blue, Content: \"\" }]\r\n        }\r\n    ],\r\n    Cell: {\r\n        Row: 2,\r\n        Column: 3\r\n    }\r\n};","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const IsEmpty: LevelModel = {\r\n    AllowedMachines: [\"0\", \"5\", \"6\", \"7\", \"9\"],\r\n    LevelDescription: \"The machine should exit green if the message is empty, otherwise exit red\",\r\n    MachineDescription: \"Exits green if the message is empty, otherwise exits red\",\r\n    Name: \"IsEmpty\",\r\n    Id: \"1\",\r\n    Style: {\r\n        Color: \"OrangeRed\",\r\n        BorderColor: \"ForestGreen\",\r\n    },\r\n    InputChannels: [ { Direction: DirectionEnum.Right, Channel: ChannelColorEnum.Green, Status: \"Exists\" , UseMachineColor: true }],\r\n    OutputChannels: [\r\n        { Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Down, Status: \"Exists\" },\r\n    ],\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abc\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Red, Content: \"abc\" }]\r\n        }\r\n    ],\r\n    Cell: {\r\n        Row: 0,\r\n        Column: 0\r\n    }\r\n};","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const KeepNumbers: LevelModel = {\r\n    AllowedMachines: [\"0\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"],\r\n    LevelDescription: \"The machine should keep all numbers in the input string, and remove all other characters\",\r\n    MachineDescription: \"Keeps all numbers in the input string, and removes all other characters\",\r\n\r\n    Name: \"KeepNumbers\",\r\n    Id: \"6\",\r\n    Style: {\r\n        Color: \"PeachPuff\",\r\n        BorderColor: \"DarkOrchid\",\r\n    },\r\n    InputChannels: [],\r\n    OutputChannels: [\r\n        { Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Down, Status: \"Exists\" },\r\n    ],\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"42\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"42\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"fortytwo\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"1 and 1 is\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"11\" }]\r\n        }\r\n    ],\r\n    Cell: {\r\n        Row: 3,\r\n        Column: 3\r\n    }\r\n};","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const PlusOne: LevelModel = {\r\n    AllowedMachines: [\"0\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"],\r\n    LevelDescription: \"The machine should increase the leading input number by 1\",\r\n    MachineDescription: \"Increase the input number by 1\",\r\n\r\n    Name: \"PlusOne\",\r\n    Id: \"7\",\r\n    Style: {\r\n        Color: \"Indigo\",\r\n        BorderColor: \"DarkTurquoise\",\r\n    },\r\n    InputChannels: [],\r\n    OutputChannels: [\r\n        { Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Right, Status: \"Exists\" },\r\n    ],\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"4\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"5\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"0 and some noise 2\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"1 and some noise 2\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"42\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"43\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"9\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"10\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"39\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"40\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"23999999 9\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"24000000 9\" }]\r\n        }\r\n    ],\r\n    Cell: {\r\n        Row: 2,\r\n        Column: 6\r\n    }\r\n};","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const RemoveRepeats: LevelModel = {\r\n    AllowedMachines: [\"0\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"],\r\n    LevelDescription: \"The machine should remove all repeating characters from the input string\",\r\n    MachineDescription: \"Removes all repeating characters from the input string\",\r\n\r\n    Name: \"RemoveRepeats\",\r\n    Id: \"8\",\r\n    Style: {\r\n        Color: \"Brown\",\r\n        BorderColor: \"Indigo\",\r\n    },\r\n    InputChannels: [],\r\n    OutputChannels: [\r\n        { Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Right, Status: \"Exists\" },\r\n    ],\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"aabc\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abc\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"aaaabccc\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abc\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"a\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"a\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"hhhhhhhhhiiiii wwwworllllldddddddd\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"hi world\" }]\r\n        }\r\n    ],\r\n    Cell: {\r\n        Row: 1,\r\n        Column: 1\r\n    }\r\n};","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const RotateBackwards: LevelModel = {\r\n    AllowedMachines: [\"0\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"],\r\n    LevelDescription: \"The machine should put the last character in front of the string\",\r\n    MachineDescription: \"Rotates the last character to the front of the string\",\r\n\r\n    Name: \"RotateBackwards\",\r\n    Id: \"11\",\r\n    Style: {\r\n        Color: \"Blue\",\r\n        BorderColor: \"Cyan\",\r\n    },\r\n    InputChannels: [],\r\n    OutputChannels: [\r\n        { Channel: ChannelColorEnum.Red, Direction: DirectionEnum.Right, Status: \"Exists\" },\r\n        { Channel: ChannelColorEnum.Blue, Direction: DirectionEnum.Up, Status: \"Exists\" },\r\n        { Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Down, Status: \"Exists\" },\r\n    ],\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abc\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"cab\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"otater\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"rotate\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"a\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"a\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"heat proofC\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"Cheat proof\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"ello world!H\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"Hello world!\" }]\r\n        }\r\n    ],\r\n    Cell: {\r\n        Row: 2,\r\n        Column: 5\r\n    }\r\n};","import { LevelModel } from \"../LevelModel\";\r\n\r\nexport const Sandbox: LevelModel = {\r\n    AllowedMachines: [\"0\", \"1\", \"2\", \"3\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\"],\r\n    LevelDescription: \"Sandbox level, no specific goals\",\r\n    MachineDescription: \"\",\r\n    Name: \"Sandbox\",\r\n    Id: \"12\",\r\n    Style: {\r\n        Color: \"DarkOliveGreen\",\r\n        BorderColor: \"Tomato\",\r\n    },\r\n    InputChannels: [],\r\n    OutputChannels: [],\r\n    Tests: [],\r\n    Cell: {\r\n        Row: -1,\r\n        Column: -1\r\n    }\r\n};","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const ReverseLimited: LevelModel = {\r\n    AllowedMachines: [\"0\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"],\r\n    LevelDescription: \"The machine should reverse the characters from the string. Input are only lowercase letters. With limited number of machines at your disposal, this is VERY HARD\",\r\n    MachineDescription: \"Reverses the characters from the string. Input can only consist of lowercase letters\",\r\n\r\n    Name: \"ReverseLimited\",\r\n    Id: \"10\",\r\n    Style: {\r\n        Color: \"MediumSlateBlue\",\r\n        BorderColor: \"Black\",\r\n    },\r\n    InputChannels: [],\r\n    OutputChannels: [\r\n        { Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Right, Status: \"Exists\" },\r\n    ],\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abc\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"cba\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"a\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"a\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"esrever\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"reverse\" }]\r\n        }\r\n    ],\r\n    Cell: {\r\n        Row: 1,\r\n        Column: 9\r\n    }\r\n};","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const Reverse: LevelModel = {\r\n    AllowedMachines: [\"0\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"12\", \"13\", \"14\"],\r\n    LevelDescription: \"The machine should reverse the characters from the input string\",\r\n    MachineDescription: \"Reverses the characters from the input string\",\r\n\r\n    Name: \"Reverse\",\r\n    Id: \"9\",\r\n    Style: {\r\n        Color: \"MediumSlateBlue\",\r\n        BorderColor: \"Aqua\",\r\n    },\r\n    InputChannels: [],\r\n    OutputChannels: [{ Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Right, Status: \"Exists\" },\r\n    ],\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abc\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"cba\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"a\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"a\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"desrever saw sihT\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"This was reversed\" }]\r\n        }\r\n    ],\r\n    Cell: {\r\n        Row: 4,\r\n        Column: 6\r\n    }\r\n};","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const CopyAll: LevelModel = {\r\n    AllowedMachines: [\"0\", \"1\", \"2\", \"3\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\"],\r\n    LevelDescription: \"The machine should exit the input both to green and red\",\r\n    MachineDescription: \"Exits the input both to green and red\",\r\n    Name: \"CopyAll\",\r\n    Id: \"14\",\r\n    Style: {\r\n        Color: \"LightGreen\",\r\n        BorderColor: \"Yellow\",\r\n    },\r\n    InputChannels: [],\r\n    OutputChannels: [{ Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Down, Status: \"Exists\" },\r\n    ],\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" },\r\n            { Order: 0, Channel: ChannelColorEnum.Red, Content: \"\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"a\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"a\" },\r\n            { Order: 0, Channel: ChannelColorEnum.Red, Content: \"a\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abc\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abc\" },\r\n            { Order: 0, Channel: ChannelColorEnum.Red, Content: \"abc\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"aabcc\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"aabcc\" },\r\n            { Order: 0, Channel: ChannelColorEnum.Red, Content: \"aabcc\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"Copied\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"Copied\" },\r\n            { Order: 0, Channel: ChannelColorEnum.Red, Content: \"Copied\" }]\r\n        }\r\n    ],\r\n    Cell: {\r\n        Row: 4,\r\n        Column: 8\r\n    }\r\n};","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const Decrement: LevelModel = {\r\n    AllowedMachines: [\"0\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"],\r\n    LevelDescription: \"The machine should decrement the leading character, turning 0 into 9, a/A into z/Z\",\r\n    MachineDescription: \"Decrements the leading character\",\r\n\r\n    Name: \"Decrement\",\r\n    Id: \"20\",\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"bbc\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abc\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"0321\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"9321\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"@bc\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"@bc\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"Iello world\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"Hello world\" }]\r\n        }\r\n    ],\r\n    Style: {\r\n        Color: \"MediumVioletRed\",\r\n        BorderColor: \"Orange\",\r\n    },\r\n    InputChannels: [],\r\n    OutputChannels: [{ Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Right, Status: \"Exists\" },\r\n    ],\r\n    Cell: {\r\n        Row: 2,\r\n        Column: 4\r\n    }\r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const IncrementAll: LevelModel = {\r\n    AllowedMachines: [\"0\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"12\"],\r\n    LevelDescription: \"The machine should increment all characters\",\r\n    MachineDescription: \"Increments all characters\",\r\n\r\n    Name: \"IncrementAll\",\r\n    Id: \"21\",\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abc\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"bcd\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"987\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"098\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"1+1=3\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"2+2=4\" }]\r\n        }\r\n    ],\r\n    Style: {\r\n        Color: \"Ivory\",\r\n        BorderColor: \"MediumVioletRed\",\r\n    },\r\n    InputChannels: [],\r\n    OutputChannels: [{ Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Right, Status: \"Exists\" },\r\n    ],\r\n    Cell: {\r\n        Row: 2,\r\n        Column: 2\r\n    }\r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const IncrementIncreasing: LevelModel = {\r\n    AllowedMachines: [\"0\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"12\"],\r\n    LevelDescription: \"The machine should increment the first character 0 times, the second character once, the third twice etcetera. Characters that cannot be incremented do not count\",\r\n    MachineDescription: \"Increments the first character 0 times, the second character once, the third twice, etcetera. Characters that cannot be incremented do not count\",\r\n\r\n    Name: \"IncrementIncreasing\",\r\n    Id: \"22\",\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"aaa\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abc\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"5432109\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"5555555\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"1-A2@q\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"1-B4@t\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"hdjik rikdu!\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"hello world!\" }]\r\n        }\r\n    ],\r\n    Style: {\r\n        Color: \"Pink\",\r\n        BorderColor: \"Purple\",\r\n    },\r\n    InputChannels: [],\r\n    OutputChannels: [{ Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Up, Status: \"Exists\" },\r\n    ],\r\n    Cell: {\r\n        Row: 1,\r\n        Column: 5\r\n    }\r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const JoinAll: LevelModel = {\r\n    AllowedMachines: [\"0\", \"1\", \"2\", \"3\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"12\", \"13\", \"14\"],\r\n    LevelDescription: \"The machine should store the input from green, appending it to any previously stored message. On red input, it should exit the stored message appended with the input to green, clearing the stored message\",\r\n    MachineDescription: \"Stores input from green,appending it to any previously stored message. On red input it exits the stored message appended with the input to green\",\r\n\r\n    Name: \"JoinAll\",\r\n    Id: \"24\",\r\n    Tests: [\r\n        {\r\n            inputs: [\r\n                { Order: 0, Channel: ChannelColorEnum.Green, Content: \"a\" },\r\n                { Order: 1, Channel: ChannelColorEnum.Green, Content: \"b\" },\r\n                { Order: 2, Channel: ChannelColorEnum.Red, Content: \"c\" }\r\n            ],\r\n            expectedOutputs: [\r\n                { Order: 2, Channel: ChannelColorEnum.Green, Content: \"abc\" },\r\n            ]\r\n        },\r\n        {\r\n            inputs: [\r\n                { Order: 0, Channel: ChannelColorEnum.Red, Content: \"\" },\r\n                { Order: 1, Channel: ChannelColorEnum.Green, Content: \"\" },\r\n                { Order: 2, Channel: ChannelColorEnum.Red, Content: \"ab\" },\r\n                { Order: 3, Channel: ChannelColorEnum.Red, Content: \"\" },\r\n            ],\r\n            expectedOutputs: [\r\n                { Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" },\r\n                { Order: 2, Channel: ChannelColorEnum.Green, Content: \"ab\" },\r\n                { Order: 3, Channel: ChannelColorEnum.Green, Content: \"\" }\r\n            ]\r\n        },\r\n        {\r\n            inputs: [\r\n                { Order: 0, Channel: ChannelColorEnum.Green, Content: \"Ma\" },\r\n                { Order: 1, Channel: ChannelColorEnum.Green, Content: \"rco\" },\r\n                { Order: 2, Channel: ChannelColorEnum.Red, Content: \"?\" },\r\n                { Order: 3, Channel: ChannelColorEnum.Green, Content: \"Po\" },\r\n                { Order: 4, Channel: ChannelColorEnum.Green, Content: \"lo\" },\r\n                { Order: 5, Channel: ChannelColorEnum.Red, Content: \"!\" },\r\n            ],\r\n            expectedOutputs: [\r\n                { Order: 2, Channel: ChannelColorEnum.Green, Content: \"Marco?\" },\r\n                { Order: 5, Channel: ChannelColorEnum.Green, Content: \"Polo!\" }\r\n            ]\r\n        },\r\n    ],\r\n    Style: {\r\n        Color: \"Grey\",\r\n        BorderColor: \"YellowGreen\",\r\n    },\r\n    InputChannels: [],\r\n    OutputChannels: [{ Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Right, Status: \"Exists\" },\r\n    ],\r\n    Cell: {\r\n        Row: 4,\r\n        Column: 7\r\n    }\r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const MakeTwins: LevelModel = {\r\n    AllowedMachines: [\"0\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"],\r\n    LevelDescription: \"The machine should exit the string with each character repeated once\",\r\n    MachineDescription: \"Makes sure that each character is repeated once\",\r\n\r\n    Name: \"MakeTwins\",\r\n    Id: \"18\",\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abc\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"aabbcc\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"aaabcc\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"aabbcc\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"hello world\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"hheelloo  wwoorrlldd\" }]\r\n        }\r\n    ],\r\n    Style: {\r\n        Color: \"AntiqueWhite\",\r\n        BorderColor: \"GreenYellow\",\r\n    },\r\n    InputChannels: [],\r\n    OutputChannels: [{ Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Down, Status: \"Exists\" },\r\n    ],\r\n    Cell: {\r\n        Row: 1,\r\n        Column: 2\r\n    }\r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const RemoveIfDuplicate: LevelModel = {\r\n    AllowedMachines: [\"0\", \"5\", \"6\", \"7\", \"9\"],\r\n    LevelDescription: \"If the first characters are duplicates, the machine should clear all the duplicates\",\r\n    MachineDescription: \"If the first characters are duplicates, clears those duplicates\",\r\n\r\n    Name: \"RemoveIfDuplicate\",\r\n    Id: \"17\",\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"aabc\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"bc\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abc\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abc\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"a\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"a\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"hhhhhhhello world\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"ello world\" }]\r\n        }\r\n    ],\r\n    Style: {\r\n        Color: \"MediumAquaMarine\",\r\n        BorderColor: \"DeepSkyBlue\",\r\n    },\r\n    InputChannels: [],\r\n    OutputChannels: [{ Channel: ChannelColorEnum.Blue, Direction: DirectionEnum.Down, Status: \"Exists\" },\r\n    { Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Right, Status: \"Exists\" }\r\n    ],\r\n    Cell: {\r\n        Row: 1,\r\n        Column: 0\r\n    }\r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const RemoveUntilRepeat: LevelModel = {\r\n    AllowedMachines: [\"0\", \"5\", \"6\", \"7\", \"9\"],\r\n    LevelDescription: \"The machine should delete all characters before the first repeated character\",\r\n    MachineDescription: \"Deletes all character before the first repeated character\",\r\n\r\n    Name: \"RemoveUntilRepeat\",\r\n    Id: \"19\",\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abbc\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"bbc\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abca\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"22\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"22\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"1\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"hello world\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"llo world\" }]\r\n        }\r\n    ],\r\n    Style: {\r\n        Color: \"LawnGreen\",\r\n        BorderColor: \"DarkGrey\",\r\n    },\r\n    InputChannels: [],\r\n    OutputChannels: [{ Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Down, Status: \"Exists\" },\r\n    ],\r\n    Cell: {\r\n        Row: 2,\r\n        Column: 0\r\n    }\r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const Trigger: LevelModel = {\r\n    AllowedMachines: [\"0\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"12\", \"13\"],\r\n    LevelDescription: \"The machine should exit the input to green, and exit an empty message to red\",\r\n    MachineDescription: \"Exits the input to green, exits an empty message to red\",\r\n\r\n    Name: \"Trigger\",\r\n    Id: \"23\",\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abc\" }],\r\n            expectedOutputs: [\r\n                { Order: 0, Channel: ChannelColorEnum.Green, Content: \"abc\" },\r\n                { Order: 0, Channel: ChannelColorEnum.Red, Content: \"\" }\r\n            ]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            expectedOutputs: [\r\n                { Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" },\r\n                { Order: 0, Channel: ChannelColorEnum.Red, Content: \"\" }\r\n            ]\r\n        }\r\n    ],\r\n    Style: {\r\n        Color: \"DimGrey\",\r\n        BorderColor: \"Thistle\",\r\n    },\r\n    InputChannels: [],\r\n    OutputChannels: [{ Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Right, Status: \"Exists\" },\r\n    ],\r\n    Cell: {\r\n        Row: 4,\r\n        Column: 5\r\n    }\r\n}","import { LevelModel } from \"./LevelModel\";\nimport { AppendLength } from \"./Levels/AppendLength\";\nimport { GetLength } from \"./Levels/GetLength\";\nimport { GetType } from \"./Levels/GetType\";\nimport { IsEmpty } from \"./Levels/IsEmpty\";\nimport { KeepNumbers } from \"./Levels/KeepNumbers\";\nimport { PlusOne } from \"./Levels/PlusOne\";\nimport { RemoveRepeats } from \"./Levels/RemoveRepeats\";\nimport { RotateBackwards } from \"./Levels/RotateBackwards\";\nimport { Sandbox } from \"./Levels/Sandbox\";\nimport { ReverseLimited } from \"./Levels/ReverseLimited\";\nimport { Reverse } from \"./Levels/Reverse\";\nimport { CopyAll } from \"./Levels/CopyAll\";\nimport { Decrement } from \"./Levels/Decrement\";\nimport { IncrementAll } from \"./Levels/IncrementAll\";\nimport { IncrementIncreasing } from \"./Levels/IncrementIncreasing\";\nimport { JoinAll } from \"./Levels/JoinAll\";\nimport { MakeTwins } from \"./Levels/MakeTwins\";\nimport { RemoveIfDuplicate } from \"./Levels/RemoveIfDuplicate\";\nimport { RemoveUntilRepeat } from \"./Levels/RemoveUntilRepeat\";\nimport { Trigger } from \"./Levels/Trigger\";\n\n\nexport class LevelStore {\n    private static levelStore: LevelStore;\n    private levels: LevelModel[];\n\n    private constructor() {\n        this.levels = [];\n        this.init();\n    }\n\n    public static GetStore(): LevelStore {\n        if (LevelStore.levelStore === undefined) {\n            LevelStore.levelStore = new LevelStore();\n        }\n\n        return LevelStore.levelStore;\n    }\n\n    private init(): void {\n        this.levels.push(IsEmpty);\n        this.levels.push(RemoveRepeats);\n        this.levels.push(GetType);\n        this.levels.push(KeepNumbers);\n        this.levels.push(GetLength);\n        this.levels.push(AppendLength);\n        this.levels.push(RotateBackwards);\n        this.levels.push(PlusOne);\n        this.levels.push(ReverseLimited);\n        this.levels.push(Reverse);\n        this.levels.push(CopyAll);\n        this.levels.push(Sandbox);\n        this.levels.push(Decrement);\n        this.levels.push(IncrementAll);\n        this.levels.push(IncrementIncreasing);\n        this.levels.push(JoinAll);\n        this.levels.push(MakeTwins);\n        this.levels.push(RemoveIfDuplicate, RemoveUntilRepeat, Trigger)\n    }\n\n    public GetAllLevels(): LevelModel[] {\n        return this.levels;\n    }\n\n    public GetLevel(id: string): LevelModel {\n        const level = this.levels.find((l) => l.Id === id);\n        if (level === undefined) {\n            throw Error(`Unable to find level with id '${id}'`)\n        }\n\n        return level;\n    }\n}","import { LevelStore } from \"../../../Levels/LevelStore\";\r\nimport { LevelActionTypes } from \"./Actions\";\r\nimport { LevelStateModel } from \"./LevelStateModel\";\r\nimport { TestStateModel } from \"./TestStateModel\";\r\nimport { ChannelColorEnum } from \"../../../Models/ChannelColorsEnum\";\r\nimport { OrderedMessageModel } from \"../../../Models/OrderedMessageModel\";\r\nimport { Draft } from \"immer\";\r\nimport { Actions } from \"../../Actions\";\r\nimport { CleanInput } from \"../../../Helper/TextInputHelper\";\r\n\r\nexport function LevelReducer(draft: Draft<LevelStateModel> | undefined, action: Actions): LevelStateModel | undefined {\r\n    if (action.type === \"LoadLevelActionType\") {\r\n        return LoadLevel(action.id);\r\n    }\r\n\r\n    if (draft === undefined) {\r\n        return undefined;\r\n    }\r\n\r\n    switch (action.type) {\r\n        case \"AddTestActionType\":\r\n            const newTest: TestStateModel = {\r\n                actualOutputs: [],\r\n                expectedOutputs: [],\r\n                inputs: [{ Channel: ChannelColorEnum.Green, Content: \"\", Order: 0 }],\r\n                editable: true,\r\n                id: Math.max(...draft.tests.map((t) => t.id), -1) + 1\r\n            };\r\n            draft.tests.push(newTest);\r\n            break;\r\n        case \"RemoveTestActionType\":\r\n            draft.tests = draft.tests.filter((t) => t.id !== action.testId);\r\n            break;\r\n        case \"ReportOutputActionType\":\r\n        case \"ClearTestOutputActionType\":\r\n        case \"AddInputActionType\":\r\n        case \"RemoveInputActionType\":\r\n        case \"UpdateInputActionType\":\r\n            const tests = draft.tests.map((t) => {\r\n                if (t.id === action.testId) {\r\n                    return UpdateTest(t, action);\r\n                } else {\r\n                    return t;\r\n                }\r\n            });\r\n            draft.tests = tests;\r\n            break;\r\n        case \"AddNewMachineActionType\":\r\n        case \"ChannelChangedActionType\":\r\n        case \"DeleteMachineActionType\":\r\n        case \"FixMachineActionType\":\r\n        case \"MachineAddedActionType\":\r\n        case \"MachineMovedActionType\":\r\n        case \"MachineRemovedActionType\":\r\n            draft.tests.forEach((t) => {\r\n                t.actualOutputs = undefined;\r\n            });\r\n            break;\r\n    }\r\n\r\n    return draft;\r\n};\r\n\r\nfunction LoadLevel(levelId: string): LevelStateModel {\r\n    const level = LevelStore.GetStore().GetLevel(levelId);\r\n    const tests = level.Tests.length > 0 ? level.Tests.map((t, index) => ({ ...t, actualOutputs: undefined, id: index, editable: false })) :\r\n        [{ actualOutputs: undefined, inputs: [{ Channel: ChannelColorEnum.Green, Content: \"\", Order: 0 }], expectedOutputs: [], id: 0, editable: true }];\r\n    const returnValue: LevelStateModel = {\r\n        allowedMachines: level.AllowedMachines,\r\n        description: level.LevelDescription,\r\n        name: level.Name,\r\n        id: level.Id,\r\n        tests\r\n    };\r\n    return returnValue;\r\n}\r\n\r\nfunction UpdateTest(test: Draft<TestStateModel>, action: LevelActionTypes): TestStateModel {\r\n    switch (action.type) {\r\n        case \"ReportOutputActionType\":\r\n            if (test.actualOutputs === undefined) {\r\n                test.actualOutputs = [];\r\n            }\r\n            const outputs = test.actualOutputs.slice();\r\n            outputs.push(action.outputMessage);\r\n            return { ...test, actualOutputs: outputs };\r\n        case \"ClearTestOutputActionType\":\r\n            return { ...test, actualOutputs: [] };\r\n        case \"AddInputActionType\":\r\n            const maxOrder = Math.max(...test.inputs.map((i) => i.Order), -1) + 1;\r\n            const newInput: OrderedMessageModel = {\r\n                Channel: ChannelColorEnum.Green, Content: \"\", Order: maxOrder\r\n            };\r\n            return { ...test, inputs: test.inputs.concat(newInput) };\r\n        case \"RemoveInputActionType\":\r\n\r\n            const filteredInputs = test.inputs.filter((i) => i.Order !== action.order);\r\n            const newInputs = filteredInputs.map((i, index) => ({ ...i, Order: index }));\r\n\r\n            const filteredOutputs = test.expectedOutputs.filter((i) => i.Order !== action.order);\r\n            const newOutputs = filteredOutputs.map((o) => ({ ...o, Order: o.Order > action.order ? o.Order - 1 : o.Order }));\r\n            return { ...test, inputs: newInputs, expectedOutputs: newOutputs, actualOutputs: undefined };\r\n        case \"UpdateInputActionType\":\r\n            const content = CleanInput(action.input.Content);\r\n            const inputsUpdated = test.inputs.map((i) => i.Order === action.input.Order ? { ...action.input, Content: content } : i);\r\n            return { ...test, inputs: inputsUpdated };\r\n        default:\r\n            return test;\r\n    }\r\n}\r\n","import { MachineApi } from \"../Models/MachineApi\";\nimport { ChannelModel } from \"../Models/ChannelModel\";\nimport { DirectionEnum } from \"../Models/DirectionEnum\";\nimport { InputChannelModel } from \"../Components/Grid/Cell/MachineInstance/MachineDrawer/InputChannelModel\";\n\nexport function GetNewChannelSet(api: MachineApi, includeInput: boolean): { inputChannels: ChannelModel[], outputChannels: ChannelModel[] } {\n    const outputChannels: ChannelModel[] = [];\n    const inputChannels: ChannelModel[] = [];\n\n    let direction: DirectionEnum = DirectionEnum.Up;\n    for (const color of api.OutputChannels) {\n        outputChannels.push({ Channel: color, Direction: direction, Status: \"Exists\" });\n        direction++;\n    }\n\n    if (includeInput && api.InputChannels.length > 1) {\n        direction = 0;\n        for (const color of api.InputChannels) {\n            inputChannels.push({ Channel: color, Direction: direction, Status: \"Exists\" });\n            direction++;\n        }\n    }\n\n    return { inputChannels, outputChannels };\n}\n\nexport function GetDirectedChannelSet(api: MachineApi): { inputChannels: InputChannelModel[], outputChannels: ChannelModel[][] }{\n    const { inputChannels, outputChannels } = GetNewChannelSet(api, true);\n\n    const hasMultipleInputs = inputChannels.length > 1;\n\n    const inputChannelModels: InputChannelModel[] = inputChannels.map((c) =>\n        ({\n            UseMachineColor: !hasMultipleInputs,\n            ...c\n        })\n    );\n\n    const orderedOutputChannels: ChannelModel[][] = [];\n    for (const channel of outputChannels) {\n        const group = orderedOutputChannels.find((o) => o[0].Direction === channel.Direction);\n        if (group === undefined) {\n            orderedOutputChannels.push([channel]);\n        } else {\n            group.push(channel);\n        }\n    }\n\n    return {inputChannels: inputChannelModels, outputChannels: orderedOutputChannels}\n}","export interface CellModel {\n    readonly Row: number;\n    readonly Column: number;\n}\n\nexport function AreEqual(cell: CellModel, otherCell: CellModel): boolean {\n    return cell.Column === otherCell.Column && cell.Row === otherCell.Row;\n}","const halfSquareRatio = 0.9;\nconst circleRadiusRatio = 0.28;\nexport const halfSquareFactor = halfSquareRatio * circleRadiusRatio;\nexport const outputSplitFactor = 0.12;\nexport const outputStartLengthFactor = 0.25;\n\nexport class DrawConstants {\n\n    constructor(cellSize: number) {\n        this.cellSize = cellSize;\n        this.aperture = 0.23 * cellSize;\n        this.armLength = 0.18 * cellSize;\n        this.circleRadius = circleRadiusRatio * cellSize;\n        this.borderWidth = 0.05 * cellSize;\n        this.halfSquareSize = halfSquareRatio * this.circleRadius;\n        this.shadeOffset = 0.008 * cellSize;\n        this.outputSplit = outputSplitFactor * cellSize;\n        this.outputLength = 0.38 * cellSize;\n        this.outputRadius = 0.15 * cellSize;\n        this.outputWidth = 0.06 * cellSize;\n        this.outputStartLength = outputStartLengthFactor * cellSize;\n        this.center = 0.5 * cellSize;\n        this.apertureAngle = Math.asin(this.aperture * 0.5 / this.circleRadius);\n        this.defiatingAngle = this.armAngle - this.apertureAngle;\n        this.protrudingArm = Math.cos(this.defiatingAngle) * this.armLength;\n    }\n\n    public cellSize: number;\n    public aperture: number;\n    public armLength: number;\n    public armAngle = Math.PI * 0.05;\n    public circleRadius: number;\n    public borderWidth: number;\n    public halfSquareSize: number;\n    public shadeOffset: number;\n    public outputSplit: number;\n    public outputLength: number;\n    public outputRadius: number;\n    public outputWidth: number;\n    public outputStartLength: number;\n    public center: number;\n    public apertureAngle: number;\n    public defiatingAngle: number;\n    public protrudingArm: number;\n}","import { DragSourceMonitor, DragLayerMonitor, DropTargetMonitor, XYCoord } from \"react-dnd\";\nimport { DirectionEnum } from \"../Models/DirectionEnum\";\nimport { AppStore } from \"../Redux/Store\";\nimport { GetCellSize } from \"./StoreHelper\";\n\nexport function GetAngleFromMonitor(monitor: DragSourceMonitor | DragLayerMonitor | DropTargetMonitor, offsetX: number, offsetY: number): number | undefined {\n    const xyCoord = monitor.getClientOffset();\n    const xyCoordInit = monitor.getInitialSourceClientOffset();\n    return GetAngleFromOffsets(offsetX, offsetY, xyCoord, xyCoordInit);\n}\n\nexport function GetAngleFromOffsets(offsetX: number, offsetY: number, xyCoord: XYCoord | null, xyCoordInit: XYCoord | null): number | undefined {\n    const center = GetCellSize(AppStore.getState()) / 2;\n    if (xyCoord !== null && xyCoordInit !== null) {\n        const angle = Math.atan2(xyCoord.y - xyCoordInit.y + offsetY - center, xyCoord.x - xyCoordInit.x + offsetX - center);\n        return angle;\n    }\n\n    return undefined;\n}\n\nexport function GetAngleFromDirection(direction: DirectionEnum): number {\n    switch (direction) {\n        case DirectionEnum.Up:\n            return Math.PI * 0.5;\n        case DirectionEnum.Right:\n            return Math.PI * 1;\n        case DirectionEnum.Down:\n            return Math.PI * 1.5;\n        case DirectionEnum.Left:\n            return Math.PI * 2;\n    }\n}","import { ColorModel } from \"./ColorModel\";\n\nfunction GetColorCode(enteredColor: string): string {\n    let color = \"#FFFFFF\";\n    const lowerEnteredColor = enteredColor.toLowerCase();\n    switch (lowerEnteredColor) {\n        case \"aliceblue\": color = \"#F0F8FF\"; break;\n        case \"antiquewhite\": color = \"#FAEBD7\"; break;\n        case \"aqua\": color = \"#00FFFF\"; break;\n        case \"aquamarine\": color = \"#7FFFD4\"; break;\n        case \"azure\": color = \"#F0FFFF\"; break;\n        case \"beige\": color = \"#F5F5DC\"; break;\n        case \"bisque\": color = \"#FFE4C4\"; break;\n        case \"black\": color = \"#000000\"; break;\n        case \"blanchedalmond\": color = \"#FFEBCD\"; break;\n        case \"blue\": color = \"#0000FF\"; break;\n        case \"blueviolet\": color = \"#8A2BE2\"; break;\n        case \"brown\": color = \"#A52A2A\"; break;\n        case \"burlywood\": color = \"#DEB887\"; break;\n        case \"cadetblue\": color = \"#5F9EA0\"; break;\n        case \"chartreuse\": color = \"#7FFF00\"; break;\n        case \"chocolate\": color = \"#D2691E\"; break;\n        case \"coral\": color = \"#FF7F50\"; break;\n        case \"cornflowerblue\": color = \"#6495ED\"; break;\n        case \"cornsilk\": color = \"#FFF8DC\"; break;\n        case \"crimson\": color = \"#DC143C\"; break;\n        case \"cyan\": color = \"#00FFFF\"; break;\n        case \"darkblue\": color = \"#00008B\"; break;\n        case \"darkcyan\": color = \"#008B8B\"; break;\n        case \"darkgoldenrod\": color = \"#B8860B\"; break;\n        case \"darkgray\": color = \"#A9A9A9\"; break;\n        case \"darkgrey\": color = \"#A9A9A9\"; break;\n        case \"darkgreen\": color = \"#006400\"; break;\n        case \"darkkhaki\": color = \"#BDB76B\"; break;\n        case \"darkmagenta\": color = \"#8B008B\"; break;\n        case \"darkolivegreen\": color = \"#556B2F\"; break;\n        case \"darkorange\": color = \"#FF8C00\"; break;\n        case \"darkorchid\": color = \"#9932CC\"; break;\n        case \"darkred\": color = \"#8B0000\"; break;\n        case \"darksalmon\": color = \"#E9967A\"; break;\n        case \"darkseagreen\": color = \"#8FBC8F\"; break;\n        case \"darkslateblue\": color = \"#483D8B\"; break;\n        case \"darkslategray\": color = \"#2F4F4F\"; break;\n        case \"darkslategrey\": color = \"#2F4F4F\"; break;\n        case \"darkturquoise\": color = \"#00CED1\"; break;\n        case \"darkviolet\": color = \"#9400D3\"; break;\n        case \"deeppink\": color = \"#FF1493\"; break;\n        case \"deepskyblue\": color = \"#00BFFF\"; break;\n        case \"dimgray\": color = \"#696969\"; break;\n        case \"dimgrey\": color = \"#696969\"; break;\n        case \"dodgerblue\": color = \"#1E90FF\"; break;\n        case \"firebrick\": color = \"#B22222\"; break;\n        case \"floralwhite\": color = \"#FFFAF0\"; break;\n        case \"forestgreen\": color = \"#228B22\"; break;\n        case \"fuchsia\": color = \"#FF00FF\"; break;\n        case \"gainsboro\": color = \"#DCDCDC\"; break;\n        case \"ghostwhite\": color = \"#F8F8FF\"; break;\n        case \"gold\": color = \"#FFD700\"; break;\n        case \"goldenrod\": color = \"#DAA520\"; break;\n        case \"gray\": color = \"#808080\"; break;\n        case \"grey\": color = \"#808080\"; break;\n        case \"green\": color = \"#008000\"; break;\n        case \"greenyellow\": color = \"#ADFF2F\"; break;\n        case \"honeydew\": color = \"#F0FFF0\"; break;\n        case \"hotpink\": color = \"#FF69B4\"; break;\n        case \"indianred\": color = \"#CD5C5C\"; break;\n        case \"indigo\": color = \"#4B0082\"; break;\n        case \"ivory\": color = \"#FFFFF0\"; break;\n        case \"khaki\": color = \"#F0E68C\"; break;\n        case \"lavender\": color = \"#E6E6FA\"; break;\n        case \"lavenderblush\": color = \"#FFF0F5\"; break;\n        case \"lawngreen\": color = \"#7CFC00\"; break;\n        case \"lemonchiffon\": color = \"#FFFACD\"; break;\n        case \"lightblue\": color = \"#ADD8E6\"; break;\n        case \"lightcoral\": color = \"#F08080\"; break;\n        case \"lightcyan\": color = \"#E0FFFF\"; break;\n        case \"lightgoldenrodyellow\": color = \"#FAFAD2\"; break;\n        case \"lightgray\": color = \"#D3D3D3\"; break;\n        case \"lightgrey\": color = \"#D3D3D3\"; break;\n        case \"lightgreen\": color = \"#90EE90\"; break;\n        case \"lightpink\": color = \"#FFB6C1\"; break;\n        case \"lightsalmon\": color = \"#FFA07A\"; break;\n        case \"lightseagreen\": color = \"#20B2AA\"; break;\n        case \"lightskyblue\": color = \"#87CEFA\"; break;\n        case \"lightslategray\": color = \"#778899\"; break;\n        case \"lightslategrey\": color = \"#778899\"; break;\n        case \"lightsteelblue\": color = \"#B0C4DE\"; break;\n        case \"lightyellow\": color = \"#FFFFE0\"; break;\n        case \"lime\": color = \"#00FF00\"; break;\n        case \"limegreen\": color = \"#32CD32\"; break;\n        case \"linen\": color = \"#FAF0E6\"; break;\n        case \"magenta\": color = \"#FF00FF\"; break;\n        case \"maroon\": color = \"#800000\"; break;\n        case \"mediumaquamarine\": color = \"#66CDAA\"; break;\n        case \"mediumblue\": color = \"#0000CD\"; break;\n        case \"mediumorchid\": color = \"#BA55D3\"; break;\n        case \"mediumpurple\": color = \"#9370DB\"; break;\n        case \"mediumseagreen\": color = \"#3CB371\"; break;\n        case \"mediumslateblue\": color = \"#7B68EE\"; break;\n        case \"mediumspringgreen\": color = \"#00FA9A\"; break;\n        case \"mediumturquoise\": color = \"#48D1CC\"; break;\n        case \"mediumvioletred\": color = \"#C71585\"; break;\n        case \"midnightblue\": color = \"#191970\"; break;\n        case \"mintcream\": color = \"#F5FFFA\"; break;\n        case \"mistyrose\": color = \"#FFE4E1\"; break;\n        case \"moccasin\": color = \"#FFE4B5\"; break;\n        case \"navajowhite\": color = \"#FFDEAD\"; break;\n        case \"navy\": color = \"#000080\"; break;\n        case \"oldlace\": color = \"#FDF5E6\"; break;\n        case \"olive\": color = \"#808000\"; break;\n        case \"olivedrab\": color = \"#6B8E23\"; break;\n        case \"orange\": color = \"#FFA500\"; break;\n        case \"orangered\": color = \"#FF4500\"; break;\n        case \"orchid\": color = \"#DA70D6\"; break;\n        case \"palegoldenrod\": color = \"#EEE8AA\"; break;\n        case \"palegreen\": color = \"#98FB98\"; break;\n        case \"paleturquoise\": color = \"#AFEEEE\"; break;\n        case \"palevioletred\": color = \"#DB7093\"; break;\n        case \"papayawhip\": color = \"#FFEFD5\"; break;\n        case \"peachpuff\": color = \"#FFDAB9\"; break;\n        case \"peru\": color = \"#CD853F\"; break;\n        case \"pink\": color = \"#FFC0CB\"; break;\n        case \"plum\": color = \"#DDA0DD\"; break;\n        case \"powderblue\": color = \"#B0E0E6\"; break;\n        case \"purple\": color = \"#800080\"; break;\n        case \"rebeccapurple\": color = \"#663399\"; break;\n        case \"red\": color = \"#FF0000\"; break;\n        case \"rosybrown\": color = \"#BC8F8F\"; break;\n        case \"royalblue\": color = \"#4169E1\"; break;\n        case \"saddlebrown\": color = \"#8B4513\"; break;\n        case \"salmon\": color = \"#FA8072\"; break;\n        case \"sandybrown\": color = \"#F4A460\"; break;\n        case \"seagreen\": color = \"#2E8B57\"; break;\n        case \"seashell\": color = \"#FFF5EE\"; break;\n        case \"sienna\": color = \"#A0522D\"; break;\n        case \"silver\": color = \"#C0C0C0\"; break;\n        case \"skyblue\": color = \"#87CEEB\"; break;\n        case \"slateblue\": color = \"#6A5ACD\"; break;\n        case \"slategray\": color = \"#708090\"; break;\n        case \"slategrey\": color = \"#708090\"; break;\n        case \"snow\": color = \"#FFFAFA\"; break;\n        case \"springgreen\": color = \"#00FF7F\"; break;\n        case \"steelblue\": color = \"#4682B4\"; break;\n        case \"tan\": color = \"#D2B48C\"; break;\n        case \"teal\": color = \"#008080\"; break;\n        case \"thistle\": color = \"#D8BFD8\"; break;\n        case \"tomato\": color = \"#FF6347\"; break;\n        case \"turquoise\": color = \"#40E0D0\"; break;\n        case \"violet\": color = \"#EE82EE\"; break;\n        case \"wheat\": color = \"#F5DEB3\"; break;\n        case \"white\": color = \"#FFFFFF\"; break;\n        case \"whitesmoke\": color = \"#F5F5F5\"; break;\n        case \"yellow\": color = \"#FFFF00\"; break;\n        case \"yellowgreen\": color = \"#9ACD32\"; break;\n    }\n\n    return color;\n}\n\nexport function CheckColorString(color: string): boolean {\n    if (color === \"\" || color === undefined || color === null) {\n        return false;\n    }\n\n    const style = new Option().style;\n    style.color = color;\n\n    return style.color === color.toLowerCase();\n}\n\nfunction GetColorModel(color: string): ColorModel {\n    if (color.startsWith(\"rgb(\")) {\n        const colorPart = color.split(\"(\")[1].split(\")\")[0];\n        const colors = colorPart.split(\",\");\n        return {\n            red: Number(colors[0]),\n            green: Number(colors[1]),\n            blue: Number(colors[2])\n        }\n    } else if (!color.startsWith(\"#\")) {\n        color = GetColorCode(color);\n    }\n\n    return {\n        red: parseInt(color.substring(1, 3), 16),\n        blue: parseInt(color.substring(5, 7), 16),\n        green: parseInt(color.substring(3, 5), 16)\n    }\n}\n\nexport function GetOpaqueColor(color: string, opacity: number): string {\n    try {\n        const model = GetColorModel(color);\n\n        return `rgba(${model.red},${model.green},${model.blue},${opacity})`;\n    } catch (error) {\n        return \"white\";\n    }\n}\n\nexport function GetLighterColor(color: string, amount: number): string {\n    try {\n        const model = GetColorModel(color);\n        const red = 256 - (256 - model.red) * amount;\n        const blue = 256 - (256 - model.blue) * amount;\n        const green = 256 - (256 - model.green) * amount;\n        return `rgb(${red},${green},${blue})`;\n    } catch (error) {\n        return \"white\";\n    }\n}\n\n\nexport function GetGrayScaleColor(color: string, amount: number): string {\n    const model = GetColorModel(color);\n\n    try {\n        const average = (model.red + model.green + model.blue) / 3\n        return `rgb(${average * amount + model.red * (1 - amount)},${average * amount + model.green * (1 - amount)},${average * amount + model.blue * (1 - amount)})`;\n    } catch (error) {\n        return \"white\";\n    }\n}\n\nexport function GetRandomColor(): string {\n    const randNumber = Math.floor(Math.random() * 148);\n    switch (randNumber) {\n        case 0: return \"AliceBlue\";\n        case 1: return \"AntiqueWhite\";\n        case 2: return \"Aqua\";\n        case 3: return \"Aquamarine\";\n        case 4: return \"Azure\";\n        case 5: return \"Beige\";\n        case 6: return \"Bisque\";\n        case 7: return \"Black\";\n        case 8: return \"BlanchedAlmond\";\n        case 9: return \"Blue\";\n        case 10: return \"BlueViolet\";\n        case 11: return \"Brown\";\n        case 12: return \"BurlyWood\";\n        case 13: return \"CadetBlue\";\n        case 14: return \"Chartreuse\";\n        case 15: return \"Chocolate\";\n        case 16: return \"Coral\";\n        case 17: return \"CornflowerBlue\";\n        case 18: return \"Cornsilk\";\n        case 19: return \"Crimson\";\n        case 20: return \"Cyan\";\n        case 21: return \"DarkBlue\";\n        case 22: return \"DarkCyan\";\n        case 23: return \"DarkGoldenRod\";\n        case 24: return \"DarkGray\";\n        case 25: return \"DarkGrey\";\n        case 26: return \"DarkGreen\";\n        case 27: return \"DarkKhaki\";\n        case 28: return \"DarkMagenta\";\n        case 29: return \"DarkOliveGreen\";\n        case 30: return \"DarkOrange\";\n        case 31: return \"DarkOrchid\";\n        case 32: return \"DarkRed\";\n        case 33: return \"DarkSalmon\";\n        case 34: return \"DarkSeaGreen\";\n        case 35: return \"DarkSlateBlue\";\n        case 36: return \"DarkSlateGray\";\n        case 37: return \"DarkSlateGrey\";\n        case 38: return \"DarkTurquoise\";\n        case 39: return \"DarkViolet\";\n        case 40: return \"DeepPink\";\n        case 41: return \"DeepSkyBlue\";\n        case 42: return \"DimGray\";\n        case 43: return \"DimGrey\";\n        case 44: return \"DodgerBlue\";\n        case 45: return \"FireBrick\";\n        case 46: return \"FloralWhite\";\n        case 47: return \"ForestGreen\";\n        case 48: return \"Fuchsia\";\n        case 49: return \"Gainsboro\";\n        case 50: return \"GhostWhite\";\n        case 51: return \"Gold\";\n        case 52: return \"GoldenRod\";\n        case 53: return \"Gray\";\n        case 54: return \"Grey\";\n        case 55: return \"Green\";\n        case 56: return \"GreenYellow\";\n        case 57: return \"HoneyDew\";\n        case 58: return \"HotPink\";\n        case 59: return \"IndianRed \";\n        case 60: return \"Indigo\";\n        case 61: return \"Ivory\";\n        case 62: return \"Khaki\";\n        case 63: return \"Lavender\";\n        case 64: return \"LavenderBlush\";\n        case 65: return \"LawnGreen\";\n        case 66: return \"LemonChiffon\";\n        case 67: return \"LightBlue\";\n        case 68: return \"LightCoral\";\n        case 69: return \"LightCyan\";\n        case 70: return \"LightGoldenRodYellow\";\n        case 71: return \"LightGray\";\n        case 72: return \"LightGrey\";\n        case 73: return \"LightGreen\";\n        case 74: return \"LightPink\";\n        case 75: return \"LightSalmon\";\n        case 76: return \"LightSeaGreen\";\n        case 77: return \"LightSkyBlue\";\n        case 78: return \"LightSlateGray\";\n        case 79: return \"LightSlateGrey\";\n        case 80: return \"LightSteelBlue\";\n        case 81: return \"LightYellow\";\n        case 82: return \"Lime\";\n        case 83: return \"LimeGreen\";\n        case 84: return \"Linen\";\n        case 85: return \"Magenta\";\n        case 86: return \"Maroon\";\n        case 87: return \"MediumAquaMarine\";\n        case 88: return \"MediumBlue\";\n        case 89: return \"MediumOrchid\";\n        case 90: return \"MediumPurple\";\n        case 91: return \"MediumSeaGreen\";\n        case 92: return \"MediumSlateBlue\";\n        case 93: return \"MediumSpringGreen\";\n        case 94: return \"MediumTurquoise\";\n        case 95: return \"MediumVioletRed\";\n        case 96: return \"MidnightBlue\";\n        case 97: return \"MintCream\";\n        case 98: return \"MistyRose\";\n        case 99: return \"Moccasin\";\n        case 100: return \"NavajoWhite\";\n        case 101: return \"Navy\";\n        case 102: return \"OldLace\";\n        case 103: return \"Olive\";\n        case 104: return \"OliveDrab\";\n        case 105: return \"Orange\";\n        case 106: return \"OrangeRed\";\n        case 107: return \"Orchid\";\n        case 108: return \"PaleGoldenRod\";\n        case 109: return \"PaleGreen\";\n        case 110: return \"PaleTurquoise\";\n        case 111: return \"PaleVioletRed\";\n        case 112: return \"PapayaWhip\";\n        case 113: return \"PeachPuff\";\n        case 114: return \"Peru\";\n        case 115: return \"Pink\";\n        case 116: return \"Plum\";\n        case 117: return \"PowderBlue\";\n        case 118: return \"Purple\";\n        case 119: return \"RebeccaPurple\";\n        case 120: return \"Red\";\n        case 121: return \"RosyBrown\";\n        case 122: return \"RoyalBlue\";\n        case 123: return \"SaddleBrown\";\n        case 124: return \"Salmon\";\n        case 125: return \"SandyBrown\";\n        case 126: return \"SeaGreen\";\n        case 127: return \"SeaShell\";\n        case 128: return \"Sienna\";\n        case 129: return \"Silver\";\n        case 130: return \"SkyBlue\";\n        case 131: return \"SlateBlue\";\n        case 132: return \"SlateGray\";\n        case 133: return \"SlateGrey\";\n        case 134: return \"Snow\";\n        case 135: return \"SpringGreen\";\n        case 136: return \"SteelBlue\";\n        case 137: return \"Tan\";\n        case 138: return \"Teal\";\n        case 139: return \"Thistle\";\n        case 140: return \"Tomato\";\n        case 141: return \"Turquoise\";\n        case 142: return \"Violet\";\n        case 143: return \"Wheat\";\n        case 144: return \"White\";\n        case 145: return \"WhiteSmoke\";\n        case 146: return \"Yellow\";\n        case 147: return \"YellowGreen\";\n        default:\n            return \"White\";\n    }\n}","export function Minimum<T>(array: T[], valueSelector: (element: T) => number): T | undefined {\r\n    let minimum = Infinity;\r\n    let minimumElement: T | undefined = undefined;\r\n    for (const element of array) {\r\n        const value = valueSelector(element);\r\n        if (value < minimum) {\r\n            minimumElement = element;\r\n            minimum = value;\r\n        }\r\n    }\r\n\r\n    return minimumElement;\r\n}\r\n\r\nexport function Maximum<T>(array: T[], valueSelector: (element: T) => number): T | undefined {\r\n    let maximum = -Infinity;\r\n    let maximumElement: T | undefined = undefined;\r\n    for (const element of array) {\r\n        const value = valueSelector(element);\r\n        if (value > maximum) {\r\n            maximumElement = element;\r\n            maximum = value;\r\n        }\r\n    }\r\n\r\n    return maximumElement;\r\n}","\r\nimport { MachineInstancesReducer } from \"./MachineInstances/MachineInstancesReducer\";\r\nimport { CustomMachineModel } from \"./CustomMachineModel\";\r\nimport { Draft } from \"immer\";\r\nimport { Actions } from \"../../../Actions\";\r\nimport { TypeProvider } from \"../TypeProvider\";\r\nimport { CheckColorString } from \"../../../../Helper/ColorHelper\";\r\nimport { GridSetupModel } from \"./GridModel\";\r\nimport { Maximum, Minimum } from \"../../../../Helper/ArrayHelper\";\r\nimport { Constants } from \"../../../../Components/Constants\";\r\nimport { CleanInput } from \"../../../../Helper/TextInputHelper\";\r\n\r\nexport function GridSetupReducer(draft: Draft<CustomMachineModel>, action: Actions, typeProvider: TypeProvider, cellSize: number): CustomMachineModel {\r\n    if (draft === undefined) {\r\n        return draft;\r\n    }\r\n    switch (action.type) {\r\n        case \"SetColorActionType\":\r\n            if (CheckColorString(action.color)) {\r\n                draft.Style.Color = CleanInput(action.color);\r\n            }\r\n            return draft;\r\n        case \"SetBorderColorActionType\":\r\n            if (CheckColorString(action.borderColor)) {\r\n                draft.Style.BorderColor = CleanInput(action.borderColor);\r\n            }\r\n            return draft;\r\n        case \"SetNameActionType\":\r\n            draft.Style.Name = CleanInput(action.name);\r\n            return draft;\r\n        case \"SetDescriptionActionType\":\r\n            draft.Style.Description = CleanInput(action.description);\r\n            return draft;\r\n        default:\r\n            switch (action.type) {\r\n                case \"FixMachineActionType\":\r\n                    const machineFixed = draft.Setup.MachineInstances.find((mi) => mi.Id === action.machineInstanceId)!;\r\n                    if (machineFixed.Status === \"Deleted\") {\r\n                        if (draft.Setup.MachineInstances.filter((m) => m.MachineId === machineFixed.MachineId).length <= 1) {\r\n                            draft.DependingOnDeleted = draft.DependingOnDeleted.filter((id) => id !== machineFixed.MachineId);\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n\r\n            draft.Setup.MachineInstances = MachineInstancesReducer(draft.Setup.MachineInstances, action, typeProvider, cellSize);\r\n\r\n            switch (action.type) {\r\n                case \"MachineAddedActionType\":\r\n                case \"MachineRemovedActionType\":\r\n                case \"MachineMovedActionType\":\r\n                    ResizeGrid(draft.Setup);\r\n            }\r\n\r\n            return draft;\r\n    }\r\n}\r\n\r\nfunction ResizeGrid(setup: Draft<GridSetupModel>) {\r\n    if (setup.MachineInstances.length > 0) {\r\n        let deltaRow = 0;\r\n        let deltaColumn = 0;\r\n        const minimumColumn = Minimum(setup.MachineInstances, (mi) => mi.Cell.Column)!.Cell.Column;\r\n        const minimumRow = Minimum(setup.MachineInstances, (mi) => mi.Cell.Row)!.Cell.Row;\r\n        let maximumColumn = Maximum(setup.MachineInstances, (mi) => mi.Cell.Column)!.Cell.Column;\r\n        let maximumRow = Maximum(setup.MachineInstances, (mi) => mi.Cell.Row)!.Cell.Row;\r\n\r\n        if (minimumColumn <= 0) {\r\n            deltaColumn = 1 - minimumColumn;\r\n            maximumColumn += deltaColumn;\r\n        } else {\r\n            let excessColumns = maximumColumn + 2 - Constants.MinimumColumns;\r\n            if (excessColumns > 0 && minimumColumn > 1) {\r\n                deltaColumn = -Math.min(excessColumns, minimumColumn - 1);\r\n                excessColumns += deltaColumn;\r\n                maximumColumn += deltaColumn;\r\n            }\r\n        }\r\n\r\n        if (minimumRow <= 0) {\r\n            deltaRow = 1 - minimumRow;\r\n            maximumRow += deltaRow;\r\n        } else {\r\n            let excessRows = maximumRow + 2 - Constants.MinimumRows;\r\n            if (excessRows > 0 && minimumRow > 1) {\r\n                deltaRow = -Math.min(excessRows, minimumRow - 1);\r\n                excessRows += deltaRow;\r\n                maximumRow += deltaRow;\r\n            }           \r\n        }\r\n\r\n\r\n        setup.MachineInstances.forEach((mi) => {\r\n            mi.Cell = {\r\n                Row: mi.Cell.Row + deltaRow,\r\n                Column: mi.Cell.Column + deltaColumn\r\n            }\r\n        });\r\n\r\n        setup.NumberOfColumns = Math.max(maximumColumn + 2, Constants.MinimumColumns);\r\n        setup.NumberOfRows = Math.max(maximumRow + 2, Constants.MinimumRows);\r\n    }\r\n}","import { MachineInstanceModel } from \"../../../../../Models/MachineInstanceModel\";\r\nimport { Draft } from \"immer\";\r\nimport { Actions } from \"../../../../Actions\";\r\nimport { GetNewChannelSet } from \"../../../../../Helper/NewChannelSet\";\r\nimport { AreEqual } from \"../../../../../Models/CellModel\";\r\nimport * as dc from \"../../../../../Components/Grid/Cell/MachineInstance/MachineDrawer/DrawConstants\";\r\nimport { GetAngleFromDirection } from \"../../../../../Helper/AngleHelper\";\r\nimport { DirectionEnum } from \"../../../../../Models/DirectionEnum\";\r\nimport { ITypeProvider } from \"../../../../../MachineStore/ITypeProvider\";\r\nimport { IsStartMachine } from \"../../../../../MachineStore/IMachine\";\r\n\r\nexport function MachineInstancesReducer(draft: Draft<MachineInstanceModel[]>, action: Actions, typeProvider: ITypeProvider, cellSize: number): MachineInstanceModel[] {\r\n    switch (action.type) {\r\n        case \"ChannelChangedActionType\":\r\n            const machine = draft.find((mi) => mi.Id === action.machineInstanceId)!;\r\n            const channelIndex = machine.OutputChannels.findIndex((c) => c.Channel === action.channel.Channel);\r\n            const relevantChannels = machine.OutputChannels.filter((c, index) => c.Direction === action.channel.Direction && c.Status !== \"DoesNotExist\" && index !== channelIndex);\r\n            if (relevantChannels.length > 0 && action.angle !== undefined) {\r\n                const newChannelArray = machine.OutputChannels.filter((c) => c.Direction !== action.channel.Direction && c.Status !== \"DoesNotExist\");\r\n                let split = -(relevantChannels.length - 1) / 2 * dc.outputSplitFactor * cellSize;\r\n\r\n                let inserted = false;\r\n                const baseAngle = GetAngleFromDirection(action.channel.Direction);\r\n                const draggedSplit = -Math.sin(action.angle - baseAngle) * dc.outputStartLengthFactor * cellSize;\r\n                for (let index = 0; index < relevantChannels.length; index++) {\r\n                    if (!inserted && draggedSplit < split) {\r\n                        inserted = true;\r\n                        newChannelArray.push(action.channel);\r\n                    }\r\n\r\n                    newChannelArray.push(relevantChannels[index]);\r\n                    split += dc.outputSplitFactor * cellSize;\r\n                }\r\n\r\n                if (!inserted) {\r\n                    newChannelArray.push(action.channel);\r\n                }\r\n\r\n                machine.OutputChannels = newChannelArray;\r\n\r\n            } else {\r\n                machine.OutputChannels[channelIndex] = action.channel;\r\n            }\r\n            return draft;\r\n        case \"InputChannelChangedActionType\":\r\n            const machineInput = draft.find((mi) => mi.Id === action.machineInstanceId)!;\r\n            const channelModel = machineInput.InputChannels.find((ic) => ic.Direction === action.channel.Direction)!;\r\n            channelModel.Direction = machineInput.InputChannels[action.channelIndex].Direction;\r\n            machineInput.InputChannels[action.channelIndex] = action.channel;\r\n            return draft;\r\n        case \"MachineRemovedActionType\":\r\n            const machineRemoved = draft.find((mi) => mi.Id === action.machineInstanceId)!;\r\n            if (IsStartMachine(machineRemoved.MachineId) && draft.filter((mi) => IsStartMachine(mi.MachineId)).length < 2) {\r\n                return draft;\r\n            } else {\r\n                return draft.filter((mi) => mi.Id !== action.machineInstanceId);\r\n            }\r\n        case \"MachineAddedActionType\":\r\n            if (draft.some((mi) => AreEqual(mi.Cell, action.cell))) {\r\n                return draft;\r\n            }\r\n\r\n            const { outputChannels, inputChannels } = GetNewChannelSet(action.api, false);\r\n\r\n            const maxId = (draft.length === 0) ? 0 : Math.max(...draft.map((mi) => mi.Id));\r\n            const machineInstance: MachineInstanceModel = {\r\n                Cell: action.cell,\r\n                MachineId: action.machineId,\r\n                OutputChannels: outputChannels,\r\n                InputChannels: inputChannels,\r\n                Id: maxId + 1,\r\n                Status: \"Valid\"\r\n            };\r\n\r\n            draft.push(machineInstance);\r\n            return draft;\r\n\r\n        case \"MachineMovedActionType\":\r\n            if (draft.some((m) => AreEqual(m.Cell, action.newCell))) {\r\n                return draft;\r\n            }\r\n            const machineMoved = draft.find((mi) => mi.Id === action.machineInstanceId)!;\r\n            machineMoved.Cell = action.newCell;\r\n            return draft;\r\n        case \"FixMachineActionType\":\r\n            const machineFixed = draft.find((mi) => mi.Id === action.machineInstanceId)!;\r\n            if (machineFixed.Status === \"Deleted\") {\r\n                return draft.filter((mi) => mi.Id !== action.machineInstanceId);\r\n            } else if (machineFixed.Status === \"ChannelsInvalid\") {\r\n                const api = typeProvider.GetMachineType(machineFixed.MachineId).Api;\r\n                machineFixed.OutputChannels = machineFixed.OutputChannels.filter((c) => api.OutputChannels.some((o) => o === c.Channel));\r\n                machineFixed.OutputChannels = machineFixed.OutputChannels.concat(api.OutputChannels.filter((o) => !machineFixed.OutputChannels.some((c) => c.Channel === o)).map((o) => ({ Channel: o, Direction: DirectionEnum.Up, Status: \"Exists\" })));\r\n\r\n                machineFixed.InputChannels = machineFixed.InputChannels.map((ic) => {\r\n                    if (ic.Status === \"Exists\" && !api.InputChannels.some((iac) => iac === ic.Channel)) {\r\n                        return { ...ic, Channel: api.InputChannels[0] };\r\n                    } else {\r\n                        return ic;\r\n                    }\r\n                });\r\n\r\n                machineFixed.Status = \"Valid\";\r\n            }\r\n            return draft;\r\n        default:\r\n            return draft;\r\n    }\r\n}","import { ExitCellModel } from \"../Models/ExitCellModel\";\r\nimport { CellModel } from \"../Models/CellModel\";\r\nimport { MachineInstanceModel } from \"../Models/MachineInstanceModel\";\r\nimport { DirectionEnum } from \"../Models/DirectionEnum\";\r\nimport { GridSetupModel } from \"../Redux/GameDataReducer/PlayerReducer/GridSetup/GridModel\";\r\nimport { Draft } from \"immer\";\r\nimport { ITypeProvider } from \"../MachineStore/ITypeProvider\";\r\nimport { IsStartMachine } from \"../MachineStore/IMachine\";\r\n\r\nexport function CalculateExits(setup: Draft<GridSetupModel>, typeProvider: ITypeProvider): ExitCellModel[] {\r\n    const exitCells: ExitCellModel[] = [];\r\n    let cells: ExitCellModel[] = [];\r\n    const starts = GetStartMachines(setup);\r\n    cells = cells.concat(starts.map((s) => ({ Cell: s.Cell, Direction: s.OutputChannels[0].Direction })));\r\n    for (let i = 0; i < cells.length; i++) {\r\n        let cell: CellModel = cells[i].Cell;\r\n        let machine: Draft<MachineInstanceModel> | undefined;\r\n        let cellModel: CellModel | undefined;\r\n        while (machine === undefined) {\r\n            cellModel = Move(setup, cell, cells[i].Direction);\r\n            if (cellModel === undefined) {\r\n                break;\r\n            }\r\n\r\n            cell = cellModel;\r\n            // eslint-disable-next-line\r\n            machine = setup.MachineInstances.find((mi) => mi.Cell.Column === cell!.Column && mi.Cell.Row === cell!.Row);\r\n        }\r\n\r\n        if (cellModel === undefined) {\r\n            exitCells.push({ Direction: cells[i].Direction, Cell: cell });\r\n            continue;\r\n        }\r\n\r\n        const api = typeProvider.GetMachineType(machine!.MachineId).Api;\r\n        // eslint-disable-next-line\r\n        const existingChannel = machine!.InputChannels.find((ic) => ic.Direction === cells[i].Direction);\r\n        if (existingChannel !== undefined) {\r\n            if (!api.InputChannels.some((ic) => ic === existingChannel.Channel)) {\r\n                existingChannel.Channel = api.InputChannels[0];\r\n            }\r\n            existingChannel.Status = \"Exists\";\r\n        } else {\r\n            machine!.InputChannels.push({\r\n                Channel: api.InputChannels[0],\r\n                Direction: cells[i].Direction,\r\n                Status: \"Exists\"\r\n            });\r\n        }\r\n\r\n        if (!cells.some((c) => c.Cell.Column === cell.Column && c.Cell.Row === cell.Row)) {\r\n            cells = cells.concat(machine!.OutputChannels.map((c) => ({ Cell: cell, Direction: c.Direction })));\r\n        }\r\n    }\r\n    return exitCells;\r\n}\r\n\r\nexport function Move(setup: {NumberOfRows: number, NumberOfColumns: number}, cell: CellModel, direction: DirectionEnum): CellModel | undefined {\r\n    switch (direction) {\r\n        case DirectionEnum.Down:\r\n            if (cell.Row >= setup.NumberOfRows - 1) {\r\n                return;\r\n            }\r\n            return { Column: cell.Column, Row: cell.Row + 1 };\r\n        case DirectionEnum.Up:\r\n            if (cell.Row <= 0) {\r\n                return;\r\n            }\r\n            return { Column: cell.Column, Row: cell.Row - 1 };\r\n        case DirectionEnum.Right:\r\n            if (cell.Column >= setup.NumberOfColumns - 1) {\r\n                return;\r\n            }\r\n            return { Column: cell.Column + 1, Row: cell.Row };\r\n        case DirectionEnum.Left:\r\n            if (cell.Column <= 0) {\r\n                return;\r\n            }\r\n            return { Column: cell.Column - 1, Row: cell.Row };\r\n    }\r\n}\r\n\r\nexport function GetStartMachines(setup: GridSetupModel): MachineInstanceModel[] {\r\n    const startMachines: MachineInstanceModel[] = [];\r\n    for (const machineInstance of setup.MachineInstances) {\r\n        if (IsStartMachine(machineInstance.MachineId)) {\r\n            startMachines.push(machineInstance);\r\n        }\r\n    }\r\n\r\n    return startMachines;\r\n}","import { MachineApi } from \"../../../Models/MachineApi\";\r\nimport { MachineInstanceModel } from \"../../../Models/MachineInstanceModel\";\r\nimport { Draft } from \"immer\";\r\n\r\nexport function UpdateMachineStatus(api: MachineApi, machineInstance: Draft<MachineInstanceModel>): void {\r\n    for (const newOutputChannel of api.OutputChannels) {\r\n        const matchingOutput = machineInstance.OutputChannels.find((i) => i.Channel === newOutputChannel);\r\n        if (matchingOutput === undefined || matchingOutput.Status === \"DoesNotExist\") {\r\n            machineInstance.Status = \"ChannelsInvalid\";\r\n            return;\r\n        }\r\n    }\r\n    for (const outputChannel of machineInstance.OutputChannels.filter((c) => c.Status === \"Exists\")) {\r\n        if (!api.OutputChannels.some((i) => i === outputChannel.Channel)) {\r\n            machineInstance.Status = \"ChannelsInvalid\";\r\n            return;\r\n        }\r\n    }\r\n    for (const inputChannel of machineInstance.InputChannels.filter((c) => c.Status === \"Exists\")) {\r\n        if (!api.InputChannels.some((i) => i === inputChannel.Channel)) {\r\n            machineInstance.Status = \"ChannelsInvalid\";\r\n            return;\r\n        }\r\n    }\r\n    machineInstance.Status = \"Valid\";\r\n}","import { ITypeProvider } from \"../../../MachineStore/ITypeProvider\";\r\nimport { IMachineType } from \"../../../MachineStore/IMachineType\";\r\nimport { CustomMachineModel } from \"./GridSetup/CustomMachineModel\";\r\nimport { MachineStore } from \"../../../MachineStore/MachineStore\";\r\nimport { IsDefaultMachine } from \"../../../MachineStore/IMachine\";\r\n\r\nexport class TypeProvider implements ITypeProvider {\r\n\r\n    private customMachines: CustomMachineModel[];\r\n    constructor(customMachines: CustomMachineModel[]) {\r\n        this.customMachines = customMachines;\r\n    }\r\n    public GetMachineType(machineId: string): IMachineType {\r\n        if (!IsDefaultMachine(machineId)){\r\n            const customMachine = this.customMachines.find((cm) =>  cm.Id === machineId);\r\n            if (customMachine === undefined){\r\n                throw Error(`CustomMachine not found, Id: '${machineId}'`);\r\n            }\r\n\r\n            return customMachine;\r\n        } else {\r\n            return MachineStore.GetStore().GetMachineType(machineId);\r\n        }\r\n    }\r\n\r\n}","import { ChannelColorEnum } from \"../../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../../Models/DirectionEnum\";\r\nimport { GridSetupReducer } from \"./GridSetup/GridSetupReducer\";\r\nimport { CustomMachineModel } from \"./GridSetup/CustomMachineModel\";\r\nimport { MachineApi, ApiAreEqual } from \"../../../Models/MachineApi\";\r\nimport { MachineInstanceModel } from \"../../../Models/MachineInstanceModel\";\r\nimport { Draft } from \"immer\";\r\nimport { GetRandomColor } from \"../../../Helper/ColorHelper\";\r\nimport { Actions } from \"../../Actions\";\r\nimport { CalculateExits, GetStartMachines } from \"../../../Helper/SetupHelper\";\r\nimport { UpdateMachineStatus } from \"./CustomMachinesHelper\";\r\nimport { TypeProvider } from \"./TypeProvider\";\r\nimport { PlayerModel } from \"./PlayerModel\";\r\nimport { CreateGuid } from \"../../../Helper/Guid\";\r\nimport { IsDefaultMachine } from \"../../../MachineStore/IMachine\";\r\nimport { LevelStore } from \"../../../Levels/LevelStore\";\r\nimport { LevelState } from \"./LevelData\";\r\nimport { Constants } from \"../../../Components/Constants\";\r\n\r\nexport function PlayerReducer(draft: Draft<PlayerModel>, action: Actions): PlayerModel {\r\n    switch (action.type) {\r\n        case \"LoadLevelActionType\":\r\n            {\r\n                const levelData = draft.levelData.find((ld) => ld.Id === action.id);\r\n                if (levelData !== undefined) {\r\n                    draft.activeMachineId = levelData.LastUsedMachineId;\r\n                } else {\r\n                    draft.levelData.push({ Id: action.id, State: LevelState.NoMachineLinked, LastUsedMachineId: undefined })\r\n                    draft.activeMachineId = undefined;\r\n                }\r\n                draft.activeLevel = action.id;\r\n                break;\r\n            }\r\n        case \"UpdateShowAnimations\":\r\n            draft.showAnimations = action.show;\r\n            break;\r\n        case \"UpdateStepTime\":\r\n            draft.stepTime = action.stepTime;\r\n            break;\r\n        case \"AddNewMachineActionType\":\r\n            let newMachine: CustomMachineModel | undefined;\r\n\r\n            const levelData = draft.levelData.find((ld) => ld.Id === draft.activeLevel!);\r\n            if (levelData === undefined || levelData.LastUsedMachineId === undefined) {\r\n                const levelModel = LevelStore.GetStore().GetLevel(draft.activeLevel!);\r\n                newMachine = CreateNewMachine(levelModel.Name, levelModel.MachineDescription, levelModel.Style.Color, levelModel.Style.BorderColor);\r\n            } else {\r\n                newMachine = CreateNewMachine(\"New machine\", \"\");\r\n            }\r\n\r\n            draft.machines.push(newMachine);\r\n            draft.activeMachineId = newMachine.Id;\r\n\r\n            if (levelData !== undefined) {\r\n                if (levelData.LastUsedMachineId === undefined) {\r\n                    levelData.LastUsedMachineId = newMachine.Id;\r\n                }\r\n\r\n                if (levelData.State === LevelState.NoMachineLinked) {\r\n                    levelData.State = LevelState.InProgress;\r\n                }\r\n            }\r\n\r\n            break;\r\n        case \"LoadCustomMachineActionType\":\r\n            const newActiveMachine = draft.machines.find((m) => m.Id === action.machineId);\r\n            if (newActiveMachine === undefined) {\r\n                throw Error(\"Loading an unknown machine, with id \" + action.machineId);\r\n            }\r\n            draft.activeMachineId = action.machineId;\r\n            break;\r\n        case \"ChangeCellSizeActionType\":\r\n            draft.cellSize = action.cellSize;\r\n            break;\r\n        case \"DeleteMachineActionType\":\r\n            if (draft.activeMachineId === action.machineId) {\r\n                draft.activeMachineId = undefined;\r\n            }\r\n\r\n            const usedInLevel = draft.levelData.find((ld) => ld.LastUsedMachineId === action.machineId);\r\n            if (usedInLevel !== undefined) {\r\n                usedInLevel.LastUsedMachineId = undefined;\r\n                usedInLevel.State = LevelState.NoMachineLinked;\r\n            }\r\n\r\n            const directlyDependentMachines = draft.machines.filter((m) => m.DirectlyDependingOn.some((dp) => dp === action.machineId));\r\n            for (const dependentMachine of directlyDependentMachines) {\r\n                const updatedMachines: MachineInstanceModel[] = dependentMachine.Setup.MachineInstances.map((mi) => mi.MachineId === action.machineId ? { ...mi, Status: \"Deleted\" } : mi);\r\n                dependentMachine.Setup.MachineInstances = updatedMachines;\r\n                dependentMachine.DirectlyDependingOn = dependentMachine.DirectlyDependingOn.filter((i) => i !== action.machineId);\r\n                dependentMachine.DependingOnDeleted.push(action.machineId);            \r\n            }\r\n\r\n            if (directlyDependentMachines.length > 0) {\r\n                draft.deletedMachines.push(draft.machines.find((m) => m.Id === action.machineId)!);\r\n            }\r\n\r\n            const dependentMachines = draft.machines.filter((m) => m.DependingOn.some((dp) => dp === action.machineId));\r\n            for (const dependentMachine of dependentMachines) {\r\n                dependentMachine.DependingOn = dependentMachine.DependingOn.filter((i) => i !== action.machineId);\r\n            }\r\n\r\n            draft.machines = draft.machines.filter((m) => m.Id !== action.machineId);\r\n\r\n            draft.deletedMachines = draft.deletedMachines.filter((dm) =>\r\n                draft.machines.some((m) => m.DependingOnDeleted.some((dp) => dp === action.machineId))\r\n            )\r\n            break;\r\n        default:\r\n            if (draft.activeMachineId === undefined) {\r\n                return draft;\r\n            }\r\n\r\n            const activeMachine = draft.machines.find((m) => m.Id === draft.activeMachineId)!;\r\n\r\n            GridSetupReducer(activeMachine, action, new TypeProvider(draft.machines), draft.cellSize);\r\n            break;\r\n    }\r\n\r\n    switch (action.type) {\r\n        case \"AddNewMachineActionType\":\r\n        case \"ChannelChangedActionType\":\r\n        case \"DeleteMachineActionType\":\r\n        case \"FixMachineActionType\":\r\n        case \"MachineAddedActionType\":\r\n        case \"MachineMovedActionType\":\r\n        case \"MachineRemovedActionType\":\r\n            if (draft.activeMachineId !== undefined) {\r\n                EnrichState(draft);\r\n            }\r\n            break;\r\n    }\r\n\r\n    return draft;\r\n};\r\n\r\nfunction CreateNewMachine(name: string, description: string, color?: string, borderColor?: string): CustomMachineModel {\r\n    return {\r\n        Id: CreateGuid(),\r\n        DirectlyDependingOn: [],\r\n        Style: {\r\n            BorderColor: borderColor ?? GetRandomColor(),\r\n            Color: color ?? GetRandomColor(),\r\n            Name: name,\r\n            Description: description\r\n        },\r\n        Api: {\r\n            InputChannels: [ChannelColorEnum.Green],\r\n            OutputChannels: []\r\n        },\r\n        Setup: {\r\n            NumberOfRows: Constants.MinimumRows,\r\n            NumberOfColumns: Constants.MinimumColumns,\r\n            MachineInstances: [{\r\n                MachineId: \"0\",\r\n                OutputChannels: [{ Direction: DirectionEnum.Right, Channel: ChannelColorEnum.Green, Status: \"Exists\" }],\r\n                InputChannels: [], Id: 1,\r\n                Cell: { Row: 2, Column: 1 },\r\n                Status: \"Valid\"\r\n            }]\r\n        },\r\n        ExitCells: [{ Cell: { Row: 2, Column: Constants.MinimumColumns - 1 }, Direction: DirectionEnum.Right }],\r\n        DependingOn: [\"0\"],\r\n        DependingOnDeleted: [],\r\n        Status: \"Valid\"\r\n    };\r\n}\r\n\r\nconst EnrichState = (draft: PlayerModel) => {\r\n\r\n    DetermineDependencies(draft);\r\n    SetApi(draft);\r\n\r\n    return draft;\r\n};\r\n\r\nfunction DetermineDependencies(draft: Draft<PlayerModel>) {\r\n    const dependingDirectly: string[] = [];\r\n    const depending: string[] = [];\r\n    const DependingOnDeleted: string[] = [];\r\n    const activeMachine = draft.machines.find((m) => m.Id === draft.activeMachineId)!;\r\n\r\n    for (const machine of activeMachine.Setup.MachineInstances) {\r\n        if (machine.Status === \"Deleted\") {\r\n            DependingOnDeleted.push(machine.MachineId);\r\n            continue;\r\n        }\r\n        if (!IsDefaultMachine(machine.MachineId)) {\r\n            if (!dependingDirectly.some((d) => d === machine.MachineId)) {\r\n                dependingDirectly.push(machine.MachineId);\r\n            }\r\n        }\r\n        if (!depending.some((d) => d === machine.MachineId)) {\r\n            depending.push(machine.MachineId);\r\n            if (!IsDefaultMachine(machine.MachineId)) {\r\n                const machineType = draft.machines.find((m) => m.Id === machine.MachineId)!;\r\n                for (const depMachine of machineType.DependingOn) {\r\n                    if (!depending.some((d) => d === depMachine)) {\r\n                        depending.push(depMachine);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    activeMachine.DependingOn = depending;\r\n    activeMachine.DirectlyDependingOn = dependingDirectly;\r\n    return draft;\r\n}\r\n\r\nfunction SetApi(draft: Draft<PlayerModel>) {\r\n    const activeMachine = draft.machines.find((m) => m.Id === draft.activeMachineId)!;\r\n\r\n    activeMachine.Setup.MachineInstances.forEach((mi) => {\r\n        mi.InputChannels.forEach((ic) => {\r\n            ic.Status = \"DoesNotExist\";\r\n        });\r\n    });\r\n\r\n    activeMachine.ExitCells = CalculateExits(activeMachine.Setup, new TypeProvider([...draft.machines, ...draft.deletedMachines]));\r\n\r\n    const exitColors = activeMachine.ExitCells.map((ec) => {\r\n        switch (ec.Direction) {\r\n            case DirectionEnum.Right:\r\n                return ChannelColorEnum.Green;\r\n            case DirectionEnum.Up:\r\n                return ChannelColorEnum.Blue;\r\n            case DirectionEnum.Down:\r\n                return ChannelColorEnum.Red;\r\n            case DirectionEnum.Left:\r\n                return ChannelColorEnum.Yellow;\r\n            default:\r\n                throw Error(\"Invalid value for direction\");\r\n        }\r\n    });\r\n\r\n    const outputs: ChannelColorEnum[] = [];\r\n    for (const color of exitColors) {\r\n        if (!outputs.some((o) => o === color)) {\r\n            outputs.push(color);\r\n        }\r\n    }\r\n    const startMachines = GetStartMachines(activeMachine.Setup);\r\n    const inputs = startMachines.map((mi) => {\r\n        switch (mi.MachineId) {\r\n            case \"0\":\r\n                return ChannelColorEnum.Green;\r\n            case \"1\":\r\n                return ChannelColorEnum.Red;\r\n            case \"2\":\r\n                return ChannelColorEnum.Blue;\r\n            case \"3\":\r\n                return ChannelColorEnum.Yellow;\r\n            default:\r\n                throw Error(\"Unknown startmachine \" + mi.MachineId);\r\n        }\r\n    });\r\n    const newApi: MachineApi = { InputChannels: inputs, OutputChannels: outputs };\r\n    if (!ApiAreEqual(newApi, activeMachine.Api)) {\r\n        UpdateStatusDependentMachines(draft, newApi);\r\n    }\r\n    activeMachine.Api = newApi;\r\n    CheckMachineStatus(activeMachine);\r\n    return draft;\r\n}\r\n\r\nfunction CheckMachineStatus(draft: Draft<CustomMachineModel>) {\r\n    if (draft.Setup.MachineInstances.some((m) => m.Status !== \"Valid\")) {\r\n        draft.Status = \"Invalid\";\r\n    } else {\r\n        draft.Status = \"Valid\";\r\n    }\r\n}\r\n\r\nfunction UpdateStatusDependentMachines(draft: Draft<PlayerModel>, api: MachineApi) {\r\n    const activeMachineId = draft.activeMachineId!;\r\n    const dependentMachines = draft.machines.filter((m) => m.DirectlyDependingOn.some((dp) => dp === activeMachineId));\r\n    for (const dependentMachine of dependentMachines) {\r\n        for (const machineInstance of dependentMachine.Setup.MachineInstances.filter((mi) => mi.Status !== \"Deleted\" && mi.MachineId === activeMachineId)) {\r\n            UpdateMachineStatus(api, machineInstance);\r\n        }\r\n\r\n        CheckMachineStatus(dependentMachine);\r\n    }\r\n}","import { ChannelColorEnum } from \"./ChannelColorsEnum\";\n\nexport interface MachineApi {\n    readonly OutputChannels: ChannelColorEnum[];\n    readonly InputChannels: ChannelColorEnum[];\n}\n\nexport function ApiAreEqual(first: MachineApi, second: MachineApi): boolean {\n    if (first.InputChannels.length !== second.InputChannels.length) {\n        return false;\n    }\n    if (first.OutputChannels.length !== second.OutputChannels.length) {\n        return false;\n    }\n    if (first.InputChannels.some((i) => !second.InputChannels.some((o) => i === o))) {\n        return false;\n    }\n    if (first.OutputChannels.some((i) => !second.OutputChannels.some((o) => i === o))) {\n        return false;\n    }\n\n    return true;\n}","import produce, { Draft } from \"immer\";\r\nimport { Constants } from \"../../Components/Constants\";\r\nimport { CreateGuid } from \"../../Helper/Guid\";\r\nimport { GetActiveMachine } from \"../../Helper/StoreHelper\";\r\nimport { CleanInput } from \"../../Helper/TextInputHelper\";\r\nimport { IsDefaultMachine } from \"../../MachineStore/IMachine\";\r\nimport { Actions } from \"../Actions\";\r\nimport { GameData } from \"./GameModel\";\r\nimport { LevelReducer } from \"./Level/Reducer\";\r\nimport { LevelState } from \"./PlayerReducer/LevelData\";\r\nimport { PlayerModel } from \"./PlayerReducer/PlayerModel\";\r\nimport { PlayerReducer } from \"./PlayerReducer/PlayerReducer\";\r\n\r\nexport const GameReducer: (state: GameData, action: Actions) => GameData = produce((draft: Draft<GameData>, action: Actions) => {\r\n    switch (action.type) {\r\n        case \"SwitchScreen\":\r\n            draft.screen = action.screen;\r\n            break;\r\n        case \"SetMessagesActionType\":\r\n            draft.messages = action.messages;\r\n            break;\r\n        case \"SetMovingOutput\":\r\n            draft.movingOutput = action.outputChannel;\r\n            break;\r\n        case \"ImportPlayerData\":\r\n            const existingPlayer = draft.players.findIndex(p => p.id === action.data.id);\r\n            if (existingPlayer !== -1) {\r\n                draft.players[existingPlayer] = action.data;\r\n            } else {\r\n                draft.players.push(action.data);\r\n            }\r\n            break;\r\n        case \"SwitchPlayer\":\r\n            draft.activePlayerId = action.id;\r\n            break;\r\n        case \"DeletePlayer\":\r\n\r\n            draft.players = draft.players.filter((p) => p.id !== action.id);\r\n            if (draft.activePlayerId === action.id){\r\n                if (draft.players.length > 0){\r\n                    draft.activePlayerId = draft.players[0].id;\r\n                } else {\r\n                    draft.activePlayerId = \"\";\r\n                }\r\n            }\r\n            break;\r\n        case \"AddPlayer\":\r\n            const newName = CleanInput(action.name)\r\n            const newPlayer = GetNewPlayer(newName);\r\n            draft.players.push(newPlayer);\r\n            break;\r\n        case \"ChangePlayerName\":\r\n            const player = draft.players.find((p) => p.id === action.id);\r\n            if (player !== undefined) {                \r\n                player.name = CleanInput(action.name);\r\n            }\r\n            break;\r\n        default:\r\n            switch (action.type) {\r\n                case \"AddNewMachineActionType\":\r\n                    draft.messages = [];\r\n                    break;\r\n                case \"LoadLevelActionType\":\r\n                    draft.screen = \"playing\";\r\n                    break;\r\n                case \"ChannelChangedActionType\":\r\n                    if (action.channel.Status === \"Exists\") {\r\n                        draft.movingOutput = undefined;\r\n                    }\r\n            }\r\n\r\n            if (draft.activePlayerId === \"\") {\r\n                return;\r\n            }\r\n\r\n            const activePlayer = draft.players.find((p) => p.id === draft.activePlayerId);\r\n            if (activePlayer !== undefined) {\r\n                PlayerReducer(activePlayer, action);\r\n            }\r\n            break;\r\n    }\r\n\r\n    draft.activeLevel = LevelReducer(draft.activeLevel, action);\r\n\r\n    switch (action.type) {\r\n        case \"ReportOutputActionType\":\r\n            CheckLevelCompleted(draft);\r\n            break;\r\n        case \"MachineRemovedActionType\":\r\n            const activePlayer = draft.players.find((p) => p.id === draft.activePlayerId)!;\r\n            const levelData = activePlayer.levelData.find((l) => l.Id === draft.activeLevel!.id)!;\r\n            if (levelData.State === LevelState.NonValidMachineUsed) {\r\n                if (CheckValidMachinesUsed(draft)) {\r\n                    levelData.State = LevelState.InProgress;\r\n                }\r\n            }\r\n            break;\r\n    }\r\n\r\n    return;\r\n});\r\n\r\n\r\nexport function GetNewPlayer(name: string): PlayerModel {\r\n    return {\r\n        deletedMachines: [],\r\n        id: CreateGuid(),\r\n        levelData: [],\r\n        machines: [],\r\n        name,\r\n        showAnimations: true,\r\n        stepTime: 10,\r\n        activeMachineId: undefined,\r\n        activeLevel: undefined,\r\n        cellSize: Constants.CellSize\r\n    }\r\n}\r\n\r\nfunction CheckValidMachinesUsed(gameData: GameData): boolean {\r\n    return GetActiveMachine(gameData)?.DependingOn.filter((mu) => IsDefaultMachine(mu)).every((mu) => gameData.activeLevel!.allowedMachines.some((am) => am === mu)) !== false;\r\n}\r\n\r\nfunction CheckLevelCompleted(draft: Draft<GameData>) {\r\n    const activePlayer = draft.players.find((p) => p.id === draft.activePlayerId)!;\r\n    const levelData = activePlayer.levelData.find((l) => l.Id === draft.activeLevel!.id)!;\r\n\r\n    const onlyAllowedMachinesUsed = CheckValidMachinesUsed(draft);\r\n    if (!onlyAllowedMachinesUsed) {\r\n        levelData.State = LevelState.NonValidMachineUsed;\r\n    } else {\r\n        const isCompleted = draft.activeLevel!.tests.every((t) => {\r\n            if (t.actualOutputs?.length !== t.expectedOutputs.length) {\r\n                return false;\r\n            }\r\n\r\n            for (let j = 0; j < t.expectedOutputs.length; j++) {\r\n                const expected = t.expectedOutputs[j];\r\n                if (t.actualOutputs !== undefined) {\r\n                    const indexActual = (t.actualOutputs.findIndex((o) => o.Channel === expected.Channel && o.Content === expected.Content));\r\n                    if (indexActual === -1) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return true;\r\n        });\r\n        if (isCompleted) {\r\n            levelData.State = LevelState.Completed;\r\n        } else {\r\n            levelData.State = LevelState.InProgress;\r\n        }\r\n    }\r\n\r\n    levelData.LastUsedMachineId = activePlayer.activeMachineId;\r\n}\r\n","import { createStore } from \"redux\";\r\nimport { CustomMachinesActionTypes } from \"./GameDataReducer/PlayerReducer/Actions\";\r\nimport { GridSetupActionTypes } from \"./GameDataReducer/PlayerReducer/GridSetup/Actions\";\r\nimport { MachineInstanceActionTypes } from \"./GameDataReducer/PlayerReducer/GridSetup/MachineInstances/Actions\";\r\nimport { LevelActionTypes } from \"./GameDataReducer/Level/Actions\";\r\nimport { ActionTypes } from \"./GameDataReducer/Actions\";\r\nimport { GameReducer } from \"./GameDataReducer/GameReducer\";\r\nimport { GameData } from \"./GameDataReducer/GameModel\";\r\nimport { GetNewPlayer } from \"./GameDataReducer/GameReducer\";\r\nimport { Draft } from \"immer\";\r\n\r\nfunction rootReducer(state: GameData | undefined, action: CustomMachinesActionTypes | GridSetupActionTypes | MachineInstanceActionTypes | LevelActionTypes | ActionTypes): GameData {\r\n    if (state === undefined) {\r\n        const player = GetNewPlayer(\"anonymous\");\r\n        return {\r\n            players: [player],\r\n            activePlayerId: player.id,\r\n            messages: [],\r\n            screen: \"startMenu\",\r\n            activeLevel: undefined,\r\n            movingOutput: undefined\r\n        };\r\n    }\r\n\r\n    const returnValue = GameReducer(state, action);\r\n    window.localStorage.setItem(\"Players\", JSON.stringify(returnValue.players));\r\n    window.localStorage.setItem(\"activePlayer\", returnValue.activePlayerId);\r\n\r\n    return returnValue;\r\n}\r\n\r\nfunction getInitialState(): GameData| undefined {\r\n\r\n    // return TestState as GameData;\r\n\r\n    const version = Number.parseInt(window.localStorage.getItem(\"Version\") ?? \"0\", 10);\r\n    if (version === 0) {\r\n        window.localStorage.removeItem(\"State\");\r\n        window.localStorage.setItem(\"Version\", \"1\");\r\n\r\n        return undefined;\r\n    }\r\n\r\n    const state: Draft<GameData> = {\r\n        players: JSON.parse(window.localStorage.getItem(\"Players\")!),\r\n        activePlayerId: window.localStorage.getItem(\"activePlayer\")!,\r\n        messages: [],\r\n        screen: \"startMenu\",\r\n        movingOutput: undefined,\r\n    };\r\n\r\n    if (state.players === null){\r\n        return undefined;\r\n    }\r\n    \r\n    return state;\r\n}\r\n\r\nexport const AppStore = createStore(rootReducer, getInitialState(), (window as any).__REDUX_DEVTOOLS_EXTENSION__ && (window as any).__REDUX_DEVTOOLS_EXTENSION__());\r\nexport const AppState = () => {\r\n    return AppStore.getState();\r\n};","import { IActor } from \"../IActor\";\nimport { MessageModel } from \"../../Models/MessageModel\";\nimport { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\n\nexport class JoinActor implements IActor {\n    private greenInput: string | undefined;\n    private redInput: string | undefined;\n    public Act(message: MessageModel): Promise<MessageModel[]> {\n        switch (message.Channel) {\n            case ChannelColorEnum.Green:\n                this.greenInput = message.Content;\n                break;\n            case ChannelColorEnum.Red:\n                this.redInput = message.Content;\n                break;\n            default:\n                throw Error(\"Machine does not have inputchannel \" + message.Channel);\n        }\n\n        if (this.greenInput === undefined || this.redInput === undefined) {\n            return Promise.resolve([]);\n        }\n        const returnMessage = this.greenInput.concat(this.redInput);\n        this.greenInput = undefined;\n        this.redInput = undefined;\n        const returnValue: MessageModel[] = [{ Channel: ChannelColorEnum.Green, Content: returnMessage }];\n\n        return Promise.resolve(returnValue);\n    }\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { JoinActor } from \"./JoinActor\";\r\n\r\nexport class JoinMachine implements IMachine {\r\n    public GetActor(): IActor {\r\n        return new JoinActor();\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Style: {\r\n                BorderColor: \"Orange\",\r\n                Color: \"Grey\",\r\n                Name: \"Join\",\r\n                Description: \"Exits with the input from the green channel before the red channel\",\r\n            },\r\n            Api: {\r\n                InputChannels: [ChannelColorEnum.Green, ChannelColorEnum.Red],\r\n                OutputChannels: [ChannelColorEnum.Green]\r\n            },\r\n            DependingOn: [],\r\n            DirectlyDependingOn: []\r\n        };\r\n    }\r\n    public id = \"14\";\r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\n\r\nexport class SplitMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            const firstCharacterLength = message.Content[0] !== \"{\" ? 1 : message.Content.indexOf(\"}\") + 1;         \r\n\r\n            returnValue.push({ Content: message.Content.slice(0, firstCharacterLength), Channel: ChannelColorEnum.Green });\r\n            returnValue.push({ Content: message.Content.slice(firstCharacterLength), Channel: ChannelColorEnum.Red });\r\n\r\n            return Promise.resolve(returnValue);\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Style: {\r\n                BorderColor: \"Orange\",\r\n                Color: \"Black\",\r\n                Name: \"Split\",\r\n\r\n                Description: \"The first character exits green, the other characters exit red\",\r\n            },\r\n            Api: {\r\n                InputChannels: [ChannelColorEnum.Green],\r\n                OutputChannels: [ChannelColorEnum.Green, ChannelColorEnum.Red],\r\n\r\n            },\r\n            DependingOn: [],\r\n            DirectlyDependingOn: []\r\n        };\r\n    }\r\n    public id =\"13\";\r\n}\r\n","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\n\r\nexport class BlueStartMachine implements IMachine {\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            returnValue.push({ Content: message.Content, Channel: ChannelColorEnum.Green });\r\n            return Promise.resolve(returnValue);\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Style: {\r\n                Color: \"white\",\r\n                BorderColor: \"blue\",\r\n                Name: \"Start\",\r\n                Description: \"Starting point of the computation. Acts as a move machine for all other purposes\"\r\n            },\r\n            Api: {\r\n                InputChannels: [ChannelColorEnum.Green],\r\n                OutputChannels: [ChannelColorEnum.Green],\r\n            },\r\n            DependingOn: [],\r\n            DirectlyDependingOn: []\r\n        };\r\n    }\r\n    public readonly id = \"2\";\r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\n\r\nexport class YellowStartMachine implements IMachine {\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            returnValue.push({ Content: message.Content, Channel: ChannelColorEnum.Green });\r\n            return Promise.resolve(returnValue);\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Style: {\r\n                Color: \"white\",\r\n                BorderColor: \"#fff020\",\r\n                Name: \"Start\",\r\n                Description: \"Starting point of the computation. Acts as a move machine for all other purposes\"\r\n            },\r\n            Api: {\r\n                InputChannels: [ChannelColorEnum.Green],\r\n                OutputChannels: [ChannelColorEnum.Green],\r\n            },\r\n            DependingOn: [],\r\n            DirectlyDependingOn: []\r\n        };\r\n    }\r\n    public readonly id = \"3\";\r\n}","import { Computer } from \"../Computing/Computer\";\r\nimport { CleanStars, RestoreStars } from \"../Computing/MessageCleaner\";\r\nimport { MessageModel } from \"../Models/MessageModel\";\r\nimport { GridSetupModel } from \"../Redux/GameDataReducer/PlayerReducer/GridSetup/GridModel\";\r\nimport { AddStarMachine } from \"./DefaultMachines/AddStarMachine\";\r\nimport { AddZeroMachine } from \"./DefaultMachines/AddZeroMachine\";\r\nimport { CompareMachine } from \"./DefaultMachines/CompareMachine\";\r\nimport { CopyMachine } from \"./DefaultMachines/CopyMachine\";\r\nimport { DeleteMachine } from \"./DefaultMachines/DeleteMachine\";\r\nimport { GreenStartMachine } from \"./DefaultMachines/GreenStartMachine\";\r\nimport { IncrementMachine } from \"./DefaultMachines/IncrementMachine\";\r\nimport { MoveMachine } from \"./DefaultMachines/MoveMachine\";\r\nimport { RedStartMachine } from \"./DefaultMachines/RedStartMachine\";\r\nimport { RotateMachine } from \"./DefaultMachines/RotateMachine\";\r\nimport { IActor } from \"./IActor\";\r\nimport { IMachine, IsDefaultMachine } from \"./IMachine\";\r\nimport { IMachineType } from \"./IMachineType\";\r\nimport { AppState } from \"../Redux/Store\";\r\nimport { JoinMachine } from \"./DefaultMachines/JoinMachine\";\r\nimport { SplitMachine } from \"./DefaultMachines/SplitMachine\";\r\nimport { BlueStartMachine } from \"./DefaultMachines/BlueStartMachine\";\r\nimport { YellowStartMachine } from \"./DefaultMachines/YellowStartMachine\";\r\nimport { ITypeProvider } from \"./ITypeProvider\";\r\nimport { GetActivePlayer } from \"../Helper/StoreHelper\";\r\n\r\nexport class MachineStore implements ITypeProvider {\r\n    private static machineStore: MachineStore;\r\n    private machines: IMachine[];\r\n\r\n    private constructor() {\r\n        this.machines = [];\r\n        this.init();\r\n    }\r\n\r\n    public static GetStore(): MachineStore {\r\n        if (MachineStore.machineStore === undefined) {\r\n            MachineStore.machineStore = new MachineStore();\r\n        }\r\n\r\n        return MachineStore.machineStore;\r\n    }\r\n\r\n    private init(): void {\r\n        this.machines = [];\r\n        this.machines.push(new GreenStartMachine());\r\n        this.machines.push(new RedStartMachine());\r\n        this.machines.push(new BlueStartMachine());\r\n        this.machines.push(new YellowStartMachine());\r\n        this.machines.push(new MoveMachine());\r\n        this.machines.push(new CopyMachine());\r\n        this.machines.push(new DeleteMachine());\r\n        this.machines.push(new RotateMachine());\r\n        this.machines.push(new CompareMachine());\r\n        this.machines.push(new AddStarMachine());\r\n        this.machines.push(new AddZeroMachine());\r\n        this.machines.push(new IncrementMachine());\r\n        this.machines.push(new SplitMachine());\r\n        this.machines.push(new JoinMachine());\r\n    }\r\n\r\n    private FindMachine(id: string): IMachine {\r\n        const machine = this.machines.find((m) => m.id === id);\r\n        if (machine === undefined) {\r\n            throw new Error(\"No default machine found with id \" + id);\r\n        }\r\n\r\n        return machine;\r\n    }\r\n\r\n    public GetActor(id: string, parentStarNumber: number): IActor {\r\n        if (IsDefaultMachine(id)) {\r\n            return this.FindMachine(id).GetActor();\r\n        } else {\r\n            const customMachine = GetActivePlayer(AppState())?.machines.find((cm) => cm.Id === id);\r\n            if (customMachine === undefined) {\r\n                throw new Error(\"No custom machine found with id \" + id);\r\n            }\r\n            return this.CreateCustomActor(customMachine.Setup, parentStarNumber);\r\n        }\r\n    }\r\n\r\n    public GetMachineType(id: string): IMachineType {\r\n        if (IsDefaultMachine(id)) {\r\n            return this.FindMachine(id).GetType();\r\n        } else {\r\n            const activePlayer = GetActivePlayer(AppState())!;\r\n            let customMachine = activePlayer?.machines.find((cm) => cm.Id === id);\r\n            if (customMachine === undefined){\r\n                customMachine = activePlayer.deletedMachines.find((cm) => cm.Id === id);\r\n                if (customMachine === undefined) {\r\n                    throw new Error(\"No custom machine found with id \" + id);\r\n                }\r\n            }\r\n\r\n            return customMachine;\r\n        }\r\n    }\r\n\r\n    public GetAllMachines(): string[] {\r\n        const machines: string[] = this.machines.map((m) => m.id);\r\n        return machines;\r\n    }\r\n\r\n    private CreateCustomActor(setup: GridSetupModel, parentStarNumber: number): IActor {\r\n        const computer = new Computer(setup, false);\r\n\r\n        return {\r\n            Act: (message) => {\r\n                const saveMessage = RestoreStars(CleanStars(message.Content, parentStarNumber), computer.starNumber);\r\n                const cleanedMessage: MessageModel = { Content: saveMessage, Channel: message.Channel };\r\n\r\n                const computedMessages = computer.RunInput(cleanedMessage);\r\n                const returnValue: Promise<MessageModel[]> = computedMessages.then((messages) => messages.map((mm) => ({ Channel: mm.Channel, Content: RestoreStars(CleanStars(mm.Content, computer.starNumber), parentStarNumber) })));\r\n                return returnValue;\r\n            }\r\n        };\r\n    }\r\n}","import { OrderedMessageModel } from \"../../../Models/OrderedMessageModel\";\r\n\r\nexport const LoadLevelActionType = \"LoadLevelActionType\";\r\ninterface LoadLevelActionType {\r\n    type: typeof LoadLevelActionType;\r\n    id: string;\r\n}\r\n\r\nexport function LoadLevel(id: string): LevelActionTypes {\r\n    return {\r\n        type: \"LoadLevelActionType\",\r\n        id\r\n    };\r\n}\r\n\r\nexport const ReportOutputActionType = \"ReportOutputActionType\";\r\ninterface ReportOutputActionType {\r\n    type: typeof ReportOutputActionType;\r\n    outputMessage: OrderedMessageModel;\r\n    testId: number;\r\n}\r\n\r\nexport function ReportOutput(outputMessage: OrderedMessageModel, testId: number): LevelActionTypes {\r\n    return {\r\n        type: \"ReportOutputActionType\",\r\n        outputMessage,\r\n        testId\r\n    };\r\n}\r\nexport const ClearTestOutputActionType = \"ClearTestOutputActionType\";\r\ninterface ClearTestOutputActionType {\r\n    type: typeof ClearTestOutputActionType;\r\n    testId: number;\r\n}\r\n\r\nexport function ClearTestOutput(testId: number): LevelActionTypes {\r\n    return {\r\n        type: \"ClearTestOutputActionType\",\r\n        testId\r\n    };\r\n}\r\nexport const AddTestActionType = \"AddTestActionType\";\r\ninterface AddTestActionType {\r\n    type: typeof AddTestActionType;\r\n}\r\n\r\nexport function AddTest(): LevelActionTypes {\r\n    return {\r\n        type: \"AddTestActionType\",\r\n    };\r\n}\r\n\r\nexport const RemoveTestActionType = \"RemoveTestActionType\";\r\ninterface RemoveTestActionType {\r\n    type: typeof RemoveTestActionType;\r\n    testId: number;\r\n}\r\n\r\nexport function RemoveTest(testId: number): LevelActionTypes {\r\n    return {\r\n        type: \"RemoveTestActionType\",\r\n        testId\r\n    };\r\n}\r\n\r\nexport const UpdateInputActionType = \"UpdateInputActionType\";\r\ninterface UpdateInputActionType {\r\n    type: typeof UpdateInputActionType;\r\n    testId: number;\r\n    input: OrderedMessageModel;\r\n}\r\n\r\nexport function UpdateInput(input: OrderedMessageModel, testId: number): LevelActionTypes {\r\n    return {\r\n        type: \"UpdateInputActionType\",\r\n        input,\r\n        testId\r\n    };\r\n}\r\n\r\nexport const AddInputActionType = \"AddInputActionType\";\r\ninterface AddInputActionType {\r\n    type: typeof AddInputActionType;\r\n    testId: number;\r\n}\r\n\r\nexport function AddInput(testId: number): LevelActionTypes {\r\n    return {\r\n        type: \"AddInputActionType\",\r\n        testId\r\n    };\r\n}\r\n\r\nexport const RemoveInputActionType = \"RemoveInputActionType\";\r\ninterface RemoveInputActionType {\r\n    type: typeof RemoveInputActionType;\r\n    testId: number;\r\n    order: number;\r\n}\r\n\r\nexport function RemoveInput(testId: number, order: number): LevelActionTypes {\r\n    return {\r\n        type: \"RemoveInputActionType\",\r\n        testId,\r\n        order\r\n    };\r\n}\r\n\r\nexport type LevelActionTypes = LoadLevelActionType\r\n    | ReportOutputActionType\r\n    | ClearTestOutputActionType\r\n    | AddTestActionType\r\n    | RemoveTestActionType\r\n    | UpdateInputActionType\r\n    | AddInputActionType\r\n    | RemoveInputActionType;\r\n\r\n ","import { MessageLocationModel } from \"../../../../Models/MessageLocationModel\";\r\nimport { MachineInstanceActionTypes } from \"./MachineInstances/Actions\";\r\ninterface SetMessagesActionType {\r\n    type: \"SetMessagesActionType\";\r\n    messages: MessageLocationModel[];\r\n}\r\n\r\nexport function SetMessages(messages: MessageLocationModel[]): GridSetupActionTypes {\r\n    return {\r\n        type: \"SetMessagesActionType\",\r\n        messages\r\n    };\r\n}\r\n\r\nexport function ClearMessages(): GridSetupActionTypes {\r\n    return {\r\n        type: \"SetMessagesActionType\",\r\n        messages: []\r\n    };\r\n}\r\n\r\ninterface SetColorActionType {\r\n    type: \"SetColorActionType\";\r\n    color: string;\r\n}\r\n\r\nexport function SetColor(color: string): GridSetupActionTypes {\r\n    return {\r\n        type: \"SetColorActionType\",\r\n        color\r\n    };\r\n}\r\n\r\ninterface SetBorderColorActionType {\r\n    type: \"SetBorderColorActionType\";\r\n    borderColor: string;\r\n}\r\n\r\nexport function SetBorderColor(borderColor: string): GridSetupActionTypes {\r\n    return {\r\n        type: \"SetBorderColorActionType\",\r\n        borderColor\r\n    };\r\n}\r\ninterface SetDescriptionActionType {\r\n    type: \"SetDescriptionActionType\";\r\n    description: string;\r\n}\r\n\r\nexport function SetDescription(description: string): GridSetupActionTypes {\r\n    return {\r\n        type: \"SetDescriptionActionType\",\r\n        description\r\n    };\r\n}\r\n\r\ninterface SetNameActionType {\r\n    type: \"SetNameActionType\";\r\n    name: string;\r\n}\r\n\r\nexport function SetName(name: string): GridSetupActionTypes {\r\n    return {\r\n        type: \"SetNameActionType\",\r\n        name\r\n    };\r\n}\r\n\r\nexport type GridSetupActionTypes =\r\n    | SetMessagesActionType\r\n    | SetColorActionType\r\n    | SetBorderColorActionType\r\n    | SetNameActionType\r\n    | SetDescriptionActionType\r\n    | MachineInstanceActionTypes;","import { IActor } from \"../MachineStore/IActor\";\r\nimport { MachineStore } from \"../MachineStore/MachineStore\";\r\nimport { CellModel } from \"../Models/CellModel\";\r\nimport { ChannelColorEnum } from \"../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../Models/DirectionEnum\";\r\nimport { Move } from \"../Helper/SetupHelper\";\r\nimport { MachineInstanceModel } from \"../Models/MachineInstanceModel\";\r\nimport { MessageLocationModel } from \"../Models/MessageLocationModel\";\r\nimport { MessageModel } from \"../Models/MessageModel\";\r\nimport { GridSetupModel } from \"../Redux/GameDataReducer/PlayerReducer/GridSetup/GridModel\";\r\nimport { OrderedMessageModel } from \"../Models/OrderedMessageModel\";\r\nimport { ClearTestOutput, ReportOutput } from \"../Redux/GameDataReducer/Level/Actions\";\r\nimport { SetMessages } from \"../Redux/GameDataReducer/PlayerReducer/GridSetup/Actions\";\r\nimport { IStore } from \"../Redux/IStore\";\r\nimport { GetActivePlayer } from \"../Helper/StoreHelper\";\r\nexport class Computer {\r\n    private setup: GridSetupModel;\r\n    private machines: Array<{ id: number, actor: IActor }> = [];\r\n    private store: MachineStore;\r\n    private outputs: MessageModel[] = [];\r\n    private static cancelComputation: (() => void) | undefined = undefined;\r\n    private static stepCount: number;\r\n    private static starNumberCounter: number;\r\n    private activeSetup: boolean;\r\n    public starNumber: number;\r\n\r\n    constructor(setup: GridSetupModel, activeSetup: boolean) {\r\n        this.setup = setup;\r\n        this.activeSetup = activeSetup;\r\n        this.starNumber = Computer.starNumberCounter++;\r\n        this.store = MachineStore.GetStore();\r\n        this.HandleNextMessages = this.HandleNextMessages.bind(this);\r\n        this.CalculateNextMessages = this.CalculateNextMessages.bind(this);\r\n        this.RunInput = this.RunInput.bind(this);\r\n        this.RunComputation = this.RunComputation.bind(this);\r\n        this.SetDelay = this.SetDelay.bind(this);\r\n    }\r\n\r\n    public GetStartMachine(color: ChannelColorEnum): MachineInstanceModel | undefined {\r\n\r\n        let id: string = \"0\";\r\n        switch (color) {\r\n            case ChannelColorEnum.Green:\r\n                id = \"0\";\r\n                break;\r\n            case ChannelColorEnum.Red:\r\n                id = \"1\";\r\n                break;\r\n            case ChannelColorEnum.Blue:\r\n                id = \"2\";\r\n                break;\r\n            case ChannelColorEnum.Yellow:\r\n                id = \"3\";\r\n                break;\r\n        }\r\n\r\n        return this.setup.MachineInstances.find((mi) => mi.MachineId === id);\r\n    }\r\n\r\n    public async RunComputation(testId: number, store: IStore): Promise<OrderedMessageModel[]> {\r\n        Computer.StopComputation();\r\n        Computer.starNumberCounter = 1;\r\n        this.starNumber = 0;\r\n        this.machines = [];\r\n        store.dispatch(ClearTestOutput(testId));\r\n        const test = store.getState().activeLevel!.tests.find((t) => t.id === testId);\r\n        if (test === undefined) {\r\n            return Promise.resolve([]);\r\n        } else {\r\n            let orderedOutputs: OrderedMessageModel[] = [];\r\n\r\n            for (const input of test.inputs) {\r\n                const results = await this.RunInput(input, store, testId, input.Order).catch((reason) => Promise.reject(reason));\r\n                orderedOutputs = orderedOutputs.concat(results.map((mm) => ({ Content: mm.Content, Channel: mm.Channel, Order: input.Order })));\r\n            }\r\n\r\n            return Promise.resolve(orderedOutputs);\r\n        }\r\n    }\r\n\r\n    public static StopComputation(): void {\r\n        if (Computer.cancelComputation) {\r\n            Computer.cancelComputation();\r\n            Computer.cancelComputation = undefined;\r\n        }\r\n\r\n        Computer.stepCount = 0;\r\n    }\r\n\r\n    public RunInput(input: MessageModel, store?: IStore, testId?: number, order?: number): Promise<MessageModel[]> {\r\n        this.outputs = [];\r\n        const messageLocations: MessageLocationModel[] = [];\r\n        const machineInstance = this.GetStartMachine(input.Channel);\r\n        if (machineInstance !== undefined) {\r\n            const direction = machineInstance.OutputChannels[0].Direction;\r\n            const messageLocation: MessageLocationModel = { Content: input.Content, Direction: direction, Cell: machineInstance.Cell };\r\n            messageLocations.push(messageLocation);\r\n        }\r\n\r\n        if (store !== undefined && this.activeSetup && GetActivePlayer(store.getState())!.showAnimations) {\r\n            store.dispatch(SetMessages(messageLocations));\r\n        }\r\n\r\n        return this.OrderNewCalculation({ messageLocations, store, testId, order });\r\n    }\r\n\r\n    private SetDelay<U, T>(callback: (args: U) => Promise<T>, args: U, timeout: number): Promise<T> {\r\n        return new Promise<T>((resolve, reject) => {\r\n            const clearHandle = window.setTimeout(() => callback(args).then(resolve).catch(reject), timeout);\r\n            Computer.cancelComputation = () => {\r\n                window.clearTimeout(clearHandle);\r\n                reject(\"Computation cancelled\");\r\n            };\r\n        });\r\n    }\r\n\r\n    private async HandleNextMessages(args: { messageLocations: MessageLocationModel[], store?: IStore, testId?: number, order?: number }): Promise<MessageModel[]> {\r\n        const [nextMessages, outputMessages] = await this.CalculateNextMessages(args.messageLocations);\r\n        if (outputMessages.length > 0) {\r\n            this.outputs = this.outputs.concat(outputMessages);\r\n        }\r\n\r\n        if (args.store !== undefined) {\r\n            for (const message of outputMessages) {\r\n                args.store.dispatch(ReportOutput({ Channel: message.Channel, Content: message.Content, Order: args.order! }, args.testId!));\r\n            }\r\n        }\r\n\r\n        if (args.store !== undefined && this.activeSetup && GetActivePlayer(args.store.getState())!.showAnimations) {\r\n            args.store.dispatch(SetMessages(nextMessages));\r\n        }\r\n\r\n        if (nextMessages.length > 0) {\r\n            return this.OrderNewCalculation({ ...args, messageLocations: nextMessages });\r\n        } else {\r\n            return Promise.resolve(this.outputs);\r\n        }\r\n    }\r\n\r\n    private OrderNewCalculation(args: { messageLocations: MessageLocationModel[], store?: IStore, testId?: number, order?: number }): Promise<MessageModel[]> {\r\n        Computer.stepCount++;\r\n        const showAnimations = args.store === undefined || GetActivePlayer(args.store.getState())!.showAnimations;\r\n        if ((this.activeSetup && showAnimations) || Computer.stepCount % 100000 === 0) {\r\n            const timeout = args.store !== undefined && showAnimations ? GetActivePlayer(args.store.getState())!.stepTime * 100 : 0;\r\n\r\n            return this.SetDelay(this.HandleNextMessages, args, timeout);\r\n        } else {\r\n            return this.HandleNextMessages(args);\r\n        }\r\n    }\r\n\r\n    private async CalculateNextMessages(messages: MessageLocationModel[]): Promise<[MessageLocationModel[], MessageModel[]]> {\r\n        const doneMessages: MessageLocationModel[] = [];\r\n        const nextMessages: MessageLocationModel[] = [];\r\n        for (const message of messages) {\r\n            let machine: MachineInstanceModel | undefined;\r\n            let messageCell: CellModel | undefined = message.Cell;\r\n\r\n            while (machine === undefined) {\r\n                messageCell = Move(this.setup, messageCell!, message.Direction);\r\n                if (messageCell === undefined) {\r\n                    break;\r\n                }\r\n\r\n                // eslint-disable-next-line\r\n                machine = this.setup.MachineInstances.find((mi) => mi.Cell.Column === messageCell!.Column && mi.Cell.Row === messageCell!.Row);\r\n            }\r\n\r\n            if (messageCell === undefined) {\r\n                doneMessages.push({ Cell: undefined, Direction: message.Direction, Content: message.Content });\r\n                continue;\r\n            }\r\n\r\n            if (machine!.Status !== \"Valid\") {\r\n                return Promise.reject(\"Encountered invalid machine, check your machines\");\r\n            }\r\n\r\n            let channel = ChannelColorEnum.Green;\r\n            const inputChannel = machine!.InputChannels.find((ic) => ic.Direction === message.Direction);\r\n            if (inputChannel !== undefined) {\r\n                channel = inputChannel.Channel;\r\n            }\r\n\r\n            let cachedMachine = this.machines.find((m) => m.id === machine!.Id);\r\n            if (cachedMachine === undefined) {\r\n                const machineInstance = this.setup.MachineInstances.find((mi) => mi.Id === machine!.Id)!;\r\n                cachedMachine = { id: machineInstance.Id, actor: this.store.GetActor(machineInstance.MachineId, this.starNumber) };\r\n                this.machines.push(cachedMachine);\r\n            }\r\n\r\n            const actor = cachedMachine.actor;\r\n\r\n            const nextContents = await actor.Act({ Content: message.Content, Channel: channel });\r\n            for (const nextContent of nextContents) {\r\n                const channelMap = machine!.OutputChannels.find((cm) => cm.Channel === nextContent.Channel);\r\n                if (channelMap === undefined) {\r\n                    throw Error(\"Channelmap \" + nextContent.Channel + \"undefined\");\r\n                }\r\n\r\n                const messageLocation: MessageLocationModel = { Cell: machine!.Cell, Content: nextContent.Content, Direction: channelMap.Direction };\r\n                nextMessages.push(messageLocation);\r\n            }\r\n        }\r\n\r\n        const outputs: MessageModel[] = [];\r\n        for (const doneMessage of doneMessages) {\r\n            switch (doneMessage.Direction) {\r\n                case DirectionEnum.Up:\r\n                    outputs.push({ Content: doneMessage.Content, Channel: ChannelColorEnum.Blue });\r\n                    break;\r\n                case DirectionEnum.Down:\r\n                    outputs.push({ Content: doneMessage.Content, Channel: ChannelColorEnum.Red });\r\n                    break;\r\n                case DirectionEnum.Right:\r\n                    outputs.push({ Content: doneMessage.Content, Channel: ChannelColorEnum.Green });\r\n                    break;\r\n                case DirectionEnum.Left:\r\n                    outputs.push({ Content: doneMessage.Content, Channel: ChannelColorEnum.Yellow });\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return [nextMessages, outputs];\r\n    }\r\n}","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport NumberInput from \"../NumberInput/NumberInput\";\r\nimport { Props } from \"./Props\";\r\nimport { GameData } from \"../../Redux/GameDataReducer/GameModel\";\r\nimport { GetActivePlayer } from \"../../Helper/StoreHelper\";\r\nimport { UpdateStepTime, UpdateShowAnimations } from \"../../Redux/GameDataReducer/Actions\";\r\nimport { Computer } from \"../../Computing/Computer\";\r\n\r\nconst DashboardInternal: React.FC<Props> = (props) => {\r\n\r\n    const onClicked = () => {\r\n        props.UpdateShowAnimations(!props.ShowAnimations);\r\n    };\r\n    return (\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\", width: \"100%\", height: \"100%\" }}>\r\n            <div style={{paddingRight: 30}}>\r\n                <button onClick={Computer.StopComputation} title=\"Stop the running computation\">Stop</button>\r\n            </div>\r\n            <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                <label title=\"Show animations, will calculate as fast as possible when turned of\">Animations</label>\r\n                {props.ShowAnimations && <label title=\"Step time in tenths of seconds, lower for faster animations\">Step Time</label>}\r\n            </div>\r\n\r\n            <div style={{ display: \"flex\", flexDirection: \"column\", width: 100 }}>\r\n                <button onClick={onClicked} style={{ marginLeft: 5, width: 63}}>{props.ShowAnimations ? \"On\" : \"Off\"}</button>\r\n                {props.ShowAnimations && <NumberInput value={props.StepTime} valueChanged={props.UpdateStepTime} />}\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: GameData) => {\r\n    return {\r\n        ShowAnimations: GetActivePlayer(state)!.showAnimations,\r\n        StepTime: GetActivePlayer(state)!.stepTime,\r\n    };\r\n};\r\n\r\nexport const Dashboard = connect(\r\n    mapStateToProps,\r\n    {\r\n        UpdateStepTime, UpdateShowAnimations\r\n    }\r\n)(DashboardInternal);","import { CellModel } from \"../../../../../Models/CellModel\";\r\nimport { ChannelModel } from \"../../../../../Models/ChannelModel\";\r\nimport { MachineApi } from \"../../../../../Models/MachineApi\";\r\n\r\ninterface ChannelChangedActionType {\r\n    type: \"ChannelChangedActionType\";\r\n    machineInstanceId: number;\r\n    channel: ChannelModel;\r\n    angle?: number;\r\n}\r\n\r\nexport function ChangeChannel(machineInstanceId: number, channel: ChannelModel, angle?: number): MachineInstanceActionTypes {\r\n    return {\r\n        type: \"ChannelChangedActionType\",\r\n        machineInstanceId,\r\n        channel,\r\n        angle\r\n    };\r\n}\r\n\r\ninterface InputChannelChangedActionType {\r\n    type: \"InputChannelChangedActionType\";\r\n    machineInstanceId: number;\r\n    channelIndex: number;\r\n    channel: ChannelModel;\r\n}\r\n\r\nexport function ChangeInputChannel(machineInstanceId: number, channelIndex: number, channel: ChannelModel): MachineInstanceActionTypes {\r\n    return {\r\n        type: \"InputChannelChangedActionType\",\r\n        machineInstanceId,\r\n        channelIndex,\r\n        channel\r\n    };\r\n}\r\n\r\ninterface MachineRemovedActionType {\r\n    type: \"MachineRemovedActionType\";\r\n    machineInstanceId: number;\r\n}\r\n\r\nexport function RemoveMachine(machineInstanceId: number): MachineInstanceActionTypes {\r\n    return {\r\n        type: \"MachineRemovedActionType\",\r\n        machineInstanceId\r\n    };\r\n}\r\n\r\ninterface MachineAddedActionType {\r\n    type: \"MachineAddedActionType\";\r\n    machineId: string;\r\n    cell: CellModel;\r\n    api: MachineApi;\r\n}\r\n\r\nexport function AddMachine(machineId: string, api: MachineApi, cellId: CellModel): MachineInstanceActionTypes {\r\n    return {\r\n        type: \"MachineAddedActionType\",\r\n        machineId,\r\n        cell: cellId,\r\n        api\r\n    };\r\n}\r\n\r\ninterface MachineMovedActionType {\r\n    type: \"MachineMovedActionType\";\r\n    machineInstanceId: number;\r\n    newCell: CellModel;\r\n}\r\n\r\nexport function MoveMachine(machineInstanceId: number, newCell: CellModel): MachineInstanceActionTypes {\r\n    return {\r\n        type: \"MachineMovedActionType\",\r\n        machineInstanceId,\r\n        newCell\r\n    };\r\n}\r\n\r\ninterface FixMachineActionType {\r\n    type: \"FixMachineActionType\";\r\n    machineInstanceId: number;\r\n}\r\n\r\nexport function FixMachine(machineInstanceId: number): MachineInstanceActionTypes {\r\n    return {\r\n        type: \"FixMachineActionType\",\r\n        machineInstanceId\r\n    };\r\n}\r\n\r\nexport type MachineInstanceActionTypes = ChannelChangedActionType |\r\n    MachineRemovedActionType |\r\n    MachineAddedActionType |\r\n    MachineMovedActionType |\r\n    FixMachineActionType |\r\n    InputChannelChangedActionType;\r\n","import { ChannelModel } from \"../Models/ChannelModel\";\n\nexport const DragItemTypes = {\n  MachineInstance: \"MachineInstance\",\n  NewMachine: \"NewMachine\",\n  OutputChannel: \"OutputChannel\",\n  Grid: \"Grid\"\n};\n\nexport interface DraggedOutputChannel {\n  type: typeof DragItemTypes.OutputChannel;\n  channel: ChannelModel;\n  machineInstanceId: number;\n  offsetX: number;\n  offsetY: number;\n}\n\nexport interface DraggedNewMachine {\n  type: typeof DragItemTypes.NewMachine;\n  id: string;\n}\n\nexport interface MovingOutputChannel extends DraggedOutputChannel {\n  angle: number;\n}","export const FormatMessage = (content: string): string => {\n    let formattedMessage: string | undefined;\n\n    if (content === \"\") {\n        formattedMessage = \"<Empty>\";\n    } else {\n        formattedMessage = content;\n        let seekPosition = 0;\n\n        while (true) {\n            seekPosition = formattedMessage.indexOf(\"{\", seekPosition);\n            if (seekPosition === -1) {\n                break;\n            }\n\n            const lastIndex = formattedMessage.indexOf(\"}\", seekPosition);\n            formattedMessage = formattedMessage.substring(0, seekPosition) + \"?\" + formattedMessage.substring(lastIndex + 1);\n        }\n    }\n    return formattedMessage;\n};\n","import { ChannelModel } from \"../../../../../Models/ChannelModel\";\nimport React, { useEffect } from \"react\";\nimport { heightFactor, widthFactor, marginFactor } from \"./ChannelGroup\";\nimport { useDrag } from \"react-dnd\";\nimport { DragItemTypes, DraggedOutputChannel } from \"../../../../DragItemTypes\";\nimport { DirectionEnum } from \"../../../../../Models/DirectionEnum\";\nimport { getEmptyImage } from \"react-dnd-html5-backend\";\nimport { GetAngleFromMonitor } from \"../../../../../Helper/AngleHelper\";\n\nexport const ChannelClickArea: React.FC<{\n    Channel: ChannelModel,\n    MachineInstanceId: number,\n    OnClick: (channel: ChannelModel, angle?: number) => void,\n    OffsetX: number,\n    OffsetY: number,\n    CellSize: number\n}> = (props) => {\n\n    const [{ isDragging }, drag, preview] = useDrag<DraggedOutputChannel, unknown, { isDragging: boolean }>({\n        item: { type: DragItemTypes.OutputChannel, channel: props.Channel, machineInstanceId: props.MachineInstanceId, offsetX: props.OffsetX, offsetY: props.OffsetY},\n        begin: () => {\n            props.OnClick({ ...props.Channel, Status: \"DoesNotExist\" });\n        },\n        end: (dropResult, monitor) => {\n            if (!monitor.didDrop()) {\n                const outputItem = monitor.getItem() as DraggedOutputChannel;\n                const angle = GetAngleFromMonitor(monitor, props.OffsetX, props.OffsetY);\n                if (angle !== undefined) {\n                    const adjustedAngle = angle + Math.PI * 2.75;\n                    const direction = Math.floor(adjustedAngle / (Math.PI * 0.5)) % 4;\n                    props.OnClick({ Direction: direction, Channel: props.Channel.Channel, Status: outputItem.channel.Status }, angle);\n                }\n            }\n        },\n        collect: (monitor) => ({ isDragging: monitor.isDragging() })\n    });\n\n    const onClicked = () => {\n        const newDirection: DirectionEnum = props.Channel.Direction === 3 ? 0 : props.Channel.Direction + 1;\n        props.OnClick({ Direction: newDirection, Channel: props.Channel.Channel, Status: props.Channel.Status });\n    };\n\n    const channelStyle: React.CSSProperties = {\n        width: widthFactor * props.CellSize,\n        marginLeft: marginFactor * props.CellSize,\n        opacity: isDragging ? 0 : 1,\n        height: heightFactor*props.CellSize,\n        pointerEvents: \"all\"\n    };\n\n    useEffect(() => {\n        preview(getEmptyImage(), { captureDraggingState: true });\n    }, [preview]);\n\n    return <div ref={drag} style={channelStyle} onClick={onClicked}>\n    </div>;\n};\n","import React from \"react\";\nimport { DirectionEnum } from \"../../../../../Models/DirectionEnum\";\nimport { Props } from \"./Props\";\nimport { ChannelClickArea } from \"./ChannelClickArea\";\n\nexport const widthFactor = 0.07;\nexport const heightFactor = 0.31;\nexport const marginFactor = 0.05;\n\nexport const ChannelGroup: React.FC<Props> = (props) => {\n\n    if (props.ChannelModels.length === 0) {\n        return <></>;\n    }\n\n    const width = props.cellSize * widthFactor;\n    const height = props.cellSize * heightFactor;\n    const heightOffset = props.cellSize * 0.06;\n    const margin = props.cellSize * marginFactor;\n\n    let baseOffsetX = (props.cellSize - (props.ChannelModels.length * (width + margin) - margin)) / 2;\n    let baseOffsetY = props.cellSize / 2 - height - heightOffset;\n    let deltaX = width + margin;\n    let deltaY = 0;\n\n    const channelSetStyle: React.CSSProperties = {\n        position: \"absolute\",\n        marginLeft: baseOffsetX - margin,\n        marginTop: baseOffsetY,\n        display: \"flex\",\n        flexDirection: \"row\"\n    };\n\n    let rotate: string = \"\";\n\n    switch (props.ChannelModels[0].Direction) {\n        case DirectionEnum.Down:\n            rotate = \"rotate(180deg)\";\n            baseOffsetY = props.cellSize / 2 + heightOffset;\n            baseOffsetX = props.cellSize - baseOffsetX - width;\n            deltaX = -deltaX;\n            break;\n        case DirectionEnum.Left:\n            rotate = \"rotate(270deg)\";\n            const tempBaseOffsetX = baseOffsetY;\n            baseOffsetY = props.cellSize - baseOffsetX - width;\n            baseOffsetX = tempBaseOffsetX;\n            deltaY = -deltaX;\n            deltaX = 0;\n            break;\n        case DirectionEnum.Right:\n            rotate = \"rotate(90deg)\";\n            baseOffsetY = baseOffsetX;\n            baseOffsetX = props.cellSize / 2 + heightOffset;\n            deltaY = deltaX;\n            deltaX = 0;\n            break;\n    }\n\n    const rotation: React.CSSProperties = {\n        transform: rotate,\n        height: props.cellSize,\n        width: props.cellSize,\n        position: \"absolute\",\n        pointerEvents: \"none\"\n    };\n\n    return (\n        <div style={rotation}>\n            <div style={channelSetStyle}>\n                {props.ChannelModels.map((cm, index) => <ChannelClickArea key={index} Channel={cm} OnClick={props.OnChanged} MachineInstanceId={props.MachineInstanceId} OffsetX={baseOffsetX + deltaX * index} OffsetY={baseOffsetY + deltaY * index} CellSize={props.cellSize} />)}\n            </div>\n        </div>\n    );\n}\n","import { DrawModel } from \"./DrawModel\";\nimport { DirectionEnum } from \"../../../../../Models/DirectionEnum\";\nimport { InputChannelModel } from \"./InputChannelModel\";\nimport { ChannelModel } from \"../../../../../Models/ChannelModel\";\nimport { DraggedOutputModel } from \"./DraggedOutputModel\";\nimport { GetAngleFromDirection } from \"../../../../../Helper/AngleHelper\";\nimport { DrawConstants } from \"./DrawConstants\";\n\nexport abstract class MachineDrawer {\n    protected ctx: CanvasRenderingContext2D;\n    protected innerColor: string;\n    protected borderColor: string;\n    protected inputChannels: InputChannelModel[];\n    protected outputChannels: ChannelModel[][];\n    protected draggedOutput: DraggedOutputModel | undefined;\n    protected draggedDirection: DirectionEnum | undefined;\n    protected backgroundColor: string;\n    public drawConstants: DrawConstants;\n\n    constructor(ctx: CanvasRenderingContext2D, props: DrawModel) {\n        this.ctx = ctx;\n        this.innerColor = props.MachineStyle.Color;\n        this.borderColor = props.MachineStyle.BorderColor;\n        this.inputChannels = props.InputChannels.sort((ic, id) => ic.Direction > id.Direction ? 1 : -1);\n        this.outputChannels = props.OutputChannels;\n        this.draggedOutput = props.MovingOutput;\n        this.backgroundColor = props.BackgroundColor;\n        this.drawConstants = new DrawConstants(props.CellSize);\n        if (this.draggedOutput !== undefined) {\n            if (this.draggedOutput !== undefined) {\n                const adjustedAngle = this.draggedOutput.angle + Math.PI * 2.75;\n                this.draggedDirection = Math.floor(adjustedAngle / (Math.PI * 0.5)) % 4;\n            }\n        }\n    }\n\n    public DrawMachine() {\n\n        this.DrawBody();\n\n        for (const input of this.inputChannels) {\n            this.DrawInputGradient(input);\n        }\n\n        for (const outputGroup of this.outputChannels) {\n            this.DrawOutputGroup(outputGroup, true);\n        }\n\n        if (this.draggedOutput !== undefined) {\n            this.DraggedOutputDrawer(true);\n        }\n\n        if (this.inputChannels.length === 0) {\n            this.DrawNoInputOutline();\n        } else {\n            let startIndex = 0;\n            let endIndex = 0;\n            do {\n                endIndex = (endIndex + 1) % this.inputChannels.length;\n                this.DrawInputOutline(this.inputChannels[startIndex].Direction, this.inputChannels[endIndex].Direction);\n                startIndex++;\n            } while (startIndex < this.inputChannels.length);\n        }\n\n        for (const outputGroup of this.outputChannels) {\n            this.DrawOutputGroup(outputGroup, false);\n        }\n\n        if (this.draggedOutput !== undefined) {\n            this.DraggedOutputDrawer(false);\n        }\n    }\n    protected abstract DrawInputOutline(startDirection: DirectionEnum, endDirection: DirectionEnum): void;\n    protected abstract DrawBody(): void;\n    protected abstract DrawNoInputOutline(): void;\n    protected abstract DrawInputGradient(input: InputChannelModel): void;\n\n    protected SetShadowStyle() {\n        this.ctx.shadowColor = \"black\";\n        this.ctx.shadowOffsetX = this.drawConstants.shadeOffset;\n        this.ctx.shadowOffsetY = this.drawConstants.shadeOffset;\n    }\n\n    protected ClearShadowStyle() {\n        this.ctx.shadowColor = \"transparent\";\n        this.ctx.shadowOffsetX = 0;\n        this.ctx.shadowOffsetY = 0;\n    }\n    private DrawOutputGroup(outputs: ChannelModel[], isShade: boolean) {\n\n        this.ClearShadowStyle();\n\n        const baseAngle = GetAngleFromDirection(outputs[0].Direction) + Math.PI;\n        const filteredOutputs = outputs.filter((c) => c.Status !== \"DoesNotExist\");\n        let split = -(filteredOutputs.length - 1) / 2 * this.drawConstants.outputSplit;\n\n        if (this.draggedDirection === outputs[0].Direction) {\n            let increasedSplit = -(filteredOutputs.length) / 2 * this.drawConstants.outputSplit;\n            let draggedIsDrawn = false;\n            const draggedSplit = Math.sin(this.draggedOutput!.angle - baseAngle) * this.drawConstants.outputStartLength;\n            for (let index = 0; index < filteredOutputs.length; index++) {\n                if (!draggedIsDrawn && draggedSplit < split) {\n                    draggedIsDrawn = true;\n                    increasedSplit += this.drawConstants.outputSplit;\n                }\n\n                if (isShade) {\n                    this.DrawOutputChannel(\"black\", baseAngle, increasedSplit, this.drawConstants.shadeOffset * 2);\n                } else {\n                    this.DrawOutputChannel(\"black\", baseAngle, increasedSplit, this.drawConstants.shadeOffset);\n                    this.DrawOutputChannel(filteredOutputs[index].Channel, baseAngle, increasedSplit);\n                }\n\n                split += this.drawConstants.outputSplit;\n                increasedSplit += this.drawConstants.outputSplit;\n            }\n        } else {\n            for (const output of filteredOutputs) {\n                if (isShade) {\n                    this.DrawOutputChannel(\"black\", baseAngle, split, this.drawConstants.shadeOffset * 2);\n                } else {\n                    this.DrawOutputChannel(\"black\", baseAngle, split, this.drawConstants.shadeOffset);\n                    this.DrawOutputChannel(output.Channel, baseAngle, split);\n                }\n\n                split += this.drawConstants.outputSplit;\n            }\n        }\n    }\n\n    private DraggedOutputDrawer(isShade: boolean) {\n        this.ClearShadowStyle();\n        if (isShade) {\n            this.DrawDraggedOutput(\"black\", this.drawConstants.shadeOffset * 2);\n        } else {\n            this.DrawDraggedOutput(\"black\", this.drawConstants.shadeOffset);\n            this.DrawDraggedOutput(this.draggedOutput!.channel.Channel, 0);\n        }\n    }\n\n    private DrawDraggedOutput(color: string, offset: number) {\n        const adjustedAngle = this.draggedOutput!.angle! + Math.PI * 0.25;\n        const direction = Math.floor(adjustedAngle / (Math.PI * 0.5)) * Math.PI * 0.5;\n\n        const firstX = this.drawConstants.center + this.drawConstants.outputStartLength * Math.cos(this.draggedOutput!.angle!) + offset;\n        const firstY = this.drawConstants.center + this.drawConstants.outputStartLength * Math.sin(this.draggedOutput!.angle!) + offset;\n        const endX = firstX + (this.drawConstants.outputLength - this.drawConstants.outputStartLength) * Math.cos(direction);\n        const endY = firstY + (this.drawConstants.outputLength - this.drawConstants.outputStartLength) * Math.sin(direction);\n\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.drawConstants.center, this.drawConstants.center);\n\n        const gradient = this.ctx.createRadialGradient(this.drawConstants.center, this.drawConstants.center, 0, this.drawConstants.center, this.drawConstants.center, this.drawConstants.outputLength);\n        gradient.addColorStop(0, this.innerColor);\n        gradient.addColorStop(0.6, color);\n\n        this.ctx.arcTo(firstX, firstY, endX, endY, this.drawConstants.outputRadius);\n        this.ctx.lineTo(endX, endY);\n        this.ctx.strokeStyle = gradient;\n        this.ctx.lineWidth = this.drawConstants.outputWidth;\n\n        this.ctx.stroke();\n    }\n\n    private DrawOutputChannel(color: string, mainAngle: number, outputOffset: number, offset = 0) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.drawConstants.center, this.drawConstants.center);\n        const differenceAngle = Math.asin(outputOffset / this.drawConstants.outputStartLength);\n\n        const firstX = this.drawConstants.center + this.drawConstants.outputStartLength * Math.cos(mainAngle + differenceAngle) + offset;\n        const firstY = this.drawConstants.center + this.drawConstants.outputStartLength * Math.sin(mainAngle + differenceAngle) + offset;\n        const endX = firstX + (this.drawConstants.outputLength - this.drawConstants.outputStartLength) * Math.cos(mainAngle);\n        const endY = firstY + (this.drawConstants.outputLength - this.drawConstants.outputStartLength) * Math.sin(mainAngle);\n\n        const gradient = this.ctx.createRadialGradient(this.drawConstants.center, this.drawConstants.center, 0, this.drawConstants.center, this.drawConstants.center, this.drawConstants.outputLength)\n        gradient.addColorStop(0, this.innerColor);\n        gradient.addColorStop(0.6, color);\n\n        this.ctx.arcTo(firstX, firstY, endX, endY, this.drawConstants.outputRadius);\n        this.ctx.lineTo(endX, endY);\n        this.ctx.strokeStyle = gradient;\n        this.ctx.lineWidth = this.drawConstants.outputWidth;\n\n        this.ctx.stroke();\n    }\n}","import { DirectionEnum } from \"../../../../../Models/DirectionEnum\";\nimport { InputChannelModel } from \"./InputChannelModel\";\nimport { MachineDrawer } from \"./MachineDrawer\";\nimport { GetAngleFromDirection } from \"../../../../../Helper/AngleHelper\";\n\nexport class MachineCircleDrawer extends MachineDrawer {\n    protected DrawBody() {\n        this.ctx.beginPath();\n        this.ClearShadowStyle();\n        this.ctx.moveTo(this.drawConstants.center + this.drawConstants.circleRadius, this.drawConstants.center);\n        this.ctx.arc(this.drawConstants.center, this.drawConstants.center, this.drawConstants.circleRadius, 0, Math.PI * 2);\n        this.ctx.fillStyle = this.innerColor;\n        this.ctx.fill();\n    }\n    \n    protected DrawInputOutline(startDirection: DirectionEnum, endDirection: DirectionEnum): void {\n        const localcenter = this.drawConstants.center;\n        const startDirectionAngle = GetAngleFromDirection(startDirection);\n        const startAngle = startDirectionAngle + this.drawConstants.apertureAngle;\n\n        const startInnerX = localcenter + this.drawConstants.circleRadius * Math.cos(startAngle);\n        const startInnerY = localcenter + this.drawConstants.circleRadius * Math.sin(startAngle);\n        const startOuterX = startInnerX + this.drawConstants.armLength * Math.cos(startDirectionAngle + this.drawConstants.armAngle);\n        const startOuterY = startInnerY + this.drawConstants.armLength * Math.sin(startDirectionAngle + this.drawConstants.armAngle);\n\n        const endDirectionAngle = GetAngleFromDirection(endDirection);\n        const endAngle = endDirectionAngle - this.drawConstants.apertureAngle;\n        const endInnerX = localcenter + this.drawConstants.circleRadius * Math.cos(endAngle);\n        const endInnerY = localcenter + this.drawConstants.circleRadius * Math.sin(endAngle);\n\n        const endOuterX = endInnerX + this.drawConstants.armLength * Math.cos(endDirectionAngle - this.drawConstants.armAngle);\n        const endOuterY = endInnerY + this.drawConstants.armLength * Math.sin(endDirectionAngle - this.drawConstants.armAngle);\n\n        this.ctx.beginPath();\n        this.ctx.moveTo(startOuterX, startOuterY);\n        this.ctx.lineTo(startInnerX, startInnerY);\n        this.ctx.arc(localcenter, localcenter, this.drawConstants.circleRadius, startAngle, endAngle);\n        this.ctx.lineTo(endOuterX, endOuterY);\n\n        this.ctx.strokeStyle = this.borderColor;\n        this.ctx.lineWidth = this.drawConstants.borderWidth;\n        this.SetShadowStyle();\n        this.ctx.stroke();\n\n    }\n\n    protected DrawNoInputOutline(): void {\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.drawConstants.center + this.drawConstants.circleRadius, this.drawConstants.center);\n        this.ctx.arc(this.drawConstants.center, this.drawConstants.center, this.drawConstants.circleRadius, 0, Math.PI * 2);\n\n        this.ctx.strokeStyle = this.borderColor;\n        this.SetShadowStyle();\n        this.ctx.lineWidth = this.drawConstants.borderWidth;\n\n        this.ctx.stroke();\n    }\n    protected DrawInputGradient(input: InputChannelModel): void {\n\n        const directionAngle = GetAngleFromDirection(input.Direction);\n        const endAngle = directionAngle - this.drawConstants.apertureAngle;\n\n        const endInnerX = this.drawConstants.center + this.drawConstants.circleRadius * Math.cos(endAngle);\n        const endInnerY = this.drawConstants.center + this.drawConstants.circleRadius * Math.sin(endAngle);\n\n        const endOuterX = endInnerX + this.drawConstants.armLength * Math.cos(directionAngle - this.drawConstants.armAngle);\n        const endOuterY = endInnerY + this.drawConstants.armLength * Math.sin(directionAngle - this.drawConstants.armAngle);\n\n        const startAngle = directionAngle + this.drawConstants.apertureAngle;\n\n        const startInnerX = this.drawConstants.center + this.drawConstants.circleRadius * Math.cos(startAngle);\n        const startInnerY = this.drawConstants.center + this.drawConstants.circleRadius * Math.sin(startAngle);\n\n        const startOuterX = startInnerX + this.drawConstants.armLength * Math.cos(directionAngle + this.drawConstants.armAngle);\n        const startOuterY = startInnerY + this.drawConstants.armLength * Math.sin(directionAngle + this.drawConstants.armAngle);\n\n        this.ctx.beginPath();\n\n        this.ClearShadowStyle();\n        this.ctx.moveTo(endInnerX, endInnerY);\n        const endOuterAngle = Math.atan2(endOuterY - this.drawConstants.center, endOuterX - this.drawConstants.center);\n        const startOuterAngle = Math.atan2(startOuterY - this.drawConstants.center, startOuterX - this.drawConstants.center);\n\n        this.ctx.arc(this.drawConstants.center, this.drawConstants.center, this.drawConstants.circleRadius + this.drawConstants.protrudingArm, endOuterAngle, startOuterAngle);\n        this.ctx.arc(this.drawConstants.center, this.drawConstants.center, this.drawConstants.circleRadius - this.drawConstants.borderWidth * 0.5, startAngle, endAngle, true);\n\n        const grd = this.ctx.createRadialGradient(this.drawConstants.center, this.drawConstants.center, this.drawConstants.circleRadius, this.drawConstants.center, this.drawConstants.center, this.drawConstants.circleRadius + this.drawConstants.protrudingArm);\n\n        if (input.UseMachineColor) {\n            grd.addColorStop(0, this.innerColor);\n        } else {\n            grd.addColorStop(0, input.Channel);\n            grd.addColorStop(0.7, input.Channel);\n            grd.addColorStop(0.8, this.backgroundColor);\n        }\n        grd.addColorStop(1, this.backgroundColor);\n        this.ctx.fillStyle = grd;\n        this.ctx.fill();\n    }\n}","import { DirectionEnum } from \"../../../../../Models/DirectionEnum\";\nimport { DrawModel } from \"./DrawModel\";\nimport { InputChannelModel } from \"./InputChannelModel\";\nimport { MachineDrawer } from \"./MachineDrawer\";\n\n\n\nexport class MachineSquareDrawer extends MachineDrawer {\n    private closeSide: number;\n    private farSide : number;\n    private innerClose : number;\n    private innerFar : number;\n    private armProtrudingClose : number;\n    private armProtrudingFar: number;\n    private armWidthClose : number;\n    private armWidthFar: number;\n\n    constructor(ctx: CanvasRenderingContext2D, props: DrawModel) {\n        super(ctx, props);\n        this.closeSide = this.drawConstants.center - this.drawConstants.halfSquareSize;\n        this.farSide = this.drawConstants.center + this.drawConstants.halfSquareSize;\n        this.innerClose = this.drawConstants.center - 0.5 * this.drawConstants.aperture;\n        this.innerFar = this.drawConstants.center + 0.5 * this.drawConstants.aperture;\n        this.armProtrudingClose = this.closeSide - Math.cos(this.drawConstants.armAngle) * this.drawConstants.armLength;\n        this.armProtrudingFar = this.farSide + Math.cos(this.drawConstants.armAngle) * this.drawConstants.armLength;\n        this.armWidthClose = this.innerClose - Math.sin(this.drawConstants.armAngle) * this.drawConstants.armLength;\n        this.armWidthFar = this.innerFar + Math.sin(this.drawConstants.armAngle) * this.drawConstants.armLength;\n    }\n    protected DrawBody() {\n        this.ctx.beginPath();\n        this.ClearShadowStyle();\n        this.ctx.moveTo(this.drawConstants.center + this.drawConstants.circleRadius, this.drawConstants.center);\n        this.ctx.rect(this.drawConstants.center - this.drawConstants.halfSquareSize, this.drawConstants.center - this.drawConstants.halfSquareSize, this.drawConstants.halfSquareSize * 2, this.drawConstants.halfSquareSize * 2);\n        this.ctx.fillStyle = this.innerColor;\n        this.ctx.fill();\n        this.ctx.beginPath();\n    }\n    protected DrawInputOutline(startDirection: DirectionEnum, endDirection: DirectionEnum): void {\n        this.ctx.beginPath();\n        this.ctx.strokeStyle = this.borderColor;\n        this.SetShadowStyle();\n        this.ctx.lineWidth = this.drawConstants.borderWidth;\n\n        switch (startDirection) {\n            case DirectionEnum.Down:\n                this.ctx.moveTo(this.armWidthFar, this.armProtrudingClose);\n                this.ctx.lineTo(this.innerFar, this.closeSide);\n                break;\n            case DirectionEnum.Left:\n                this.ctx.moveTo(this.armProtrudingFar, this.armWidthFar);\n                this.ctx.lineTo(this.farSide, this.innerFar);\n                break;\n            case DirectionEnum.Up:\n                this.ctx.moveTo(this.armWidthClose, this.armProtrudingFar);\n                this.ctx.lineTo(this.innerClose, this.farSide);\n                break;\n            case DirectionEnum.Right:\n                this.ctx.moveTo(this.armProtrudingClose, this.armWidthClose);\n                this.ctx.lineTo(this.closeSide, this.innerClose);\n                break;\n            default:\n                throw Error(\"Unknown direction\");\n        }\n\n        let currentDirection = startDirection;\n\n        do {\n            switch (currentDirection) {\n                case DirectionEnum.Down:\n                    this.ctx.lineTo(this.farSide, this.closeSide);\n                    break;\n                case DirectionEnum.Left:\n                    this.ctx.lineTo(this.farSide, this.farSide);\n                    break;\n                case DirectionEnum.Up:\n                    this.ctx.lineTo(this.closeSide, this.farSide);\n                    break;\n                case DirectionEnum.Right:\n                    this.ctx.lineTo(this.closeSide, this.closeSide);\n                    break;\n                default:\n                    throw Error(\"Unknown direction\");\n            }\n\n            currentDirection = (currentDirection + 1) % 4;\n        } while (currentDirection !== endDirection);\n\n        switch (endDirection) {\n            case DirectionEnum.Down:\n                this.ctx.lineTo(this.innerClose, this.closeSide);\n                this.ctx.lineTo(this.armWidthClose, this.armProtrudingClose);\n                break;\n            case DirectionEnum.Left:\n                this.ctx.lineTo(this.farSide, this.innerClose);\n                this.ctx.lineTo(this.armProtrudingFar, this.armWidthClose);\n                break;\n            case DirectionEnum.Up:\n                this.ctx.lineTo(this.innerFar, this.farSide);\n                this.ctx.lineTo(this.armWidthFar, this.armProtrudingFar);\n                break;\n            case DirectionEnum.Right:\n                this.ctx.lineTo(this.closeSide, this.innerFar);\n                this.ctx.lineTo(this.armProtrudingClose, this.armWidthFar);\n                break;\n            default:\n                throw Error(\"Unknown direction\");\n        }\n\n        this.ctx.stroke();\n    }\n\n    protected DrawNoInputOutline(): void {\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.drawConstants.center + this.drawConstants.circleRadius, this.drawConstants.center);\n        this.ctx.rect(this.drawConstants.center - this.drawConstants.halfSquareSize, this.drawConstants.center - this.drawConstants.halfSquareSize, this.drawConstants.halfSquareSize * 2, this.drawConstants.halfSquareSize * 2);\n        this.ctx.strokeStyle = this.borderColor;\n        this.SetShadowStyle();\n        this.ctx.lineWidth = this.drawConstants.borderWidth;\n\n        this.ctx.stroke();\n    }\n    protected DrawInputGradient(input: InputChannelModel): void {\n        this.ctx.beginPath();\n        this.ClearShadowStyle();\n        let grd: CanvasGradient;\n        switch (input.Direction) {\n            case DirectionEnum.Down:\n                this.ctx.moveTo(this.innerClose, this.closeSide + 0.4 * this.drawConstants.borderWidth);\n                this.ctx.lineTo(this.armWidthClose, this.armProtrudingClose);\n                this.ctx.lineTo(this.armWidthFar, this.armProtrudingClose);\n                this.ctx.lineTo(this.innerFar, this.closeSide + 0.4 * this.drawConstants.borderWidth);\n                this.ctx.lineTo(this.innerClose, this.closeSide + 0.4 * this.drawConstants.borderWidth);\n                grd = this.ctx.createLinearGradient(this.drawConstants.center, this.closeSide + 0.4 * this.drawConstants.borderWidth, this.drawConstants.center, this.armProtrudingClose);\n                break;\n            case DirectionEnum.Left:\n                this.ctx.moveTo(this.farSide - 0.4 * this.drawConstants.borderWidth, this.innerClose);\n                this.ctx.lineTo(this.armProtrudingFar, this.armWidthClose);\n                this.ctx.lineTo(this.armProtrudingFar, this.armWidthFar);\n                this.ctx.lineTo(this.farSide - 0.4 * this.drawConstants.borderWidth, this.innerFar);\n                this.ctx.lineTo(this.farSide - 0.4 * this.drawConstants.borderWidth, this.innerClose);\n                grd = this.ctx.createLinearGradient(this.farSide - 0.4 * this.drawConstants.borderWidth, this.drawConstants.center, this.armProtrudingFar, this.drawConstants.center);\n                break;\n            case DirectionEnum.Up:\n                this.ctx.moveTo(this.innerFar, this.farSide - 0.4 * this.drawConstants.borderWidth);\n                this.ctx.lineTo(this.armWidthFar, this.armProtrudingFar);\n                this.ctx.lineTo(this.armWidthClose, this.armProtrudingFar);\n                this.ctx.lineTo(this.innerClose, this.farSide - 0.4 * this.drawConstants.borderWidth);\n                this.ctx.lineTo(this.innerFar, this.farSide - 0.4 * this.drawConstants.borderWidth);\n                grd = this.ctx.createLinearGradient(this.drawConstants.center, this.farSide - 0.4 * this.drawConstants.borderWidth, this.drawConstants.center, this.armProtrudingFar);\n                break;\n            case DirectionEnum.Right:\n                this.ctx.moveTo(this.closeSide + 0.4 * this.drawConstants.borderWidth, this.innerFar);\n                this.ctx.lineTo(this.armProtrudingClose, this.armWidthFar);\n                this.ctx.lineTo(this.armProtrudingClose, this.armWidthClose);\n                this.ctx.lineTo(this.closeSide + 0.4 * this.drawConstants.borderWidth, this.innerClose);\n                this.ctx.lineTo(this.closeSide + 0.4 * this.drawConstants.borderWidth, this.innerFar);\n                grd = this.ctx.createLinearGradient(this.closeSide + 0.4 * this.drawConstants.borderWidth, this.drawConstants.center, this.armProtrudingClose, this.drawConstants.center);\n                break;\n            default:\n                throw Error(\"Unknown direction\");\n        }\n\n        if (input.UseMachineColor) {\n            grd.addColorStop(0, this.innerColor);\n        } else {\n            grd.addColorStop(0, input.Channel);\n            grd.addColorStop(0.9, input.Channel);\n            grd.addColorStop(0.9, this.backgroundColor);\n        }\n        grd.addColorStop(1, this.backgroundColor);\n        this.ctx.fillStyle = grd;\n        this.ctx.fill();\n    }\n}","import React, { useRef, useEffect } from \"react\";\nimport { DrawModel } from \"./DrawModel\";\nimport { MachineCircleDrawer } from \"./MachineCircleDrawer\";\nimport { MachineDrawer } from \"./MachineDrawer\";\nimport { MachineSquareDrawer } from \"./MachineSquareDrawer\";\n\nexport const MachineCanvasHolder: React.FC<DrawModel> = (props) => {\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n\n    useEffect(() => {\n        if (canvasRef.current) {\n            const ctx = canvasRef.current.getContext(\"2d\")!;\n            ctx.clearRect(0, 0, props.CellSize, props.CellSize);\n            let drawer: MachineDrawer;\n            if (props.IsDefault) {\n                drawer = new MachineCircleDrawer(ctx, props);\n            } else {\n                drawer = new MachineSquareDrawer(ctx, props);\n            }\n\n            drawer.DrawMachine();\n        }\n    });\n\n    return <div style={{\n        height: props.CellSize,\n        width: props.CellSize,\n        position: \"absolute\"\n    }}>\n        <canvas ref={canvasRef} style={{ position: \"absolute\" }} height={props.CellSize} width={props.CellSize}></canvas>\n    </div>;\n};","import React from \"react\";\nimport { DirectionEnum } from \"../../../../../Models/DirectionEnum\";\nimport { Props } from \"./Props\";\n\nexport class InputChannelClickArea extends React.Component<Props> {\n\n    constructor(props: Props) {\n        super(props);\n        this.onClicked = this.onClicked.bind(this);\n    }\n    public render() {\n\n        const cellSize = this.props.cellSize - 2;\n\n        const channelStyle: React.CSSProperties = {\n            position: \"absolute\",\n            height: cellSize * 0.20,\n            width: cellSize * 0.4,\n            marginLeft: cellSize * 0.3,\n            marginTop: cellSize * 0.05,\n            pointerEvents: \"all\",\n        };\n\n        let rotate: string = \"\";\n        switch (this.props.Direction) {\n            case DirectionEnum.Left:\n                rotate = \"rotate(90deg)\";\n                break;\n            case DirectionEnum.Up:\n                rotate = \"rotate(180deg)\";\n                break;\n            case DirectionEnum.Right:\n                rotate = \"rotate(270deg)\";\n                break;\n        }\n\n        const rotation: React.CSSProperties = {\n            transform: rotate,\n            height: cellSize,\n            width: cellSize,\n            position: \"absolute\",\n            pointerEvents: \"none\"\n        };\n\n        return (\n            <div style={rotation}>\n                <div style={channelStyle} onClick={this.onClicked}></div>\n            </div>\n        );\n    }\n\n    public onClicked(event: React.MouseEvent<HTMLDivElement, MouseEvent>): void {\n        this.props.OnClick(this.props.Direction);\n    }\n}","import React, { Dispatch } from \"react\";\r\nimport { useDrag } from \"react-dnd\";\r\nimport { connect } from \"react-redux\";\r\nimport { MachineStore } from \"../../../../MachineStore/MachineStore\";\r\nimport { ChannelModel } from \"../../../../Models/ChannelModel\";\r\nimport { ChangeChannel, MachineInstanceActionTypes, FixMachine, ChangeInputChannel } from \"../../../../Redux/GameDataReducer/PlayerReducer/GridSetup/MachineInstances/Actions\";\r\nimport { DragItemTypes } from \"../../../DragItemTypes\";\r\nimport { ChannelGroup } from \"./ChannelClickArea/ChannelGroup\";\r\nimport { Props } from \"./Props\";\r\nimport { GetLighterColor } from \"../../../../Helper/ColorHelper\";\r\nimport { MachineCanvasHolder } from \"./MachineDrawer/MachineCanvasHolder\";\r\nimport { DirectionEnum } from \"../../../../Models/DirectionEnum\";\r\nimport { InputChannelModel } from \"./MachineDrawer/InputChannelModel\";\r\nimport { InputChannelClickArea } from \"./InputChannelClickArea/InputChannelClickArea\";\r\nimport * as dc from \"./MachineDrawer/DrawConstants\";\r\nimport { IsDefaultMachine } from \"../../../../MachineStore/IMachine\";\r\nimport { GameData } from \"../../../../Redux/GameDataReducer/GameModel\";\r\nimport { GetActiveMachine, GetActivePlayer } from \"../../../../Helper/StoreHelper\";\r\n\r\nconst MachineInstanceInternal: React.FC<Props> = (props) => {\r\n    const [{ isDragging }, drag, preview] = useDrag({\r\n        item: { type: DragItemTypes.MachineInstance, id: props.MachineInstanceId },\r\n        collect: (monitor) => ({\r\n            isDragging: !!monitor.isDragging(),\r\n        }),\r\n    });\r\n\r\n    const OnClick = () => {\r\n        if (props.MachineInstance.Status !== \"Valid\") {\r\n            props.FixMachine();\r\n        }\r\n    };\r\n\r\n    const api = MachineStore.GetStore().GetMachineType(props.MachineInstance.MachineId).Api;\r\n    const onInputChannelClick = (direction: DirectionEnum) => {\r\n\r\n        const channelIndex = props.MachineInstance.InputChannels.findIndex((ic) => ic.Direction === direction)!;\r\n        const channel = props.MachineInstance.InputChannels[channelIndex];\r\n        const currentIndex = api.InputChannels.indexOf(channel.Channel);\r\n        const newChannel: ChannelModel = {\r\n            Channel: currentIndex === api.InputChannels.length - 1 ? api.InputChannels[0] : api.InputChannels[currentIndex + 1],\r\n            Direction: channel.Direction,\r\n            Status: channel.Status\r\n        };\r\n\r\n        props.ChangeInputChannel(channelIndex, newChannel);\r\n    };\r\n\r\n    const machineStyle = props.MachineStyle ?? MachineStore.GetStore().GetMachineType(props.MachineInstance.MachineId).Style;\r\n\r\n    const hasMultipleInputs = api.InputChannels.length > 1 || props.MachineInstance.InputChannels.some((ic) => ic.Status === \"Exists\" && ic.Channel !== api.InputChannels[0]);\r\n\r\n    const inputChannels: InputChannelModel[] = props.MachineInstance.InputChannels.filter((ic) => ic.Status !== \"DoesNotExist\").map((c) =>\r\n    ({\r\n        UseMachineColor: !hasMultipleInputs,\r\n        ...c\r\n    })\r\n    );\r\n\r\n    const machineSize: React.CSSProperties = { height: props.CellSize, width: props.CellSize, margin: 1 };\r\n\r\n    switch (props.MachineInstance.Status) {\r\n        case \"Deleted\":\r\n            machineSize.borderBottom = props.CellSize / 18 + \"px dotted red\";\r\n            machineSize.boxSizing = \"border-box\";\r\n            machineSize.opacity = 0.4;\r\n            break;\r\n        case \"ChannelsInvalid\":\r\n            machineSize.borderBottom = props.CellSize / 18 + \"px dotted orange\";\r\n            machineSize.boxSizing = \"border-box\";\r\n            break;\r\n    }\r\n\r\n    const outputChannels: ChannelModel[][] = [];\r\n    for (const channel of props.MachineInstance.OutputChannels) {\r\n        const group = outputChannels.find((o) => o[0].Direction === channel.Direction);\r\n        if (group === undefined) {\r\n            outputChannels.push([channel]);\r\n        } else {\r\n            group.push(channel);\r\n        }\r\n    }\r\n\r\n    const machineMargin = props.CellSize * 0.5 - dc.halfSquareFactor * props.CellSize;\r\n\r\n    return (\r\n        <div ref={preview} style={machineSize}>\r\n            {!isDragging && <MachineCanvasHolder\r\n                MachineStyle={machineStyle}\r\n                IsDefault={IsDefaultMachine(props.MachineInstance.MachineId)}\r\n                BackgroundColor={props.BackgroundColor}\r\n                InputChannels={inputChannels}\r\n                OutputChannels={outputChannels}\r\n                MovingOutput={props.MovingOutput !== undefined ? props.MovingOutput : undefined}\r\n                CellSize={props.CellSize}\r\n            />}\r\n            <div style={{ position: \"absolute\", marginLeft: machineMargin, marginTop: machineMargin, height: dc.halfSquareFactor * props.CellSize * 2, width: dc.halfSquareFactor * props.CellSize * 2 }} ref={drag} onClick={OnClick}></div>\r\n            {inputChannels.filter((ic) => !ic.UseMachineColor).map((ic, index) => <InputChannelClickArea key={index} Direction={ic.Direction} OnClick={onInputChannelClick} cellSize={props.CellSize} />)}\r\n            {outputChannels.map((oc, index) => <ChannelGroup key={index} ChannelModels={oc} OnChanged={props.ChangeOwnChannel} MachineInstanceId={props.MachineInstanceId} cellSize={props.CellSize}/>)}\r\n        </div >\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: GameData, ownProps: { MachineInstanceId: number }) => {\r\n    const activeMachine = GetActiveMachine(state);\r\n\r\n    const background = GetLighterColor(activeMachine!.Style.Color, 0.3);\r\n    const MachineInstanceProp = activeMachine!.Setup.MachineInstances.find((mi) => mi.Id === ownProps.MachineInstanceId)!;\r\n    const machineStyle = IsDefaultMachine(MachineInstanceProp.MachineId) ? undefined\r\n        : MachineInstanceProp.Status === \"Deleted\" ? GetActivePlayer(state)!.deletedMachines.find((dm) => dm.Id === MachineInstanceProp.MachineId)!.Style\r\n            : GetActivePlayer(state)!.machines.find((m) => m.Id === MachineInstanceProp.MachineId)!.Style;\r\n    const MovingOutput = state.movingOutput?.machineInstanceId === ownProps.MachineInstanceId ? state.movingOutput : undefined;\r\n\r\n    return {\r\n        MachineInstance: MachineInstanceProp,\r\n        MachineStyle: machineStyle,\r\n        BackgroundColor: background,\r\n        MovingOutput\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<MachineInstanceActionTypes>, ownProps: { MachineInstanceId: number }) => {\r\n\r\n    return {\r\n        ChangeOwnChannel: (channel: ChannelModel, angle?: number) => dispatch(ChangeChannel(ownProps.MachineInstanceId, channel, angle)),\r\n        ChangeChannel: (machineInstanceId: number, channel: ChannelModel, angle?: number) => dispatch(ChangeChannel(machineInstanceId, channel, angle)),\r\n        ChangeInputChannel: (index: number, channel: ChannelModel) => dispatch(ChangeInputChannel(ownProps.MachineInstanceId, index, channel)),\r\n        FixMachine: () => dispatch(FixMachine(ownProps.MachineInstanceId))\r\n    };\r\n};\r\n\r\nexport const MachineInstance = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(MachineInstanceInternal);\r\n","import React from \"react\";\r\nimport { useDrop } from \"react-dnd\";\r\nimport { connect } from \"react-redux\";\r\nimport { AreEqual, CellModel } from \"../../../Models/CellModel\";\r\nimport { DirectionEnum } from \"../../../Models/DirectionEnum\";\r\nimport { AddMachine, MoveMachine, ChangeChannel } from \"../../../Redux/GameDataReducer/PlayerReducer/GridSetup/MachineInstances/Actions\";\r\nimport { DragItemTypes, DraggedOutputChannel } from \"../../DragItemTypes\";\r\nimport { FormatMessage } from \"../../MessageFormatter\";\r\nimport { MachineInstance } from \"./MachineInstance/MachineInstance\";\r\nimport { Props } from \"./Props\";\r\nimport { MachineStore } from \"../../../MachineStore/MachineStore\";\r\nimport { GetAngleFromMonitor } from \"../../../Helper/AngleHelper\";\r\nimport { GameData } from \"../../../Redux/GameDataReducer/GameModel\";\r\nimport { GetActiveMachine, GetActivePlayer, GetCellSize } from \"../../../Helper/StoreHelper\";\r\n\r\nconst CellInternal: React.FC<Props> = (props) => {\r\n\r\n    const [, drop] = useDrop({\r\n        accept: [DragItemTypes.MachineInstance, DragItemTypes.NewMachine, DragItemTypes.OutputChannel],\r\n        drop: (item, monitor) => {\r\n            switch (item.type) {\r\n                case DragItemTypes.MachineInstance:\r\n                    props.OnMovedMachine(monitor.getItem().id, props.cellId);\r\n                    break;\r\n                case DragItemTypes.NewMachine:\r\n                    const itemProps = monitor.getItem() as { id: string };\r\n                    const machineType = MachineStore.GetStore().GetMachineType(itemProps.id);\r\n                    props.OnNewMachine(itemProps.id, machineType.Api, props.cellId);\r\n                    break;\r\n                case DragItemTypes.OutputChannel:\r\n                    const outputItem = monitor.getItem() as DraggedOutputChannel;\r\n                    const angle = GetAngleFromMonitor(monitor, outputItem.offsetX, outputItem.offsetY);\r\n                    if (angle !== undefined) {\r\n                        const adjustedAngle = angle + Math.PI * 2.75;\r\n                        const direction = Math.floor(adjustedAngle / (Math.PI * 0.5)) % 4;\r\n                        props.ChangeChannel(outputItem.machineInstanceId, { Direction: direction, Channel: outputItem.channel.Channel, Status: outputItem.channel.Status }, angle);\r\n                    }\r\n                    break;\r\n            }\r\n        },\r\n    });\r\n\r\n    const style: React.CSSProperties = {\r\n        height: props.smallHeigth ? props.CellSize * 0.625 : props.CellSize,\r\n        width: props.smallWidth ? props.CellSize * 0.625 : props.CellSize,\r\n        border: \"1px solid black\",\r\n        float: \"left\",\r\n        marginTop: -1,\r\n        marginLeft: -1,\r\n        position: \"relative\"\r\n    };\r\n\r\n    const ExitThickness = props.CellSize * 0.2;\r\n\r\n    if (props.Exit !== undefined) {\r\n        switch (props.Exit) {\r\n            case DirectionEnum.Up:\r\n                style.borderRight = \"1px solid black\";\r\n                style.borderBottom = \"1px solid black\";\r\n                style.borderLeft = \"1px solid black\";\r\n                style.borderTop = ExitThickness + \"px solid blue\";\r\n                style.marginTop = -ExitThickness;\r\n                break;\r\n            case DirectionEnum.Down:\r\n                style.borderRight = \"1px solid black\";\r\n                style.borderTop = \"1px solid black\";\r\n                style.borderLeft = \"1px solid black\";\r\n                style.borderBottom = ExitThickness + \"px solid red\";\r\n                style.marginBottom = -ExitThickness + 1;\r\n                break;\r\n            case DirectionEnum.Right:\r\n                style.borderTop = \"1px solid black\";\r\n                style.borderBottom = \"1px solid black\";\r\n                style.borderLeft = \"1px solid black\";\r\n                style.borderRight = ExitThickness + \"px solid green\";\r\n                style.marginRight = -ExitThickness + 1;\r\n                break;\r\n            case DirectionEnum.Left:\r\n                style.borderRight = \"1px solid black\";\r\n                style.borderBottom = \"1px solid black\";\r\n                style.borderTop = \"1px solid black\";\r\n                style.borderLeft = ExitThickness + \"px solid #fff020\";\r\n                style.marginLeft = -ExitThickness;\r\n                break;\r\n        }\r\n    } else {\r\n        style.borderRight = \"1px solid black\";\r\n        style.borderBottom = \"1px solid black\";\r\n        style.borderLeft = \"1px solid black\";\r\n        style.borderTop = \"1px solid black\";\r\n    }\r\n\r\n    let formattedMessage: string | undefined;\r\n    if (props.Message !== undefined) {\r\n        formattedMessage = FormatMessage(props.Message);\r\n    }\r\n\r\n    return (\r\n        <div style={style} ref={drop}>\r\n            {formattedMessage !== undefined && formattedMessage}\r\n            {props.MachineInstanceId !== undefined ? <MachineInstance MachineInstanceId={props.MachineInstanceId} CellSize={props.CellSize - 2} /> : \"\"}\r\n        </div >\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: GameData, ownProps: { cellId: CellModel }) => {\r\n    const activeMachine = GetActiveMachine(state);\r\n    const machineInstance = activeMachine!.Setup.MachineInstances.find((mi) => AreEqual(mi.Cell, ownProps.cellId));\r\n    const exit = activeMachine!.ExitCells.find((ec) => AreEqual(ec.Cell, ownProps.cellId));\r\n    const message = state.messages.find((m) => AreEqual(m.Cell!, ownProps.cellId));\r\n    const CellSize = GetCellSize(state);\r\n\r\n    return {\r\n        Exit: exit === undefined ? undefined : exit.Direction,\r\n        Message: message === undefined ? undefined : message.Content,\r\n        MachineInstanceId: machineInstance === undefined ? undefined : machineInstance.Id,\r\n        CellSize\r\n    };\r\n};\r\n\r\nexport const Cell = connect(\r\n    mapStateToProps,\r\n    {\r\n        OnNewMachine: AddMachine,\r\n        OnMovedMachine: MoveMachine,\r\n        ChangeChannel\r\n    }\r\n\r\n)(CellInternal);","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Cell } from \"./Cell/Cell\";\r\nimport { GetLighterColor } from \"../../Helper/ColorHelper\";\r\nimport { GameData } from \"../../Redux/GameDataReducer/GameModel\";\r\nimport { GetActiveMachine, GetCellSize } from \"../../Helper/StoreHelper\";\r\nimport { MachineStyleModel } from \"../../Models/MachineStyleModel\";\r\n\r\nconst GridInternal: React.FC<{\r\n    Rows: number;\r\n    Columns: number;\r\n    CellSize: number;\r\n    Style: MachineStyleModel;\r\n}> = (props) => {\r\n    const rows = [];\r\n    for (let rowIndex = 0; rowIndex < props.Rows; rowIndex++) {\r\n        const row = [];\r\n        for (let columnIndex = 0; columnIndex < props.Columns; columnIndex++) {\r\n\r\n            row.push(<Cell key={columnIndex} cellId={{ Row: rowIndex, Column: columnIndex }} smallHeigth={rowIndex === 0 || rowIndex === props.Rows - 1} smallWidth={columnIndex === 0 || columnIndex === props.Columns - 1} />);\r\n        }\r\n        rows.push(<div key={rowIndex} style={{ display: \"flex\", flexDirection: \"row\", opacity: 1 }}>{row}</div>);\r\n    }\r\n\r\n    return (\r\n        <div style={{ position: \"absolute\", borderColor: GetLighterColor(props.Style.BorderColor, 0.4), borderWidth: props.CellSize * 0.2, borderStyle: \"solid\", marginBottom: 0 }}>\r\n            <div style={{ display: \"flex\", flexDirection: \"column\", backgroundColor: GetLighterColor(props.Style.Color, 0.3) }}>\r\n                {rows}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nfunction mapStateToProps(state: GameData) {\r\n    const activeMachine = GetActiveMachine(state);\r\n    const CellSize = GetCellSize(state);\r\n    return {\r\n        Rows: activeMachine!.Setup.NumberOfRows,\r\n        Columns: activeMachine!.Setup.NumberOfColumns,\r\n        Style: activeMachine!.Style,\r\n        CellSize\r\n    };\r\n}\r\n\r\nexport const Grid = connect(\r\n    mapStateToProps\r\n)(GridInternal);","export enum OutputStatus {\n    NotChecked,\n    NotFullfilled,\n    Fullfilled,\n    NotMatched\n}","import React from \"react\";\nimport { FormatMessage } from \"../../../MessageFormatter\";\nimport { Props } from \"./Props\";\nimport { OutputStatus } from \"../../../../Models/OutputStatusEnum\";\nimport { ChannelColorEnum } from \"../../../../Models/ChannelColorsEnum\";\n\nexport const MessageDisplay: React.FC<Props> = (props) => {\n    const onContentChanged: ((event: React.ChangeEvent<HTMLInputElement>) => void) = (event: React.ChangeEvent<HTMLInputElement>) => {\n        if (props.OnMessageChanged !== undefined) {\n            props.OnMessageChanged({ Content: event.target.value, Channel: props.Message.Channel });\n        }\n    };\n    const onChannelChanged = (event: React.ChangeEvent<HTMLSelectElement>) => {\n        if (props.OnMessageChanged !== undefined) {\n            props.OnMessageChanged({ Content: props.Message.Content, Channel: event.target.value as ChannelColorEnum });\n        }\n    };\n\n    const style: React.CSSProperties = { display: \"flex\", flexFlow: \"row\", justifyContent: props.Input ? \"flex-start\" : \"flex-end\", marginBottom: 1 };\n    const statusStyle: React.CSSProperties = { display: \"flex\", flexFlow: \"row\" };\n    switch (props.Status) {\n        case OutputStatus.Fullfilled:\n            statusStyle.backgroundColor = \"#d9ffb3\";\n            if (props.Editable) {\n                statusStyle.borderRight = \"solid green\";\n                statusStyle.borderBottom = \"solid green\";\n            }\n            break;\n        case OutputStatus.NotFullfilled:\n            // statusStyle.backgroundColor = \"#ffb3b3\";\n            break;\n        case OutputStatus.NotMatched:\n            statusStyle.border = \"solid red\";\n            statusStyle.backgroundColor = \"#ffb3b3\";\n            break;\n        default:\n            break;\n    }\n\n    return (<div style={style}>\n        <div style={statusStyle}>\n            {props.Input && props.Editable && <button onClick={props.Remove}>-</button>}\n            {props.Input && (props.Editable && props.AllowedInputColors.length > 1 ? <select value={props.Message.Channel} style={{ backgroundColor: props.Message.Channel }} onChange={onChannelChanged}>\n                {props.AllowedInputColors.map((cc, index) => <option value={cc} key={index} style={{ backgroundColor: cc }}></option>)}\n            </select> : <div style={{ backgroundColor: props.Message.Channel, width: 10 }} />)}\n            {props.Editable ?\n                <input value={props.Message.Content} onChange={onContentChanged}></input>\n                :\n                <label>{FormatMessage(props.Message.Content)}</label>}\n            {!props.Input && <div style={{ backgroundColor: props.Message.Channel, width: 10 }} /> }\n        </div>\n    </div>);\n};","import React, { useState } from \"react\";\r\nimport { OrderedMessageModel } from \"../../../Models/OrderedMessageModel\";\r\nimport { OutputStatus } from \"../../../Models/OutputStatusEnum\";\r\nimport { MessageDisplay } from \"./MessageDisplay/MessageDisplay\";\r\nimport { Props } from \"./Props\";\r\nimport { AppStore, AppState } from \"../../../Redux/Store\";\r\nimport { RemoveTest, RemoveInput, UpdateInput, AddInput } from \"../../../Redux/GameDataReducer/Level/Actions\";\r\nimport { connect } from \"react-redux\";\r\nimport { ChannelColorEnum } from \"../../../Models/ChannelColorsEnum\";\r\nimport { Computer } from \"../../../Computing/Computer\";\r\nimport { GetActiveMachine } from \"../../../Helper/StoreHelper\";\r\n\r\nconst TestDisplayInternal: React.FC<Props> = (props) => {\r\n\r\n    const [error, setError] = useState<string | undefined>(undefined);\r\n    const PlayTest = () => {\r\n        setError(undefined);\r\n        const activeMachine = GetActiveMachine(AppState());\r\n\r\n        if (activeMachine !== undefined) {\r\n            const computer = new Computer(activeMachine.Setup, true);\r\n            computer.RunComputation(props.Test.id, AppStore).catch((reason) => {\r\n                setError(reason.toString());\r\n            });\r\n        }\r\n    };\r\n\r\n    const inputs = props.Test.inputs;\r\n    const outputs = props.Test.expectedOutputs;\r\n    let messages: JSX.Element[] = [];\r\n    let index = 0;\r\n\r\n    for (let i = 0; i < inputs.length; i++) {\r\n        messages.push(\r\n            <div key={index++} style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\" }}>\r\n                <MessageDisplay Message={inputs[i]} Input={true} Status={OutputStatus.NotChecked} Editable={props.Test.editable} AllowedInputColors={[ChannelColorEnum.Green, ChannelColorEnum.Blue, ChannelColorEnum.Red, ChannelColorEnum.Yellow]} Remove={() => props.RemoveInput(props.Test.id, i)} OnMessageChanged={(message) => props.UpdateInput({ ...message, Order: i }, props.Test.id)} />\r\n            </div>\r\n        );\r\n        const expectedOutputs = outputs.filter((o) => o.Order === i);\r\n        let actuals: OrderedMessageModel[] | undefined;\r\n\r\n        if (props.Test.actualOutputs !== undefined) {\r\n            actuals = props.Test.actualOutputs.filter((o) => o.Order === i);\r\n        }\r\n\r\n        for (let j = 0; j < expectedOutputs.length; j++) {\r\n            const expected = expectedOutputs[j];\r\n            let valid = OutputStatus.NotChecked;\r\n            if (actuals !== undefined) {\r\n                const indexActual = (actuals.findIndex((o) => o.Channel === expected.Channel && o.Content === expected.Content));\r\n                if (indexActual > -1) {\r\n                    valid = OutputStatus.Fullfilled;\r\n                    actuals.splice(indexActual, 1);\r\n                } else {\r\n                    valid = OutputStatus.NotFullfilled;\r\n                }\r\n            }\r\n\r\n            /* eslint-disable */\r\n            messages = messages.concat(<MessageDisplay Message={expectedOutputs[j]} Input={false} key={index++} Status={valid} Editable={props.Test.editable} AllowedInputColors={[ChannelColorEnum.Green, ChannelColorEnum.Blue, ChannelColorEnum.Red, ChannelColorEnum.Yellow]}/>);\r\n        }\r\n\r\n        if (actuals !== undefined) {\r\n            messages = messages.concat(actuals.map((o) => <MessageDisplay Message={o} Input={false} key={index++} Status={props.Test.editable ? OutputStatus.NotFullfilled : OutputStatus.NotMatched} AllowedInputColors={[ChannelColorEnum.Green]} Editable={false} />));\r\n        }\r\n    }\r\n    /* eslint-enable */\r\n\r\n    const style: React.CSSProperties = { display: \"flex\", flexDirection: \"row\", borderBottom: \"solid 0.5px\", marginTop: 5 };\r\n    const verticalStyle: React.CSSProperties = { display: \"flex\", flexDirection: \"column\", flexGrow: 1 };\r\n\r\n    return (\r\n        <div style={style}>\r\n            {props.Test.editable && <button onClick={() => props.RemoveTest(props.Test.id)}>-</button>}\r\n            <button onClick={PlayTest}>Play</button>\r\n            <div style={verticalStyle}>\r\n                {error !== undefined && <div style={{ color: \"red\" }}>\r\n                    <label>{error}</label>\r\n                </div>}\r\n                {messages}\r\n                {props.Test.editable && <button style={{ alignSelf: \"start\" }} onClick={() => props.AddInput(props.Test.id)}>+</button>}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const TestDisplay = connect(\r\n    undefined,\r\n    { RemoveTest, RemoveInput, UpdateInput, AddInput }\r\n)(TestDisplayInternal);","import React from \"react\";\r\nimport { Props } from \"./Props\";\r\nimport { TestDisplay } from \"./TestDisplay/TestDisplay\";\r\nimport { connect } from \"react-redux\";\r\nimport { AddTest } from \"../../Redux/GameDataReducer/Level/Actions\";\r\nimport { SwitchScreen } from \"../../Redux/GameDataReducer/Actions\";\r\nimport { GameData } from \"../../Redux/GameDataReducer/GameModel\";\r\nimport { GetActiveMachine, GetActivePlayer } from \"../../Helper/StoreHelper\";\r\nimport { LevelState } from \"../../Redux/GameDataReducer/PlayerReducer/LevelData\";\r\nimport { AppState, AppStore } from \"../../Redux/Store\";\r\nimport { Computer } from \"../../Computing/Computer\";\r\n\r\nconst LevelDisplayInternal: React.FC<Props> = (props) => {\r\n\r\n    const tests = props.Level.tests.map((t, index) => <TestDisplay Test={t} key={index} />);\r\n\r\n    async function PlayAll() {\r\n        const activeMachine = GetActiveMachine(AppState());\r\n\r\n        if (activeMachine !== undefined) {\r\n            for (let test of props.Level.tests) {\r\n                const computer = new Computer(activeMachine.Setup, true);\r\n                const result = await computer.RunComputation(test.id, AppStore).catch((reason) => {\r\n                    return false;\r\n                });\r\n\r\n                if (result === false) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <b>{props.Level.name}</b>\r\n                <br />\r\n                <i>{props.Level.description}</i>\r\n            </div>\r\n            {tests}\r\n            {props.Level.id === \"12\" && <><button onClick={props.AddTest}>Add custom test</button><br /></>}\r\n            <button onClick={PlayAll}>Play all tests</button><br />\r\n\r\n            {props.Status === LevelState.Completed &&\r\n                <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\", marginTop: 10 }} >\r\n                    <b style={{ color: \"green\" }}>Level completed!</b>\r\n                    <button onClick={() => props.SwitchScreen(\"levelSelect\")}>Select next level</button>\r\n                </div>\r\n            }\r\n            { props.Status === LevelState.NonValidMachineUsed && <b style={{ color: \"red\" }}>Machine used that is not allowed this level</b>}\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: GameData) => {\r\n    return {\r\n        Level: state.activeLevel!,\r\n        Status: GetActivePlayer(state)!.levelData.find((l) => l.Id === state.activeLevel!.id)!.State\r\n    };\r\n};\r\n\r\nexport const LevelDisplay = connect(\r\n    mapStateToProps,\r\n    { AddTest, SwitchScreen }\r\n)(LevelDisplayInternal);","import React from \"react\";\nimport { Constants } from \"../../../Constants\";\nimport { Props } from \"./Props\";\nimport { GetDirectedChannelSet } from \"../../../../Helper/NewChannelSet\";\nimport { MachineCanvasHolder } from \"../../../Grid/Cell/MachineInstance/MachineDrawer/MachineCanvasHolder\";\n\nconst size = Constants.CellSize * 0.33;\nexport const MachineDisplay: React.FC<Props> = (props) => {\n\n    const { inputChannels, outputChannels } = GetDirectedChannelSet(props.MachineType.Api);\n    \n    return (\n        <div style={{display:\"flex\"}}>\n            <div style={{height:size , width: size}}>\n                <MachineCanvasHolder\n                    MachineStyle={props.MachineType.Style}\n                    IsDefault={props.IsDefault}\n                    BackgroundColor={\"White\"}\n                    InputChannels={inputChannels}\n                    OutputChannels={outputChannels}\n                    CellSize={size}\n                />\n            </div>\n            <label>{props.MachineType.Style.Name}</label>\n        </div>);\n};\n","import { GridSetupActionTypes } from \"./GridSetup/Actions\";\r\n\r\ninterface AddNewMachineActionType {\r\n    type: \"AddNewMachineActionType\";\r\n}\r\n\r\nexport function AddNewMachine(): CustomMachinesActionTypes {\r\n    return {\r\n        type: \"AddNewMachineActionType\",\r\n    };\r\n}\r\n\r\ninterface DeleteMachineActionType {\r\n    type: \"DeleteMachineActionType\";\r\n    machineId: string;\r\n}\r\n\r\nexport function DeleteMachine(machineId: string): CustomMachinesActionTypes {\r\n    return {\r\n        type: \"DeleteMachineActionType\",\r\n        machineId\r\n    };\r\n}\r\n\r\ninterface LoadCustomMachineActionType {\r\n    type: \"LoadCustomMachineActionType\";\r\n    machineId: string;\r\n}\r\n\r\nexport function LoadCustomMachine(machineId: string): CustomMachinesActionTypes {\r\n    return {\r\n        type: \"LoadCustomMachineActionType\",\r\n        machineId\r\n    };\r\n}\r\n\r\ninterface ChangeCellSizeActionType {\r\n    type: \"ChangeCellSizeActionType\";\r\n    cellSize: number;\r\n}\r\n\r\nexport function ChangeCellSize(cellSize: number): ChangeCellSizeActionType {\r\n    return {\r\n        type: \"ChangeCellSizeActionType\",\r\n        cellSize\r\n    };\r\n}\r\n\r\nexport type CustomMachinesActionTypes = AddNewMachineActionType\r\n    | LoadCustomMachineActionType\r\n    | DeleteMachineActionType\r\n    | GridSetupActionTypes\r\n    | ChangeCellSizeActionType;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useDrag } from \"react-dnd\";\r\nimport { DraggedNewMachine, DragItemTypes } from \"../../DragItemTypes\";\r\nimport { MachineDisplay } from \"./MachineDisplay/MachineDisplay\";\r\nimport { MachineStore } from \"../../../MachineStore/MachineStore\";\r\nimport { LoadCustomMachine, DeleteMachine } from \"../../../Redux/GameDataReducer/PlayerReducer/Actions\";\r\nimport { connect } from \"react-redux\";\r\nimport { Constants } from \"../../Constants\";\r\nimport { GameData } from \"../../../Redux/GameDataReducer/GameModel\";\r\nimport { IsDefaultMachine } from \"../../../MachineStore/IMachine\";\r\nimport { GetActivePlayer } from \"../../../Helper/StoreHelper\";\r\nimport { getEmptyImage } from \"react-dnd-html5-backend\";\r\nimport { IMachineType } from \"../../../MachineStore/IMachineType\";\r\n\r\nconst StoredMachineInternal: React.FC<{\r\n    machine: string;\r\n    LoadCustomMachine: typeof LoadCustomMachine;\r\n    DeleteMachine: typeof DeleteMachine;\r\n    status: \"Valid\" | \"Invalid\";\r\n    machineType: IMachineType; \r\n}> = (props) => {\r\n    const [, drag, preview] = useDrag<DraggedNewMachine, unknown, unknown>({\r\n        item: { type: DragItemTypes.NewMachine, id: props.machine },\r\n        collect: (monitor) => ({\r\n            isDragging: !!monitor.isDragging(),\r\n        }),\r\n    });\r\n    const [showMenu, changeShow] = useState(false);\r\n    useEffect(() => {\r\n        preview(getEmptyImage(), { captureDraggingState: true })\r\n    }, [preview])\r\n\r\n    const isDefault = IsDefaultMachine(props.machine);\r\n    const machineStyle: React.CSSProperties = props.status === \"Invalid\" ? { borderBottom: Constants.CellSize / 18 + \"px dotted orange\", boxSizing: \"border-box\" } : {};\r\n\r\n    return (\r\n        <div ref={drag} title={props.machineType.Style.Description} onClick={() => changeShow(!showMenu)}>\r\n            <div style={machineStyle}>\r\n                <MachineDisplay MachineType={props.machineType} IsDefault={isDefault} />\r\n            </div>\r\n            {!isDefault && showMenu && <div style={{ display: \"flex\" }}>\r\n                <button onClick={(event) => props.LoadCustomMachine(props.machine)}>Edit</button>\r\n                <button onClick={(event) => {\r\n                    props.DeleteMachine(props.machine);\r\n                }}>Delete</button>\r\n            </div>}\r\n        </div>);\r\n};\r\n\r\nconst mapStateToProps = (state: GameData, ownProps: { machine: string }) => {\r\n    return {\r\n        status: IsDefaultMachine(ownProps.machine) ? \"Valid\" : GetActivePlayer(state)!.machines.find((m) => m.Id === ownProps.machine)!.Status,\r\n        machineType: MachineStore.GetStore().GetMachineType(ownProps.machine)\r\n    };\r\n};\r\n\r\nexport const StoredMachine = connect(\r\n    mapStateToProps,\r\n    {\r\n        LoadCustomMachine, DeleteMachine\r\n    }\r\n)(StoredMachineInternal);","import React from \"react\";\nimport { Props } from \"./Props\";\nimport { StoredMachine } from \"./StoredMachine/StoredMachine\";\nimport { AddNewMachine } from \"../../Redux/GameDataReducer/PlayerReducer/Actions\";\nimport { connect } from \"react-redux\";\nimport { MachineStore } from \"../../MachineStore/MachineStore\";\nimport { GameData } from \"../../Redux/GameDataReducer/GameModel\";\nimport { GetActiveMachine, GetActivePlayer } from \"../../Helper/StoreHelper\";\nimport { IsStartMachine, IsDefaultMachine } from \"../../MachineStore/IMachine\";\n\nconst MachineCollectionInternal: React.FC<Props> = (props) => {\n\n    const storedMachines = props.allowedMachines.map((m) => <div key={m}><StoredMachine machine={m} /></div>);\n\n    return (\n        <div style={{ overflow: \"auto\", height: props.height, position: \"absolute\" }}>\n            <button onClick={props.AddNewMachine}>Create new machine</button>\n            {storedMachines}\n        </div>\n    );\n};\n\nconst mapStateToProps = (state: GameData) => {\n    const store = MachineStore.GetStore();\n    const machines = store.GetAllMachines();\n    let allowedMachines: string[] = [];\n    const disallowedMachines: string[] = [];\n    const allowedStartMachines: string[] = [];\n\n    for (const machine of machines) {\n        if (state.activeLevel!.allowedMachines.some((am) => machine === am)) {\n            if (IsStartMachine(machine)) {\n                allowedStartMachines.push(machine);\n            }\n            else {\n                allowedMachines.push(machine);\n            }\n        } else {\n            disallowedMachines.push(machine);\n        }\n    }\n\n    const activeMachine = GetActiveMachine(state);\n    if (activeMachine !== undefined) {\n        const usedStartMachines = activeMachine.Setup.MachineInstances.filter((m) => IsStartMachine(m.MachineId));\n\n        const nextStartMachine = allowedStartMachines.find((m) => !usedStartMachines.some((s) => s.MachineId === m));\n        if (nextStartMachine !== undefined) {\n            allowedMachines = [nextStartMachine, ...allowedMachines];\n        }\n    }\n\n    const allowedCustomMachines: string[] = GetActivePlayer(state)!.machines.filter((customMachine) => !customMachine.DependingOn.some((dm) => IsDefaultMachine(dm) && disallowedMachines.some((dis) => dis === dm))).map((cm) => cm.Id);\n    allowedMachines = allowedMachines.concat(allowedCustomMachines);\n\n    return {\n        allowedMachines\n    };\n};\n\nexport const MachineCollection = connect(\n    mapStateToProps,\n    { AddNewMachine }\n)(MachineCollectionInternal);","export function StopPropagation(event: React.MouseEvent<HTMLDivElement, MouseEvent>): void{\r\n    event.stopPropagation();\r\n}","import React, { useState } from \"react\";\r\nimport { ChangeCellSize } from \"../../../Redux/GameDataReducer/PlayerReducer/Actions\";\r\nimport { connect } from \"react-redux\";\r\nimport { IMachineType } from \"../../../MachineStore/IMachineType\";\r\nimport { GetDirectedChannelSet } from \"../../../Helper/NewChannelSet\";\r\nimport { MachineCanvasHolder } from \"../../Grid/Cell/MachineInstance/MachineDrawer/MachineCanvasHolder\";\r\nimport { GetActiveMachine, GetActivePlayer, GetCellSize } from \"../../../Helper/StoreHelper\";\r\nimport { GameData } from \"../../../Redux/GameDataReducer/GameModel\";\r\nimport { GetLighterColor, GetRandomColor } from \"../../../Helper/ColorHelper\";\r\nimport { MachineApi } from \"../../../Models/MachineApi\";\r\nimport { ChannelColorEnum } from \"../../../Models/ChannelColorsEnum\";\r\nimport { MachineStyleModel } from \"../../../Models/MachineStyleModel\";\r\n\r\nconst ChangeSizeInternal: React.FC<{ MachineType: IMachineType | undefined; CellSize: number; ChangeCellSize: typeof ChangeCellSize; Close(): void }> = (props) => {\r\n\r\n    const [size, setSize] = useState(props.CellSize);\r\n    const [borderColor] = useState(GetRandomColor());\r\n    const [backgroundColor] = useState(GetLighterColor(GetRandomColor(), 0.3));\r\n\r\n    function SizeChanged(newSize: number) {\r\n        props.ChangeCellSize(newSize);\r\n        setSize(newSize);\r\n    }\r\n\r\n    const api: MachineApi = props.MachineType?.Api ?? { OutputChannels: [ChannelColorEnum.Green], InputChannels: [ChannelColorEnum.Green] };\r\n    const style: MachineStyleModel = props.MachineType?.Style ?? { BorderColor: \"red\", Color: \"green\", Name: \"Dummy\", Description: \"dummy\" }\r\n    const channels = GetDirectedChannelSet(api);\r\n    return (\r\n        <div style={{ margin: 10, width: 500, borderColor, backgroundColor, borderWidth: 20, borderStyle: \"solid\", padding: 30 }}>\r\n            <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                <div style={{ height: props.CellSize, width: props.CellSize, alignSelf: \"center\" }}>\r\n                    <MachineCanvasHolder MachineStyle={style}\r\n                        IsDefault={false}\r\n                        BackgroundColor={backgroundColor}\r\n                        InputChannels={channels.inputChannels}\r\n                        OutputChannels={channels.outputChannels}\r\n                        MovingOutput={undefined}\r\n                        CellSize={props.CellSize} />\r\n                </div>\r\n                <input type=\"range\" min=\"10\" max=\"200\" onChange={(event) => SizeChanged(Number(event.currentTarget.value))} value={size} />\r\n                {size}\r\n            </div>\r\n            <button className=\"startMenu\" onClick={props.Close}>Close</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: GameData) => {\r\n    const activeMachine = GetActiveMachine(state);\r\n    const cellSize = GetCellSize(state);\r\n    return ({\r\n        MachineType: activeMachine,\r\n        CellSize: cellSize\r\n    });\r\n};\r\n\r\nexport const ChangeSizeComponent = connect(\r\n    mapStateToProps,\r\n    { ChangeCellSize }\r\n)(ChangeSizeInternal);\r\n","import React, { useState } from \"react\";\r\nimport { SetName, SetDescription, SetColor, SetBorderColor } from \"../../../../Redux/GameDataReducer/PlayerReducer/GridSetup/Actions\";\r\nimport { Props } from \"./Props\";\r\nimport { connect } from \"react-redux\";\r\nimport { GameData } from \"../../../../Redux/GameDataReducer/GameModel\";\r\nimport { GetActiveMachine, GetCellSize } from \"../../../../Helper/StoreHelper\";\r\nimport { MachineCanvasHolder } from \"../../../Grid/Cell/MachineInstance/MachineDrawer/MachineCanvasHolder\";\r\nimport { GetDirectedChannelSet } from \"../../../../Helper/NewChannelSet\";\r\nimport { GetLighterColor, GetRandomColor } from \"../../../../Helper/ColorHelper\";\r\n\r\nconst EditMachineInternal: React.FC<Props> = (props) => {\r\n    const [color, setColor] = useState<string>(props.MachineType.Style.Color);\r\n    const [borderColor, setBorderColor] = useState<string>(props.MachineType.Style.BorderColor);\r\n    const [dialogBorderColor] = useState(GetRandomColor());\r\n    const [backgroundColor] = useState(GetLighterColor(GetRandomColor(), 0.3));\r\n\r\n    function colorChanged(color: string): void {\r\n        setColor(color);\r\n        props.SetColor(color);\r\n    }\r\n\r\n    function borderChanged(borderColor: string): void {\r\n        setBorderColor(borderColor);\r\n        props.SetBorderColor(borderColor);\r\n    }\r\n\r\n    const channels = GetDirectedChannelSet(props.MachineType.Api);\r\n    return (\r\n        <div style={{ margin: 10, width: 500, borderColor: dialogBorderColor, backgroundColor, borderWidth: 20, borderStyle: \"solid\", padding: 30 }}>\r\n            {props.MachineType !== undefined &&\r\n                <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                    <div style={{ height: props.CellSize, width: props.CellSize, alignSelf: \"center\" }}>\r\n                        <MachineCanvasHolder MachineStyle={props.MachineType.Style}\r\n                            IsDefault={false}\r\n                            BackgroundColor={backgroundColor}\r\n                            InputChannels={channels.inputChannels}\r\n                            OutputChannels={channels.outputChannels}\r\n                            MovingOutput={undefined}\r\n                            CellSize={props.CellSize} />\r\n                    </div>\r\n                    <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\" }}>\r\n                        <label>Name</label>\r\n                        <input onChange={(event) => props.SetName(event.target.value)} value={props.MachineType.Style.Name}></input>\r\n                    </div>\r\n                    <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\" }}>\r\n                        <label>Color</label>\r\n                        <input onChange={(event) => colorChanged(event.target.value)} value={color}></input>\r\n                    </div>\r\n                    <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\" }}>\r\n                        <label>BorderColor</label>\r\n                        <input onChange={(event) => borderChanged(event.target.value)} value={borderColor}></input>\r\n                    </div>\r\n                    <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\" }}>\r\n                        <label>Description</label>\r\n                        <textarea cols={50} rows={5} onChange={(event) => props.SetDescription(event.target.value)} value={props.MachineType.Style.Description}></textarea>\r\n                    </div>\r\n                </div>}\r\n                <button className=\"startMenu\" onClick={props.Close}>Close</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: GameData) => {\r\n    const activeMachine = GetActiveMachine(state);\r\n    const cellSize = GetCellSize(state);\r\n    return ({\r\n        MachineType: activeMachine!,\r\n        CellSize: cellSize\r\n    });\r\n};\r\n\r\nexport const EditMachine = connect(\r\n    mapStateToProps,\r\n    { SetName, SetDescription, SetColor, SetBorderColor }\r\n)(EditMachineInternal);\r\n","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { StopPropagation } from \"../../../Helper/ClickHelper\";\r\nimport { GetLighterColor, GetRandomColor } from \"../../../Helper/ColorHelper\";\r\nimport { GetActiveMachine } from \"../../../Helper/StoreHelper\";\r\nimport { SwitchScreen } from \"../../../Redux/GameDataReducer/Actions\";\r\nimport { GameData } from \"../../../Redux/GameDataReducer/GameModel\";\r\nimport { ChangeSizeComponent } from \"./ChangeSizeComponent\";\r\nimport { EditMachine } from \"./EditMachine/EditMachine\";\r\n\r\n\r\nconst GameMenuInternal: React.FC<{ SwitchScreen: typeof SwitchScreen; Close(): void, hasActiveMachine: boolean }> = (props) => {\r\n\r\n    const [dialog, setdialog] = useState<\"none\" | \"editMachine\" | \"changeCellSize\">(\"none\");\r\n\r\n    const [borderColor] = useState(GetRandomColor());\r\n    const [backgroundColor] = useState(GetLighterColor(GetRandomColor(), 0.3));\r\n\r\n    return (\r\n        <div style={{ display: \"flex\", flexDirection: \"row\", alignItems: \"center\" }} onClick={StopPropagation}>\r\n            {dialog !== \"none\" && <div style={{ width: 220 }} ></div>}\r\n            <div style={{ borderColor, backgroundColor, borderWidth: 20, borderStyle: \"solid\", padding: 30, display: \"flex\", flexDirection: \"column\" }}>\r\n                <button className=\"startMenu\" onClick={() => props.SwitchScreen(\"startMenu\")}>Back to menu</button>\r\n                {props.hasActiveMachine && <button className=\"startMenu\" onClick={() => setdialog(\"editMachine\")}>Edit machine style</button>}\r\n                <button className=\"startMenu\" onClick={() => setdialog(\"changeCellSize\")}>Change cell size</button>\r\n\r\n                <button className=\"startMenu\" onClick={props.Close}>Continue playing</button>\r\n            </div>\r\n            {dialog === \"editMachine\" && <EditMachine Close={() => setdialog(\"none\")}/>}\r\n            {dialog === \"changeCellSize\" && <ChangeSizeComponent Close={() => setdialog(\"none\")}/>}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nfunction mapStateToProps(state: GameData){\r\n    const activeMachine = GetActiveMachine(state);\r\n    return {hasActiveMachine: activeMachine !== undefined}\r\n}\r\n\r\nexport const GameMenu = connect(\r\n    mapStateToProps,\r\n    { SwitchScreen }\r\n)(GameMenuInternal);\r\n","import React from \"react\";\r\nimport { XYCoord } from \"react-dnd\";\r\nimport { connect } from \"react-redux\";\r\nimport { GetDirectedChannelSet } from \"../../../Helper/NewChannelSet\";\r\nimport { GetCellSize } from \"../../../Helper/StoreHelper\";\r\nimport { IsDefaultMachine } from \"../../../MachineStore/IMachine\";\r\nimport { MachineStore } from \"../../../MachineStore/MachineStore\";\r\nimport { GameData } from \"../../../Redux/GameDataReducer/GameModel\";\r\nimport { MachineCanvasHolder } from \"../../Grid/Cell/MachineInstance/MachineDrawer/MachineCanvasHolder\";\r\n\r\nconst DraggedMachineInternal: React.FC<{ machineId: string, offset: XYCoord, cellSize: number }> = (props) => {\r\n    const machineType = MachineStore.GetStore().GetMachineType(props.machineId);\r\n    const { inputChannels, outputChannels } = GetDirectedChannelSet(machineType.Api);\r\n    const transform = `translate(${props.offset.x - props.cellSize / 2}px, ${props.offset.y - props.cellSize / 2}px)`\r\n    return <div style={{ position: \"absolute\", transform, pointerEvents: \"none\" }}>\r\n        <MachineCanvasHolder InputChannels={inputChannels}\r\n            OutputChannels={outputChannels}\r\n            MachineStyle={machineType.Style}\r\n            BackgroundColor={\"white\"}\r\n            CellSize={props.cellSize}\r\n            IsDefault={IsDefaultMachine(props.machineId)} />\r\n    </div>\r\n};\r\n\r\nconst mapStateToProps = (state: GameData) => {\r\n\r\n    return {\r\n        cellSize: GetCellSize(state)\r\n    };\r\n};\r\nexport const DraggedMachine = connect(\r\n    mapStateToProps,\r\n    {}\r\n)(DraggedMachineInternal);","import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { GameData } from \"../../Redux/GameDataReducer/GameModel\";\r\nimport { GetActiveMachine, GetActivePlayer, GetCellSize } from \"../../Helper/StoreHelper\";\r\nimport { useDrag, useDragLayer, XYCoord } from \"react-dnd\";\r\nimport { DragItemTypes } from \"../DragItemTypes\";\r\nimport { getEmptyImage } from \"react-dnd-html5-backend\";\r\n\r\nconst MovingElementInternal: React.FC<{\r\n    Rows: number;\r\n    Columns: number;\r\n    CellSize: number;\r\n    WindowHeight: number;\r\n    WindowWidth: number; \r\n    children?: React.ReactNode;\r\n}> = (props) => {\r\n    const calculatedHeight = props.CellSize * (props.Rows - .35);\r\n    const calculatedWidth = props.CellSize * (props.Columns - 0.35);\r\n\r\n    const [leftStart, setLeftStart] = useState((props.WindowWidth - calculatedWidth) / 2);\r\n    const [topStart, setTopStart] = useState((props.WindowHeight - calculatedHeight) / 2);\r\n    const [finalOffset, setFinalOffset] = useState<XYCoord>({ x: 0, y: 0 });\r\n    const [{ isDragging }, drag, preview] = useDrag({\r\n        item: { type: DragItemTypes.Grid },\r\n        end: (result, monitor) => {\r\n            const offSet = monitor.getDifferenceFromInitialOffset();\r\n            if (offSet !== null) {\r\n                setFinalOffset(offSet);\r\n            }\r\n        },\r\n        collect: (monitor) => ({ isDragging: monitor.isDragging() })\r\n    });\r\n\r\n    useEffect(() => {\r\n        setLeftStart((l) => l + finalOffset.x);\r\n        setTopStart((t) => t + finalOffset.y);\r\n    }, [finalOffset])\r\n\r\n    const offSet = useDragLayer((monitor) => {\r\n        if (monitor.getItemType() === DragItemTypes.Grid) {\r\n            const offSet = monitor.getDifferenceFromInitialOffset();\r\n            if (offSet !== null) {\r\n                return offSet;\r\n            } else {\r\n                return undefined;\r\n            }\r\n        }\r\n    });\r\n\r\n    useEffect(() => {\r\n        preview(getEmptyImage(), { captureDraggingState: true })\r\n    }, [preview])\r\n\r\n    const left = isDragging && offSet !== undefined ? leftStart + offSet.x : leftStart;\r\n    const top = isDragging && offSet !== undefined ? topStart + offSet.y : topStart;\r\n\r\n    return (\r\n        <div ref={drag} style={{ position: \"absolute\", top, left, height: calculatedHeight, width: calculatedWidth }}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nfunction mapStateToProps(state: GameData) {\r\n    const activeMachine = GetActiveMachine(state);\r\n    const CellSize = GetCellSize(state);\r\n    return {\r\n        Rows: activeMachine!.Setup.NumberOfRows,\r\n        Columns: activeMachine!.Setup.NumberOfColumns,\r\n        Style: activeMachine!.Style,\r\n        CellSize\r\n    };\r\n}\r\n\r\nexport const MovingElement = connect(\r\n    mapStateToProps\r\n)(MovingElementInternal);","import React, { useEffect, useState } from \"react\";\nimport { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\nimport { Dashboard } from \"../Dashboard/Dashboard\";\nimport { Grid } from \"../Grid/Grid\";\nimport { LevelDisplay } from \"../LevelDisplay/LevelDisplay\";\nimport { MachineCollection } from \"../MachineCollection/MachineCollection\";\nimport { Computer } from \"../../Computing/Computer\";\nimport { AddNewMachine } from \"../../Redux/GameDataReducer/PlayerReducer/Actions\";\nimport { RemoveMachine } from \"../../Redux/GameDataReducer/PlayerReducer/GridSetup/MachineInstances/Actions\";\nimport { connect } from \"react-redux\";\nimport { Props } from \"./Props\";\nimport { ClearMessages } from \"../../Redux/GameDataReducer/PlayerReducer/GridSetup/Actions\";\nimport { GetActiveMachine } from \"../../Helper/StoreHelper\";\nimport { GameData } from \"../../Redux/GameDataReducer/GameModel\";\nimport { useDragLayer, useDrop } from \"react-dnd\";\nimport { DraggedNewMachine, DraggedOutputChannel, DragItemTypes } from \"../DragItemTypes\";\nimport { GetAngleFromMonitor } from \"../../Helper/AngleHelper\";\nimport { SetMovingOutput } from \"../../Redux/GameDataReducer/Actions\";\nimport { GameMenu } from \"./GameMenu/GameMenu\";\nimport { Constants } from \"../Constants\";\nimport { DraggedMachine } from \"../MachineCollection/DraggedMachine/DraggedMachine\";\nimport { MovingElement } from \"../Grid/MovingElement\";\n\nconst GameInternal: React.FC<Props> = (props) => {\n    const [menu, setMenu] = useState<\"none\" | \"options\">(\"none\");\n\n    const [height, setHeight] = useState(window.innerHeight);\n    const [width, setWidth] = useState(window.innerWidth);\n\n    useEffect(() => {\n        document.addEventListener(\"keyup\", handleKeyPress, false);\n        window.addEventListener(\"resize\", handleResize);\n        return () => {\n            document.removeEventListener(\"keyup\", handleKeyPress, false);\n            window.removeEventListener(\"resize\", handleResize, false);\n\n        }\n    })\n\n    const [, drop] = useDrop({\n        accept: [DragItemTypes.MachineInstance],\n        drop: (item, monitor) => {\n            if (monitor.isOver()) {\n                switch (item.type) {\n                    case DragItemTypes.MachineInstance:\n                        props.RemoveMachine(monitor.getItem().id);\n                        break;\n                }\n            }\n        },\n    });\n\n    const dragPreviewElement = useDragLayer((monitor) => {\n        switch (monitor.getItemType()) {\n            case DragItemTypes.OutputChannel:\n\n                const outputItem: DraggedOutputChannel = monitor.getItem() as DraggedOutputChannel;\n                const draggedOutputAngle = GetAngleFromMonitor(monitor, outputItem.offsetX, outputItem.offsetY);\n                if (draggedOutputAngle !== undefined) {\n                    props.SetMovingOutput({ angle: draggedOutputAngle, ...outputItem });\n                }\n                break;\n            case DragItemTypes.NewMachine:\n                if (monitor.isDragging()) {\n                    const offset = monitor.getClientOffset();\n                    if (offset !== null) {\n                        const item = monitor.getItem() as DraggedNewMachine;\n                        return <DraggedMachine machineId={item.id} offset={offset} />\n                    }\n                }\n                break\n        }\n        return null;\n    });\n\n    function handleKeyPress(event: KeyboardEvent): void {\n        switch (event.key) {\n            case \" \":\n                Computer.StopComputation();\n                props.ClearMessages();\n                event.stopPropagation();\n                break;\n            default:\n                break;\n        }\n    }\n\n    function handleResize(): void {\n        setHeight(window.innerHeight);\n        setWidth(window.innerWidth);\n    }\n\n    const allowedInputColors = [ChannelColorEnum.Green];\n    const opagueBackground = \"rgba(255,255,255,.8)\";\n    return (\n        <div ref={drop} style={{ position: \"absolute\", height, width, overflow: \"hidden\" }}>\n            <div style={{ position: \"absolute\", height: \"100%\", width: \"100%\" }}>\n                {!props.HasActiveMachine ?\n                    <div style={{ display: \"flex\", height: \"100%\", width: \"100%\", justifyContent: \"center\", alignItems: \"center\" }}>\n                        <button title={\"Add new machine\"} onClick={props.AddNewMachine}>Create new machine</button>\n                    </div>\n                    :\n                    <MovingElement WindowHeight={height} WindowWidth={width}><Grid /></MovingElement>\n                }\n            </div >\n            <div style={{ position: \"absolute\", left: width / 2 - 150, padding: 10, width: 300, backgroundColor: opagueBackground }}>\n                <h2 style={{ textAlign: \"center\", margin: 0 }}>{props.MachineName}</h2>\n            </div>\n            <div style={{ position: \"absolute\", padding: 10, left: width - 220, width: 180, height: height - 20, backgroundColor: opagueBackground }}>\n                <button onClick={() => setMenu(\"options\")} title=\"Options\">Options</button>\n                <MachineCollection height={height - 40} />\n            </div>\n            <div style={{ position: \"absolute\", padding: 10, left: 10, top: 50, width: 300, backgroundColor: opagueBackground }}>\n                <LevelDisplay MultipleInputsAllowed={false} AllowedInputs={allowedInputColors} />\n            </div>\n            <div style={{ position: \"absolute\", padding: 10, height: 80, width: 240, left: width / 2 - 150, top: height - 80, backgroundColor: opagueBackground }}>\n                <Dashboard />\n            </div>\n            {menu === \"options\" &&\n                <div onClick={() => setMenu(\"none\")} style={{ position: \"absolute\", height: \"100%\", width: \"100%\", display: \"flex\", justifyContent: \"center\", alignItems: \"center\", background: Constants.MenuBackGround }}>\n                    <GameMenu Close={() => setMenu(\"none\")} />\n                </div>\n            }\n            {dragPreviewElement}\n        </div>\n    );\n}\n\nconst mapStateToProps = (state: GameData) => {\n    const activeMachine = GetActiveMachine(state);\n\n    return {\n        HasActiveMachine: activeMachine !== undefined,\n        MachineName: activeMachine?.Style.Name\n    };\n};\nexport const Game = connect(\n    mapStateToProps,\n    { AddNewMachine, ClearMessages, SetMovingOutput, RemoveMachine }\n)(GameInternal);","import React, { useState } from \"react\";\r\n\r\nexport const NameDialog: React.FC<{name: string, close: (name: string) => void}> = (props) => {\r\n    const [name, setName] = useState(props.name);\r\n\r\n    function handleKeyUp(event: React.KeyboardEvent<HTMLInputElement>): void\r\n    {\r\n        switch (event.key) {\r\n            case \"Enter\":\r\n                props.close(name);\r\n                break;        \r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    return <div style={{width: 200, margin: 10}}>\r\n        <input onChange={(value) => setName(value.target.value)} onKeyUp={handleKeyUp} value={name} ></input>\r\n        <button onClick={() => props.close(name)}>OK</button>\r\n        <button onClick={() => props.close(\"\")}>Cancel</button>\r\n\r\n    </div>;\r\n};","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { GameData } from \"../../../Redux/GameDataReducer/GameModel\";\r\nimport { PlayerModel } from \"../../../Redux/GameDataReducer/PlayerReducer/PlayerModel\";\r\nimport { ImportPlayerData } from \"../../../Redux/GameDataReducer/Actions\";\r\n\r\nconst NameDialogInternal: React.FC<{ImportPlayerData: typeof ImportPlayerData, close: () => void; players: { name: string, id: string }[] }> = (props) => {\r\n    const [data, setData] = useState<string>(\"\");\r\n\r\n    const [message, setMessage] = useState<string>();\r\n    const [state, setState] = useState<\"empty\" | \"loaded\">(\"empty\");\r\n\r\n  \r\n\r\n    function prepareImport() {    \r\n        const indexOfParathesis = data.indexOf(\"(\");  \r\n        if (indexOfParathesis !== -1){\r\n            setMessage(\"Data blocked\");\r\n            return;\r\n        }  \r\n\r\n        let playerModel: PlayerModel;\r\n\r\n        try {\r\n            playerModel = JSON.parse(data);\r\n        }\r\n        catch (error) {\r\n            setMessage(\"Data import failed: \" + error);\r\n            return;\r\n        }\r\n\r\n        if (playerModel.name === undefined || playerModel.id === undefined) {\r\n            setMessage(\"Data import failed, missing data\");\r\n            return;\r\n        }\r\n\r\n        const player = props.players.find(p => p.id === playerModel.id);\r\n        if (player === undefined) {\r\n            setMessage(`Import new player with name '${playerModel.name}'?`);            \r\n        }\r\n        if (player !== undefined) {\r\n            if (player.name !== playerModel.name) {\r\n                setMessage(`Update player '${player.name}', which will be renamed to '${playerModel.name}'?`);\r\n            } else {\r\n                setMessage(`Update player '${player.name}'?`);\r\n            }\r\n        }\r\n\r\n        setState(\"loaded\");\r\n    };\r\n\r\n    function importData(){\r\n        props.ImportPlayerData(JSON.parse(data));\r\n        props.close();\r\n    }\r\n\r\n    return <>\r\n        <p>Only import data from sources you trust!</p>\r\n        <input onChange={(value) => setData(value.target.value)} value={data} ></input>\r\n        <p>{message}</p>\r\n        {state === \"empty\" && <button onClick={prepareImport}>Preload</button>}\r\n        {state === \"loaded\" && <button onClick={importData}>Confirm</button>}\r\n        <button onClick={() => props.close()}>Cancel</button>\r\n    </>;\r\n};\r\n\r\nconst mapStateToProps = (state: GameData) => {\r\n    return {\r\n        players: state.players.map(p => ({ name: p.name, id: p.id }))\r\n    };\r\n};\r\n\r\nexport const ImportDialog = connect(\r\n    mapStateToProps,\r\n    {ImportPlayerData}\r\n)(NameDialogInternal);","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { GameData } from \"../../../Redux/GameDataReducer/GameModel\";\r\nimport { ChangePlayerName, DeletePlayer, AddPlayer, SwitchPlayer } from \"../../../Redux/GameDataReducer/Actions\"\r\nimport { NameDialog } from \"./Player/NameDialog\";\r\nimport { AppState } from \"../../../Redux/Store\";\r\nimport { ImportDialog } from \"./ImportDialog\";\r\n\r\nconst PlayersDialogInternal: React.FC<{\r\n    close: () => void,\r\n    ChangePlayerName: typeof ChangePlayerName,\r\n    AddPlayer: typeof AddPlayer,\r\n    SwitchPlayer: typeof SwitchPlayer,\r\n    DeletePlayer: typeof DeletePlayer,\r\n    players: { name: string, id: string, active: boolean }[]\r\n}> = (props) => {\r\n\r\n    const [dialog, setDialog] = useState<\"none\" | \"deletePlayer\" | \"exportPlayer\" | \"importPlayer\" | \"addPlayer\">(\"none\");\r\n    const [selectedPlayer, setSelectedPlayer] = useState<string>(\"\");\r\n    const [playerIdToBeDeleted, setPlayerIdToBeDeleted] = useState<string>(\"\");\r\n    const [playerData, setPlayerData] = useState<string>(\"\");\r\n    const [message, setMessage] = useState<string>(\"\");\r\n\r\n\r\n    function SetDeleteDialog(name: string, id: string) {\r\n        setDialog(\"deletePlayer\");\r\n        setSelectedPlayer(name);\r\n        setPlayerIdToBeDeleted(id);\r\n    }\r\n\r\n    function SetExportDialog(name: string, id: string) {\r\n        const player = AppState().players.find(p => p.id === id);\r\n        if (player !== undefined) {\r\n            const data = JSON.stringify(player);\r\n            if (-1 !== data.indexOf(\"(\")) {\r\n                setMessage(`Cannot export data of '${name}', it contains a '('`);\r\n            } else {\r\n                setMessage(`Exporting data of '${name}', copy data below`);\r\n                setPlayerData(data);\r\n            }\r\n\r\n            setDialog(\"exportPlayer\");\r\n        }\r\n    }\r\n\r\n    function deletePlayer(id: string) {\r\n        setDialog(\"none\");\r\n        props.DeletePlayer(id);\r\n    }\r\n\r\n    return <>\r\n        <div style={{ display: \"flex\", flexDirection: \"column\", opacity: dialog === \"none\" ? 1 : 0.5 }}>\r\n            {props.players.map(p =>\r\n                <div style={{ display: \"flex\", flexDirection: \"row\", border: p.active ? \"4px solid lime\" : \"4px\", padding: p.active ? 5 : 9}}>\r\n                    <input disabled={dialog !== \"none\"} onChange={(event) => props.ChangePlayerName(event.target.value, p.id)} value={p.name}></input>\r\n                    <button disabled={p.active || dialog !== \"none\"} onClick={() => props.SwitchPlayer(p.id)}>Activate</button>\r\n                    <button disabled={dialog !== \"none\"} onClick={() => SetDeleteDialog(p.name, p.id)}>Delete</button>\r\n                    <button disabled={dialog !== \"none\"} onClick={() => SetExportDialog(p.name, p.id)}>Export</button>\r\n                </div>)}\r\n            {dialog === \"none\" && <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\" }}>\r\n                <div>\r\n                    <button onClick={() => setDialog(\"addPlayer\")}>Add player</button>\r\n                    <button onClick={() => setDialog(\"importPlayer\")}>Import player</button>\r\n                </div>\r\n                <button onClick={props.close}>Close</button></div>}\r\n\r\n        </div>\r\n        {dialog === \"addPlayer\" &&\r\n            <NameDialog name=\"\" close={(name) => {\r\n                if (name !== \"\") {\r\n                    props.AddPlayer(name);\r\n                }\r\n                setDialog(\"none\");\r\n            }}></NameDialog>}\r\n        {dialog === \"deletePlayer\" &&\r\n            <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                Delete '{selectedPlayer}', are you sure?\r\n                <div>\r\n                    <button style={{ margin: 5 }} onClick={() => deletePlayer(playerIdToBeDeleted)}>Delete</button>\r\n                    <button style={{ margin: 5 }} onClick={() => setDialog(\"none\")}>Cancel</button>\r\n                </div>\r\n            </div>\r\n        }\r\n        {dialog === \"exportPlayer\" &&\r\n            <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                {message}\r\n                <input style={{ margin: 5 }} disabled={true} value={playerData}></input>\r\n                <div>\r\n                    <button style={{ margin: 5 }} onClick={() => { navigator.clipboard.writeText(playerData); setDialog(\"none\"); }}>Copy to clipboard</button>\r\n                    <button style={{ margin: 5 }} onClick={() => setDialog(\"none\")}>Done</button>\r\n                </div>\r\n            </div>\r\n        }\r\n        {dialog === \"importPlayer\" &&\r\n            <ImportDialog close={() => setDialog(\"none\")}></ImportDialog>}\r\n    </>\r\n};\r\n\r\nconst mapStateToProps = (state: GameData) => {\r\n    return {\r\n        players: state.players.map(p => ({ name: p.name, id: p.id, active: state.activePlayerId === p.id })),\r\n    };\r\n};\r\n\r\nexport const PlayersDialog = connect(\r\n    mapStateToProps,\r\n    { ChangePlayerName, DeletePlayer, SwitchPlayer, AddPlayer }\r\n)(PlayersDialogInternal);","import React, { useState } from \"react\";\r\nimport { GetLighterColor, GetRandomColor } from \"../../Helper/ColorHelper\";\r\n\r\nexport const MenuBox: React.FC<unknown> = (props) => {\r\n    const [backgroundColor] = useState(GetLighterColor(GetRandomColor(), 0.3));\r\n    const [borderColor] = useState(GetRandomColor());\r\n\r\n    return <div style={{ borderColor, backgroundColor, borderWidth: 20, borderStyle: \"solid\", padding: 30, display: \"flex\", flexDirection: \"column\" }}>\r\n        {props.children}\r\n    </div>;\r\n};","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { SwitchScreen } from \"../../Redux/GameDataReducer/Actions\";\r\nimport { LoadLevel } from \"../../Redux/GameDataReducer/Level/Actions\";\r\nimport { Props } from \"./Props\";\r\nimport { GetActivePlayer } from \"../../Helper/StoreHelper\";\r\nimport { GameData } from \"../../Redux/GameDataReducer/GameModel\";\r\nimport { PlayersDialog } from \"./Dialog/PlayersDialog\";\r\nimport { LevelState } from \"../../Redux/GameDataReducer/PlayerReducer/LevelData\";\r\nimport { LevelStore } from \"../../Levels/LevelStore\";\r\nimport { LevelModel } from \"../../Levels/LevelModel\";\r\nimport { MenuBox } from \"./MenuBox\";\r\n\r\nconst StartMenuInternal: React.FC<Props> = (props) => {\r\n    const [dialog, setdialog] = useState<\"none\" | \"editPlayers\" | \"importData\">(\"none\");\r\n\r\n    return (\r\n        <div style={{ height: \"100%\", width: \"100%\", display: \"flex\", flexDirection: \"column\", justifyContent: \"center\", alignItems: \"center\" }}>\r\n            <h1>Contexion</h1>\r\n            {dialog === \"none\" && <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\r\n                <MenuBox>\r\n                    {props.continueLevel !== undefined && <button className=\"startMenu\" onClick={() => props.LoadLevel(props.continueLevel!.Id)}>Continue with {props.continueLevel.Name}</button>}\r\n                    {props.playerName !== undefined && <>\r\n                        <button className=\"startMenu\" onClick={() => props.SwitchScreen(\"levelSelect\")}>Select level</button>\r\n                        <button className=\"startMenu\" onClick={() => props.LoadLevel(\"12\")}>Sandbox</button>\r\n                    </>}\r\n                    <button className=\"startMenu\" onClick={() => setdialog(\"editPlayers\")}>Manage players</button>\r\n                </MenuBox>\r\n                {props.playerName === undefined ? <h4>No player profile, make one to play!</h4> : <h4> Playing as {props.playerName}</h4>}\r\n            </div>}\r\n            {dialog === \"editPlayers\" &&\r\n                <MenuBox>\r\n                    <PlayersDialog close={() => {\r\n                        setdialog(\"none\");\r\n                    }}></PlayersDialog>\r\n                </MenuBox>}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: GameData) => {\r\n    const player = GetActivePlayer(state);\r\n    let continueLevel: LevelModel | undefined = undefined;\r\n    if (player?.activeLevel !== undefined) {\r\n        const data = player.levelData.find((ld) => ld.Id === player.activeLevel);\r\n        if (data?.State === LevelState.InProgress || data?.State === LevelState.NonValidMachineUsed) {\r\n            continueLevel = LevelStore.GetStore().GetLevel(player.activeLevel);\r\n        }\r\n    }\r\n\r\n    return {\r\n        playerName: player?.name,\r\n        continueLevel\r\n    };\r\n};\r\n\r\nexport const StartMenu = connect(\r\n    mapStateToProps,\r\n    { SwitchScreen, LoadLevel }\r\n)(StartMenuInternal);\r\n","import { Props } from \"./Props\";\r\nimport React, { useState } from \"react\";\r\nimport { LoadLevel } from \"../../../Redux/GameDataReducer/Level/Actions\";\r\nimport { connect } from \"react-redux\";\r\nimport { LevelState } from \"../../../Redux/GameDataReducer/PlayerReducer/LevelData\";\r\nimport { MachineCanvasHolder } from \"../../Grid/Cell/MachineInstance/MachineDrawer/MachineCanvasHolder\";\r\nimport { GetGrayScaleColor, GetLighterColor, GetOpaqueColor } from \"../../../Helper/ColorHelper\";\r\nimport { Constants } from \"../../Constants\";\r\nimport { MachineStore } from \"../../../MachineStore/MachineStore\";\r\nimport { ChannelModel } from \"../../../Models/ChannelModel\";\r\n\r\nconst LevelPreviewInternal: React.FC<Props> = (props) => {\r\n    const OnClick = () => props.LoadLevel(props.Level.Id);\r\n    const [showLabel, setShowLabel] = useState(props.Data?.LastUsedMachineId !== undefined || props.Level.InputChannels.length !== 0);\r\n\r\n    let color: string;\r\n    let borderColor: string;\r\n\r\n    let outputChannels: ChannelModel[][] = [];\r\n\r\n    if (props.Data?.LastUsedMachineId === undefined) {\r\n        color = \"rgb(200,200,200)\";\r\n        borderColor = \"rgb(160,160,160)\";\r\n    } else {\r\n        var machine = MachineStore.GetStore().GetMachineType(props.Data!.LastUsedMachineId);\r\n        switch (props.Data.State) {\r\n            case LevelState.Completed:\r\n                color = machine.Style.Color;\r\n                borderColor = machine.Style.BorderColor;\r\n                outputChannels = props.Level.OutputChannels.map((oc) => [oc]);\r\n                break;\r\n            case LevelState.InProgress:\r\n            case LevelState.NonValidMachineUsed:\r\n                color = GetLighterColor(GetGrayScaleColor(machine.Style.Color, 0.2), 0.6);\r\n                borderColor = GetLighterColor(GetGrayScaleColor(machine.Style.BorderColor, 0.2), 0.6);\r\n                break;\r\n            case LevelState.NoMachineLinked:\r\n                throw Error(\"State is not linked, but there is a machine linked\")\r\n        }\r\n    }\r\n\r\n    function onHover() {\r\n        if (props.Data?.LastUsedMachineId === undefined && props.Level.InputChannels.length === 0) {\r\n            setShowLabel(true);\r\n        }\r\n    }\r\n\r\n    function onExit() {\r\n        if (props.Data?.LastUsedMachineId === undefined && props.Level.InputChannels.length === 0) {\r\n            setShowLabel(false);\r\n        }\r\n    }\r\n\r\n    const machineStyle = {\r\n        Color: color,\r\n        BorderColor: borderColor,\r\n    }\r\n\r\n    return (<div onMouseOver={onHover} onMouseOut={onExit} style={{ position: \"absolute\", marginLeft: props.Level.Cell.Column * 140 + 50, marginTop: props.Level.Cell.Row * 115 + 20 }}>\r\n        <div onClick={OnClick}  title={props.Level.LevelDescription} style={{ height: Constants.CellSize - 2, width: Constants.CellSize - 2 }}>\r\n            <MachineCanvasHolder IsDefault={false} MachineStyle={machineStyle} BackgroundColor={\"white\"} InputChannels={props.Level.InputChannels} OutputChannels={outputChannels} CellSize={Constants.CellSize} />\r\n            {showLabel && <div style={{ display: \"flex\", position: \"absolute\", height: \"20%\", width: \"100%\", justifyContent: \"center\", alignItems: \"center\", pointerEvents: \"none\" }}>\r\n                <label style={{ fontFamily: \"Comic Sans MS\", background: GetOpaqueColor(\"White\", 0.7) }}>{props.Level.Name}</label>\r\n            </div>}\r\n        </div>\r\n    </div>);\r\n};\r\n\r\nexport const LevelPreview = connect(\r\n    undefined,\r\n    { LoadLevel }\r\n)(LevelPreviewInternal);","import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { GameData } from \"../../Redux/GameDataReducer/GameModel\";\r\nimport { Props } from \"./Props\";\r\nimport { SwitchScreen } from \"../../Redux/GameDataReducer/Actions\";\r\nimport { GetActivePlayer } from \"../../Helper/StoreHelper\";\r\nimport { LevelStore } from \"../../Levels/LevelStore\";\r\nimport { LevelModel } from \"../../Levels/LevelModel\";\r\nimport { LevelData, LevelState } from \"../../Redux/GameDataReducer/PlayerReducer/LevelData\";\r\nimport { LevelPreview } from \"./LevelPreview/LevelPreview\";\r\nimport { Move } from \"../../Helper/SetupHelper\";\r\nimport { AreEqual } from \"../../Models/CellModel\";\r\nimport { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\n\r\nconst LevelSelectScreenInternal: React.FC<Props> = (props) => {\r\n    const [levelModels, setLevelModels] = useState<{ model: LevelModel; data: LevelData | undefined }[]>([]);\r\n    useEffect(() => {\r\n        const levels = LevelStore.GetStore().GetAllLevels();\r\n        const models = levels.filter((l) => l.Cell.Row >= 0).map((l) => {\r\n            const levelData = props.levels.find((ld) => ld.Id === l.Id);\r\n            return { model: l, data: levelData };\r\n        });\r\n\r\n        const maxColumn = Math.max(...levels.map((l) => l.Cell.Column));\r\n        const maxRow = Math.max(...levels.map((l) => l.Cell.Column));\r\n        const setup = { NumberOfRows: maxRow, NumberOfColumns: maxColumn };\r\n        const completedLevels = models.filter((lm) => lm.data?.State === LevelState.Completed).map((lm) => lm.model);\r\n        for (const completedLevel of completedLevels) {\r\n            for (const direction of completedLevel.OutputChannels.map((oc) => oc.Direction)) {\r\n                let newCell = Move(setup, completedLevel.Cell, direction);\r\n                while (newCell !== undefined) {\r\n                    // eslint-disable-next-line\r\n                    const nextLevel = models.find((cl) => AreEqual(cl.model.Cell, newCell!));\r\n                    if (nextLevel !== undefined) {\r\n                        nextLevel.model.InputChannels.push({ Channel: ChannelColorEnum.Green, Direction: direction, Status: \"Exists\", UseMachineColor: true });\r\n                        break;\r\n                    }\r\n\r\n                    newCell = Move(setup, newCell, direction);\r\n                }\r\n            }\r\n        }\r\n        setLevelModels(models);\r\n    }, [props.levels]);\r\n\r\n    return <div style={{ position: \"absolute\", width: \"100%\" }}>\r\n        <button style={{float: \"right\", marginRight: 10, marginTop: 10}} onClick={() => props.SwitchScreen(\"startMenu\")}>Back</button>\r\n        {levelModels.map((lm) => <LevelPreview Level={lm.model} Data={lm.data} key={lm.model.Id} />)}\r\n    </div>\r\n}\r\n\r\nconst mapStateToProps = (state: GameData) => {\r\n    var levels = GetActivePlayer(state)!.levelData;\r\n    return {\r\n        levels\r\n    };\r\n};\r\n\r\nexport const LevelSelectScreen = connect(\r\n    mapStateToProps,\r\n    { SwitchScreen }\r\n)(LevelSelectScreenInternal);","import React from \"react\";\r\nimport { DndProvider } from \"react-dnd\";\r\nimport HTML5Backend from \"react-dnd-html5-backend\";\r\nimport { Game } from \"./Components/Game/Game\";\r\nimport { connect } from \"react-redux\";\r\nimport { GameData } from \"./Redux/GameDataReducer/GameModel\";\r\nimport { Props } from \"./Props\";\r\nimport { StartMenu } from \"./Components/StartMenu/StartMenu\";\r\nimport { LevelSelectScreen } from \"./Components/LevelSelectsScreen/LevelSelectScreen\";\r\n\r\nconst AppInternal: React.FC<Props> = (props) => {\r\n  return (\r\n    <DndProvider backend={HTML5Backend}>\r\n      {props.screen === \"startMenu\" && <StartMenu />}\r\n      {props.screen === \"levelSelect\" && <LevelSelectScreen />}\r\n      {props.screen === \"playing\" && <Game />}\r\n\r\n    </DndProvider>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: GameData) => {\r\n  return {\r\n      screen: state.screen,\r\n    };\r\n};\r\n\r\nexport const App = connect(\r\n  mapStateToProps\r\n)(AppInternal);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport {App} from \"./App\";\r\nimport \"./index.css\";\r\nimport { AppStore } from \"./Redux/Store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={AppStore}>\r\n        <App />\r\n    </Provider>\r\n    , document.getElementById(\"root\"));\r\n"],"sourceRoot":""}