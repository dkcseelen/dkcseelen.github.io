{"version":3,"sources":["Models/DirectionEnum.ts","Models/ChannelColorsEnum.ts","Computing/Setup.ts","Components/Constants.ts","Components/Machine/Machine.tsx","Components/Channel/Channel.tsx","Components/DragItemTypes.ts","MachineStore/DefaultMachines/MoveMachine.ts","MachineStore/DefaultMachines/StartMachine.ts","MachineStore/DefaultMachines/CopyMachine.ts","MachineStore/DefaultMachines/DeleteMachine.ts","MachineStore/DefaultMachines/RotateMachine.ts","MachineStore/DefaultMachines/CompareMachine.ts","MachineStore/DefaultMachines/AddStarMachine.ts","MachineStore/DefaultMachines/AddZeroMachine.ts","MachineStore/DefaultMachines/IncrementMachine.ts","MachineStore/MachineStore.ts","Components/MachineInstance/MachineInstance.tsx","Components/Cell/Cell.tsx","Components/NumberInput/NumberInput.tsx","Components/Grid/Grid.tsx","Components/StoredMachine/StoredMachine.tsx","Components/MachineStore/MachineStore.tsx","Computing/Computer.ts","Components/Settings/Settings.tsx","Components/Game/Game.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["DirectionEnum","ChannelColorEnum","Setup","GridSetup","this","LoadSetup","undefined","Error","NumberOfColumns","NumberOfRows","MachineInstances","Cell","Row","Column","MachineId","Id","Type","Channels","Direction","Right","Channel","Green","InputChannels","Constants","CellSize","Machine","machineSize","borderSize","machineStyle","height","width","backgroundColor","props","Color","borderStyle","borderColor","BorderColor","borderWidth","borderRadius","marginLeft","marginTop","style","React","Component","onClicked","bind","cellSize","channelStyle","position","ChannelMap","border","pointerEvents","rotate","Down","Left","Up","rotation","transform","onClick","event","newDirection","OnChanged","DragItemTypes","MoveMachine","actor","Act","message","returnValue","push","Content","NumberOfOutputs","NumberOfInputs","Name","Description","StartMachine","CopyMachine","content","length","DeleteMachine","slice","RotateMachine","CompareMachine","channel","Red","AddStarMachine","AddZeroMachine","IncrementMachine","newMessage","char","String","fromCharCode","charCodeAt","MachineStore","machines","init","id","machine","find","m","FindMachine","GetActor","GetType","machineStore","MachineInstance","useDrag","item","type","end","dropResult","monitor","didDrop","OnRemoved","collect","isDragging","drag","channels","map","c","index","key","channelMap","machineInstance","i","OnChannelChanged","margin","machineType","GetStore","GetMachineType","ref","formattedMessage","useDrop","accept","drop","OnMovedMachine","getItem","location","itemProps","OnNewMachine","float","marginRight","seekPosition","indexOf","lastIndex","substring","OnMachineRemoved","NumberInput","valueChanged","value","Grid","store","ChannelChanged","MachineMoved","MachineAdded","MachineRemoved","RowsChanged","ColumnsChanged","rows","rowIndex","row","columnIndex","foundMachineInstance","foundMessage","Messages","newGridSetup","mi","findIndex","filter","Blue","Yellow","Math","max","StoredMachine","channelComponents","cm","absoluteStyle","left","title","Store","GetAllMachine","relativeStyle","storedMachines","disallowedMachines","some","Computer","setup","GetMachines","startMachines","Input","messageLocations","GetStartMachines","messageLocation","messages","nextMessages","messageCell","Move","nextContents","nextContent","cell","direction","Settings","ShowSetupString","SetupStringChanged","state","SetupString","NewSetupString","display","flexDirection","flexWrap","justifyContent","alignItems","StepTime","OnStepTimeChanged","ShowSetup","onChange","setState","target","JSON","stringify","OnShowingSetup","setupModel","parse","OnSetupChanged","Game","computer","runningComputation","inputChanged","startComputation","CalculateNextMessages","GridSetupChanged","StepTimeChanged","stopComputation","handleKeyPress","gridSetup","LoadGridSetup","Computing","Output","ShowingSetup","e","text","replace","StartComputation","setTimeout","clearTimeout","GetNextMessages","doneMessages","mm","newSetup","document","addEventListener","removeEventListener","disallowedStartMachines","gridSizeStyle","verticalFlex","NewSetup","newStepTime","App","backend","HTML5Backend","Boolean","window","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3cb1bfce.chunk.js","sourcesContent":["export enum DirectionEnum {\r\n    Up = \"UP\",\r\n    Down = \"DOWN\",\r\n    Left = \"LEFT\",\r\n    Right = \"RIGHT\",\r\n}","export enum ChannelColorEnum {\r\n    Green = \"green\",\r\n    Red = \"red\",\r\n    Blue = \"blue\",\r\n    Yellow = \"yellow\",\r\n}","import { GridSetupModel } from \"../Models/GridSetupModel\";\r\nimport { DirectionEnum } from \"../Models/DirectionEnum\";\r\nimport { ChannelColorEnum } from \"../Models/ChannelColorsEnum\";\r\n\r\nexport class Setup {\r\n\r\n    private GridSetup: GridSetupModel | undefined;\r\n    constructor() {\r\n        this.LoadSetup();\r\n    }\r\n\r\n    public LoadGridSetup(): GridSetupModel {\r\n        if (this.GridSetup === undefined) {\r\n            throw new Error(\"Setup not loaded\");\r\n        }\r\n\r\n        return this.GridSetup;\r\n    }\r\n\r\n    LoadSetup(): void {\r\n        this.GridSetup = {\r\n            NumberOfColumns: 6,\r\n            NumberOfRows: 5,\r\n            MachineInstances: [{\r\n                Cell: { Row: 2, Column: 0 },\r\n                MachineId: { Id: 1, Type: \"Default\" },\r\n                Channels: [{ Direction: DirectionEnum.Right, Channel: ChannelColorEnum.Green }],\r\n                InputChannels: [], Id: 1\r\n            }]\r\n        }\r\n    };\r\n\r\n\r\n}\r\n","export class Constants {\r\n    public static CellSize = 100;\r\n}","import React from \"react\";\r\nimport { Props } from \"./Props\";\r\nimport { Constants } from \"../Constants\";\r\n\r\nexport class Machine extends React.Component<Props>\r\n{\r\n    public render() {\r\n        const machineSize = Constants.CellSize / 5 * 3\r\n        const borderSize = machineSize/10;\r\n\r\n        const machineStyle: React.CSSProperties = {\r\n            // position: \"absolute\",\r\n            height: machineSize,\r\n            width: machineSize,\r\n            backgroundColor: this.props.Machine.Color,\r\n            borderStyle: \"solid\",\r\n            borderColor: this.props.Machine.BorderColor,\r\n            borderWidth: borderSize,\r\n            borderRadius: \"50%\",\r\n            marginLeft: ((Constants.CellSize - machineSize)/2 - borderSize),\r\n            marginTop: ((Constants.CellSize - machineSize)/2 - borderSize)\r\n        };\r\n\r\n        return (\r\n            <div style={machineStyle}>               \r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport { Props } from \"./Props\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { Constants } from \"../Constants\";\r\n\r\nexport class Channel extends React.Component<Props>{\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.onClicked = this.onClicked.bind(this);\r\n    }\r\n    public render() {\r\n\r\n        const cellSize = Constants.CellSize -2;\r\n        const width = 19;\r\n        const height = 4;\r\n        const border = 1\r\n        const channelStyle: React.CSSProperties = {\r\n            position: \"absolute\",\r\n            height: cellSize / 50 * height,\r\n            width: cellSize / 50 * width,\r\n            marginLeft: cellSize / 50 * (25 + (height + border) / 2),\r\n            marginTop: cellSize / 50 * (25 - (height + border) / 2),\r\n            backgroundColor: this.props.ChannelMap.Channel,\r\n            borderStyle: \"solid\",\r\n            borderWidth: border + \"px\",\r\n            pointerEvents: \"visible\"\r\n        }\r\n\r\n        let rotate: string = \"\";\r\n        switch (this.props.ChannelMap.Direction) {\r\n            case DirectionEnum.Down:\r\n                rotate = \"rotate(90deg)\";\r\n                break;\r\n            case DirectionEnum.Left:\r\n                rotate = \"rotate(180deg)\";\r\n                break;\r\n            case DirectionEnum.Up:\r\n                rotate = \"rotate(270deg)\";\r\n                break;\r\n            case DirectionEnum.Right:\r\n                rotate = \"rotate(0deg)\";\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        const rotation: React.CSSProperties = {\r\n            transform: rotate,\r\n            height: cellSize,\r\n            width: cellSize,\r\n            position: \"absolute\",\r\n            pointerEvents: \"none\"\r\n        }\r\n\r\n        return (\r\n            <div style={rotation}>\r\n                <div style={channelStyle} onClick={this.onClicked}></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public onClicked(event: React.MouseEvent<HTMLDivElement, MouseEvent>): void {\r\n        let newDirection: DirectionEnum = DirectionEnum.Left;\r\n        switch (this.props.ChannelMap.Direction) {\r\n            case DirectionEnum.Down:\r\n                newDirection = DirectionEnum.Left;\r\n                break;\r\n            case DirectionEnum.Left:\r\n                newDirection = DirectionEnum.Up;\r\n                break;\r\n            case DirectionEnum.Up:\r\n                newDirection = DirectionEnum.Right;\r\n                break;\r\n            case DirectionEnum.Right:\r\n                newDirection = DirectionEnum.Down;\r\n                break;\r\n        }\r\n       \r\n        this.props.OnChanged({ Direction: newDirection, Channel: this.props.ChannelMap.Channel });\r\n    }\r\n}","export const DragItemTypes = {\r\n    MachineInstance: \"MachineInstance\",\r\n    NewMachine: \"NewMachine\"\r\n  }","import { IMachine } from \"../IMachine\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MachineId } from \"../MachineId\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachineType } from \"../IMachineType\";\r\n\r\nexport class MoveMachine implements IMachine {\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            returnValue.push({ Content: message.Content, Channel: ChannelColorEnum.Green });\r\n            return returnValue;\r\n        }\r\n    }\r\n    GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    GetType(): IMachineType {\r\n        return {\r\n            Color: \"green\",\r\n            BorderColor: \"lightgreen\",\r\n            NumberOfOutputs: 1,\r\n            NumberOfInputs: 1,\r\n            Name: \"Move\",\r\n            Description: \"Does nothing with the string, only used to get the message to the right place\"\r\n        }\r\n    }\r\n    public readonly Id: MachineId = { Id: 5, Type: \"Default\" };\r\n}","import { IMachine } from \"../IMachine\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MachineId } from \"../MachineId\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachineType } from \"../IMachineType\";\r\n\r\nexport class StartMachine implements IMachine {\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            returnValue.push({ Content: message.Content, Channel: ChannelColorEnum.Green });\r\n            return returnValue;\r\n        }\r\n    }\r\n    GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    GetType(): IMachineType {\r\n        return {\r\n            Color: \"white\",\r\n            BorderColor: \"red\",\r\n            NumberOfOutputs: 1,\r\n            NumberOfInputs: 1,\r\n            Name: \"Start\",\r\n            Description: \"Starting point of the computation. Acts as a move machine for all other purposes\"\r\n        }\r\n    }\r\n    public readonly Id: MachineId = { Id: 1, Type: \"Default\" };    \r\n}","import { IMachine } from \"../IMachine\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { MachineId } from \"../MachineId\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\n\r\nexport class CopyMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            const content = message.Content.length > 0 ? message.Content[0] + message.Content : \"\";\r\n\r\n            returnValue.push({ Content: content, Channel: ChannelColorEnum.Green });\r\n            return returnValue;\r\n        }\r\n    }\r\n    GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    GetType(): IMachineType {\r\n        return {\r\n            BorderColor: \"green\",\r\n            Color: \"yellow\",\r\n            Name: \"Copy\",\r\n            NumberOfInputs: 1,\r\n            NumberOfOutputs: 1,\r\n            Description: \"Copies the first character of the string and puts it in front of the string\"\r\n        }\r\n    }\r\n    Id: MachineId = {\r\n        Id: 6,\r\n        Type: \"Default\"\r\n    }\r\n}\r\n\r\n","import { IMachine } from \"../IMachine\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { MachineId } from \"../MachineId\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\n\r\nexport class DeleteMachine implements IMachine {\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            const content = message.Content.length > 0 ? message.Content.slice(1): \"\";\r\n\r\n            returnValue.push({ Content: content, Channel: ChannelColorEnum.Green });\r\n            return returnValue;\r\n        }\r\n    }\r\n    GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    GetType(): IMachineType {\r\n        return {\r\n            BorderColor: \"red\",\r\n            Color: \"red\",\r\n            Name: \"Delete\",\r\n            NumberOfInputs: 1,\r\n            NumberOfOutputs: 1,\r\n            Description: \"Deletes the first character of the string\"\r\n        }\r\n    }\r\n    Id: MachineId = {\r\n        Id: 7,\r\n        Type: \"Default\"\r\n    }\r\n}\r\n\r\n","import { IMachine } from \"../IMachine\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { MachineId } from \"../MachineId\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\n\r\nexport class RotateMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            let content: string;\r\n            if ( message.Content.length > 1){\r\n                content = message.Content.slice(1) + message.Content.slice(0,1);\r\n            }\r\n            else{\r\n                content = message.Content;\r\n            }\r\n\r\n            returnValue.push({ Content: content, Channel: ChannelColorEnum.Green });\r\n            return returnValue;\r\n        }\r\n    }\r\n    GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    GetType(): IMachineType {\r\n        return {\r\n            BorderColor: \"blue\",\r\n            Color: \"cyan\",\r\n            Name: \"Rotate\",\r\n            NumberOfInputs: 1,\r\n            NumberOfOutputs: 1,\r\n            Description: \"Removes the first character of the string, and adds it to the end of the string\"\r\n        }\r\n    }\r\n    Id: MachineId = {\r\n        Id: 8,\r\n        Type: \"Default\"\r\n    }\r\n}\r\n\r\n","import { IMachine } from \"../IMachine\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { MachineId } from \"../MachineId\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\n\r\nexport class CompareMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            const channel: ChannelColorEnum = message.Content.length > 1 && message.Content[0] === message.Content[1] ? ChannelColorEnum.Green : ChannelColorEnum.Red;\r\n\r\n            returnValue.push({ Content: message.Content, Channel: channel });\r\n            return returnValue;\r\n        }\r\n    }\r\n    GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    GetType(): IMachineType {\r\n        return {\r\n            BorderColor: \"red\",\r\n            Color: \"green\",\r\n            Name: \"Compare\",\r\n            NumberOfInputs: 1,\r\n            NumberOfOutputs: 2,\r\n            Description: \"Compares the first two characters in the string. If they are the same, exits green. If they are different exits red\"\r\n        }\r\n    }\r\n    Id: MachineId = {\r\n        Id: 9,\r\n        Type: \"Default\"\r\n    }\r\n}\r\n\r\n","import { IMachine } from \"../IMachine\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { MachineId } from \"../MachineId\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\n\r\nexport class AddStarMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            const content = \"*\" + message.Content;\r\n\r\n            returnValue.push({ Content: content, Channel: ChannelColorEnum.Green });\r\n            return returnValue;\r\n        }\r\n    }\r\n    GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    GetType(): IMachineType {\r\n        return {\r\n            BorderColor: \"blue\",\r\n            Color: \"grey\",\r\n            Name: \"Add *\",\r\n            NumberOfInputs: 1,\r\n            NumberOfOutputs: 1,\r\n            Description: \"Puts a star in front of the string. There is guaranteed not to be a star in the input\"\r\n        }\r\n    }\r\n    Id: MachineId = {\r\n        Id: 10,\r\n        Type: \"Default\"\r\n    }\r\n}\r\n\r\n","import { IMachine } from \"../IMachine\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { MachineId } from \"../MachineId\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\n\r\nexport class AddZeroMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            const content = \"0\" + message.Content;\r\n\r\n            returnValue.push({ Content: content, Channel: ChannelColorEnum.Green });\r\n            return returnValue;\r\n        }\r\n    }\r\n    GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    GetType(): IMachineType {\r\n        return {\r\n            BorderColor: \"yellow\",\r\n            Color: \"darkorange\",\r\n            Name: \"Add 0\",\r\n            NumberOfInputs: 1,\r\n            NumberOfOutputs: 1,\r\n            Description: \"Puts a zero in front of the string\"\r\n        }\r\n    }\r\n    Id: MachineId = {\r\n        Id: 11,\r\n        Type: \"Default\"\r\n    }\r\n}\r\n\r\n","import { IMachine } from \"../IMachine\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { MachineId } from \"../MachineId\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\n\r\nexport class IncrementMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            let newMessage = \"\";\r\n            if (message.Content.length > 0) {\r\n                let char = message.Content[0];\r\n               \r\n                if ((char >= \"0\" && char <= \"8\") || (char >= \"a\" && char < \"z\") || (char >= \"A\" && char < \"Z\")) {\r\n                    newMessage = String.fromCharCode(char.charCodeAt(0) + 1) + message.Content.slice(1); \r\n                }\r\n                else if (char === \"9\") {\r\n                    newMessage = \"0\" + message.Content.slice(1); \r\n                } else if (char === \"z\") {\r\n                    newMessage = \"a\" + message.Content.slice(1);                   \r\n                } else if (char === \"Z\") {\r\n                    newMessage = \"A\" + message.Content.slice(1);                     \r\n                } else {\r\n                    newMessage = message.Content;\r\n                }                \r\n            }\r\n\r\n            returnValue.push({ Content: newMessage, Channel: ChannelColorEnum.Green });\r\n            return returnValue;\r\n        }\r\n    }\r\n    GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    GetType(): IMachineType {\r\n        return {\r\n            BorderColor: \"DodgerBlue\",\r\n            Color: \"MediumVioletRed\",\r\n            Name: \"Increment\",\r\n            NumberOfInputs: 1,\r\n            NumberOfOutputs: 1,\r\n            Description: \"Increases a number in front of the string by 1, makes as letter the next letter in the alphabet. 9 becomes 0, z becomes a. All other starting characters are not changed\"\r\n        }\r\n    }\r\n    Id: MachineId = {\r\n        Id: 12,\r\n        Type: \"Default\"\r\n    }\r\n}\r\n\r\n","import { MoveMachine } from \"./DefaultMachines/MoveMachine\";\r\nimport { IMachine } from \"./IMachine\";\r\nimport { StartMachine } from \"./DefaultMachines/StartMachine\";\r\nimport { MachineId } from \"./MachineId\";\r\nimport { IMachineType } from \"./IMachineType\";\r\nimport { IActor } from \"./IActor\";\r\nimport { CopyMachine } from \"./DefaultMachines/CopyMachine\";\r\nimport { DeleteMachine } from \"./DefaultMachines/DeleteMachine\";\r\nimport { RotateMachine } from \"./DefaultMachines/RotateMachine\";\r\nimport { CompareMachine } from \"./DefaultMachines/CompareMachine\";\r\nimport { AddStarMachine } from \"./DefaultMachines/AddStarMachine\";\r\nimport { AddZeroMachine } from \"./DefaultMachines/AddZeroMachine\";\r\nimport { IncrementMachine } from \"./DefaultMachines/IncrementMachine\";\r\n\r\nexport class MachineStore {\r\n    private static machineStore: MachineStore;\r\n    private machines: IMachine[];\r\n\r\n    private constructor() {\r\n        this.machines = [];\r\n        this.init();\r\n    }\r\n\r\n    public static GetStore(): MachineStore{\r\n        if (MachineStore.machineStore === undefined)        {\r\n            MachineStore.machineStore = new MachineStore();\r\n        }\r\n\r\n        return MachineStore.machineStore;\r\n    }\r\n\r\n    private init(): void {\r\n        this.machines = [];\r\n        this.machines.push(new StartMachine());\r\n        this.machines.push(new MoveMachine());\r\n        this.machines.push(new CopyMachine());\r\n        this.machines.push(new DeleteMachine());\r\n        this.machines.push(new RotateMachine());\r\n        this.machines.push(new CompareMachine());\r\n        this.machines.push(new AddStarMachine());\r\n        this.machines.push(new AddZeroMachine());\r\n        this.machines.push(new IncrementMachine());\r\n\r\n\r\n    }\r\n\r\n    private FindMachine(id: MachineId): IMachine {\r\n        const machine = this.machines.find(m => m.Id.Id === id.Id && m.Id.Type === id.Type);\r\n        if (machine === undefined){\r\n            throw new Error(\"No machine found with id \" + id.Id + \" and type \" + id.Type);\r\n        }\r\n\r\n        return machine;\r\n    }\r\n\r\n    public GetActor(id: MachineId): IActor {\r\n        return this.FindMachine(id).GetActor();\r\n    }\r\n\r\n    public GetMachineType(id: MachineId): IMachineType {\r\n        return this.FindMachine(id).GetType();       \r\n    }\r\n\r\n    public GetAllMachine(): IMachine[] {\r\n        return this.machines;\r\n    }\r\n}","import React from \"react\";\r\nimport { Props } from \"./Props\";\r\nimport { Machine } from \"../Machine/Machine\";\r\nimport { Channel } from \"../Channel/Channel\";\r\nimport { ChannelModel } from \"../../Models/ChannelMapModel\";\r\nimport { MachineInstanceModel } from \"../../Models/MachineInstanceModel\";\r\nimport { useDrag } from \"react-dnd\";\r\nimport { DragItemTypes } from \"../DragItemTypes\";\r\nimport { MachineStore } from \"../../MachineStore/MachineStore\";\r\nimport { Constants } from \"../Constants\";\r\n\r\nconst MachineInstance: React.FC<Props> = (props) => {\r\n    const [, drag] = useDrag({\r\n        item: { type: DragItemTypes.MachineInstance, id: props.MachineInstance.Id },\r\n        end: (dropResult, monitor) => {\r\n            if (!monitor.didDrop()) {\r\n                props.OnRemoved(props.MachineInstance.Id);\r\n            }\r\n        },\r\n        collect: monitor => ({\r\n            isDragging: !!monitor.isDragging(),\r\n        }),\r\n    })\r\n\r\n    const OnChannelChanged = (channel: ChannelModel, index: Number) => {\r\n        const machineInstance: MachineInstanceModel = {\r\n            Cell: props.MachineInstance.Cell,\r\n            MachineId: props.MachineInstance.MachineId,\r\n            Channels: props.MachineInstance.Channels.map((c, i) => (i === index) ? channel : c),\r\n            InputChannels: props.MachineInstance.InputChannels,\r\n            Id: props.MachineInstance.Id\r\n        }\r\n\r\n        props.OnChanged(machineInstance);\r\n    }\r\n\r\n    const channels = props.MachineInstance.Channels.map((c, index) => <div key={index}><Channel OnChanged={(channelMap) => OnChannelChanged(channelMap, index)} ChannelMap={c} /></div>);\r\n    const absoluteStyle: React.CSSProperties = {\r\n        position: \"absolute\",\r\n    };\r\n    const machineSize: React.CSSProperties = { height: Constants.CellSize - 2, width: Constants.CellSize - 2, margin: 1 }\r\n\r\n    const machineType = MachineStore.GetStore().GetMachineType(props.MachineInstance.MachineId);\r\n    return (\r\n        <div ref={drag} style={machineSize}>\r\n            <div style={absoluteStyle}>\r\n                <Machine Machine={machineType} />\r\n            </div>\r\n            {channels}\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default MachineInstance;\r\n\r\n","import React from \"react\";\r\nimport { Props } from \"./Props\";\r\nimport \"../../App.css\";\r\nimport MachineInstance from \"../MachineInstance/MachineInstance\";\r\nimport { Constants } from \"../Constants\";\r\nimport { useDrop } from \"react-dnd\";\r\nimport { DragItemTypes } from \"../DragItemTypes\";\r\nimport { MachineId } from \"../../MachineStore/MachineId\";\r\n\r\nconst Cell: React.FC<Props> = (props) => {\r\n\r\n    const [, drop] = useDrop({\r\n        accept: [DragItemTypes.MachineInstance, DragItemTypes.NewMachine],\r\n        drop: (item, monitor) => {\r\n            switch (item.type) {\r\n                case DragItemTypes.MachineInstance:\r\n                    props.OnMovedMachine(monitor.getItem().id, props.location);\r\n                    break;\r\n                case DragItemTypes.NewMachine: \r\n                    const itemProps = monitor.getItem() as {id: MachineId};                  \r\n                    props.OnNewMachine(itemProps.id, props.location);\r\n                    break;\r\n            }\r\n        },\r\n    })\r\n\r\n    const style: React.CSSProperties = {\r\n        height: Constants.CellSize,\r\n        width: Constants.CellSize,\r\n        border: \"1px solid #999\",\r\n        float: \"left\",\r\n        marginTop: -1,\r\n        marginRight: -1,\r\n        position: \"relative\"\r\n    }\r\n\r\n    let formattedMessage: string | undefined;\r\n    if (props.message !== undefined)\r\n    {\r\n        if (props.message.Content === \"\"){\r\n            formattedMessage = \"<Empty>\";\r\n        } else{\r\n            \r\n            formattedMessage = props.message!.Content;\r\n            let seekPosition= 0;\r\n\r\n            while (true)\r\n            {\r\n                seekPosition = formattedMessage.indexOf(\"<\", seekPosition);\r\n                if (seekPosition === -1){\r\n                    break;\r\n                }\r\n\r\n                const lastIndex = formattedMessage.indexOf(\">\", seekPosition);\r\n                formattedMessage = formattedMessage.substring(0, seekPosition) + \"?\" + formattedMessage.substring(lastIndex + 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={style} ref={drop}>\r\n            {formattedMessage !== undefined && formattedMessage }\r\n            {props.machineInstance !== undefined ? <MachineInstance MachineInstance={props.machineInstance} OnChanged={props.OnChanged} OnRemoved={props.OnMachineRemoved}/> : \"\"}\r\n\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default Cell;","import { Props } from \"./Props\";\r\nimport React from \"react\";\r\n\r\nconst NumberInput: React.FC<Props> = (props) => {\r\n    const IncreaseValue: () => void = () => {\r\n        props.valueChanged(props.value + 1);\r\n    }\r\n    const DecreaseValue: () => void = () => {\r\n        props.valueChanged(props.value - 1);\r\n    }\r\n\r\n    const style: React.CSSProperties = { marginLeft:5, marginRight:5 };\r\n\r\n    return (<div>\r\n        <button style={style} onClick={DecreaseValue}>-</button>\r\n        <label >{props.value}</label>\r\n        <button style={style} onClick={IncreaseValue}>+</button>\r\n    </div>)\r\n}\r\n\r\nexport default NumberInput;","import React from 'react';\r\nimport '../../App.css';\r\nimport { GridProps } from './Props';\r\nimport Cell from '../Cell/Cell';\r\nimport { MachineInstanceModel } from '../../Models/MachineInstanceModel';\r\nimport { MessageLocationModel } from '../../Models/MessageLocationModel';\r\nimport { GridSetupModel } from '../../Models/GridSetupModel';\r\nimport { CellModel } from '../../Models/CellModel';\r\nimport { ChannelModel } from '../../Models/ChannelMapModel';\r\nimport { ChannelColorEnum } from '../../Models/ChannelColorsEnum';\r\nimport { DirectionEnum } from '../../Models/DirectionEnum';\r\nimport { MachineId } from '../../MachineStore/MachineId';\r\nimport { MachineStore } from '../../MachineStore/MachineStore';\r\nimport  NumberInput  from \"../NumberInput/NumberInput\";\r\n\r\n\r\nexport class Grid extends React.Component<GridProps>{\r\n\r\n    private store: MachineStore;\r\n    constructor(props: GridProps) {\r\n        super(props);\r\n        this.ChannelChanged = this.ChannelChanged.bind(this);\r\n        this.MachineMoved = this.MachineMoved.bind(this);\r\n        this.MachineAdded = this.MachineAdded.bind(this);\r\n        this.MachineRemoved = this.MachineRemoved.bind(this);\r\n        this.RowsChanged = this.RowsChanged.bind(this);\r\n        this.ColumnsChanged = this.ColumnsChanged.bind(this);\r\n\r\n        this.store = MachineStore.GetStore();\r\n    }\r\n\r\n    public render() {\r\n        var rows = [];\r\n        for (var rowIndex = 0; rowIndex < this.props.GridSetup.NumberOfRows; rowIndex++) {\r\n            var row = [];\r\n            for (var columnIndex = 0; columnIndex < this.props.GridSetup.NumberOfColumns; columnIndex++) {\r\n                let foundMachineInstance: MachineInstanceModel | undefined = undefined;\r\n                let foundMessage: MessageLocationModel | undefined = undefined;\r\n\r\n                for (const machineInstance of this.props.GridSetup.MachineInstances) {\r\n                    if (machineInstance.Cell.Column === columnIndex && machineInstance.Cell.Row === rowIndex) {\r\n                        foundMachineInstance = machineInstance;\r\n                    }\r\n                }\r\n\r\n                for (const message of this.props.Messages) {\r\n                    if (message.Cell!.Column === columnIndex && message.Cell!.Row === rowIndex) {\r\n                        foundMessage = message;\r\n                    }\r\n                }\r\n\r\n                row.push(<Cell \r\n                    key={columnIndex} \r\n                    machineInstance={foundMachineInstance} \r\n                    message={foundMessage} \r\n                    OnChanged={this.ChannelChanged} \r\n                    OnMovedMachine={this.MachineMoved} \r\n                    OnNewMachine={this.MachineAdded} \r\n                    OnMachineRemoved={this.MachineRemoved}\r\n                    location={{ Row: rowIndex, Column: columnIndex }} />);\r\n            }\r\n            rows.push(<div key={rowIndex}>{row}</div>);\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                {rows}\r\n                <label>Rows:</label>\r\n                <NumberInput value={this.props.GridSetup.NumberOfRows} valueChanged={this.RowsChanged}/>\r\n                <label>Columns:</label>\r\n                <NumberInput value={this.props.GridSetup.NumberOfColumns} valueChanged={this.ColumnsChanged}/>\r\n            </div>\r\n           \r\n        );\r\n    }\r\n\r\n    private ChannelChanged(machineInstance: MachineInstanceModel) {\r\n        const newGridSetup: GridSetupModel = {\r\n            NumberOfColumns: this.props.GridSetup.NumberOfColumns,\r\n            NumberOfRows: this.props.GridSetup.NumberOfRows,\r\n            MachineInstances: this.props.GridSetup.MachineInstances.map((mi) =>\r\n                (mi.Cell.Column === machineInstance.Cell.Column && mi.Cell.Row === machineInstance.Cell.Row) ?\r\n                    machineInstance\r\n                    :\r\n                    mi)\r\n        };\r\n\r\n        this.props.OnChanged(newGridSetup);\r\n    }\r\n\r\n    private ColumnsChanged(value: number) {\r\n        const newGridSetup: GridSetupModel = {\r\n            NumberOfColumns: value,\r\n            NumberOfRows: this.props.GridSetup.NumberOfRows,\r\n            MachineInstances: this.props.GridSetup.MachineInstances\r\n        };\r\n\r\n        this.props.OnChanged(newGridSetup);\r\n    }\r\n\r\n    private RowsChanged(value: number) {\r\n        const newGridSetup: GridSetupModel = {\r\n            NumberOfColumns: this.props.GridSetup.NumberOfColumns,\r\n            NumberOfRows: value,\r\n            MachineInstances: this.props.GridSetup.MachineInstances\r\n        };\r\n\r\n        this.props.OnChanged(newGridSetup);\r\n    }\r\n\r\n    private MachineMoved(id: number, location: CellModel): void {\r\n        const index = this.props.GridSetup.MachineInstances.findIndex((mi) => mi.Id === id);\r\n        this.props.GridSetup.MachineInstances[index].Cell = location;\r\n        this.props.OnChanged(this.props.GridSetup);\r\n    }\r\n    private MachineRemoved(id: number): void {\r\n        this.props.GridSetup.MachineInstances = this.props.GridSetup.MachineInstances.filter((mi) => mi.Id !== id);\r\n        this.props.OnChanged(this.props.GridSetup);\r\n    }\r\n    private MachineAdded(id: MachineId,location: CellModel): void {\r\n        const machine = this.store.GetMachineType(id);\r\n        const channels: ChannelModel[] = [];\r\n        if (machine.NumberOfOutputs > 0) {\r\n            channels.push({ Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Up });\r\n        }\r\n        if (machine.NumberOfOutputs > 1) {\r\n            channels.push({ Channel: ChannelColorEnum.Red, Direction: DirectionEnum.Down });\r\n        }\r\n        if (machine.NumberOfOutputs > 2) {\r\n            channels.push({ Channel: ChannelColorEnum.Blue, Direction: DirectionEnum.Right });\r\n        }\r\n        if (machine.NumberOfOutputs > 3) {\r\n            channels.push({ Channel: ChannelColorEnum.Yellow, Direction: DirectionEnum.Left });\r\n        }\r\n\r\n        const maxId =  (this.props.GridSetup.MachineInstances.length===0)? 0 : Math.max(...this.props.GridSetup.MachineInstances.map(mi => mi.Id));\r\n        \r\n        const machineInstance: MachineInstanceModel = {\r\n            Cell: location,\r\n            MachineId: id,\r\n            Channels: channels,\r\n            InputChannels: [],\r\n            Id: maxId + 1\r\n        }\r\n        this.props.GridSetup.MachineInstances.push(machineInstance);\r\n        this.props.OnChanged(this.props.GridSetup);\r\n    }\r\n}\r\n\r\n\r\n","import React from \"react\";\r\nimport { Props } from \"./Props\";\r\nimport { Machine } from \"../Machine/Machine\";\r\nimport { useDrag } from \"react-dnd\";\r\nimport { DragItemTypes } from \"../DragItemTypes\";\r\nimport { ChannelModel } from \"../../Models/ChannelMapModel\";\r\nimport { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { Channel } from \"../Channel/Channel\";\r\nimport { Constants } from \"../Constants\";\r\n\r\nconst StoredMachine: React.FC<Props> = (props) => {\r\n    const [, drag] = useDrag({\r\n        item: { type: DragItemTypes.NewMachine, id: props.machine.Id },\r\n        collect: monitor => ({\r\n            isDragging: !!monitor.isDragging(),\r\n        }),\r\n    })\r\n\r\n    const machineType = props.machine.GetType();\r\n    const channels: ChannelModel[] = [];\r\n    if (machineType.NumberOfOutputs > 0) {\r\n        channels.push({ Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Up });\r\n    }\r\n    if (machineType.NumberOfOutputs > 1) {\r\n        channels.push({ Channel: ChannelColorEnum.Red, Direction: DirectionEnum.Down });\r\n    }\r\n    if (machineType.NumberOfOutputs > 2) {\r\n        channels.push({ Channel: ChannelColorEnum.Blue, Direction: DirectionEnum.Right });\r\n    }\r\n    if (machineType.NumberOfOutputs > 3) {\r\n        channels.push({ Channel: ChannelColorEnum.Yellow, Direction: DirectionEnum.Left });\r\n    }\r\n\r\n    const channelComponents = channels.map((c, index) => <Channel key={index} ChannelMap={c} OnChanged={(cm) => { }} />);\r\n    const absoluteStyle: React.CSSProperties = {\r\n        position: \"absolute\",\r\n        \r\n        left: Constants.CellSize / 3\r\n    };\r\n    const labelStyle: React.CSSProperties ={\r\n        position: \"absolute\"       \r\n    }\r\n    return (\r\n        <div ref={drag} title={machineType.Description}>\r\n      \r\n            <div style={absoluteStyle}>\r\n                <Machine Machine={props.machine.GetType()} />\r\n            </div>\r\n            <div style={absoluteStyle}>\r\n                {channelComponents}\r\n            </div>\r\n            <label style={labelStyle}>{machineType.Name}</label>\r\n        </div>)\r\n}\r\n\r\nexport default StoredMachine","import { Props } from \"./Props\";\r\nimport React from \"react\";\r\nimport StoredMachine from \"../StoredMachine/StoredMachine\";\r\nimport {MachineStore as Store} from \"../../MachineStore/MachineStore\";\r\nimport { Constants } from \"../Constants\";\r\n\r\nconst MachineStore: React.FC<Props> = (props) => {\r\n\r\n    const machines = Store.GetStore().GetAllMachine();\r\n    const relativeStyle: React.CSSProperties = {\r\n        position: \"relative\",\r\n        height: Constants.CellSize,\r\n        width: Constants.CellSize\r\n    };\r\n\r\n    const filteredMachines= machines.filter((m) => !props.disallowedMachines.some((mi) => mi.Id === m.Id.Id && mi.Type === m.Id.Type));\r\n    const storedMachines = filteredMachines.map((m, index) => <div style={relativeStyle} key={index}><StoredMachine machine={m} /></div>);\r\n\r\n    return (\r\n        <div style={{marginLeft: 50}}>\r\n            {storedMachines}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MachineStore","import { GridSetupModel } from \"../Models/GridSetupModel\";\r\nimport { MachineInstanceModel } from \"../Models/MachineInstanceModel\";\r\nimport { MessageLocationModel } from \"../Models/MessageLocationModel\";\r\nimport { CellModel } from \"../Models/CellModel\";\r\nimport { ChannelColorEnum } from \"../Models/ChannelColorsEnum\";\r\nimport { MachineStore } from \"../MachineStore/MachineStore\";\r\nimport { IActor } from \"../MachineStore/IActor\";\r\nimport { DirectionEnum } from \"../Models/DirectionEnum\";\r\n\r\nexport class Computer {\r\n    private setup: GridSetupModel;\r\n    private machines: { id: number, actor: IActor }[] = [];\r\n    private store: MachineStore;\r\n\r\n    constructor(setup: GridSetupModel) {\r\n        this.setup = setup;\r\n        this.store = MachineStore.GetStore();\r\n        this.GetMachines()\r\n    }\r\n\r\n    public NewSetup(setup: GridSetupModel){\r\n        this.setup = setup;\r\n        this.GetMachines();\r\n    }\r\n\r\n    private GetMachines(): void {\r\n        this.machines = this.setup.MachineInstances.map(mi => { return { id: mi.Id, actor: this.store.GetActor(mi.MachineId) }; });\r\n    }\r\n\r\n    public GetStartMachines() {\r\n        const startMachines: MachineInstanceModel[] = [];\r\n        for (const machineInstance of this.setup.MachineInstances) {\r\n            if (machineInstance.MachineId.Id < 4 && machineInstance.MachineId.Type === \"Default\") {\r\n                startMachines.push(machineInstance);\r\n            }\r\n        }\r\n\r\n        return startMachines;\r\n    }\r\n\r\n    public StartComputation(Input: string): MessageLocationModel[] {\r\n        const messageLocations: MessageLocationModel[] = [];\r\n        for (const machineInstance of this.GetStartMachines()) {\r\n            const direction = machineInstance.Channels[0].Direction;\r\n            const messageLocation: MessageLocationModel = { Content: Input, Direction: direction, Cell: machineInstance.Cell };\r\n            messageLocations.push(messageLocation);\r\n        }\r\n\r\n        return messageLocations;\r\n    }\r\n\r\n    public GetNextMessages(messages: MessageLocationModel[]): MessageLocationModel[]{\r\n        const nextMessages: MessageLocationModel[] = [];\r\n        for (const message of messages) {\r\n            let machine: MachineInstanceModel | undefined;\r\n            let messageCell: CellModel | undefined = message.Cell;\r\n\r\n            while (machine === undefined) {\r\n                messageCell = this.Move(messageCell!, message.Direction);\r\n                if (messageCell === undefined){\r\n                    break;\r\n                }\r\n\r\n                machine = this.setup.MachineInstances.find((mi) => mi.Cell.Column === messageCell!.Column && mi.Cell.Row === messageCell!.Row);\r\n            }\r\n\r\n            if (messageCell === undefined) {\r\n                nextMessages.push({ Cell: messageCell, Direction: message.Direction, Content: message.Content })\r\n                break;\r\n            }\r\n\r\n            let channel = ChannelColorEnum.Green;\r\n\r\n            const actor = this.machines.find((m) => m.id === machine!.Id)!.actor;\r\n            const nextContents = actor.Act({ Content: message.Content, Channel: channel });\r\n            for (const nextContent of nextContents) {\r\n                const channelMap = machine!.Channels.find((cm) => cm.Channel === nextContent.Channel);\r\n                if (channelMap === undefined) {\r\n                    throw Error(\"Channelmap \" + nextContent.Channel + \"undefined\");\r\n                }\r\n\r\n                const messageLocation: MessageLocationModel = { Cell: machine!.Cell, Content: nextContent.Content, Direction: channelMap.Direction }\r\n                nextMessages.push(messageLocation);\r\n            }\r\n        }\r\n\r\n        return nextMessages;\r\n    }\r\n\r\n    private Move(cell: CellModel, direction: DirectionEnum): CellModel | undefined {\r\n        switch (direction) {\r\n            case DirectionEnum.Down:\r\n                if (cell.Row === this.setup.NumberOfRows - 1) {\r\n                    return;\r\n                }\r\n                return { Column: cell.Column, Row: cell.Row + 1 };\r\n            case DirectionEnum.Up:\r\n                if (cell.Row === 0) {\r\n                    return;\r\n                }\r\n                return { Column: cell.Column, Row: cell.Row - 1 };\r\n            case DirectionEnum.Right:\r\n                if (cell.Column === this.setup.NumberOfColumns - 1) {\r\n                    return;\r\n                }\r\n                return { Column: cell.Column + 1, Row: cell.Row };\r\n            case DirectionEnum.Left:\r\n                if (cell.Column === 0) {\r\n                    return;\r\n                }\r\n                return { Column: cell.Column - 1, Row: cell.Row };\r\n        }\r\n    }\r\n\r\n}","import React from \"react\";\r\nimport { Props } from \"./Props\";\r\nimport { State } from \"./State\";\r\nimport { GridSetupModel } from \"../../Models/GridSetupModel\";\r\nimport NumberInput from \"../NumberInput/NumberInput\";\r\n\r\nexport class Settings extends React.Component<Props, State>{\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.ShowSetupString = this.ShowSetupString.bind(this);\r\n        this.LoadSetup = this.LoadSetup.bind(this);\r\n        this.SetupStringChanged = this.SetupStringChanged.bind(this);\r\n\r\n        this.state = { SetupString: \"\", NewSetupString: \"\" }\r\n    }\r\n    public render() {\r\n        const verticalFlex: React.CSSProperties = { marginRight: 50, display: \"flex\", flexWrap: \"wrap\", flexDirection: \"column\", justifyContent: \"space-evenly\", alignItems: \"stretch\" }\r\n        const margin: React.CSSProperties = { margin: 10, display: \"flex\", flexDirection: \"column\" };\r\n        return (\r\n            <div style={verticalFlex}>\r\n                <div style={margin}>\r\n                    <label title=\"Step time in tenths of seconds, lower for faster animations\">Step Time</label>\r\n                    <NumberInput value={this.props.StepTime}  valueChanged={this.props.OnStepTimeChanged} />\r\n                </div>\r\n                <div style={margin}>\r\n                    <button title={\"Show setup string, copy it so you can later restore your setup\"} onClick={this.ShowSetupString}>Show setup string</button>\r\n                    {this.props.ShowSetup && <input value={this.state.SetupString} />}\r\n                </div>\r\n                <div style={margin}>\r\n                    <label>Load Setup</label>\r\n                    <input value={this.state.NewSetupString} onChange={this.SetupStringChanged} />\r\n                    {this.state.NewSetupString !== \"\" && <button title={\"Load Setup, after having pasted a setup above, click to load this setup\"} onClick={this.LoadSetup}>Load setup</button>}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    private SetupStringChanged(event: React.ChangeEvent<HTMLInputElement>): void {\r\n        this.setState({ NewSetupString: event.target.value });\r\n    }\r\n\r\n    private ShowSetupString(): void {\r\n        this.setState({ SetupString: JSON.stringify(this.props.Setup) });\r\n        this.props.OnShowingSetup();\r\n    }\r\n\r\n    private LoadSetup(): void {\r\n        const setupModel = JSON.parse(this.state.NewSetupString) as GridSetupModel;\r\n        if (setupModel !== undefined) {\r\n            this.props.OnSetupChanged(setupModel);\r\n            this.setState({ NewSetupString: \"\" });\r\n        }\r\n    }\r\n}\r\n","import { Props } from \"./Props\";\r\nimport React from \"react\";\r\nimport { Setup } from \"../../Computing/Setup\";\r\nimport { Grid } from \"../Grid/Grid\";\r\nimport { State } from \"./State\";\r\nimport { MessageLocationModel } from \"../../Models/MessageLocationModel\";\r\nimport { Constants } from \"../Constants\";\r\nimport { GridSetupModel } from \"../../Models/GridSetupModel\";\r\nimport MachineStore from \"../MachineStore/MachineStore\";\r\nimport { Computer } from \"../../Computing/Computer\";\r\nimport { Settings } from \"../Settings/Settings\";\r\n\r\nexport class Game extends React.Component<Props, State>{\r\n    private computer: Computer;\r\n    private runningComputation: NodeJS.Timeout | undefined;\r\n    startMachines: any;\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.inputChanged = this.inputChanged.bind(this);\r\n        this.startComputation = this.startComputation.bind(this);\r\n        this.CalculateNextMessages = this.CalculateNextMessages.bind(this);\r\n        this.GridSetupChanged = this.GridSetupChanged.bind(this);\r\n        this.LoadSetup = this.LoadSetup.bind(this);\r\n        this.StepTimeChanged = this.StepTimeChanged.bind(this);\r\n        this.OnShowingSetup = this.OnShowingSetup.bind(this);\r\n        this.stopComputation = this.stopComputation.bind(this);\r\n        this.handleKeyPress = this.handleKeyPress.bind(this);\r\n\r\n\r\n        const setup = new Setup();\r\n        const gridSetup = setup.LoadGridSetup();\r\n        this.computer = new Computer(gridSetup);\r\n        this.state = { Computing: false, Messages: [], GridSetup: gridSetup, Input: \"\", Output: \"\", StepTime: 6, ShowingSetup: false };\r\n    }\r\n    private inputChanged(e: React.ChangeEvent<HTMLInputElement>): void {\r\n        let text = e.target.value;\r\n        text = text.replace(\"*\",\"\");\r\n        text = text.replace(\"<\",\"\");\r\n        text = text.replace(\">\",\"\");\r\n\r\n        this.setState({ Input: text});\r\n    }\r\n    private startComputation(): void {\r\n        this.stopComputation();\r\n        const messageLocations: MessageLocationModel[] = this.computer.StartComputation(this.state.Input);\r\n\r\n        this.setState({ Computing: true, Messages: messageLocations });\r\n        this.runningComputation = setTimeout(this.CalculateNextMessages, this.state.StepTime * 100);\r\n    }\r\n\r\n    private stopComputation(): void {\r\n        if (this.runningComputation){\r\n            clearTimeout(this.runningComputation);\r\n            this.runningComputation = undefined;\r\n            this.setState({Messages: [], Computing: false});\r\n        }\r\n    }\r\n\r\n    private CalculateNextMessages(): void {\r\n        const messages = this.computer.GetNextMessages(this.state.Messages);\r\n\r\n        const doneMessages = messages.filter(mm => mm.Cell === undefined);\r\n        if (doneMessages.length > 0) {\r\n            this.setState({ Output: doneMessages[0].Content });\r\n        }\r\n\r\n        const nextMessages = messages.filter(mm => mm.Cell !== undefined);\r\n        this.setState({ Messages: nextMessages });\r\n        if (nextMessages.length > 0) {\r\n            this.runningComputation = setTimeout(this.CalculateNextMessages, this.state.StepTime * 100);\r\n        } else {\r\n            this.setState({ Computing: false });\r\n        }\r\n    }\r\n\r\n    private LoadSetup(event: React.ChangeEvent<HTMLInputElement>): void {\r\n        const newValue = JSON.parse(event.target.value);\r\n        const newSetup = newValue as GridSetupModel;\r\n        if (newSetup !== undefined) {\r\n            this.GridSetupChanged(newSetup);\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        document.addEventListener(\"keydown\", (event) => this.handleKeyPress(event), false);\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        document.removeEventListener(\"keydown\", (event) => this.handleKeyPress(event), false);\r\n    }\r\n\r\n     public render() {\r\n        const startMachines = this.computer.GetStartMachines();\r\n\r\n        const disallowedStartMachines = startMachines.map((m) => m.MachineId);\r\n        const height = this.state.GridSetup.NumberOfRows * (Constants.CellSize + 2);\r\n        const width = this.state.GridSetup.NumberOfColumns * (Constants.CellSize + 2);\r\n        const gridSizeStyle: React.CSSProperties = { height: height, width: width };\r\n        const verticalFlex: React.CSSProperties = { display: \"flex\", flexWrap: \"wrap\", flexDirection: \"column\",  alignItems: \"center\" }\r\n        const horizontalFlex: React.CSSProperties = { display: \"flex\", flexWrap: \"wrap\", flexDirection: \"row\", justifyContent: \"space-between\" }\r\n\r\n        return (\r\n            <div style={verticalFlex}>\r\n                <h2>LogicBoxes</h2>\r\n                <div style={horizontalFlex}>\r\n                    <div>\r\n                        <Settings\r\n                            Setup={this.state.GridSetup}\r\n                            OnSetupChanged={this.GridSetupChanged}\r\n                            StepTime={this.state.StepTime}\r\n                            OnStepTimeChanged={this.StepTimeChanged}\r\n                            ShowSetup={this.state.ShowingSetup}\r\n                            OnShowingSetup={this.OnShowingSetup} />\r\n                    </div>\r\n                    <div style={verticalFlex}>\r\n                        <div style={gridSizeStyle}>\r\n                            <Grid\r\n                                GridSetup={this.state.GridSetup}\r\n                                Computing={this.state.Computing}\r\n                                Messages={this.state.Messages}\r\n                                OnChanged={this.GridSetupChanged} />\r\n                        </div>\r\n                        <div>\r\n                            <input\r\n                                value={this.state.Input}\r\n                                onChange={this.inputChanged} />\r\n                            <button onClick={this.startComputation} title={\"Start computation ([Enter])\"}>{this.state.Computing ? \"Restart\" : \"Start\"}</button>\r\n                            {this.state.Computing && <button onClick={this.stopComputation} title={\"Stop computation ([Space])\"}>Stop</button>}                           \r\n                        </div>\r\n                        <label>Output: {this.state.Output}</label>\r\n                    </div>\r\n                    <div>\r\n                        <MachineStore disallowedMachines={disallowedStartMachines} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n    private GridSetupChanged(newGridSetup: GridSetupModel): void {\r\n        this.computer.NewSetup(newGridSetup);\r\n        this.setState({ GridSetup: newGridSetup, ShowingSetup: false });\r\n    }\r\n\r\n    private StepTimeChanged(newStepTime: number): void {\r\n        this.setState({ StepTime: newStepTime });\r\n    }\r\n\r\n    private OnShowingSetup() {\r\n        this.setState({ ShowingSetup: true });\r\n    }\r\n\r\n    private handleKeyPress(event: KeyboardEvent): void {\r\n        switch (event.key) {\r\n            case \"Enter\":\r\n                this.startComputation();\r\n                break;\r\n            case \" \":\r\n                this.stopComputation();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport { Game } from './Components/Game/Game';\r\nimport { DndProvider } from 'react-dnd'\r\nimport HTML5Backend from 'react-dnd-html5-backend'\r\n\r\nconst App: React.FC = () => {\r\n  \r\n  return (\r\n    <DndProvider backend={HTML5Backend}><Game/></DndProvider>\r\n    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}