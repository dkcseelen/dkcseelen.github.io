{"version":3,"sources":["Models/ChannelColorsEnum.ts","Components/NumberInput/NumberInput.tsx","Helper/StoreHelper.ts","Redux/GameDataReducer/Actions.ts","Computing/MessageCleaner.ts","MachineStore/DefaultMachines/AddStarMachine.ts","MachineStore/DefaultMachines/AddZeroMachine.ts","MachineStore/DefaultMachines/CompareMachine.ts","MachineStore/DefaultMachines/CopyMachine.ts","MachineStore/DefaultMachines/DeleteMachine.ts","MachineStore/DefaultMachines/GreenStartMachine.ts","MachineStore/DefaultMachines/IncrementMachine.ts","MachineStore/DefaultMachines/MoveMachine.ts","MachineStore/DefaultMachines/RedStartMachine.ts","MachineStore/DefaultMachines/RotateMachine.ts","MachineStore/IMachine.ts","Components/Constants.ts","Helper/Guid.ts","Helper/TextInputHelper.ts","Helper/RandomStringHelper.ts","Models/DirectionEnum.ts","Levels/LevelHelper.ts","Levels/Levels/AppendLength.ts","Levels/Levels/GetLength.ts","Levels/Levels/GetType.ts","Levels/Levels/IsEmpty.ts","Levels/Levels/KeepNumbers.ts","Levels/Levels/PlusOne.ts","Levels/Levels/RemoveRepeats.ts","Levels/Levels/RotateBackwards.ts","Levels/Levels/Sandbox.ts","Levels/Levels/ReverseLimited.ts","Levels/Levels/Reverse.ts","Levels/Levels/CopyAll.ts","Levels/Levels/Decrement.ts","Levels/Levels/IncrementAll.ts","Levels/Levels/IncrementIncreasing.ts","Levels/Levels/JoinAll.ts","Levels/Levels/MakeTwins.ts","Levels/Levels/RemoveIfDuplicate.ts","Levels/Levels/RemoveUntilRepeat.ts","Levels/Levels/Trigger.ts","Levels/LevelStore.ts","Redux/GameDataReducer/PlayerReducer/LevelData.ts","Redux/GameDataReducer/Level/Reducer.ts","Helper/NewChannelSet.ts","Models/CellModel.ts","Components/Grid/Cell/MachineInstance/MachineDrawer/DrawConstants.ts","Helper/AngleHelper.ts","Helper/ColorHelper.ts","Helper/ArrayHelper.ts","Redux/GameDataReducer/PlayerReducer/GridSetup/GridSetupReducer.ts","Redux/GameDataReducer/PlayerReducer/GridSetup/MachineInstances/MachineInstancesReducer.ts","Helper/SetupHelper.ts","Redux/GameDataReducer/PlayerReducer/CustomMachinesHelper.ts","Redux/GameDataReducer/PlayerReducer/TypeProvider.ts","Redux/GameDataReducer/PlayerReducer/PlayerReducer.ts","Models/MachineApi.ts","Redux/GameDataReducer/GameReducer.ts","Redux/Store.ts","MachineStore/DefaultMachines/JoinActor.ts","MachineStore/DefaultMachines/JoinMachine.ts","MachineStore/DefaultMachines/SplitMachine.ts","MachineStore/DefaultMachines/BlueStartMachine.ts","MachineStore/DefaultMachines/YellowStartMachine.ts","MachineStore/MachineStore.ts","Redux/GameDataReducer/Level/Actions.ts","Redux/GameDataReducer/PlayerReducer/GridSetup/Actions.ts","Computing/Computer.ts","Components/Dashboard/Dashboard.tsx","Redux/GameDataReducer/PlayerReducer/GridSetup/MachineInstances/Actions.ts","Components/DragItemTypes.ts","Components/MessageFormatter.ts","Components/Grid/Cell/MachineInstance/ChannelClickArea/ChannelClickArea.tsx","Components/Grid/Cell/MachineInstance/ChannelClickArea/ChannelGroup.tsx","Components/Grid/Cell/MachineInstance/MachineDrawer/MachineDrawer.ts","Components/Grid/Cell/MachineInstance/MachineDrawer/MachineCircleDrawer.ts","Components/Grid/Cell/MachineInstance/MachineDrawer/MachineSquareDrawer.ts","Components/Grid/Cell/MachineInstance/MachineDrawer/MachineCanvasHolder.tsx","Components/Grid/Cell/MachineInstance/InputChannelClickArea/InputChannelClickArea.tsx","Components/Grid/Cell/MachineInstance/MachineInstance.tsx","Components/Grid/Cell/Cell.tsx","Components/Grid/Grid.tsx","Models/OutputStatusEnum.ts","Components/LevelDisplay/TestDisplay/MessageDisplay/MessageDisplay.tsx","Components/LevelDisplay/TestDisplay/TestDisplay.tsx","Components/LevelDisplay/LevelDisplay.tsx","Components/MachineCollection/StoredMachine/MachineDisplay/MachineDisplay.tsx","Redux/GameDataReducer/PlayerReducer/Actions.ts","Components/MachineCollection/StoredMachine/StoredMachine.tsx","Components/MachineCollection/MachineCollection.tsx","Helper/ClickHelper.ts","Components/Game/GameMenu/ChangeSizeComponent.tsx","Components/Game/GameMenu/EditMachine/EditMachine.tsx","Components/Game/GameMenu/GameMenu.tsx","Components/MachineCollection/DraggedMachine/DraggedMachine.tsx","Components/Grid/MovingElement.tsx","Components/StartMenu/MenuBox.tsx","Helper/TestHelper.ts","Components/Game/CheckLevel.tsx","Components/Game/Game.tsx","Components/StartMenu/Dialog/Player/NameDialog.tsx","Components/StartMenu/Dialog/ImportDialog.tsx","Components/StartMenu/Dialog/PlayersDialog.tsx","Components/StartMenu/StartMenu.tsx","Components/LevelSelectsScreen/LevelPreview/LevelPreview.tsx","Components/LevelSelectsScreen/LevelSelectScreen.tsx","App.tsx","index.tsx"],"names":["ChannelColorEnum","NumberInput","props","style","marginLeft","marginRight","onClick","valueChanged","value","GetActivePlayer","state","players","find","p","id","activePlayerId","GetActiveMachine","player","machines","m","Id","activeMachineId","GetCellSize","cellSize","SwitchScreen","screen","type","CleanStars","message","starNumber","replaceAll","RestoreStars","AddStarMachine","actor","Act","returnValue","content","Content","push","Channel","Green","Promise","resolve","this","Style","BorderColor","Color","Name","Description","Api","InputChannels","OutputChannels","DependingOn","DirectlyDependingOn","AddZeroMachine","CompareMachine","channel","length","Red","position","indexOf","substring","CopyMachine","index","DeleteMachine","GreenStartMachine","IncrementMachine","newMessage","char","String","fromCharCode","charCodeAt","slice","MoveMachine","RedStartMachine","RotateMachine","IsDefaultMachine","IsStartMachine","Constants","CreateGuid","array","Int32Array","window","crypto","getRandomValues","text","forEach","s","toString","CleanInput","input","CellSize","MinimumColumns","MinimumRows","MenuBackGround","GetRandomString","chars","allChars","minLength","maxLength","Math","round","random","charsLength","i","DirectionEnum","lowerLetters","upperLetters","digits","specials","GetDefaultTestInput","Order","GetTestInputsWithRepeatsInputs","repeat","AppendLength","AllowedMachines","LevelDescription","MachineDescription","Direction","Right","Status","Tests","inputs","showing","Cell","Row","Column","GetRandomTestInputs","GetTestExpectedOutputs","outputs","filter","GetLength","Up","GetType","Blue","Down","firstChar","IsEmpty","UseMachineColor","KeepNumbers","PlusOne","numberPart","copied","Number","parseInt","isNaN","RemoveRepeats","RotateBackwards","Sandbox","ReverseLimited","Reverse","CopyAll","Decrement","outputContent","startChar","result","done","DecrementChar","charSet","IncrementAll","IncrementChar","Increment","IncrementIncreasing","times","JoinAll","inputMin","inputMax","green","red","blue","yellow","numberOfInputs","channelTotal","channelNum","Yellow","GetMultiChannelInputs","sortedInputs","sort","o","MakeTwins","RemoveIfDuplicate","repeated","RemoveUntilRepeat","Trigger","LevelState","LevelStore","levels","init","level","l","undefined","Error","levelStore","LevelReducer","draft","action","levelId","GetStore","GetLevel","tests","map","t","actualOutputs","editable","allowedMachines","description","name","getOutputs","LoadLevel","newTest","max","testId","test","outputMessage","maxOrder","newInput","concat","newInputs","order","inputsUpdated","UpdateTest","GetNewChannelSet","api","includeInput","outputChannels","inputChannels","direction","color","GetDirectedChannelSet","hasMultipleInputs","inputChannelModels","c","orderedOutputChannels","group","AreEqual","cell","otherCell","halfSquareFactor","outputSplitFactor","DrawConstants","aperture","armLength","armAngle","PI","circleRadius","borderWidth","halfSquareSize","shadeOffset","outputSplit","outputLength","outputRadius","outputWidth","outputStartLength","center","apertureAngle","defiatingAngle","protrudingArm","asin","cos","GetAngleFromMonitor","monitor","offsetX","offsetY","xyCoord","xyCoordInit","AppStore","getState","atan2","y","x","GetAngleFromOffsets","getClientOffset","getInitialSourceClientOffset","GetAngleFromDirection","Left","CheckColorString","Option","toLowerCase","GetColorModel","startsWith","colors","split","enteredColor","GetColorCode","GetOpaqueColor","opacity","model","error","GetLighterColor","amount","GetGrayScaleColor","average","GetRandomColor","floor","Minimum","valueSelector","minimum","Infinity","minimumElement","element","Maximum","maximum","maximumElement","GridSetupReducer","typeProvider","borderColor","machineFixed","Setup","MachineInstances","mi","machineInstanceId","MachineId","DependingOnDeleted","machine","channelIndex","findIndex","relevantChannels","angle","newChannelArray","dc","inserted","baseAngle","draggedSplit","sin","machineInput","ic","some","maxId","machineInstance","machineId","newCell","GetMachineType","iac","MachineInstancesReducer","setup","deltaRow","deltaColumn","minimumColumn","minimumRow","maximumColumn","maximumRow","excessColumns","min","excessRows","NumberOfColumns","NumberOfRows","ResizeGrid","Move","GetStartMachines","startMachines","UpdateMachineStatus","newOutputChannel","matchingOutput","outputChannel","inputChannel","TypeProvider","customMachines","MachineStore","customMachine","cm","CreateNewMachine","ExitCells","EnrichState","dependingDirectly","depending","activeMachine","d","machineType","depMachine","DetermineDependencies","exitCells","cells","starts","cellModel","existingChannel","CalculateExits","deletedMachines","exitColors","ec","newApi","first","second","dependentMachines","dp","dependentMachine","CheckMachineStatus","UpdateStatusDependentMachines","SetApi","GameReducer","produce","messages","movingOutput","existingPlayer","data","newPlayer","GetNewPlayer","activePlayer","levelData","ld","LastUsedMachineId","State","NoMachineLinked","activeLevel","showAnimations","show","stepTime","newMachine","levelModel","InProgress","Completed","usedInLevel","directlyDependentMachines","updatedMachines","dm","PlayerReducer","CheckValidMachinesUsed","NonValidMachineUsed","CheckLevelCompleted","gameData","mu","every","am","createStore","localStorage","setItem","JSON","stringify","getItem","removeItem","parse","getInitialState","__REDUX_DEVTOOLS_EXTENSION__","AppState","JoinActor","greenInput","redInput","returnMessage","JoinMachine","SplitMachine","firstCharacterLength","BlueStartMachine","YellowStartMachine","parentStarNumber","FindMachine","GetActor","CreateCustomActor","computer","Computer","cleanedMessage","RunInput","then","mm","machineStore","ClearTestOutput","SetMessages","activeSetup","store","starNumberCounter","HandleNextMessages","bind","CalculateNextMessages","RunComputation","SetDelay","StopComputation","dispatch","RunInputs","orderedOutputs","catch","reason","reject","results","messageLocations","GetStartMachine","messageLocation","OrderNewCalculation","callback","args","timeout","clearHandle","setTimeout","cancelComputation","clearTimeout","nextMessages","outputMessages","stepCount","doneMessages","messageCell","cachedMachine","nextContents","nextContent","channelMap","doneMessage","Dashboard","connect","ShowAnimations","StepTime","UpdateStepTime","UpdateShowAnimations","display","justifyContent","width","height","paddingRight","title","flexDirection","ChangeChannel","DragItemTypes","FormatMessage","formattedMessage","seekPosition","lastIndex","ChannelClickArea","useDrag","item","MachineInstanceId","OffsetX","OffsetY","begin","OnClick","end","dropResult","didDrop","outputItem","adjustedAngle","collect","isDragging","drag","preview","channelStyle","widthFactor","marginFactor","heightFactor","pointerEvents","useEffect","getEmptyImage","captureDraggingState","ref","newDirection","ChannelGroup","ChannelModels","heightOffset","margin","baseOffsetX","baseOffsetY","deltaX","deltaY","channelSetStyle","marginTop","rotate","tempBaseOffsetX","rotation","transform","key","OnChanged","MachineDrawer","ctx","innerColor","draggedOutput","draggedDirection","backgroundColor","drawConstants","MachineStyle","MovingOutput","BackgroundColor","DrawBody","DrawInputGradient","outputGroup","DrawOutputGroup","DraggedOutputDrawer","DrawNoInputOutline","startIndex","endIndex","DrawInputOutline","shadowColor","shadowOffsetX","shadowOffsetY","isShade","ClearShadowStyle","filteredOutputs","increasedSplit","draggedIsDrawn","DrawOutputChannel","output","DrawDraggedOutput","offset","firstX","firstY","endX","endY","beginPath","moveTo","gradient","createRadialGradient","addColorStop","arcTo","lineTo","strokeStyle","lineWidth","stroke","mainAngle","outputOffset","differenceAngle","MachineCircleDrawer","arc","fillStyle","fill","startDirection","endDirection","localcenter","startDirectionAngle","startAngle","startInnerX","startInnerY","startOuterX","startOuterY","endDirectionAngle","endAngle","endInnerX","endInnerY","endOuterX","endOuterY","SetShadowStyle","directionAngle","endOuterAngle","startOuterAngle","grd","MachineSquareDrawer","closeSide","farSide","innerClose","innerFar","armProtrudingClose","armProtrudingFar","armWidthClose","armWidthFar","rect","currentDirection","createLinearGradient","MachineCanvasHolder","canvasRef","useRef","current","getContext","clearRect","IsDefault","DrawMachine","InputChannelClickArea","onClicked","event","React","Component","MachineInstance","ownProps","background","MachineInstanceProp","machineStyle","ChangeOwnChannel","ChangeInputChannel","FixMachine","onInputChannelClick","currentIndex","newChannel","machineSize","borderBottom","boxSizing","machineMargin","oc","cellId","exit","Exit","Message","OnNewMachine","OnMovedMachine","useDrop","accept","drop","itemProps","smallHeigth","smallWidth","border","float","ExitThickness","borderRight","borderLeft","borderTop","marginBottom","OutputStatus","Grid","Rows","Columns","rows","rowIndex","row","columnIndex","borderStyle","MessageDisplay","flexFlow","Input","statusStyle","Fullfilled","Editable","NotFullfilled","NotMatched","Remove","AllowedInputColors","onChange","OnMessageChanged","target","cc","TestDisplay","RemoveTest","RemoveInput","UpdateInput","AddInput","useState","setError","Test","expectedOutputs","NotChecked","MultipleInputsEditable","actuals","j","expected","valid","indexActual","splice","IsSandBoxLevel","CanPlay","flexGrow","alignSelf","LevelDisplay","Level","AddTest","a","Height","overflow","CompleteLevel","size","MachineDisplay","MachineType","AddNewMachine","ChangeCellSize","StoredMachine","status","LoadCustomMachine","showMenu","changeShow","isDefault","MachineCollection","GetAllMachines","disallowedMachines","allowedStartMachines","usedStartMachines","nextStartMachine","allowedCustomMachines","dis","storedMachines","StopPropagation","stopPropagation","ChangeSizeComponent","setSize","channels","padding","newSize","currentTarget","className","Close","EditMachine","SetName","SetDescription","SetColor","SetBorderColor","setColor","setBorderColor","dialogBorderColor","colorChanged","borderChanged","cols","GameMenu","hasActiveMachine","dialog","setdialog","alignItems","DraggedMachine","MovingElement","calculatedHeight","calculatedWidth","WindowWidth","leftStart","setLeftStart","WindowHeight","topStart","setTopStart","finalOffset","setFinalOffset","offSet","getDifferenceFromInitialOffset","useDragLayer","getItemType","left","top","children","MenuBox","CheckTest","expecteds","setTestsSucceeded","showingTest","CheckLevel","SetLevelComplete","SetCustomTest","setState","testsSucceeded","failedTest","setFailedTest","RunTests","failingTest","close","Game","HasActiveMachine","MachineName","ClearMessages","SetMovingOutput","RemoveMachine","menu","setMenu","innerHeight","setHeight","innerWidth","setWidth","document","addEventListener","handleKeyPress","handleResize","removeEventListener","isOver","dragPreviewElement","draggedOutputAngle","allowedInputColors","opagueBackground","onWheel","currentSize","textAlign","right","AllowedInputs","NameDialog","setName","onKeyUp","ImportDialog","ImportPlayerData","setData","setMessage","playerModel","PlayersDialog","active","ChangePlayerName","DeletePlayer","SwitchPlayer","AddPlayer","setDialog","selectedPlayer","setSelectedPlayer","playerIdToBeDeleted","setPlayerIdToBeDeleted","playerData","setPlayerData","disabled","SetExportDialog","navigator","clipboard","writeText","StartMenu","continueLevel","playerName","LevelPreview","Data","Inputs","showLabel","setShowLabel","onMouseOver","onMouseOut","fontFamily","LevelSelectScreen","levelModels","setLevelModels","GetAllLevels","models","maxColumn","completedLevels","lm","completedLevel","nextLevel","cl","App","backend","HTML5Backend","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.44594006.chunk.js","sourcesContent":["export enum ChannelColorEnum {\n    Green = \"green\",\n    Red = \"red\",\n    Blue = \"blue\",\n    Yellow = \"#fff020\",\n}","import React from \"react\";\nimport { Props } from \"./Props\";\n\nconst NumberInput: React.FC<Props> = (props) => {\n    const IncreaseValue: () => void = () => {\n        props.valueChanged(props.value + 1);\n    };\n    const DecreaseValue: () => void = () => {\n        props.valueChanged(props.value - 1);\n    };\n\n    const style: React.CSSProperties = { marginLeft: 5, marginRight: 5 };\n\n    return (<div>\n        <button style={style} onClick={DecreaseValue}>-</button>\n        <label >{props.value}</label>\n        <button style={style} onClick={IncreaseValue}>+</button>\n    </div>);\n};\n\nexport default NumberInput;","import { GameData } from \"../Redux/GameDataReducer/GameModel\";\r\nimport { PlayerModel } from \"../Redux/GameDataReducer/PlayerReducer/PlayerModel\";\r\nimport { CustomMachineModel } from \"../Redux/GameDataReducer/PlayerReducer/GridSetup/CustomMachineModel\";\r\n\r\nexport function GetActivePlayer(state: GameData): PlayerModel|undefined {\r\n    return state.players.find((p) => p.id === state.activePlayerId);\r\n}\r\n\r\nexport function GetActiveMachine(state: GameData): CustomMachineModel | undefined {\r\n    const player = GetActivePlayer(state);\r\n\r\n    const newActiveMachine = player?.machines.find((m) => m.Id === player.activeMachineId);\r\n\r\n    return newActiveMachine;\r\n}\r\n\r\nexport function GetCellSize(state: GameData): number{\r\n    return GetActivePlayer(state)!.cellSize;    \r\n}","import { MovingOutputChannel } from \"../../Components/DragItemTypes\";\r\nimport { ScreenType } from \"./GameModel\";\r\nimport { PlayerModel } from \"./PlayerReducer/PlayerModel\";\r\n\r\ninterface SwitchScreen {\r\n    type: \"SwitchScreen\";\r\n    screen: ScreenType;\r\n}\r\n\r\nexport function SwitchScreen(screen: ScreenType): ActionTypes {\r\n    return {\r\n        type: \"SwitchScreen\",\r\n        screen\r\n    };\r\n}\r\n\r\ninterface ChangePlayerName {\r\n    type: \"ChangePlayerName\";\r\n    id: string;\r\n    name: string;\r\n}\r\n\r\nexport function ChangePlayerName(name: string, id: string): ActionTypes {\r\n    return {\r\n        type: \"ChangePlayerName\",\r\n        id,\r\n        name\r\n    };\r\n}\r\n\r\ninterface ImportPlayerData {\r\n    type: \"ImportPlayerData\";\r\n    data: PlayerModel;\r\n}\r\n\r\nexport function ImportPlayerData(data: PlayerModel): ActionTypes {\r\n    return {\r\n        type: \"ImportPlayerData\",\r\n        data\r\n    };\r\n}\r\n\r\ninterface SwitchPlayer {\r\n    type: \"SwitchPlayer\";\r\n    id: string;\r\n}\r\n\r\nexport function SwitchPlayer(id: string): ActionTypes {\r\n    return {\r\n        type: \"SwitchPlayer\",\r\n        id\r\n    };\r\n}\r\n\r\ninterface DeletePlayer {\r\n    type: \"DeletePlayer\";\r\n    id: string;\r\n}\r\n\r\nexport function DeletePlayer(id: string): ActionTypes {\r\n    return {\r\n        type: \"DeletePlayer\",\r\n        id\r\n    };\r\n}\r\n\r\n\r\ninterface AddPlayer {\r\n    type: \"AddPlayer\";\r\n    name: string;\r\n}\r\n\r\nexport function AddPlayer(name: string): ActionTypes {\r\n    return {\r\n        type: \"AddPlayer\",\r\n        name\r\n    };\r\n}\r\n\r\n\r\ninterface UpdateStepTime {\r\n    type: \"UpdateStepTime\";\r\n    stepTime: number;\r\n}\r\n\r\nexport function UpdateStepTime(stepTime: number): ActionTypes {\r\n    return {\r\n        type: \"UpdateStepTime\",\r\n        stepTime\r\n    };\r\n}\r\n\r\ninterface UpdateShowAnimations {\r\n    type: \"UpdateShowAnimations\";\r\n    show: boolean;\r\n}\r\n\r\nexport function UpdateShowAnimations(show: boolean): ActionTypes {\r\n    return {\r\n        type: \"UpdateShowAnimations\",\r\n        show\r\n    };\r\n}\r\ninterface SetMovingOutput {\r\n    type: \"SetMovingOutput\";\r\n    outputChannel: MovingOutputChannel | undefined;\r\n}\r\n\r\nexport function SetMovingOutput(outputChannel: MovingOutputChannel | undefined): ActionTypes {\r\n    return {\r\n        type: \"SetMovingOutput\",\r\n        outputChannel\r\n    };\r\n}\r\nexport type ActionTypes = UpdateStepTime | UpdateShowAnimations | SwitchScreen\r\n| ChangePlayerName | SetMovingOutput | ImportPlayerData | SwitchPlayer | DeletePlayer | AddPlayer;","export function CleanStars(message: string, starNumber: number): string {\n    return message.replaceAll(\"*\", `{${starNumber}}`);\n};\n\nexport function RestoreStars(message: string, starNumber: number): string {\n    return message.replaceAll(`{${starNumber}}`,\"*\");\n};","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\n\r\nexport class AddStarMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            const content = \"*\" + message.Content;\r\n\r\n            returnValue.push({ Content: content, Channel: ChannelColorEnum.Green });\r\n            return Promise.resolve(returnValue);\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Style: {\r\n                BorderColor: \"blue\",\r\n                Color: \"grey\",\r\n                Name: \"Add *\",\r\n                Description: \"Puts a star in front of the string. Each machine adds a unique star, so the star added can only be equal to another star added by this machine\"\r\n            },\r\n            Api: {\r\n                InputChannels: [ChannelColorEnum.Green],\r\n                OutputChannels: [ChannelColorEnum.Green],\r\n            },\r\n            DependingOn: [],\r\n            DirectlyDependingOn: []\r\n        };\r\n    }\r\n    public id = \"10\";\r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\n\r\nexport class AddZeroMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            const content = \"0\" + message.Content;\r\n\r\n            returnValue.push({ Content: content, Channel: ChannelColorEnum.Green });\r\n            return Promise.resolve(returnValue);\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Style: {\r\n                BorderColor: \"#fff020\",\r\n                Color: \"darkorange\",\r\n                Name: \"Add 0\",\r\n                Description: \"Puts a zero in front of the string\"\r\n            },\r\n            Api: {\r\n                InputChannels: [ChannelColorEnum.Green],\r\n                OutputChannels: [ChannelColorEnum.Green],\r\n            },\r\n            DependingOn: [],\r\n            DirectlyDependingOn: []\r\n        };\r\n    }\r\n    public id = \"11\";\r\n}\r\n","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\n\r\nexport class CompareMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            let channel: ChannelColorEnum = ChannelColorEnum.Green;\r\n            if (message.Content.length < 2) {\r\n                channel = ChannelColorEnum.Red;\r\n            } else {\r\n                if (message.Content[0] !== \"{\") {\r\n                    if (message.Content[0] !== message.Content[1]) {\r\n                        channel = ChannelColorEnum.Red;\r\n                    }\r\n                } else {\r\n                    const position = message.Content.indexOf(\"}\");\r\n                    const starNumber = message.Content.substring(0, position + 1);\r\n                    if (message.Content.length < starNumber.length * 2) {\r\n                        channel = ChannelColorEnum.Red;\r\n                    } else {\r\n                        const secondPart = message.Content.substring(position + 1, position + starNumber.length + 1);\r\n                        if (secondPart !== starNumber) {\r\n                            channel = ChannelColorEnum.Red;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            returnValue.push({ Content: message.Content, Channel: channel });\r\n            return Promise.resolve(returnValue);\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Style: {BorderColor: \"red\",\r\n            Color: \"green\",\r\n            Name: \"Compare\",\r\n            Description: \"Compares the first two characters in the string. If they are the same, exits green. If they are different exits red\"},\r\n            Api: {\r\n                InputChannels: [ChannelColorEnum.Green],\r\n                OutputChannels: [ChannelColorEnum.Green, ChannelColorEnum.Red],\r\n            },\r\n            DependingOn: [],\r\n            DirectlyDependingOn: []\r\n        };\r\n    }\r\n    public id = \"9\";\r\n}\r\n","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\n\r\nexport class CopyMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            let content: string;\r\n            if (message.Content.length < 1) {\r\n                content = \"\";\r\n            } else {\r\n                if (message.Content[0] !== \"{\") {\r\n                    content = message.Content[0] + message.Content;\r\n                } else {\r\n                    const index = message.Content.indexOf(\"}\");\r\n                    content = message.Content.substring(0, index + 1) + message.Content;\r\n                }\r\n            }\r\n\r\n            returnValue.push({ Content: content, Channel: ChannelColorEnum.Green });\r\n            return Promise.resolve(returnValue);\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Style: {\r\n                BorderColor: \"green\",\r\n                Color: \"yellow\",\r\n                Name: \"Copy\",\r\n                Description: \"Copies the first character of the string and puts it in front of the string\"\r\n            },\r\n            Api: {\r\n                InputChannels: [ChannelColorEnum.Green],\r\n                OutputChannels: [ChannelColorEnum.Green],\r\n            },\r\n            DependingOn: [],\r\n            DirectlyDependingOn: []\r\n        };\r\n    }\r\n    public id = \"6\";\r\n}\r\n","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\n\r\nexport class DeleteMachine implements IMachine {\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            let content: string;\r\n            if (message.Content.length < 1) {\r\n                content = \"\";\r\n            } else {\r\n                if (message.Content[0] !== \"{\") {\r\n                    content = message.Content.substring(1);\r\n                } else {\r\n                    const index = message.Content.indexOf(\"}\");\r\n                    content = message.Content.substring(index + 1);\r\n                }\r\n            }\r\n\r\n            returnValue.push({ Content: content, Channel: ChannelColorEnum.Green });\r\n            return Promise.resolve(returnValue);\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Style: {\r\n                BorderColor: \"firebrick\",\r\n                Color: \"red\",\r\n                Name: \"Delete\",\r\n                Description: \"Deletes the first character of the string\"\r\n            },\r\n            Api: {\r\n                InputChannels: [ChannelColorEnum.Green],\r\n                OutputChannels: [ChannelColorEnum.Green],\r\n            },\r\n            DependingOn: [],\r\n            DirectlyDependingOn: []\r\n        };\r\n    }\r\n    public id = \"7\";\r\n}\r\n","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\n\r\nexport class GreenStartMachine implements IMachine {\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            returnValue.push({ Content: message.Content, Channel: ChannelColorEnum.Green });\r\n            return Promise.resolve(returnValue);\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Style: {\r\n                Color: \"white\",\r\n                BorderColor: \"green\",\r\n                Name: \"Start\",\r\n                Description: \"Starting point of the computation. Acts as a move machine for all other purposes\"\r\n            },\r\n            Api: {\r\n                InputChannels: [ChannelColorEnum.Green],\r\n                OutputChannels: [ChannelColorEnum.Green],\r\n            },\r\n            DependingOn: [],\r\n            DirectlyDependingOn: []\r\n        };\r\n    }\r\n    public readonly id = \"0\";\r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\n\r\nexport class IncrementMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            let newMessage = \"\";\r\n            if (message.Content.length > 0) {\r\n                const char = message.Content[0];\r\n\r\n                if ((char >= \"0\" && char <= \"8\") || (char >= \"a\" && char < \"z\") || (char >= \"A\" && char < \"Z\")) {\r\n                    newMessage = String.fromCharCode(char.charCodeAt(0) + 1) + message.Content.slice(1);\r\n                } else if (char === \"9\") {\r\n                    newMessage = \"0\" + message.Content.slice(1);\r\n                } else if (char === \"z\") {\r\n                    newMessage = \"a\" + message.Content.slice(1);\r\n                } else if (char === \"Z\") {\r\n                    newMessage = \"A\" + message.Content.slice(1);\r\n                } else {\r\n                    newMessage = message.Content;\r\n                }\r\n            }\r\n\r\n            returnValue.push({ Content: newMessage, Channel: ChannelColorEnum.Green });\r\n            return Promise.resolve(returnValue);\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Style: {\r\n                BorderColor: \"DodgerBlue\",\r\n                Color: \"MediumVioletRed\",\r\n                Name: \"Increment\",\r\n                Description: \"Increases a number in front of the string by 1, makes a letter the next letter in the alphabet. 9 becomes 0, z becomes a. All other starting characters are not changed\"\r\n            },\r\n            Api: {\r\n                InputChannels: [ChannelColorEnum.Green],\r\n                OutputChannels: [ChannelColorEnum.Green],\r\n            },\r\n            DependingOn: [],\r\n            DirectlyDependingOn: []\r\n        };\r\n    }\r\n    public id = \"12\";\r\n}\r\n","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\n\r\nexport class MoveMachine implements IMachine {\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            returnValue.push({ Content: message.Content, Channel: ChannelColorEnum.Green });\r\n            return Promise.resolve(returnValue);\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Style: {\r\n                Color: \"green\",\r\n                BorderColor: \"lightgreen\",\r\n                Name: \"Move\",\r\n                Description: \"Does nothing with the string, only used to get the message to the right place\"\r\n            },\r\n            Api: {\r\n                InputChannels: [ChannelColorEnum.Green],\r\n                OutputChannels: [ChannelColorEnum.Green],\r\n            },\r\n            DependingOn: [],\r\n            DirectlyDependingOn: []\r\n        };\r\n    }\r\n    public readonly id = \"5\";\r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\n\r\nexport class RedStartMachine implements IMachine {\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            returnValue.push({ Content: message.Content, Channel: ChannelColorEnum.Green });\r\n            return Promise.resolve(returnValue);\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Style: {\r\n                Color: \"white\",\r\n                BorderColor: \"red\",\r\n                Name: \"Start\",\r\n                Description: \"Starting point of the computation. Acts as a move machine for all other purposes\"\r\n            },\r\n            Api: {\r\n                InputChannels: [ChannelColorEnum.Green],\r\n                OutputChannels: [ChannelColorEnum.Green],\r\n            },\r\n            DependingOn: [],\r\n            DirectlyDependingOn: []\r\n        };\r\n    }\r\n    public readonly id= \"1\";\r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\n\r\nexport class RotateMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            let content: string;\r\n            if (message.Content.length < 2) {\r\n                content = message.Content;\r\n            } else {\r\n                if (message.Content[0] !== \"{\") {\r\n                    content = message.Content.substring(1) + message.Content.substring(0, 1);\r\n                } else {\r\n                    const index = message.Content.indexOf(\"}\");\r\n                    content = message.Content.substring(index + 1) + message.Content.substring(0, index + 1);\r\n                }\r\n            }\r\n\r\n            returnValue.push({ Content: content, Channel: ChannelColorEnum.Green });\r\n            return Promise.resolve(returnValue);\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Style: {\r\n                BorderColor: \"blue\",\r\n                Color: \"cyan\",\r\n                Name: \"Rotate\",\r\n                Description: \"Removes the first character of the string, and adds it to the end of the string\"\r\n            },\r\n            Api: {\r\n                InputChannels: [ChannelColorEnum.Green],\r\n                OutputChannels: [ChannelColorEnum.Green],\r\n            },\r\n            DependingOn: [],\r\n            DirectlyDependingOn: []\r\n        };\r\n    }\r\n    public id = \"8\";\r\n}\r\n","import { IActor } from \"./IActor\";\r\nimport { IMachineType } from \"./IMachineType\";\r\n\r\nexport interface IMachine {\r\n    GetActor(): IActor;\r\n    GetType(): IMachineType;\r\n    id: string;\r\n}\r\n\r\nexport function IsDefaultMachine(id: string): boolean {\r\n    return id.length < 6;\r\n}\r\n\r\nexport function IsStartMachine(id: string): boolean {\r\n    return id === \"0\" || id === \"1\" || id === \"2\" || id === \"3\";\r\n}","export class Constants {\n    public static CellSize = 100;\n    public static MinimumColumns = 6;\n    public static MinimumRows = 5;\n    public static MenuBackGround = \"rgba(255,255,255,0.86)\";\n}","export function CreateGuid(): string {\r\n    let array = new Int32Array(4);\r\n    array = window.crypto.getRandomValues(array);\r\n    let text = \"\";\r\n    array.forEach((s) => {text += s.toString(16)});\r\n\r\n    return text;\r\n}","export function CleanInput(input: string): string{\r\n    input = input.replaceAll(\"(\",\"\").replaceAll(\")\",\"\").replaceAll(\"{\",\"\").replaceAll(\"}\",\"\");\r\n\r\n    return input;\r\n}","export function GetRandomString(chars: string = allChars, minLength: number = 4, maxLength: number = 12): string{\r\n    const length = Math.round(Math.random() * (maxLength - minLength)) + minLength;\r\n    let text = \"\";\r\n    const charsLength = chars.length;\r\n    for(let i = 0; i < length; i++){\r\n        text += chars[Math.round(Math.random()*(charsLength - 1))];\r\n    }\r\n\r\n    return text;\r\n}\r\n\r\nexport const lowerLetters = \"abcdefghijklmnopqrstuvwxyz\";\r\nexport const upperLetters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\nexport const digits = \"0123456789\";\r\nexport const specials = \"!@#$%^&_-+= []\\\\|:;?.,/'\";\r\nexport const allChars = lowerLetters + upperLetters + digits + specials;","export enum DirectionEnum {\n    Up,\n    Right,\n    Down,\n    Left\n}","import { allChars, GetRandomString } from \"../Helper/RandomStringHelper\";\r\nimport { ChannelColorEnum } from \"../Models/ChannelColorsEnum\";\r\nimport { OrderedMessageModel } from \"../Models/OrderedMessageModel\";\r\n\r\nexport function GetDefaultTestInput(chars?: string, minLength?: number, maxLength?: number): OrderedMessageModel[] {\r\n    const inputs: OrderedMessageModel[] = [{\r\n        Order: 0,\r\n        Channel: ChannelColorEnum.Green,\r\n        Content: GetRandomString(chars, minLength, maxLength)\r\n    }];\r\n\r\n    return inputs;\r\n}\r\n\r\n\r\nexport function GetMultiChannelInputs(inputMin: number, inputMax: number, green: number, red: number, blue: number, yellow: number): OrderedMessageModel[] {\r\n    const numberOfInputs = Math.round(Math.random() * (inputMax - inputMin)) + inputMin;\r\n    const inputs: OrderedMessageModel[] = [];\r\n    const channelTotal = green + red + blue + yellow;\r\n    for (let i = 0; i < numberOfInputs; i++) {\r\n        const channelNum = Math.random() - 0.499 * channelTotal;\r\n        let channel: ChannelColorEnum = ChannelColorEnum.Green;\r\n        if (channelNum < yellow) {\r\n            channel = ChannelColorEnum.Yellow;\r\n        } else if (channelNum < yellow + blue) {\r\n            channel = ChannelColorEnum.Blue;\r\n        } else if (channelNum < yellow + blue + red) {\r\n            channel = ChannelColorEnum.Blue;\r\n        }\r\n\r\n        inputs.push({\r\n            Channel: channel,\r\n            Order: i,\r\n            Content: GetRandomString()\r\n        })\r\n    }\r\n\r\n    return inputs;\r\n}\r\n\r\nexport function GetTestInputsWithRepeatsInputs(): OrderedMessageModel[] {\r\n    const length = Math.round(Math.random() * (6)) + 3;\r\n    let text = \"\";\r\n    const charsLength = allChars.length;\r\n    for (let i = 0; i < length; i++) {\r\n        const char = allChars[Math.round(Math.random() * (charsLength - 1))];\r\n        let repeat = Math.round(Math.random() * 6);\r\n        if (repeat === 0) {\r\n            repeat++\r\n        }\r\n        text += char.repeat(repeat);\r\n    }\r\n\r\n    const inputs: OrderedMessageModel[] = [{\r\n        Order: 0,\r\n        Channel: ChannelColorEnum.Green,\r\n        Content: text\r\n    }];\r\n\r\n    return inputs;\r\n}","import { allChars } from \"../../Helper/RandomStringHelper\";\r\nimport { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { OrderedMessageModel } from \"../../Models/OrderedMessageModel\";\r\nimport { GetDefaultTestInput } from \"../LevelHelper\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const AppendLength: LevelModel = {\r\n    AllowedMachines: [\"0\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"],\r\n    LevelDescription: \"The machine should append the length of the input string to the string\",\r\n    MachineDescription: \"Appends the length of the input string to the string\",\r\n    Name: \"AppendLength\",\r\n    Id: \"13\",\r\n    Style: {\r\n        Color: \"Brown\",\r\n        BorderColor: \"RebeccaPurple\",\r\n    },\r\n    InputChannels: [],\r\n    OutputChannels: [\r\n        { Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Right, Status: \"Exists\" },\r\n    ],\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"four\" }],\r\n            showing: true\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"aabccd\" }],\r\n            showing: false\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"1\" }],\r\n            showing: true\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            showing: true\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"This is hard\" }],\r\n            showing: true\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"This might even be harder\" }],\r\n            showing: true\r\n        }\r\n    ],\r\n    Cell: {\r\n        Row: 1,\r\n        Column: 7\r\n    },\r\n    GetRandomTestInputs: () => GetDefaultTestInput(allChars, 0, 30),\r\n    GetTestExpectedOutputs: GetOutputs\r\n};\r\n\r\nfunction GetOutputs(inputs: OrderedMessageModel[]): OrderedMessageModel[] {\r\n    const outputs: OrderedMessageModel[] = [];\r\n    for (const input of inputs.filter(i => i.Channel === ChannelColorEnum.Green)){\r\n        outputs.push({\r\n            Channel: ChannelColorEnum.Green,\r\n            Order: input.Order,\r\n            Content: input.Content + input.Content.length.toString()\r\n        })\r\n    }\r\n\r\n    return outputs;    \r\n}","import { allChars } from \"../../Helper/RandomStringHelper\";\r\nimport { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { OrderedMessageModel } from \"../../Models/OrderedMessageModel\";\r\nimport { GetDefaultTestInput } from \"../LevelHelper\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const GetLength: LevelModel = {\r\n    AllowedMachines: [\"0\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"],\r\n    LevelDescription: \"The machine should return the length of the input string\",\r\n    MachineDescription: \"Returns the length of the input string\",\r\n    Name: \"GetLength\",\r\n    Id: \"15\",\r\n    Style: {\r\n        Color: \"GoldenRod\",\r\n        BorderColor: \"Orchid\",\r\n    },\r\n    InputChannels: [],\r\n    OutputChannels: [\r\n        { Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Up, Status: \"Exists\" },\r\n    ],\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"four\" }],\r\n            showing: true\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"aabccd\" }],\r\n            showing: false\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"1\" }],\r\n            showing: false\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            showing: true\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"This is hard\" }],\r\n            showing: true\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"This might even be harder\" }],\r\n            showing: true\r\n        }\r\n    ],\r\n    Cell: {\r\n        Row: 2,\r\n        Column: 7\r\n    },\r\n    GetRandomTestInputs: () => GetDefaultTestInput(allChars, 0, 30),\r\n    GetTestExpectedOutputs: GetOutputs\r\n};\r\n\r\nfunction GetOutputs(inputs: OrderedMessageModel[]): OrderedMessageModel[] {\r\n    const outputs: OrderedMessageModel[] = [];\r\n    for (const input of inputs.filter(i => i.Channel === ChannelColorEnum.Green)){\r\n        outputs.push({\r\n            Channel: ChannelColorEnum.Green,\r\n            Order: input.Order,\r\n            Content: input.Content.length.toString()\r\n        })\r\n    }\r\n\r\n    return outputs;    \r\n}","import { digits, lowerLetters, upperLetters } from \"../../Helper/RandomStringHelper\";\r\nimport { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { OrderedMessageModel } from \"../../Models/OrderedMessageModel\";\r\nimport { GetDefaultTestInput } from \"../LevelHelper\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const GetType: LevelModel = {\r\n    AllowedMachines: [\"0\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"],\r\n    LevelDescription: \"The machine should exit green if the first character is a number, exit red if it is a letter and exit blue otherwise\",\r\n    MachineDescription: \"Exits green if the first character is a number, exits red if it is a letter and exits blue otherwise\",\r\n    Name: \"GetType\",\r\n    Id: \"16\",\r\n    Style: {\r\n        Color: \"Orange\",\r\n        BorderColor: \"LightGoldenRodYellow\",\r\n    },\r\n    InputChannels: [],\r\n    OutputChannels: [{ Channel: ChannelColorEnum.Blue, Direction: DirectionEnum.Down, Status: \"Exists\" },\r\n    { Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Right, Status: \"Exists\" }\r\n    ],\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"42\" }],\r\n            showing: true\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"this starts with a letter\" }],\r\n            showing: true\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \",#@%!\" }],\r\n            showing: true\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            showing: true\r\n        }\r\n    ],\r\n    Cell: {\r\n        Row: 2,\r\n        Column: 3\r\n    },\r\n    GetRandomTestInputs: GetDefaultTestInput,\r\n    GetTestExpectedOutputs: GetOutputs\r\n};\r\n\r\nfunction GetOutputs(inputs: OrderedMessageModel[]): OrderedMessageModel[] {\r\n    const outputs: OrderedMessageModel[] = [];\r\n    for (const input of inputs.filter(i => i.Channel === ChannelColorEnum.Green)) {\r\n        let channel: ChannelColorEnum = ChannelColorEnum.Blue;\r\n        if (input.Content.length === 0) {\r\n            channel = ChannelColorEnum.Blue;\r\n        } else {\r\n            const firstChar = input.Content[0];\r\n            if (digits.indexOf(firstChar) !== -1) {\r\n                channel = ChannelColorEnum.Green;\r\n            } else if (lowerLetters.indexOf(firstChar) !== -1) {\r\n                channel = ChannelColorEnum.Red;\r\n            } else if (upperLetters.indexOf(firstChar) !== -1) {\r\n                channel = ChannelColorEnum.Red;\r\n            }\r\n        }\r\n        outputs.push({\r\n            Channel: channel,\r\n            Order: input.Order,\r\n            Content: input.Content\r\n        })\r\n    }\r\n\r\n    return outputs;\r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { OrderedMessageModel } from \"../../Models/OrderedMessageModel\";\r\nimport { GetDefaultTestInput } from \"../LevelHelper\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const IsEmpty: LevelModel = {\r\n    AllowedMachines: [\"0\", \"5\", \"6\", \"7\", \"9\"],\r\n    LevelDescription: \"The machine should exit green if the message is empty, otherwise exit red\",\r\n    MachineDescription: \"Exits green if the message is empty, otherwise exits red\",\r\n    Name: \"IsEmpty\",\r\n    Id: \"1\",\r\n    Style: {\r\n        Color: \"OrangeRed\",\r\n        BorderColor: \"ForestGreen\",\r\n    },\r\n    InputChannels: [{ Direction: DirectionEnum.Right, Channel: ChannelColorEnum.Green, Status: \"Exists\", UseMachineColor: true }],\r\n    OutputChannels: [\r\n        { Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Down, Status: \"Exists\" },\r\n    ],\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            showing: true\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abc\" }],\r\n            showing: true\r\n        }\r\n    ],\r\n    Cell: {\r\n        Row: 0,\r\n        Column: 0\r\n    },\r\n    GetRandomTestInputs: GetDefaultTestInput,\r\n    GetTestExpectedOutputs: GetOutputs\r\n};\r\n\r\nfunction GetOutputs(inputs: OrderedMessageModel[]): OrderedMessageModel[] {\r\n    const outputs: OrderedMessageModel[] = [];\r\n    for (const input of inputs.filter(i => i.Channel === ChannelColorEnum.Green)) {\r\n        if (input.Content === \"\") {\r\n            outputs.push({\r\n                Channel: ChannelColorEnum.Green,\r\n                Order: input.Order,\r\n                Content: input.Content\r\n            });\r\n        } else {\r\n            outputs.push({\r\n                Channel: ChannelColorEnum.Red,\r\n                Order: input.Order,\r\n                Content: input.Content\r\n            });\r\n        }\r\n    }\r\n\r\n    return outputs;\r\n}","import { digits, lowerLetters, specials } from \"../../Helper/RandomStringHelper\";\r\nimport { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { OrderedMessageModel } from \"../../Models/OrderedMessageModel\";\r\nimport { GetDefaultTestInput } from \"../LevelHelper\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const KeepNumbers: LevelModel = {\r\n    AllowedMachines: [\"0\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"],\r\n    LevelDescription: \"The machine should keep all numbers in the input string, and remove all other characters\",\r\n    MachineDescription: \"Keeps all numbers in the input string, and removes all other characters\",\r\n\r\n    Name: \"KeepNumbers\",\r\n    Id: \"6\",\r\n    Style: {\r\n        Color: \"PeachPuff\",\r\n        BorderColor: \"DarkOrchid\",\r\n    },\r\n    InputChannels: [],\r\n    OutputChannels: [\r\n        { Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Down, Status: \"Exists\" },\r\n    ],\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"42\" }],\r\n            showing: true\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"fortytwo\" }],\r\n            showing: true\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            showing: false\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"1 and 1 is\" }],\r\n            showing: true\r\n        }\r\n    ],\r\n    Cell: {\r\n        Row: 3,\r\n        Column: 3\r\n    },\r\n    GetRandomTestInputs: () => GetDefaultTestInput(digits + lowerLetters + specials),\r\n    GetTestExpectedOutputs: GetOutputs\r\n};\r\n\r\nfunction GetOutputs(inputs: OrderedMessageModel[]): OrderedMessageModel[] {\r\n    const outputs: OrderedMessageModel[] = [];\r\n    for (const input of inputs.filter(i => i.Channel === ChannelColorEnum.Green)) {\r\n        let content = \"\";\r\n        for (const char of input.Content) {\r\n            if (digits.indexOf(char) !== -1) {\r\n                content += char;\r\n            }\r\n        }\r\n        outputs.push({\r\n            Channel: ChannelColorEnum.Green,\r\n            Order: input.Order,\r\n            Content: content\r\n        })\r\n    }\r\n\r\n    return outputs;\r\n}","import { digits, GetRandomString } from \"../../Helper/RandomStringHelper\";\r\nimport { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { OrderedMessageModel } from \"../../Models/OrderedMessageModel\";\r\nimport { GetDefaultTestInput } from \"../LevelHelper\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const PlusOne: LevelModel = {\r\n    AllowedMachines: [\"0\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"],\r\n    LevelDescription: \"The machine should increase the leading input number by 1\",\r\n    MachineDescription: \"Increase the input number by 1\",\r\n\r\n    Name: \"PlusOne\",\r\n    Id: \"7\",\r\n    Style: {\r\n        Color: \"Indigo\",\r\n        BorderColor: \"DarkTurquoise\",\r\n    },\r\n    InputChannels: [],\r\n    OutputChannels: [\r\n        { Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Right, Status: \"Exists\" },\r\n    ],\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"4\" }],\r\n            showing: true\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"0 and some noise 2\" }],\r\n            showing: true\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"42\" }],\r\n            showing: true\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"9\" }],\r\n            showing: false\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"39\" }],\r\n            showing: true\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"23999999 9\" }],\r\n            showing: true\r\n        }\r\n    ],\r\n    Cell: {\r\n        Row: 2,\r\n        Column: 6\r\n    },\r\n    GetRandomTestInputs: GetDigitsWithoutLeadingZero,\r\n    GetTestExpectedOutputs: GetOutputs\r\n};\r\n\r\nfunction GetDigitsWithoutLeadingZero(){\r\n    const input = GetRandomString(\"123456789\", 1,1) + GetRandomString(digits + \"ab\", 0, 5);\r\n    const inputs: OrderedMessageModel[] = [{\r\n        Order: 0,\r\n        Channel: ChannelColorEnum.Green,\r\n        Content: input\r\n    }];\r\n\r\n    return inputs;\r\n}\r\n\r\nfunction GetOutputs(inputs: OrderedMessageModel[]): OrderedMessageModel[] {\r\n    const outputs: OrderedMessageModel[] = [];\r\n    for (const input of inputs.filter(i => i.Channel === ChannelColorEnum.Green)){\r\n        let numberPart =\"\";\r\n        let copied = input.Content;\r\n        while(copied.length > 0){\r\n            const index = digits.indexOf(copied[0]);\r\n            if (index === -1){\r\n                break;\r\n            }\r\n\r\n            numberPart += copied[0];\r\n            copied = copied.slice(1);\r\n        }\r\n\r\n        if (numberPart.length > 1 && numberPart[0] === \"0\"){\r\n            return [];\r\n        }\r\n            \r\n        const value = Number.parseInt(numberPart, 10)\r\n        if (!isNaN(value)){\r\n\r\n            outputs.push({\r\n                Channel: ChannelColorEnum.Green,\r\n                Order: input.Order,\r\n                Content: (value + 1).toString() + copied\r\n            })\r\n        } else {\r\n            outputs.push({\r\n                Channel: ChannelColorEnum.Green,\r\n                Order: input.Order,\r\n                Content: copied\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    return outputs;    \r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { OrderedMessageModel } from \"../../Models/OrderedMessageModel\";\r\nimport { GetTestInputsWithRepeatsInputs } from \"../LevelHelper\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const RemoveRepeats: LevelModel = {\r\n    AllowedMachines: [\"0\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"],\r\n    LevelDescription: \"The machine should remove all repeating characters from the input string\",\r\n    MachineDescription: \"Removes all repeating characters from the input string\",\r\n\r\n    Name: \"RemoveRepeats\",\r\n    Id: \"8\",\r\n    Style: {\r\n        Color: \"Brown\",\r\n        BorderColor: \"Indigo\",\r\n    },\r\n    InputChannels: [],\r\n    OutputChannels: [\r\n        { Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Right, Status: \"Exists\" },\r\n    ],\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"aabc\" }],\r\n            showing: true\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"aaaabccc\" }],\r\n            showing: true\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            showing: false\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"a\" }],\r\n            showing: false\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"hhhhhhhhhiiiii wwwworllllldddddddd\" }],\r\n            showing: true\r\n        }\r\n    ],\r\n    Cell: {\r\n        Row: 1,\r\n        Column: 1\r\n    },\r\n    GetRandomTestInputs: GetTestInputsWithRepeatsInputs,\r\n    GetTestExpectedOutputs: GetOutputs\r\n};\r\n\r\nfunction GetOutputs(inputs: OrderedMessageModel[]): OrderedMessageModel[] {\r\n    const outputs: OrderedMessageModel[] = [];\r\n    for (const input of inputs.filter(i => i.Channel === ChannelColorEnum.Green)) {\r\n        let content = input.Content;\r\n\r\n        let text = \"\";\r\n        while (content.length > 1) {\r\n            if (content[0] !== content[1]) {\r\n                text += content[0]\r\n            }\r\n            content = content.slice(1);\r\n        }\r\n\r\n        text += content;\r\n\r\n        outputs.push({\r\n            Channel: ChannelColorEnum.Green,\r\n            Order: input.Order,\r\n            Content: text\r\n        })\r\n    }\r\n\r\n    return outputs;\r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { OrderedMessageModel } from \"../../Models/OrderedMessageModel\";\r\nimport { GetDefaultTestInput } from \"../LevelHelper\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const RotateBackwards: LevelModel = {\r\n    AllowedMachines: [\"0\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"],\r\n    LevelDescription: \"The machine should put the last character in front of the string\",\r\n    MachineDescription: \"Rotates the last character to the front of the string\",\r\n\r\n    Name: \"RotateBackwards\",\r\n    Id: \"11\",\r\n    Style: {\r\n        Color: \"Blue\",\r\n        BorderColor: \"Cyan\",\r\n    },\r\n    InputChannels: [],\r\n    OutputChannels: [\r\n        { Channel: ChannelColorEnum.Red, Direction: DirectionEnum.Right, Status: \"Exists\" },\r\n        { Channel: ChannelColorEnum.Blue, Direction: DirectionEnum.Up, Status: \"Exists\" },\r\n        { Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Down, Status: \"Exists\" },\r\n    ],\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abc\" }],\r\n            showing: true\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"otater\" }],\r\n            showing: true\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"a\" }],\r\n            showing: false\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            showing: false\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"heat proofC\" }],\r\n            showing: false\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"ello world!H\" }],\r\n            showing: true\r\n        }\r\n    ],\r\n    Cell: {\r\n        Row: 2,\r\n        Column: 5\r\n    },\r\n    GetRandomTestInputs: GetDefaultTestInput,\r\n    GetTestExpectedOutputs: GetOutputs\r\n};\r\n\r\nfunction GetOutputs(inputs: OrderedMessageModel[]): OrderedMessageModel[] {\r\n    const outputs: OrderedMessageModel[] = [];\r\n    for (const input of inputs.filter(i => i.Channel === ChannelColorEnum.Green)){\r\n        let content = input.Content.length > 1 ? input.Content[input.Content.length -1] + input.Content.slice(0, input.Content.length - 1): input.Content;\r\n        outputs.push({\r\n            Channel: ChannelColorEnum.Green,\r\n            Order: input.Order,\r\n            Content: content\r\n        })\r\n    }\r\n\r\n    return outputs;    \r\n}","import { OrderedMessageModel } from \"../../Models/OrderedMessageModel\";\r\nimport { GetDefaultTestInput } from \"../LevelHelper\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const Sandbox: LevelModel = {\r\n    AllowedMachines: [\"0\", \"1\", \"2\", \"3\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\"],\r\n    LevelDescription: \"Sandbox level, no specific goals\",\r\n    MachineDescription: \"\",\r\n    Name: \"Sandbox\",\r\n    Id: \"12\",\r\n    Style: {\r\n        Color: \"DarkOliveGreen\",\r\n        BorderColor: \"Tomato\",\r\n    },\r\n    InputChannels: [],\r\n    OutputChannels: [],\r\n    Tests: [],\r\n    Cell: {\r\n        Row: -1,\r\n        Column: -1\r\n    },\r\n    GetRandomTestInputs: GetDefaultTestInput,\r\n    GetTestExpectedOutputs: GetOutputs\r\n};\r\n\r\nfunction GetOutputs(inputs: OrderedMessageModel[]): OrderedMessageModel[] {\r\n    const outputs: OrderedMessageModel[] = [];\r\n    return outputs;    \r\n}","import { lowerLetters } from \"../../Helper/RandomStringHelper\";\r\nimport { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { OrderedMessageModel } from \"../../Models/OrderedMessageModel\";\r\nimport { GetDefaultTestInput } from \"../LevelHelper\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const ReverseLimited: LevelModel = {\r\n    AllowedMachines: [\"0\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"],\r\n    LevelDescription: \"The machine should reverse the characters from the string. Input are only lowercase letters. With limited number of machines at your disposal, this is VERY HARD\",\r\n    MachineDescription: \"Reverses the characters from the string. Input can only consist of lowercase letters\",\r\n\r\n    Name: \"ReverseLimited\",\r\n    Id: \"10\",\r\n    Style: {\r\n        Color: \"MediumSlateBlue\",\r\n        BorderColor: \"Black\",\r\n    },\r\n    InputChannels: [],\r\n    OutputChannels: [\r\n        { Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Right, Status: \"Exists\" },\r\n    ],\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abc\" }],\r\n            showing: true\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"a\" }],\r\n            showing: false\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            showing: false\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"esrever\" }],\r\n            showing: true\r\n        }\r\n    ],\r\n    Cell: {\r\n        Row: 1,\r\n        Column: 9\r\n    },\r\n    GetRandomTestInputs: () => GetDefaultTestInput(lowerLetters),\r\n    GetTestExpectedOutputs: GetOutputs\r\n};\r\n\r\nfunction GetOutputs(inputs: OrderedMessageModel[]): OrderedMessageModel[] {\r\n    const outputs: OrderedMessageModel[] = [];\r\n    for (const input of inputs.filter(i => i.Channel === ChannelColorEnum.Green)) {\r\n        let text = \"\";\r\n\r\n        for (const char of input.Content) {\r\n            if (lowerLetters.indexOf(char) === -1) {\r\n                return [];\r\n            }\r\n        }\r\n\r\n        for (let i = input.Content.length - 1; i >= 0; i--) {\r\n            text += input.Content[i];\r\n        }\r\n        \r\n        outputs.push({\r\n            Channel: ChannelColorEnum.Green,\r\n            Order: input.Order,\r\n            Content: text\r\n        })\r\n    }\r\n\r\n    return outputs;\r\n}","import { allChars } from \"../../Helper/RandomStringHelper\";\r\nimport { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { OrderedMessageModel } from \"../../Models/OrderedMessageModel\";\r\nimport { GetDefaultTestInput } from \"../LevelHelper\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const Reverse: LevelModel = {\r\n    AllowedMachines: [\"0\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"12\", \"13\", \"14\"],\r\n    LevelDescription: \"The machine should reverse the characters from the input string\",\r\n    MachineDescription: \"Reverses the characters from the input string\",\r\n\r\n    Name: \"Reverse\",\r\n    Id: \"9\",\r\n    Style: {\r\n        Color: \"MediumSlateBlue\",\r\n        BorderColor: \"Aqua\",\r\n    },\r\n    InputChannels: [],\r\n    OutputChannels: [{ Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Right, Status: \"Exists\" },\r\n    ],\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abc\" }],\r\n            showing: true\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"a\" }],\r\n            showing: false\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            showing: false\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"desrever saw sihT\" }],\r\n            showing: true\r\n        }\r\n    ],\r\n    Cell: {\r\n        Row: 4,\r\n        Column: 6\r\n    },\r\n    GetRandomTestInputs: () => GetDefaultTestInput(allChars, 3, 8),\r\n    GetTestExpectedOutputs: GetOutputs\r\n};\r\n\r\nfunction GetOutputs(inputs: OrderedMessageModel[]): OrderedMessageModel[] {\r\n    const outputs: OrderedMessageModel[] = [];\r\n    for (const input of inputs.filter(i => i.Channel === ChannelColorEnum.Green)){\r\n        let text = \"\";\r\n        for(let i = input.Content.length -1; i >= 0; i--){\r\n            text += input.Content[i];\r\n        }\r\n\r\n        outputs.push({\r\n            Channel: ChannelColorEnum.Green,\r\n            Order: input.Order,\r\n            Content: text\r\n        })\r\n    }\r\n\r\n    return outputs;    \r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { OrderedMessageModel } from \"../../Models/OrderedMessageModel\";\r\nimport { GetDefaultTestInput } from \"../LevelHelper\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const CopyAll: LevelModel = {\r\n    AllowedMachines: [\"0\", \"1\", \"2\", \"3\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\"],\r\n    LevelDescription: \"The machine should exit the input both to green and red\",\r\n    MachineDescription: \"Exits the input both to green and red\",\r\n    Name: \"CopyAll\",\r\n    Id: \"14\",\r\n    Style: {\r\n        Color: \"LightGreen\",\r\n        BorderColor: \"Yellow\",\r\n    },\r\n    InputChannels: [],\r\n    OutputChannels: [{ Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Down, Status: \"Exists\" },\r\n    ],\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            showing: false\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"a\" }],\r\n            showing: false\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abc\" }],\r\n            showing: true\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"aabcc\" }],\r\n            showing: false\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"Copied\" }],\r\n            showing: true\r\n        }\r\n    ],\r\n    Cell: {\r\n        Row: 4,\r\n        Column: 8\r\n    },\r\n    GetRandomTestInputs: GetDefaultTestInput,\r\n    GetTestExpectedOutputs: GetOutputs\r\n};\r\n\r\nfunction GetOutputs(inputs: OrderedMessageModel[]): OrderedMessageModel[] {\r\n    const outputs: OrderedMessageModel[] = [];\r\n    for (const input of inputs.filter(i => i.Channel === ChannelColorEnum.Green)) {\r\n        outputs.push({\r\n            Channel: ChannelColorEnum.Green,\r\n            Order: input.Order,\r\n            Content: input.Content\r\n        });\r\n        outputs.push({\r\n            Channel: ChannelColorEnum.Red,\r\n            Order: input.Order,\r\n            Content: input.Content\r\n        })\r\n    }\r\n\r\n    return outputs;\r\n}\r\n","import { start } from \"repl\";\r\nimport { digits, lowerLetters, upperLetters } from \"../../Helper/RandomStringHelper\";\r\nimport { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { OrderedMessageModel } from \"../../Models/OrderedMessageModel\";\r\nimport { GetDefaultTestInput } from \"../LevelHelper\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const Decrement: LevelModel = {\r\n    AllowedMachines: [\"0\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"],\r\n    LevelDescription: \"The machine should decrement the leading character, turning 0 into 9, a/A into z/Z\",\r\n    MachineDescription: \"Decrements the leading character\",\r\n\r\n    Name: \"Decrement\",\r\n    Id: \"20\",\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"bbc\" }],\r\n            showing: true\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"0321\" }],\r\n            showing: true\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"@bc\" }],\r\n            showing: true\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            showing: false\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"Iello world\" }],\r\n            showing: true\r\n        }\r\n    ],\r\n    Style: {\r\n        Color: \"MediumVioletRed\",\r\n        BorderColor: \"Orange\",\r\n    },\r\n    InputChannels: [],\r\n    OutputChannels: [{ Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Right, Status: \"Exists\" },\r\n    ],\r\n    Cell: {\r\n        Row: 2,\r\n        Column: 4\r\n    },\r\n    GetRandomTestInputs: GetDefaultTestInput,\r\n    GetTestExpectedOutputs: GetOutputs\r\n};\r\n\r\nfunction GetOutputs(inputs: OrderedMessageModel[]): OrderedMessageModel[] {\r\n    const outputs: OrderedMessageModel[] = [];\r\n    for (const input of inputs.filter(i => i.Channel === ChannelColorEnum.Green)) {\r\n        let outputContent = \"\";\r\n        if (input.Content.length > 0) {\r\n            const startChar = input.Content[0];\r\n            let result = startChar;\r\n            let done = false;\r\n\r\n            [done, result] = DecrementChar(startChar, digits);\r\n            if (!done) {\r\n                [done, result] = DecrementChar(startChar, lowerLetters);\r\n            }\r\n            if (!done) {\r\n                [done, result] = DecrementChar(startChar, upperLetters);\r\n            }           \r\n\r\n            outputContent = result + input.Content.substring(1);\r\n        }\r\n\r\n        outputs.push({\r\n            Channel: ChannelColorEnum.Green,\r\n            Order: input.Order,\r\n            Content: outputContent\r\n        })\r\n    }\r\n\r\n    return outputs;\r\n}\r\n\r\nfunction DecrementChar(char: string, charSet: string): [boolean, string] {\r\n    const index = charSet.indexOf(char);\r\n    if (index === -1) {\r\n        return [false, char];\r\n    }\r\n\r\n    if (index > 0) {\r\n        return [true, charSet[index - 1]];\r\n    } else {\r\n        return [true, charSet[charSet.length-1]];\r\n    }\r\n}\r\n","import { digits, lowerLetters, upperLetters } from \"../../Helper/RandomStringHelper\";\r\nimport { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { OrderedMessageModel } from \"../../Models/OrderedMessageModel\";\r\nimport { GetDefaultTestInput } from \"../LevelHelper\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const IncrementAll: LevelModel = {\r\n    AllowedMachines: [\"0\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"12\"],\r\n    LevelDescription: \"The machine should increment all characters\",\r\n    MachineDescription: \"Increments all characters\",\r\n\r\n    Name: \"IncrementAll\",\r\n    Id: \"21\",\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abc\" }],\r\n            showing: true\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"987\" }],\r\n            showing: true\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            showing: false\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"1+1=3\" }],\r\n            showing: true\r\n        }\r\n    ],\r\n    Style: {\r\n        Color: \"Ivory\",\r\n        BorderColor: \"MediumVioletRed\",\r\n    },\r\n    InputChannels: [],\r\n    OutputChannels: [{ Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Right, Status: \"Exists\" },\r\n    ],\r\n    Cell: {\r\n        Row: 2,\r\n        Column: 2\r\n    },\r\n    GetRandomTestInputs: GetDefaultTestInput,\r\n    GetTestExpectedOutputs: GetOutputs\r\n};\r\n\r\nfunction GetOutputs(inputs: OrderedMessageModel[]): OrderedMessageModel[] {\r\n    const outputs: OrderedMessageModel[] = [];\r\n    for (const input of inputs.filter(i => i.Channel === ChannelColorEnum.Green)) {\r\n        let content = \"\";\r\n        for (const char of input.Content) {\r\n            content += IncrementChar(char);\r\n        }\r\n        outputs.push({\r\n            Channel: ChannelColorEnum.Green,\r\n            Order: input.Order,\r\n            Content: content\r\n        })\r\n    }\r\n\r\n    return outputs;\r\n}\r\n\r\nexport function IncrementChar(char: string): string {\r\n    let result = char;\r\n    let done = false;\r\n\r\n    [done, result] = Increment(char, digits);\r\n    if (!done) {\r\n        [done, result] = Increment(char, lowerLetters);\r\n    }\r\n    if (!done) {\r\n        [done, result] = Increment(char, upperLetters);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction Increment(char: string, charSet: string): [boolean, string] {\r\n    const index = charSet.indexOf(char);\r\n    if (index === -1) {\r\n        return [false, char];\r\n    }\r\n\r\n    if (index < charSet.length - 1) {\r\n        return [true, charSet[index + 1]];\r\n    } else {\r\n        return [true, charSet[0]];\r\n    }\r\n}","import { specials } from \"../../Helper/RandomStringHelper\";\r\nimport { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { OrderedMessageModel } from \"../../Models/OrderedMessageModel\";\r\nimport { GetDefaultTestInput } from \"../LevelHelper\";\r\nimport { LevelModel } from \"../LevelModel\";\r\nimport { IncrementChar } from \"./IncrementAll\";\r\n\r\nexport const IncrementIncreasing: LevelModel = {\r\n    AllowedMachines: [\"0\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"12\"],\r\n    LevelDescription: \"The machine should increment the first character 0 times, the second character once, the third twice etcetera. Characters that cannot be incremented do not count\",\r\n    MachineDescription: \"Increments the first character 0 times, the second character once, the third twice, etcetera. Characters that cannot be incremented do not count\",\r\n\r\n    Name: \"IncrementIncreasing\",\r\n    Id: \"22\",\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"aaa\" }],\r\n            showing: true\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"5432109\" }],\r\n            showing: true\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            showing: false\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"1-A2@q\" }],\r\n            showing: false\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"hdjik rikdu!\" }],\r\n            showing: true\r\n        }\r\n    ],\r\n    Style: {\r\n        Color: \"Pink\",\r\n        BorderColor: \"Purple\",\r\n    },\r\n    InputChannels: [],\r\n    OutputChannels: [{ Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Up, Status: \"Exists\" },\r\n    ],\r\n    Cell: {\r\n        Row: 1,\r\n        Column: 5\r\n    },\r\n    GetRandomTestInputs: GetDefaultTestInput,\r\n    GetTestExpectedOutputs: GetOutputs\r\n};\r\n\r\nfunction GetOutputs(inputs: OrderedMessageModel[]): OrderedMessageModel[] {\r\n    const outputs: OrderedMessageModel[] = [];\r\n    for (const input of inputs.filter(i => i.Channel === ChannelColorEnum.Green)) {\r\n        let content = \"\";\r\n        let times = 0;\r\n        for (let char of input.Content) {\r\n            if (specials.indexOf(char) !== -1){\r\n                content += char;\r\n                continue;\r\n            }\r\n            for (let i = 0; i < times; i++) {\r\n                char = IncrementChar(char)\r\n            }\r\n\r\n            times++;\r\n            content += char;\r\n        }\r\n        outputs.push({\r\n            Channel: ChannelColorEnum.Green,\r\n            Order: input.Order,\r\n            Content: content\r\n        })\r\n    }\r\n\r\n    return outputs;\r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { OrderedMessageModel } from \"../../Models/OrderedMessageModel\";\r\nimport { GetMultiChannelInputs } from \"../LevelHelper\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const JoinAll: LevelModel = {\r\n    AllowedMachines: [\"0\", \"1\", \"2\", \"3\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"12\", \"13\", \"14\"],\r\n    LevelDescription: \"The machine should store the input from green, appending it to any previously stored message. On red input, it should exit the stored message appended with the input to green, clearing the stored message\",\r\n    MachineDescription: \"Stores input from green,appending it to any previously stored message. On red input it exits the stored message appended with the input to green\",\r\n\r\n    Name: \"JoinAll\",\r\n    Id: \"24\",\r\n    Tests: [\r\n        {\r\n            inputs: [\r\n                { Order: 0, Channel: ChannelColorEnum.Green, Content: \"a\" },\r\n                { Order: 1, Channel: ChannelColorEnum.Green, Content: \"b\" },\r\n                { Order: 2, Channel: ChannelColorEnum.Red, Content: \"c\" }\r\n            ],\r\n            showing: true\r\n        },\r\n        {\r\n            inputs: [\r\n                { Order: 0, Channel: ChannelColorEnum.Red, Content: \"\" },\r\n                { Order: 1, Channel: ChannelColorEnum.Green, Content: \"\" },\r\n                { Order: 2, Channel: ChannelColorEnum.Red, Content: \"ab\" },\r\n                { Order: 3, Channel: ChannelColorEnum.Red, Content: \"\" },\r\n            ],\r\n            showing: true\r\n        },\r\n        {\r\n            inputs: [\r\n                { Order: 0, Channel: ChannelColorEnum.Green, Content: \"Ma\" },\r\n                { Order: 1, Channel: ChannelColorEnum.Green, Content: \"rco\" },\r\n                { Order: 2, Channel: ChannelColorEnum.Red, Content: \"?\" },\r\n                { Order: 3, Channel: ChannelColorEnum.Green, Content: \"Po\" },\r\n                { Order: 4, Channel: ChannelColorEnum.Green, Content: \"lo\" },\r\n                { Order: 5, Channel: ChannelColorEnum.Red, Content: \"!\" },\r\n            ],\r\n            showing: true\r\n        },\r\n    ],\r\n    Style: {\r\n        Color: \"Grey\",\r\n        BorderColor: \"YellowGreen\",\r\n    },\r\n    InputChannels: [],\r\n    OutputChannels: [{ Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Right, Status: \"Exists\" },\r\n    ],\r\n    Cell: {\r\n        Row: 4,\r\n        Column: 7\r\n    },\r\n    GetRandomTestInputs: () => GetMultiChannelInputs(3, 8, 6, 4, 0, 0),\r\n    GetTestExpectedOutputs: GetOutputs\r\n};\r\n\r\n\r\nfunction GetOutputs(inputs: OrderedMessageModel[]): OrderedMessageModel[] {\r\n    const outputs: OrderedMessageModel[] = [];\r\n    const sortedInputs = [...inputs].sort(o => o.Order);\r\n    let content = \"\";\r\n    for (const input of sortedInputs) {\r\n        if (input.Channel === ChannelColorEnum.Red) {\r\n            content += input.Content;\r\n            outputs.push({\r\n                Channel: ChannelColorEnum.Green,\r\n                Order: input.Order,\r\n                Content: content\r\n            });\r\n\r\n            content = \"\";\r\n        } else if (input.Channel === ChannelColorEnum.Green) {\r\n            content += input.Content;\r\n        }\r\n    }\r\n\r\n    return outputs;\r\n}","import { stringify } from \"querystring\";\r\nimport { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { OrderedMessageModel } from \"../../Models/OrderedMessageModel\";\r\nimport { GetTestInputsWithRepeatsInputs } from \"../LevelHelper\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const MakeTwins: LevelModel = {\r\n    AllowedMachines: [\"0\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"],\r\n    LevelDescription: \"The machine should exit the string with each character repeated once\",\r\n    MachineDescription: \"Makes sure that each character is repeated once\",\r\n\r\n    Name: \"MakeTwins\",\r\n    Id: \"18\",\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abc\" }],\r\n            showing: true\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"aaabcc\" }],\r\n            showing: true\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            showing: false\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"hello world\" }],\r\n            showing: true\r\n        }\r\n    ],\r\n    Style: {\r\n        Color: \"AntiqueWhite\",\r\n        BorderColor: \"GreenYellow\",\r\n    },\r\n    InputChannels: [],\r\n    OutputChannels: [{ Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Down, Status: \"Exists\" },\r\n    ],\r\n    Cell: {\r\n        Row: 1,\r\n        Column: 2\r\n    },\r\n    GetRandomTestInputs: GetTestInputsWithRepeatsInputs,\r\n    GetTestExpectedOutputs: GetOutputs\r\n};\r\n\r\nfunction GetOutputs(inputs: OrderedMessageModel[]): OrderedMessageModel[] {\r\n    const outputs: OrderedMessageModel[] = [];\r\n    for (const input of inputs.filter(i => i.Channel === ChannelColorEnum.Green)) {\r\n        let text = \"\";\r\n        for (const char of input.Content) {\r\n            if (char !== text[text.length - 1]) {\r\n                text += char.repeat(2);\r\n            }\r\n        }\r\n\r\n        outputs.push({\r\n            Channel: ChannelColorEnum.Green,\r\n            Order: input.Order,\r\n            Content: text\r\n        })\r\n    }\r\n\r\n    return outputs;\r\n}\r\n\r\n","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { OrderedMessageModel } from \"../../Models/OrderedMessageModel\";\r\nimport { GetTestInputsWithRepeatsInputs } from \"../LevelHelper\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const RemoveIfDuplicate: LevelModel = {\r\n    AllowedMachines: [\"0\", \"5\", \"6\", \"7\", \"9\"],\r\n    LevelDescription: \"If the first characters are duplicates, the machine should clear all the duplicates\",\r\n    MachineDescription: \"If the first characters are duplicates, clears those duplicates\",\r\n\r\n    Name: \"RemoveIfDuplicate\",\r\n    Id: \"17\",\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"aabc\" }],\r\n            showing: true\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abc\" }],\r\n            showing: true\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"a\" }],\r\n            showing: false\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"33333\" }],\r\n            showing: false\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            showing: false\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"hhhhhhhello world\" }],\r\n            showing: true\r\n        }\r\n    ],\r\n    Style: {\r\n        Color: \"MediumAquaMarine\",\r\n        BorderColor: \"DeepSkyBlue\",\r\n    },\r\n    InputChannels: [],\r\n    OutputChannels: [{ Channel: ChannelColorEnum.Blue, Direction: DirectionEnum.Down, Status: \"Exists\" },\r\n    { Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Right, Status: \"Exists\" }\r\n    ],\r\n    Cell: {\r\n        Row: 1,\r\n        Column: 0\r\n    },\r\n    GetRandomTestInputs: GetTestInputsWithRepeatsInputs,\r\n    GetTestExpectedOutputs: GetOutputs\r\n};\r\n\r\nfunction GetOutputs(inputs: OrderedMessageModel[]): OrderedMessageModel[] {\r\n    const outputs: OrderedMessageModel[] = [];\r\n    for (const input of inputs.filter(i => i.Channel === ChannelColorEnum.Green)) {\r\n        let content = input.Content;\r\n        if (content.length > 1) {\r\n            const char = input.Content[0];\r\n            let repeated = false;\r\n            while (content.length > 1 && content[1] === char) {\r\n                content = content.slice(1);\r\n                repeated = true;\r\n            }\r\n\r\n            if (repeated) {\r\n                content = content.slice(1);\r\n            }\r\n        }\r\n\r\n        outputs.push({\r\n            Channel: ChannelColorEnum.Green,\r\n            Order: input.Order,\r\n            Content: content\r\n        })\r\n    }\r\n\r\n    return outputs;\r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { OrderedMessageModel } from \"../../Models/OrderedMessageModel\";\r\nimport { GetTestInputsWithRepeatsInputs } from \"../LevelHelper\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const RemoveUntilRepeat: LevelModel = {\r\n    AllowedMachines: [\"0\", \"5\", \"6\", \"7\", \"9\"],\r\n    LevelDescription: \"The machine should delete all characters before the first repeated character\",\r\n    MachineDescription: \"Deletes all character before the first repeated character\",\r\n\r\n    Name: \"RemoveUntilRepeat\",\r\n    Id: \"19\",\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abbc\" }],\r\n            showing: true\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abca\" }],\r\n            showing: true\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"22\" }],\r\n            showing: true\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"1\" }],\r\n            showing: false\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"hello world\" }],\r\n            showing: true\r\n        }\r\n    ],\r\n    Style: {\r\n        Color: \"LawnGreen\",\r\n        BorderColor: \"DarkGrey\",\r\n    },\r\n    InputChannels: [],\r\n    OutputChannels: [{ Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Down, Status: \"Exists\" },\r\n    ],\r\n    Cell: {\r\n        Row: 2,\r\n        Column: 0\r\n    },\r\n    GetRandomTestInputs: GetTestInputsWithRepeatsInputs,\r\n    GetTestExpectedOutputs: GetOutputs\r\n};\r\n\r\nfunction GetOutputs(inputs: OrderedMessageModel[]): OrderedMessageModel[] {\r\n    const outputs: OrderedMessageModel[] = [];\r\n    for (const input of inputs.filter(i => i.Channel === ChannelColorEnum.Green)){\r\n        let text = \"\";\r\n        let content = input.Content;\r\n        while(content.length > 1){\r\n            if (content[0] === content[1]){\r\n                text = content;\r\n                break;\r\n            } else {\r\n                content = content.slice(1);\r\n            }\r\n        }\r\n        outputs.push({\r\n            Channel: ChannelColorEnum.Green,\r\n            Order: input.Order,\r\n            Content: text\r\n        })\r\n    }\r\n\r\n    return outputs;    \r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { OrderedMessageModel } from \"../../Models/OrderedMessageModel\";\r\nimport { GetDefaultTestInput } from \"../LevelHelper\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const Trigger: LevelModel = {\r\n    AllowedMachines: [\"0\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"12\", \"13\"],\r\n    LevelDescription: \"The machine should exit the input to green, and exit an empty message to red\",\r\n    MachineDescription: \"Exits the input to green, exits an empty message to red\",\r\n\r\n    Name: \"Trigger\",\r\n    Id: \"23\",\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abc\" }],\r\n            showing: true\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            showing: true\r\n        }\r\n    ],\r\n    Style: {\r\n        Color: \"DimGrey\",\r\n        BorderColor: \"Thistle\",\r\n    },\r\n    InputChannels: [],\r\n    OutputChannels: [{ Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Right, Status: \"Exists\" },\r\n    ],\r\n    Cell: {\r\n        Row: 4,\r\n        Column: 5\r\n    },\r\n    GetRandomTestInputs: GetDefaultTestInput,\r\n    GetTestExpectedOutputs: GetOutputs\r\n};\r\n\r\nfunction GetOutputs(inputs: OrderedMessageModel[]): OrderedMessageModel[] {\r\n    const outputs: OrderedMessageModel[] = [];\r\n    for (const input of inputs.filter(i => i.Channel === ChannelColorEnum.Green)) {\r\n        outputs.push({\r\n            Channel: ChannelColorEnum.Green,\r\n            Order: input.Order,\r\n            Content: input.Content\r\n        });\r\n        outputs.push({\r\n            Channel: ChannelColorEnum.Red,\r\n            Order: input.Order,\r\n            Content: \"\"\r\n        })\r\n    }\r\n\r\n    return outputs;\r\n}","import { LevelModel } from \"./LevelModel\";\nimport { AppendLength } from \"./Levels/AppendLength\";\nimport { GetLength } from \"./Levels/GetLength\";\nimport { GetType } from \"./Levels/GetType\";\nimport { IsEmpty } from \"./Levels/IsEmpty\";\nimport { KeepNumbers } from \"./Levels/KeepNumbers\";\nimport { PlusOne } from \"./Levels/PlusOne\";\nimport { RemoveRepeats } from \"./Levels/RemoveRepeats\";\nimport { RotateBackwards } from \"./Levels/RotateBackwards\";\nimport { Sandbox } from \"./Levels/Sandbox\";\nimport { ReverseLimited } from \"./Levels/ReverseLimited\";\nimport { Reverse } from \"./Levels/Reverse\";\nimport { CopyAll } from \"./Levels/CopyAll\";\nimport { Decrement } from \"./Levels/Decrement\";\nimport { IncrementAll } from \"./Levels/IncrementAll\";\nimport { IncrementIncreasing } from \"./Levels/IncrementIncreasing\";\nimport { JoinAll } from \"./Levels/JoinAll\";\nimport { MakeTwins } from \"./Levels/MakeTwins\";\nimport { RemoveIfDuplicate } from \"./Levels/RemoveIfDuplicate\";\nimport { RemoveUntilRepeat } from \"./Levels/RemoveUntilRepeat\";\nimport { Trigger } from \"./Levels/Trigger\";\n\n\nexport class LevelStore {\n    private static levelStore: LevelStore;\n    private levels: LevelModel[];\n\n    private constructor() {\n        this.levels = [];\n        this.init();\n    }\n\n    public static GetStore(): LevelStore {\n        if (LevelStore.levelStore === undefined) {\n            LevelStore.levelStore = new LevelStore();\n        }\n\n        return LevelStore.levelStore;\n    }\n\n    private init(): void {\n        this.levels.push(IsEmpty);\n        this.levels.push(RemoveRepeats);\n        this.levels.push(GetType);\n        this.levels.push(KeepNumbers);\n        this.levels.push(GetLength);\n        this.levels.push(AppendLength);\n        this.levels.push(RotateBackwards);\n        this.levels.push(PlusOne);\n        this.levels.push(ReverseLimited);\n        this.levels.push(Reverse);\n        this.levels.push(CopyAll);\n        this.levels.push(Sandbox);\n        this.levels.push(Decrement);\n        this.levels.push(IncrementAll);\n        this.levels.push(IncrementIncreasing);\n        this.levels.push(JoinAll);\n        this.levels.push(MakeTwins);\n        this.levels.push(RemoveIfDuplicate, RemoveUntilRepeat, Trigger)\n    }\n\n    public GetAllLevels(): LevelModel[] {\n        return this.levels;\n    }\n\n    public GetLevel(id: string): LevelModel {\n        const level = this.levels.find((l) => l.Id === id);\n        if (level === undefined) {\n            throw Error(`Unable to find level with id '${id}'`)\n        }\n\n        return level;\n    }\n}","export interface LevelData {\r\n    readonly Id: string;\r\n    readonly State: LevelState;\r\n    readonly LastUsedMachineId: string | undefined;\r\n}\r\n\r\nexport enum LevelState {\r\n    NoMachineLinked,\r\n    InProgress,\r\n    NonValidMachineUsed,\r\n    Completed\r\n}\r\n\r\n","import { LevelStore } from \"../../../Levels/LevelStore\";\r\nimport { LevelActionTypes } from \"./Actions\";\r\nimport { LevelStateModel } from \"./LevelStateModel\";\r\nimport { TestStateModel } from \"./TestStateModel\";\r\nimport { ChannelColorEnum } from \"../../../Models/ChannelColorsEnum\";\r\nimport { OrderedMessageModel } from \"../../../Models/OrderedMessageModel\";\r\nimport { Draft } from \"immer\";\r\nimport { Actions } from \"../../Actions\";\r\nimport { CleanInput } from \"../../../Helper/TextInputHelper\";\r\n\r\nexport function LevelReducer(draft: Draft<LevelStateModel> | undefined, action: Actions): Draft<LevelStateModel> | undefined {\r\n    if (action.type === \"LoadLevelActionType\") {\r\n        return LoadLevel(action.id);\r\n    }\r\n\r\n    if (draft === undefined) {\r\n        return undefined;\r\n    }\r\n\r\n    switch (action.type) {\r\n        case \"AddTestActionType\":\r\n            const newTest: TestStateModel = {\r\n                actualOutputs: [],\r\n                showing: true,\r\n                inputs: [{ Channel: ChannelColorEnum.Green, Content: \"\", Order: 0 }],\r\n                editable: true,\r\n                id: Math.max(...draft.tests.map((t) => t.id), -1) + 1\r\n            };\r\n            draft.tests.push(newTest);\r\n            break;\r\n        case \"RemoveTestActionType\":\r\n            draft.tests = draft.tests.filter((t) => t.id !== action.testId);\r\n            break;\r\n        case \"SetCustomTestActionType\":\r\n            const test = draft.tests.find(t => t.editable === true);\r\n            if (test !== undefined){\r\n                test.inputs = action.inputs;\r\n            }\r\n            break;\r\n        case \"ReportOutputActionType\":\r\n        case \"ClearTestOutputActionType\":\r\n        case \"AddInputActionType\":\r\n        case \"RemoveInputActionType\":\r\n        case \"UpdateInputActionType\":\r\n            const tests = draft.tests.map((t) => {\r\n                if (t.id === action.testId) {\r\n                    return UpdateTest(t, action);\r\n                } else {\r\n                    return t;\r\n                }\r\n            });\r\n            draft.tests = tests;\r\n            break;\r\n        case \"AddNewMachineActionType\":\r\n        case \"ChannelChangedActionType\":\r\n        case \"DeleteMachineActionType\":\r\n        case \"FixMachineActionType\":\r\n        case \"MachineAddedActionType\":\r\n        case \"MachineMovedActionType\":\r\n        case \"MachineRemovedActionType\":\r\n            draft.tests.forEach((t) => {\r\n                t.actualOutputs = undefined;\r\n            });\r\n            break;\r\n    }\r\n\r\n    return draft;\r\n};\r\n\r\nfunction LoadLevel(levelId: string): Draft<LevelStateModel> {\r\n    const level = LevelStore.GetStore().GetLevel(levelId);\r\n    const tests = level.Tests.map((t, index) => ({ ...t, actualOutputs: undefined, id: index, editable: false }));\r\n    tests.push({\r\n        actualOutputs: undefined,\r\n        inputs: [{ Channel: ChannelColorEnum.Green, Content: \"\", Order: 0 }],\r\n        showing: true,\r\n        id: tests.length,\r\n        editable: true\r\n    });\r\n    const returnValue = {\r\n        allowedMachines: [...level.AllowedMachines],\r\n        description: level.LevelDescription,\r\n        name: level.Name,\r\n        getOutputs: level.GetTestExpectedOutputs,\r\n        id: level.Id,\r\n        tests\r\n    };\r\n    return returnValue;\r\n}\r\n\r\nfunction UpdateTest(test: Draft<TestStateModel>, action: LevelActionTypes): TestStateModel {\r\n    switch (action.type) {\r\n        case \"ReportOutputActionType\":\r\n            if (test.actualOutputs === undefined) {\r\n                test.actualOutputs = [];\r\n            }\r\n            const outputs = test.actualOutputs.slice();\r\n            outputs.push(action.outputMessage);\r\n            return { ...test, actualOutputs: outputs };\r\n        case \"ClearTestOutputActionType\":\r\n            return { ...test, actualOutputs: [] };\r\n        case \"AddInputActionType\":\r\n            const maxOrder = Math.max(...test.inputs.map((i) => i.Order), -1) + 1;\r\n            const newInput: OrderedMessageModel = {\r\n                Channel: ChannelColorEnum.Green, Content: \"\", Order: maxOrder\r\n            };\r\n            return { ...test, inputs: test.inputs.concat(newInput) };\r\n        case \"RemoveInputActionType\":\r\n\r\n            const filteredInputs = test.inputs.filter((i) => i.Order !== action.order);\r\n            const newInputs = filteredInputs.map((i, index) => ({ ...i, Order: index }));\r\n            return { ...test, inputs: newInputs, actualOutputs: undefined };\r\n        case \"UpdateInputActionType\":\r\n            const content = CleanInput(action.input.Content);\r\n            const inputsUpdated = test.inputs.map((i) => i.Order === action.input.Order ? { ...action.input, Content: content } : i);\r\n            return { ...test, inputs: inputsUpdated };\r\n        default:\r\n            return test;\r\n    }\r\n}\r\n","import { MachineApi } from \"../Models/MachineApi\";\nimport { ChannelModel } from \"../Models/ChannelModel\";\nimport { DirectionEnum } from \"../Models/DirectionEnum\";\nimport { InputChannelModel } from \"../Components/Grid/Cell/MachineInstance/MachineDrawer/InputChannelModel\";\n\nexport function GetNewChannelSet(api: MachineApi, includeInput: boolean): { inputChannels: ChannelModel[], outputChannels: ChannelModel[] } {\n    const outputChannels: ChannelModel[] = [];\n    const inputChannels: ChannelModel[] = [];\n\n    let direction: DirectionEnum = DirectionEnum.Up;\n    for (const color of api.OutputChannels) {\n        outputChannels.push({ Channel: color, Direction: direction, Status: \"Exists\" });\n        direction++;\n    }\n\n    if (includeInput && api.InputChannels.length > 1) {\n        direction = 0;\n        for (const color of api.InputChannels) {\n            inputChannels.push({ Channel: color, Direction: direction, Status: \"Exists\" });\n            direction++;\n        }\n    }\n\n    return { inputChannels, outputChannels };\n}\n\nexport function GetDirectedChannelSet(api: MachineApi): { inputChannels: InputChannelModel[], outputChannels: ChannelModel[][] }{\n    const { inputChannels, outputChannels } = GetNewChannelSet(api, true);\n\n    const hasMultipleInputs = inputChannels.length > 1;\n\n    const inputChannelModels: InputChannelModel[] = inputChannels.map((c) =>\n        ({\n            UseMachineColor: !hasMultipleInputs,\n            ...c\n        })\n    );\n\n    const orderedOutputChannels: ChannelModel[][] = [];\n    for (const channel of outputChannels) {\n        const group = orderedOutputChannels.find((o) => o[0].Direction === channel.Direction);\n        if (group === undefined) {\n            orderedOutputChannels.push([channel]);\n        } else {\n            group.push(channel);\n        }\n    }\n\n    return {inputChannels: inputChannelModels, outputChannels: orderedOutputChannels}\n}","export interface CellModel {\n    readonly Row: number;\n    readonly Column: number;\n}\n\nexport function AreEqual(cell: CellModel, otherCell: CellModel): boolean {\n    return cell.Column === otherCell.Column && cell.Row === otherCell.Row;\n}","const halfSquareRatio = 0.9;\nconst circleRadiusRatio = 0.28;\nexport const halfSquareFactor = halfSquareRatio * circleRadiusRatio;\nexport const outputSplitFactor = 0.12;\nexport const outputStartLengthFactor = 0.25;\n\nexport class DrawConstants {\n\n    constructor(cellSize: number) {\n        this.cellSize = cellSize;\n        this.aperture = 0.23 * cellSize;\n        this.armLength = 0.18 * cellSize;\n        this.circleRadius = circleRadiusRatio * cellSize;\n        this.borderWidth = 0.05 * cellSize;\n        this.halfSquareSize = halfSquareRatio * this.circleRadius;\n        this.shadeOffset = 0.008 * cellSize;\n        this.outputSplit = outputSplitFactor * cellSize;\n        this.outputLength = 0.38 * cellSize;\n        this.outputRadius = 0.15 * cellSize;\n        this.outputWidth = 0.06 * cellSize;\n        this.outputStartLength = outputStartLengthFactor * cellSize;\n        this.center = 0.5 * cellSize;\n        this.apertureAngle = Math.asin(this.aperture * 0.5 / this.circleRadius);\n        this.defiatingAngle = this.armAngle - this.apertureAngle;\n        this.protrudingArm = Math.cos(this.defiatingAngle) * this.armLength;\n    }\n\n    public cellSize: number;\n    public aperture: number;\n    public armLength: number;\n    public armAngle = Math.PI * 0.05;\n    public circleRadius: number;\n    public borderWidth: number;\n    public halfSquareSize: number;\n    public shadeOffset: number;\n    public outputSplit: number;\n    public outputLength: number;\n    public outputRadius: number;\n    public outputWidth: number;\n    public outputStartLength: number;\n    public center: number;\n    public apertureAngle: number;\n    public defiatingAngle: number;\n    public protrudingArm: number;\n}","import { DragSourceMonitor, DragLayerMonitor, DropTargetMonitor, XYCoord } from \"react-dnd\";\nimport { DirectionEnum } from \"../Models/DirectionEnum\";\nimport { AppStore } from \"../Redux/Store\";\nimport { GetCellSize } from \"./StoreHelper\";\n\nexport function GetAngleFromMonitor(monitor: DragSourceMonitor | DragLayerMonitor | DropTargetMonitor, offsetX: number, offsetY: number): number | undefined {\n    const xyCoord = monitor.getClientOffset();\n    const xyCoordInit = monitor.getInitialSourceClientOffset();\n    return GetAngleFromOffsets(offsetX, offsetY, xyCoord, xyCoordInit);\n}\n\nexport function GetAngleFromOffsets(offsetX: number, offsetY: number, xyCoord: XYCoord | null, xyCoordInit: XYCoord | null): number | undefined {\n    const center = GetCellSize(AppStore.getState()) / 2;\n    if (xyCoord !== null && xyCoordInit !== null) {\n        const angle = Math.atan2(xyCoord.y - xyCoordInit.y + offsetY - center, xyCoord.x - xyCoordInit.x + offsetX - center);\n        return angle;\n    }\n\n    return undefined;\n}\n\nexport function GetAngleFromDirection(direction: DirectionEnum): number {\n    switch (direction) {\n        case DirectionEnum.Up:\n            return Math.PI * 0.5;\n        case DirectionEnum.Right:\n            return Math.PI * 1;\n        case DirectionEnum.Down:\n            return Math.PI * 1.5;\n        case DirectionEnum.Left:\n            return Math.PI * 2;\n    }\n}","import { ColorModel } from \"./ColorModel\";\n\nfunction GetColorCode(enteredColor: string): string {\n    let color = \"#FFFFFF\";\n    const lowerEnteredColor = enteredColor.toLowerCase();\n    switch (lowerEnteredColor) {\n        case \"aliceblue\": color = \"#F0F8FF\"; break;\n        case \"antiquewhite\": color = \"#FAEBD7\"; break;\n        case \"aqua\": color = \"#00FFFF\"; break;\n        case \"aquamarine\": color = \"#7FFFD4\"; break;\n        case \"azure\": color = \"#F0FFFF\"; break;\n        case \"beige\": color = \"#F5F5DC\"; break;\n        case \"bisque\": color = \"#FFE4C4\"; break;\n        case \"black\": color = \"#000000\"; break;\n        case \"blanchedalmond\": color = \"#FFEBCD\"; break;\n        case \"blue\": color = \"#0000FF\"; break;\n        case \"blueviolet\": color = \"#8A2BE2\"; break;\n        case \"brown\": color = \"#A52A2A\"; break;\n        case \"burlywood\": color = \"#DEB887\"; break;\n        case \"cadetblue\": color = \"#5F9EA0\"; break;\n        case \"chartreuse\": color = \"#7FFF00\"; break;\n        case \"chocolate\": color = \"#D2691E\"; break;\n        case \"coral\": color = \"#FF7F50\"; break;\n        case \"cornflowerblue\": color = \"#6495ED\"; break;\n        case \"cornsilk\": color = \"#FFF8DC\"; break;\n        case \"crimson\": color = \"#DC143C\"; break;\n        case \"cyan\": color = \"#00FFFF\"; break;\n        case \"darkblue\": color = \"#00008B\"; break;\n        case \"darkcyan\": color = \"#008B8B\"; break;\n        case \"darkgoldenrod\": color = \"#B8860B\"; break;\n        case \"darkgray\": color = \"#A9A9A9\"; break;\n        case \"darkgrey\": color = \"#A9A9A9\"; break;\n        case \"darkgreen\": color = \"#006400\"; break;\n        case \"darkkhaki\": color = \"#BDB76B\"; break;\n        case \"darkmagenta\": color = \"#8B008B\"; break;\n        case \"darkolivegreen\": color = \"#556B2F\"; break;\n        case \"darkorange\": color = \"#FF8C00\"; break;\n        case \"darkorchid\": color = \"#9932CC\"; break;\n        case \"darkred\": color = \"#8B0000\"; break;\n        case \"darksalmon\": color = \"#E9967A\"; break;\n        case \"darkseagreen\": color = \"#8FBC8F\"; break;\n        case \"darkslateblue\": color = \"#483D8B\"; break;\n        case \"darkslategray\": color = \"#2F4F4F\"; break;\n        case \"darkslategrey\": color = \"#2F4F4F\"; break;\n        case \"darkturquoise\": color = \"#00CED1\"; break;\n        case \"darkviolet\": color = \"#9400D3\"; break;\n        case \"deeppink\": color = \"#FF1493\"; break;\n        case \"deepskyblue\": color = \"#00BFFF\"; break;\n        case \"dimgray\": color = \"#696969\"; break;\n        case \"dimgrey\": color = \"#696969\"; break;\n        case \"dodgerblue\": color = \"#1E90FF\"; break;\n        case \"firebrick\": color = \"#B22222\"; break;\n        case \"floralwhite\": color = \"#FFFAF0\"; break;\n        case \"forestgreen\": color = \"#228B22\"; break;\n        case \"fuchsia\": color = \"#FF00FF\"; break;\n        case \"gainsboro\": color = \"#DCDCDC\"; break;\n        case \"ghostwhite\": color = \"#F8F8FF\"; break;\n        case \"gold\": color = \"#FFD700\"; break;\n        case \"goldenrod\": color = \"#DAA520\"; break;\n        case \"gray\": color = \"#808080\"; break;\n        case \"grey\": color = \"#808080\"; break;\n        case \"green\": color = \"#008000\"; break;\n        case \"greenyellow\": color = \"#ADFF2F\"; break;\n        case \"honeydew\": color = \"#F0FFF0\"; break;\n        case \"hotpink\": color = \"#FF69B4\"; break;\n        case \"indianred\": color = \"#CD5C5C\"; break;\n        case \"indigo\": color = \"#4B0082\"; break;\n        case \"ivory\": color = \"#FFFFF0\"; break;\n        case \"khaki\": color = \"#F0E68C\"; break;\n        case \"lavender\": color = \"#E6E6FA\"; break;\n        case \"lavenderblush\": color = \"#FFF0F5\"; break;\n        case \"lawngreen\": color = \"#7CFC00\"; break;\n        case \"lemonchiffon\": color = \"#FFFACD\"; break;\n        case \"lightblue\": color = \"#ADD8E6\"; break;\n        case \"lightcoral\": color = \"#F08080\"; break;\n        case \"lightcyan\": color = \"#E0FFFF\"; break;\n        case \"lightgoldenrodyellow\": color = \"#FAFAD2\"; break;\n        case \"lightgray\": color = \"#D3D3D3\"; break;\n        case \"lightgrey\": color = \"#D3D3D3\"; break;\n        case \"lightgreen\": color = \"#90EE90\"; break;\n        case \"lightpink\": color = \"#FFB6C1\"; break;\n        case \"lightsalmon\": color = \"#FFA07A\"; break;\n        case \"lightseagreen\": color = \"#20B2AA\"; break;\n        case \"lightskyblue\": color = \"#87CEFA\"; break;\n        case \"lightslategray\": color = \"#778899\"; break;\n        case \"lightslategrey\": color = \"#778899\"; break;\n        case \"lightsteelblue\": color = \"#B0C4DE\"; break;\n        case \"lightyellow\": color = \"#FFFFE0\"; break;\n        case \"lime\": color = \"#00FF00\"; break;\n        case \"limegreen\": color = \"#32CD32\"; break;\n        case \"linen\": color = \"#FAF0E6\"; break;\n        case \"magenta\": color = \"#FF00FF\"; break;\n        case \"maroon\": color = \"#800000\"; break;\n        case \"mediumaquamarine\": color = \"#66CDAA\"; break;\n        case \"mediumblue\": color = \"#0000CD\"; break;\n        case \"mediumorchid\": color = \"#BA55D3\"; break;\n        case \"mediumpurple\": color = \"#9370DB\"; break;\n        case \"mediumseagreen\": color = \"#3CB371\"; break;\n        case \"mediumslateblue\": color = \"#7B68EE\"; break;\n        case \"mediumspringgreen\": color = \"#00FA9A\"; break;\n        case \"mediumturquoise\": color = \"#48D1CC\"; break;\n        case \"mediumvioletred\": color = \"#C71585\"; break;\n        case \"midnightblue\": color = \"#191970\"; break;\n        case \"mintcream\": color = \"#F5FFFA\"; break;\n        case \"mistyrose\": color = \"#FFE4E1\"; break;\n        case \"moccasin\": color = \"#FFE4B5\"; break;\n        case \"navajowhite\": color = \"#FFDEAD\"; break;\n        case \"navy\": color = \"#000080\"; break;\n        case \"oldlace\": color = \"#FDF5E6\"; break;\n        case \"olive\": color = \"#808000\"; break;\n        case \"olivedrab\": color = \"#6B8E23\"; break;\n        case \"orange\": color = \"#FFA500\"; break;\n        case \"orangered\": color = \"#FF4500\"; break;\n        case \"orchid\": color = \"#DA70D6\"; break;\n        case \"palegoldenrod\": color = \"#EEE8AA\"; break;\n        case \"palegreen\": color = \"#98FB98\"; break;\n        case \"paleturquoise\": color = \"#AFEEEE\"; break;\n        case \"palevioletred\": color = \"#DB7093\"; break;\n        case \"papayawhip\": color = \"#FFEFD5\"; break;\n        case \"peachpuff\": color = \"#FFDAB9\"; break;\n        case \"peru\": color = \"#CD853F\"; break;\n        case \"pink\": color = \"#FFC0CB\"; break;\n        case \"plum\": color = \"#DDA0DD\"; break;\n        case \"powderblue\": color = \"#B0E0E6\"; break;\n        case \"purple\": color = \"#800080\"; break;\n        case \"rebeccapurple\": color = \"#663399\"; break;\n        case \"red\": color = \"#FF0000\"; break;\n        case \"rosybrown\": color = \"#BC8F8F\"; break;\n        case \"royalblue\": color = \"#4169E1\"; break;\n        case \"saddlebrown\": color = \"#8B4513\"; break;\n        case \"salmon\": color = \"#FA8072\"; break;\n        case \"sandybrown\": color = \"#F4A460\"; break;\n        case \"seagreen\": color = \"#2E8B57\"; break;\n        case \"seashell\": color = \"#FFF5EE\"; break;\n        case \"sienna\": color = \"#A0522D\"; break;\n        case \"silver\": color = \"#C0C0C0\"; break;\n        case \"skyblue\": color = \"#87CEEB\"; break;\n        case \"slateblue\": color = \"#6A5ACD\"; break;\n        case \"slategray\": color = \"#708090\"; break;\n        case \"slategrey\": color = \"#708090\"; break;\n        case \"snow\": color = \"#FFFAFA\"; break;\n        case \"springgreen\": color = \"#00FF7F\"; break;\n        case \"steelblue\": color = \"#4682B4\"; break;\n        case \"tan\": color = \"#D2B48C\"; break;\n        case \"teal\": color = \"#008080\"; break;\n        case \"thistle\": color = \"#D8BFD8\"; break;\n        case \"tomato\": color = \"#FF6347\"; break;\n        case \"turquoise\": color = \"#40E0D0\"; break;\n        case \"violet\": color = \"#EE82EE\"; break;\n        case \"wheat\": color = \"#F5DEB3\"; break;\n        case \"white\": color = \"#FFFFFF\"; break;\n        case \"whitesmoke\": color = \"#F5F5F5\"; break;\n        case \"yellow\": color = \"#FFFF00\"; break;\n        case \"yellowgreen\": color = \"#9ACD32\"; break;\n    }\n\n    return color;\n}\n\nexport function CheckColorString(color: string): boolean {\n    if (color === \"\" || color === undefined || color === null) {\n        return false;\n    }\n\n    const style = new Option().style;\n    style.color = color;\n\n    return style.color === color.toLowerCase();\n}\n\nfunction GetColorModel(color: string): ColorModel {\n    if (color.startsWith(\"rgb(\")) {\n        const colorPart = color.split(\"(\")[1].split(\")\")[0];\n        const colors = colorPart.split(\",\");\n        return {\n            red: Number(colors[0]),\n            green: Number(colors[1]),\n            blue: Number(colors[2])\n        }\n    } else if (!color.startsWith(\"#\")) {\n        color = GetColorCode(color);\n    }\n\n    return {\n        red: parseInt(color.substring(1, 3), 16),\n        blue: parseInt(color.substring(5, 7), 16),\n        green: parseInt(color.substring(3, 5), 16)\n    }\n}\n\nexport function GetOpaqueColor(color: string, opacity: number): string {\n    try {\n        const model = GetColorModel(color);\n\n        return `rgba(${model.red},${model.green},${model.blue},${opacity})`;\n    } catch (error) {\n        return \"white\";\n    }\n}\n\nexport function GetLighterColor(color: string, amount: number): string {\n    try {\n        const model = GetColorModel(color);\n        const red = 256 - (256 - model.red) * amount;\n        const blue = 256 - (256 - model.blue) * amount;\n        const green = 256 - (256 - model.green) * amount;\n        return `rgb(${red},${green},${blue})`;\n    } catch (error) {\n        return \"white\";\n    }\n}\n\n\nexport function GetGrayScaleColor(color: string, amount: number): string {\n    const model = GetColorModel(color);\n\n    try {\n        const average = (model.red + model.green + model.blue) / 3\n        return `rgb(${average * amount + model.red * (1 - amount)},${average * amount + model.green * (1 - amount)},${average * amount + model.blue * (1 - amount)})`;\n    } catch (error) {\n        return \"white\";\n    }\n}\n\nexport function GetRandomColor(): string {\n    const randNumber = Math.floor(Math.random() * 148);\n    switch (randNumber) {\n        case 0: return \"AliceBlue\";\n        case 1: return \"AntiqueWhite\";\n        case 2: return \"Aqua\";\n        case 3: return \"Aquamarine\";\n        case 4: return \"Azure\";\n        case 5: return \"Beige\";\n        case 6: return \"Bisque\";\n        case 7: return \"Black\";\n        case 8: return \"BlanchedAlmond\";\n        case 9: return \"Blue\";\n        case 10: return \"BlueViolet\";\n        case 11: return \"Brown\";\n        case 12: return \"BurlyWood\";\n        case 13: return \"CadetBlue\";\n        case 14: return \"Chartreuse\";\n        case 15: return \"Chocolate\";\n        case 16: return \"Coral\";\n        case 17: return \"CornflowerBlue\";\n        case 18: return \"Cornsilk\";\n        case 19: return \"Crimson\";\n        case 20: return \"Cyan\";\n        case 21: return \"DarkBlue\";\n        case 22: return \"DarkCyan\";\n        case 23: return \"DarkGoldenRod\";\n        case 24: return \"DarkGray\";\n        case 25: return \"DarkGrey\";\n        case 26: return \"DarkGreen\";\n        case 27: return \"DarkKhaki\";\n        case 28: return \"DarkMagenta\";\n        case 29: return \"DarkOliveGreen\";\n        case 30: return \"DarkOrange\";\n        case 31: return \"DarkOrchid\";\n        case 32: return \"DarkRed\";\n        case 33: return \"DarkSalmon\";\n        case 34: return \"DarkSeaGreen\";\n        case 35: return \"DarkSlateBlue\";\n        case 36: return \"DarkSlateGray\";\n        case 37: return \"DarkSlateGrey\";\n        case 38: return \"DarkTurquoise\";\n        case 39: return \"DarkViolet\";\n        case 40: return \"DeepPink\";\n        case 41: return \"DeepSkyBlue\";\n        case 42: return \"DimGray\";\n        case 43: return \"DimGrey\";\n        case 44: return \"DodgerBlue\";\n        case 45: return \"FireBrick\";\n        case 46: return \"FloralWhite\";\n        case 47: return \"ForestGreen\";\n        case 48: return \"Fuchsia\";\n        case 49: return \"Gainsboro\";\n        case 50: return \"GhostWhite\";\n        case 51: return \"Gold\";\n        case 52: return \"GoldenRod\";\n        case 53: return \"Gray\";\n        case 54: return \"Grey\";\n        case 55: return \"Green\";\n        case 56: return \"GreenYellow\";\n        case 57: return \"HoneyDew\";\n        case 58: return \"HotPink\";\n        case 59: return \"IndianRed \";\n        case 60: return \"Indigo\";\n        case 61: return \"Ivory\";\n        case 62: return \"Khaki\";\n        case 63: return \"Lavender\";\n        case 64: return \"LavenderBlush\";\n        case 65: return \"LawnGreen\";\n        case 66: return \"LemonChiffon\";\n        case 67: return \"LightBlue\";\n        case 68: return \"LightCoral\";\n        case 69: return \"LightCyan\";\n        case 70: return \"LightGoldenRodYellow\";\n        case 71: return \"LightGray\";\n        case 72: return \"LightGrey\";\n        case 73: return \"LightGreen\";\n        case 74: return \"LightPink\";\n        case 75: return \"LightSalmon\";\n        case 76: return \"LightSeaGreen\";\n        case 77: return \"LightSkyBlue\";\n        case 78: return \"LightSlateGray\";\n        case 79: return \"LightSlateGrey\";\n        case 80: return \"LightSteelBlue\";\n        case 81: return \"LightYellow\";\n        case 82: return \"Lime\";\n        case 83: return \"LimeGreen\";\n        case 84: return \"Linen\";\n        case 85: return \"Magenta\";\n        case 86: return \"Maroon\";\n        case 87: return \"MediumAquaMarine\";\n        case 88: return \"MediumBlue\";\n        case 89: return \"MediumOrchid\";\n        case 90: return \"MediumPurple\";\n        case 91: return \"MediumSeaGreen\";\n        case 92: return \"MediumSlateBlue\";\n        case 93: return \"MediumSpringGreen\";\n        case 94: return \"MediumTurquoise\";\n        case 95: return \"MediumVioletRed\";\n        case 96: return \"MidnightBlue\";\n        case 97: return \"MintCream\";\n        case 98: return \"MistyRose\";\n        case 99: return \"Moccasin\";\n        case 100: return \"NavajoWhite\";\n        case 101: return \"Navy\";\n        case 102: return \"OldLace\";\n        case 103: return \"Olive\";\n        case 104: return \"OliveDrab\";\n        case 105: return \"Orange\";\n        case 106: return \"OrangeRed\";\n        case 107: return \"Orchid\";\n        case 108: return \"PaleGoldenRod\";\n        case 109: return \"PaleGreen\";\n        case 110: return \"PaleTurquoise\";\n        case 111: return \"PaleVioletRed\";\n        case 112: return \"PapayaWhip\";\n        case 113: return \"PeachPuff\";\n        case 114: return \"Peru\";\n        case 115: return \"Pink\";\n        case 116: return \"Plum\";\n        case 117: return \"PowderBlue\";\n        case 118: return \"Purple\";\n        case 119: return \"RebeccaPurple\";\n        case 120: return \"Red\";\n        case 121: return \"RosyBrown\";\n        case 122: return \"RoyalBlue\";\n        case 123: return \"SaddleBrown\";\n        case 124: return \"Salmon\";\n        case 125: return \"SandyBrown\";\n        case 126: return \"SeaGreen\";\n        case 127: return \"SeaShell\";\n        case 128: return \"Sienna\";\n        case 129: return \"Silver\";\n        case 130: return \"SkyBlue\";\n        case 131: return \"SlateBlue\";\n        case 132: return \"SlateGray\";\n        case 133: return \"SlateGrey\";\n        case 134: return \"Snow\";\n        case 135: return \"SpringGreen\";\n        case 136: return \"SteelBlue\";\n        case 137: return \"Tan\";\n        case 138: return \"Teal\";\n        case 139: return \"Thistle\";\n        case 140: return \"Tomato\";\n        case 141: return \"Turquoise\";\n        case 142: return \"Violet\";\n        case 143: return \"Wheat\";\n        case 144: return \"White\";\n        case 145: return \"WhiteSmoke\";\n        case 146: return \"Yellow\";\n        case 147: return \"YellowGreen\";\n        default:\n            return \"White\";\n    }\n}","export function Minimum<T>(array: T[], valueSelector: (element: T) => number): T | undefined {\r\n    let minimum = Infinity;\r\n    let minimumElement: T | undefined = undefined;\r\n    for (const element of array) {\r\n        const value = valueSelector(element);\r\n        if (value < minimum) {\r\n            minimumElement = element;\r\n            minimum = value;\r\n        }\r\n    }\r\n\r\n    return minimumElement;\r\n}\r\n\r\nexport function Maximum<T>(array: T[], valueSelector: (element: T) => number): T | undefined {\r\n    let maximum = -Infinity;\r\n    let maximumElement: T | undefined = undefined;\r\n    for (const element of array) {\r\n        const value = valueSelector(element);\r\n        if (value > maximum) {\r\n            maximumElement = element;\r\n            maximum = value;\r\n        }\r\n    }\r\n\r\n    return maximumElement;\r\n}","\r\nimport { MachineInstancesReducer } from \"./MachineInstances/MachineInstancesReducer\";\r\nimport { CustomMachineModel } from \"./CustomMachineModel\";\r\nimport { Draft } from \"immer\";\r\nimport { Actions } from \"../../../Actions\";\r\nimport { TypeProvider } from \"../TypeProvider\";\r\nimport { CheckColorString } from \"../../../../Helper/ColorHelper\";\r\nimport { GridSetupModel } from \"./GridModel\";\r\nimport { Maximum, Minimum } from \"../../../../Helper/ArrayHelper\";\r\nimport { Constants } from \"../../../../Components/Constants\";\r\nimport { CleanInput } from \"../../../../Helper/TextInputHelper\";\r\n\r\nexport function GridSetupReducer(draft: Draft<CustomMachineModel>, action: Actions, typeProvider: TypeProvider, cellSize: number): CustomMachineModel {\r\n    if (draft === undefined) {\r\n        return draft;\r\n    }\r\n    switch (action.type) {\r\n        case \"SetColorActionType\":\r\n            if (CheckColorString(action.color)) {\r\n                draft.Style.Color = CleanInput(action.color);\r\n            }\r\n            return draft;\r\n        case \"SetBorderColorActionType\":\r\n            if (CheckColorString(action.borderColor)) {\r\n                draft.Style.BorderColor = CleanInput(action.borderColor);\r\n            }\r\n            return draft;\r\n        case \"SetNameActionType\":\r\n            draft.Style.Name = CleanInput(action.name);\r\n            return draft;\r\n        case \"SetDescriptionActionType\":\r\n            draft.Style.Description = CleanInput(action.description);\r\n            return draft;\r\n        default:\r\n            switch (action.type) {\r\n                case \"FixMachineActionType\":\r\n                    const machineFixed = draft.Setup.MachineInstances.find((mi) => mi.Id === action.machineInstanceId)!;\r\n                    if (machineFixed.Status === \"Deleted\") {\r\n                        if (draft.Setup.MachineInstances.filter((m) => m.MachineId === machineFixed.MachineId).length <= 1) {\r\n                            draft.DependingOnDeleted = draft.DependingOnDeleted.filter((id) => id !== machineFixed.MachineId);\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n\r\n            draft.Setup.MachineInstances = MachineInstancesReducer(draft.Setup.MachineInstances, action, typeProvider, cellSize);\r\n\r\n            switch (action.type) {\r\n                case \"MachineAddedActionType\":\r\n                case \"MachineRemovedActionType\":\r\n                case \"MachineMovedActionType\":\r\n                    ResizeGrid(draft.Setup);\r\n            }\r\n\r\n            return draft;\r\n    }\r\n}\r\n\r\nfunction ResizeGrid(setup: Draft<GridSetupModel>) {\r\n    if (setup.MachineInstances.length > 0) {\r\n        let deltaRow = 0;\r\n        let deltaColumn = 0;\r\n        const minimumColumn = Minimum(setup.MachineInstances, (mi) => mi.Cell.Column)!.Cell.Column;\r\n        const minimumRow = Minimum(setup.MachineInstances, (mi) => mi.Cell.Row)!.Cell.Row;\r\n        let maximumColumn = Maximum(setup.MachineInstances, (mi) => mi.Cell.Column)!.Cell.Column;\r\n        let maximumRow = Maximum(setup.MachineInstances, (mi) => mi.Cell.Row)!.Cell.Row;\r\n\r\n        if (minimumColumn <= 0) {\r\n            deltaColumn = 1 - minimumColumn;\r\n            maximumColumn += deltaColumn;\r\n        } else {\r\n            let excessColumns = maximumColumn + 2 - Constants.MinimumColumns;\r\n            if (excessColumns > 0 && minimumColumn > 1) {\r\n                deltaColumn = -Math.min(excessColumns, minimumColumn - 1);\r\n                excessColumns += deltaColumn;\r\n                maximumColumn += deltaColumn;\r\n            }\r\n        }\r\n\r\n        if (minimumRow <= 0) {\r\n            deltaRow = 1 - minimumRow;\r\n            maximumRow += deltaRow;\r\n        } else {\r\n            let excessRows = maximumRow + 2 - Constants.MinimumRows;\r\n            if (excessRows > 0 && minimumRow > 1) {\r\n                deltaRow = -Math.min(excessRows, minimumRow - 1);\r\n                excessRows += deltaRow;\r\n                maximumRow += deltaRow;\r\n            }           \r\n        }\r\n\r\n\r\n        setup.MachineInstances.forEach((mi) => {\r\n            mi.Cell = {\r\n                Row: mi.Cell.Row + deltaRow,\r\n                Column: mi.Cell.Column + deltaColumn\r\n            }\r\n        });\r\n\r\n        setup.NumberOfColumns = Math.max(maximumColumn + 2, Constants.MinimumColumns);\r\n        setup.NumberOfRows = Math.max(maximumRow + 2, Constants.MinimumRows);\r\n    }\r\n}","import { MachineInstanceModel } from \"../../../../../Models/MachineInstanceModel\";\r\nimport { Draft } from \"immer\";\r\nimport { Actions } from \"../../../../Actions\";\r\nimport { GetNewChannelSet } from \"../../../../../Helper/NewChannelSet\";\r\nimport { AreEqual } from \"../../../../../Models/CellModel\";\r\nimport * as dc from \"../../../../../Components/Grid/Cell/MachineInstance/MachineDrawer/DrawConstants\";\r\nimport { GetAngleFromDirection } from \"../../../../../Helper/AngleHelper\";\r\nimport { DirectionEnum } from \"../../../../../Models/DirectionEnum\";\r\nimport { ITypeProvider } from \"../../../../../MachineStore/ITypeProvider\";\r\nimport { IsStartMachine } from \"../../../../../MachineStore/IMachine\";\r\n\r\nexport function MachineInstancesReducer(draft: Draft<MachineInstanceModel[]>, action: Actions, typeProvider: ITypeProvider, cellSize: number): MachineInstanceModel[] {\r\n    switch (action.type) {\r\n        case \"ChannelChangedActionType\":\r\n            const machine = draft.find((mi) => mi.Id === action.machineInstanceId)!;\r\n            const channelIndex = machine.OutputChannels.findIndex((c) => c.Channel === action.channel.Channel);\r\n            const relevantChannels = machine.OutputChannels.filter((c, index) => c.Direction === action.channel.Direction && c.Status !== \"DoesNotExist\" && index !== channelIndex);\r\n            if (relevantChannels.length > 0 && action.angle !== undefined) {\r\n                const newChannelArray = machine.OutputChannels.filter((c) => c.Direction !== action.channel.Direction && c.Status !== \"DoesNotExist\");\r\n                let split = -(relevantChannels.length - 1) / 2 * dc.outputSplitFactor * cellSize;\r\n\r\n                let inserted = false;\r\n                const baseAngle = GetAngleFromDirection(action.channel.Direction);\r\n                const draggedSplit = -Math.sin(action.angle - baseAngle) * dc.outputStartLengthFactor * cellSize;\r\n                for (let index = 0; index < relevantChannels.length; index++) {\r\n                    if (!inserted && draggedSplit < split) {\r\n                        inserted = true;\r\n                        newChannelArray.push(action.channel);\r\n                    }\r\n\r\n                    newChannelArray.push(relevantChannels[index]);\r\n                    split += dc.outputSplitFactor * cellSize;\r\n                }\r\n\r\n                if (!inserted) {\r\n                    newChannelArray.push(action.channel);\r\n                }\r\n\r\n                machine.OutputChannels = newChannelArray;\r\n\r\n            } else {\r\n                machine.OutputChannels[channelIndex] = action.channel;\r\n            }\r\n            return draft;\r\n        case \"InputChannelChangedActionType\":\r\n            const machineInput = draft.find((mi) => mi.Id === action.machineInstanceId)!;\r\n            const channelModel = machineInput.InputChannels.find((ic) => ic.Direction === action.channel.Direction)!;\r\n            channelModel.Direction = machineInput.InputChannels[action.channelIndex].Direction;\r\n            machineInput.InputChannels[action.channelIndex] = action.channel;\r\n            return draft;\r\n        case \"MachineRemovedActionType\":\r\n            const machineRemoved = draft.find((mi) => mi.Id === action.machineInstanceId)!;\r\n            if (IsStartMachine(machineRemoved.MachineId) && draft.filter((mi) => IsStartMachine(mi.MachineId)).length < 2) {\r\n                return draft;\r\n            } else {\r\n                return draft.filter((mi) => mi.Id !== action.machineInstanceId);\r\n            }\r\n        case \"MachineAddedActionType\":\r\n            if (draft.some((mi) => AreEqual(mi.Cell, action.cell))) {\r\n                return draft;\r\n            }\r\n\r\n            const { outputChannels, inputChannels } = GetNewChannelSet(action.api, false);\r\n\r\n            const maxId = (draft.length === 0) ? 0 : Math.max(...draft.map((mi) => mi.Id));\r\n            const machineInstance: MachineInstanceModel = {\r\n                Cell: action.cell,\r\n                MachineId: action.machineId,\r\n                OutputChannels: outputChannels,\r\n                InputChannels: inputChannels,\r\n                Id: maxId + 1,\r\n                Status: \"Valid\"\r\n            };\r\n\r\n            draft.push(machineInstance);\r\n            return draft;\r\n\r\n        case \"MachineMovedActionType\":\r\n            if (draft.some((m) => AreEqual(m.Cell, action.newCell))) {\r\n                return draft;\r\n            }\r\n            const machineMoved = draft.find((mi) => mi.Id === action.machineInstanceId)!;\r\n            machineMoved.Cell = action.newCell;\r\n            return draft;\r\n        case \"FixMachineActionType\":\r\n            const machineFixed = draft.find((mi) => mi.Id === action.machineInstanceId)!;\r\n            if (machineFixed.Status === \"Deleted\") {\r\n                return draft.filter((mi) => mi.Id !== action.machineInstanceId);\r\n            } else if (machineFixed.Status === \"ChannelsInvalid\") {\r\n                const api = typeProvider.GetMachineType(machineFixed.MachineId).Api;\r\n                machineFixed.OutputChannels = machineFixed.OutputChannels.filter((c) => api.OutputChannels.some((o) => o === c.Channel));\r\n                machineFixed.OutputChannels = machineFixed.OutputChannels.concat(api.OutputChannels.filter((o) => !machineFixed.OutputChannels.some((c) => c.Channel === o)).map((o) => ({ Channel: o, Direction: DirectionEnum.Up, Status: \"Exists\" })));\r\n\r\n                machineFixed.InputChannels = machineFixed.InputChannels.map((ic) => {\r\n                    if (ic.Status === \"Exists\" && !api.InputChannels.some((iac) => iac === ic.Channel)) {\r\n                        return { ...ic, Channel: api.InputChannels[0] };\r\n                    } else {\r\n                        return ic;\r\n                    }\r\n                });\r\n\r\n                machineFixed.Status = \"Valid\";\r\n            }\r\n            return draft;\r\n        default:\r\n            return draft;\r\n    }\r\n}","import { ExitCellModel } from \"../Models/ExitCellModel\";\r\nimport { CellModel } from \"../Models/CellModel\";\r\nimport { MachineInstanceModel } from \"../Models/MachineInstanceModel\";\r\nimport { DirectionEnum } from \"../Models/DirectionEnum\";\r\nimport { GridSetupModel } from \"../Redux/GameDataReducer/PlayerReducer/GridSetup/GridModel\";\r\nimport { Draft } from \"immer\";\r\nimport { ITypeProvider } from \"../MachineStore/ITypeProvider\";\r\nimport { IsStartMachine } from \"../MachineStore/IMachine\";\r\n\r\nexport function CalculateExits(setup: Draft<GridSetupModel>, typeProvider: ITypeProvider): ExitCellModel[] {\r\n    const exitCells: ExitCellModel[] = [];\r\n    let cells: ExitCellModel[] = [];\r\n    const starts = GetStartMachines(setup);\r\n    cells = cells.concat(starts.map((s) => ({ Cell: s.Cell, Direction: s.OutputChannels[0].Direction })));\r\n    for (let i = 0; i < cells.length; i++) {\r\n        let cell: CellModel = cells[i].Cell;\r\n        let machine: Draft<MachineInstanceModel> | undefined;\r\n        let cellModel: CellModel | undefined;\r\n        while (machine === undefined) {\r\n            cellModel = Move(setup, cell, cells[i].Direction);\r\n            if (cellModel === undefined) {\r\n                break;\r\n            }\r\n\r\n            cell = cellModel;\r\n            // eslint-disable-next-line\r\n            machine = setup.MachineInstances.find((mi) => mi.Cell.Column === cell!.Column && mi.Cell.Row === cell!.Row);\r\n        }\r\n\r\n        if (cellModel === undefined) {\r\n            exitCells.push({ Direction: cells[i].Direction, Cell: cell });\r\n            continue;\r\n        }\r\n\r\n        const api = typeProvider.GetMachineType(machine!.MachineId).Api;\r\n        // eslint-disable-next-line\r\n        const existingChannel = machine!.InputChannels.find((ic) => ic.Direction === cells[i].Direction);\r\n        if (existingChannel !== undefined) {\r\n            if (!api.InputChannels.some((ic) => ic === existingChannel.Channel)) {\r\n                existingChannel.Channel = api.InputChannels[0];\r\n            }\r\n            existingChannel.Status = \"Exists\";\r\n        } else {\r\n            machine!.InputChannels.push({\r\n                Channel: api.InputChannels[0],\r\n                Direction: cells[i].Direction,\r\n                Status: \"Exists\"\r\n            });\r\n        }\r\n\r\n        if (!cells.some((c) => c.Cell.Column === cell.Column && c.Cell.Row === cell.Row)) {\r\n            cells = cells.concat(machine!.OutputChannels.map((c) => ({ Cell: cell, Direction: c.Direction })));\r\n        }\r\n    }\r\n    return exitCells;\r\n}\r\n\r\nexport function Move(setup: {NumberOfRows: number, NumberOfColumns: number}, cell: CellModel, direction: DirectionEnum): CellModel | undefined {\r\n    switch (direction) {\r\n        case DirectionEnum.Down:\r\n            if (cell.Row >= setup.NumberOfRows - 1) {\r\n                return;\r\n            }\r\n            return { Column: cell.Column, Row: cell.Row + 1 };\r\n        case DirectionEnum.Up:\r\n            if (cell.Row <= 0) {\r\n                return;\r\n            }\r\n            return { Column: cell.Column, Row: cell.Row - 1 };\r\n        case DirectionEnum.Right:\r\n            if (cell.Column >= setup.NumberOfColumns - 1) {\r\n                return;\r\n            }\r\n            return { Column: cell.Column + 1, Row: cell.Row };\r\n        case DirectionEnum.Left:\r\n            if (cell.Column <= 0) {\r\n                return;\r\n            }\r\n            return { Column: cell.Column - 1, Row: cell.Row };\r\n    }\r\n}\r\n\r\nexport function GetStartMachines(setup: GridSetupModel): MachineInstanceModel[] {\r\n    const startMachines: MachineInstanceModel[] = [];\r\n    for (const machineInstance of setup.MachineInstances) {\r\n        if (IsStartMachine(machineInstance.MachineId)) {\r\n            startMachines.push(machineInstance);\r\n        }\r\n    }\r\n\r\n    return startMachines;\r\n}","import { MachineApi } from \"../../../Models/MachineApi\";\r\nimport { MachineInstanceModel } from \"../../../Models/MachineInstanceModel\";\r\nimport { Draft } from \"immer\";\r\n\r\nexport function UpdateMachineStatus(api: MachineApi, machineInstance: Draft<MachineInstanceModel>): void {\r\n    for (const newOutputChannel of api.OutputChannels) {\r\n        const matchingOutput = machineInstance.OutputChannels.find((i) => i.Channel === newOutputChannel);\r\n        if (matchingOutput === undefined || matchingOutput.Status === \"DoesNotExist\") {\r\n            machineInstance.Status = \"ChannelsInvalid\";\r\n            return;\r\n        }\r\n    }\r\n    for (const outputChannel of machineInstance.OutputChannels.filter((c) => c.Status === \"Exists\")) {\r\n        if (!api.OutputChannels.some((i) => i === outputChannel.Channel)) {\r\n            machineInstance.Status = \"ChannelsInvalid\";\r\n            return;\r\n        }\r\n    }\r\n    for (const inputChannel of machineInstance.InputChannels.filter((c) => c.Status === \"Exists\")) {\r\n        if (!api.InputChannels.some((i) => i === inputChannel.Channel)) {\r\n            machineInstance.Status = \"ChannelsInvalid\";\r\n            return;\r\n        }\r\n    }\r\n    machineInstance.Status = \"Valid\";\r\n}","import { ITypeProvider } from \"../../../MachineStore/ITypeProvider\";\r\nimport { IMachineType } from \"../../../MachineStore/IMachineType\";\r\nimport { CustomMachineModel } from \"./GridSetup/CustomMachineModel\";\r\nimport { MachineStore } from \"../../../MachineStore/MachineStore\";\r\nimport { IsDefaultMachine } from \"../../../MachineStore/IMachine\";\r\n\r\nexport class TypeProvider implements ITypeProvider {\r\n\r\n    private customMachines: CustomMachineModel[];\r\n    constructor(customMachines: CustomMachineModel[]) {\r\n        this.customMachines = customMachines;\r\n    }\r\n    public GetMachineType(machineId: string): IMachineType {\r\n        if (!IsDefaultMachine(machineId)){\r\n            const customMachine = this.customMachines.find((cm) =>  cm.Id === machineId);\r\n            if (customMachine === undefined){\r\n                throw Error(`CustomMachine not found, Id: '${machineId}'`);\r\n            }\r\n\r\n            return customMachine;\r\n        } else {\r\n            return MachineStore.GetStore().GetMachineType(machineId);\r\n        }\r\n    }\r\n\r\n}","import { ChannelColorEnum } from \"../../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../../Models/DirectionEnum\";\r\nimport { GridSetupReducer } from \"./GridSetup/GridSetupReducer\";\r\nimport { CustomMachineModel } from \"./GridSetup/CustomMachineModel\";\r\nimport { MachineApi, ApiAreEqual } from \"../../../Models/MachineApi\";\r\nimport { MachineInstanceModel } from \"../../../Models/MachineInstanceModel\";\r\nimport { Draft } from \"immer\";\r\nimport { GetRandomColor } from \"../../../Helper/ColorHelper\";\r\nimport { Actions } from \"../../Actions\";\r\nimport { CalculateExits, GetStartMachines } from \"../../../Helper/SetupHelper\";\r\nimport { UpdateMachineStatus } from \"./CustomMachinesHelper\";\r\nimport { TypeProvider } from \"./TypeProvider\";\r\nimport { PlayerModel } from \"./PlayerModel\";\r\nimport { CreateGuid } from \"../../../Helper/Guid\";\r\nimport { IsDefaultMachine } from \"../../../MachineStore/IMachine\";\r\nimport { LevelStore } from \"../../../Levels/LevelStore\";\r\nimport { LevelState } from \"./LevelData\";\r\nimport { Constants } from \"../../../Components/Constants\";\r\n\r\nexport function PlayerReducer(draft: Draft<PlayerModel>, action: Actions): PlayerModel {\r\n    switch (action.type) {\r\n        case \"LoadLevelActionType\":\r\n            {\r\n                const levelData = draft.levelData.find((ld) => ld.Id === action.id);\r\n                if (levelData !== undefined) {\r\n                    draft.activeMachineId = levelData.LastUsedMachineId;\r\n                } else {\r\n                    draft.levelData.push({ Id: action.id, State: LevelState.NoMachineLinked, LastUsedMachineId: undefined })\r\n                    draft.activeMachineId = undefined;\r\n                }\r\n                draft.activeLevel = action.id;\r\n                break;\r\n            }\r\n        case \"UpdateShowAnimations\":\r\n            draft.showAnimations = action.show;\r\n            break;\r\n        case \"UpdateStepTime\":\r\n            draft.stepTime = action.stepTime;\r\n            break;\r\n        case \"AddNewMachineActionType\":\r\n            let newMachine: CustomMachineModel | undefined;\r\n\r\n            const levelData = draft.levelData.find((ld) => ld.Id === draft.activeLevel!);\r\n            if (levelData === undefined || levelData.LastUsedMachineId === undefined) {\r\n                const levelModel = LevelStore.GetStore().GetLevel(draft.activeLevel!);\r\n                newMachine = CreateNewMachine(levelModel.Name, levelModel.MachineDescription, levelModel.Style.Color, levelModel.Style.BorderColor);\r\n            } else {\r\n                newMachine = CreateNewMachine(\"New machine\", \"\");\r\n            }\r\n\r\n            draft.machines.push(newMachine);\r\n            draft.activeMachineId = newMachine.Id;\r\n\r\n            if (levelData !== undefined) {\r\n                if (levelData.LastUsedMachineId === undefined) {\r\n                    levelData.LastUsedMachineId = newMachine.Id;\r\n                }\r\n\r\n                if (levelData.State === LevelState.NoMachineLinked) {\r\n                    levelData.State = LevelState.InProgress;\r\n                }\r\n            }\r\n\r\n            break;\r\n        case \"LoadCustomMachineActionType\":\r\n            const newActiveMachine = draft.machines.find((m) => m.Id === action.machineId);\r\n            if (newActiveMachine === undefined) {\r\n                throw Error(\"Loading an unknown machine, with id \" + action.machineId);\r\n            }\r\n            draft.activeMachineId = action.machineId;\r\n            break;\r\n        case \"ChangeCellSizeActionType\":\r\n            if (action.cellSize >= 10 && action.cellSize <= 200) {\r\n                draft.cellSize = action.cellSize;\r\n            }\r\n            break;\r\n        case \"SetLevelCompleteActionType\":\r\n            const level = draft.levelData.find(l => l.Id === action.levelId);\r\n            if (level !== undefined) {\r\n                level.State = LevelState.Completed;\r\n            }\r\n            break;\r\n        case \"DeleteMachineActionType\":\r\n            if (draft.activeMachineId === action.machineId) {\r\n                draft.activeMachineId = undefined;\r\n            }\r\n\r\n            const usedInLevel = draft.levelData.find((ld) => ld.LastUsedMachineId === action.machineId);\r\n            if (usedInLevel !== undefined) {\r\n                usedInLevel.LastUsedMachineId = undefined;\r\n                usedInLevel.State = LevelState.NoMachineLinked;\r\n            }\r\n\r\n            const directlyDependentMachines = draft.machines.filter((m) => m.DirectlyDependingOn.some((dp) => dp === action.machineId));\r\n            for (const dependentMachine of directlyDependentMachines) {\r\n                const updatedMachines: MachineInstanceModel[] = dependentMachine.Setup.MachineInstances.map((mi) => mi.MachineId === action.machineId ? { ...mi, Status: \"Deleted\" } : mi);\r\n                dependentMachine.Setup.MachineInstances = updatedMachines;\r\n                dependentMachine.DirectlyDependingOn = dependentMachine.DirectlyDependingOn.filter((i) => i !== action.machineId);\r\n                dependentMachine.DependingOnDeleted.push(action.machineId);\r\n            }\r\n\r\n            if (directlyDependentMachines.length > 0) {\r\n                draft.deletedMachines.push(draft.machines.find((m) => m.Id === action.machineId)!);\r\n            }\r\n\r\n            const dependentMachines = draft.machines.filter((m) => m.DependingOn.some((dp) => dp === action.machineId));\r\n            for (const dependentMachine of dependentMachines) {\r\n                dependentMachine.DependingOn = dependentMachine.DependingOn.filter((i) => i !== action.machineId);\r\n            }\r\n\r\n            draft.machines = draft.machines.filter((m) => m.Id !== action.machineId);\r\n\r\n            draft.deletedMachines = draft.deletedMachines.filter((dm) =>\r\n                draft.machines.some((m) => m.DependingOnDeleted.some((dp) => dp === action.machineId))\r\n            )\r\n            break;\r\n        default:\r\n            if (draft.activeMachineId === undefined) {\r\n                return draft;\r\n            }\r\n\r\n            const activeMachine = draft.machines.find((m) => m.Id === draft.activeMachineId)!;\r\n\r\n            GridSetupReducer(activeMachine, action, new TypeProvider(draft.machines), draft.cellSize);\r\n            break;\r\n    }\r\n\r\n    switch (action.type) {\r\n        case \"AddNewMachineActionType\":\r\n        case \"ChannelChangedActionType\":\r\n        case \"DeleteMachineActionType\":\r\n        case \"FixMachineActionType\":\r\n        case \"MachineAddedActionType\":\r\n        case \"MachineMovedActionType\":\r\n        case \"MachineRemovedActionType\":\r\n            if (draft.activeMachineId !== undefined) {\r\n                EnrichState(draft);\r\n            }\r\n            break;\r\n    }\r\n\r\n    return draft;\r\n};\r\n\r\nfunction CreateNewMachine(name: string, description: string, color?: string, borderColor?: string): CustomMachineModel {\r\n    return {\r\n        Id: CreateGuid(),\r\n        DirectlyDependingOn: [],\r\n        Style: {\r\n            BorderColor: borderColor ?? GetRandomColor(),\r\n            Color: color ?? GetRandomColor(),\r\n            Name: name,\r\n            Description: description\r\n        },\r\n        Api: {\r\n            InputChannels: [ChannelColorEnum.Green],\r\n            OutputChannels: []\r\n        },\r\n        Setup: {\r\n            NumberOfRows: Constants.MinimumRows,\r\n            NumberOfColumns: Constants.MinimumColumns,\r\n            MachineInstances: [{\r\n                MachineId: \"0\",\r\n                OutputChannels: [{ Direction: DirectionEnum.Right, Channel: ChannelColorEnum.Green, Status: \"Exists\" }],\r\n                InputChannels: [], Id: 1,\r\n                Cell: { Row: 2, Column: 1 },\r\n                Status: \"Valid\"\r\n            }]\r\n        },\r\n        ExitCells: [{ Cell: { Row: 2, Column: Constants.MinimumColumns - 1 }, Direction: DirectionEnum.Right }],\r\n        DependingOn: [\"0\"],\r\n        DependingOnDeleted: [],\r\n        Status: \"Valid\"\r\n    };\r\n}\r\n\r\nconst EnrichState = (draft: Draft<PlayerModel>) => {\r\n\r\n    DetermineDependencies(draft);\r\n    SetApi(draft);\r\n\r\n    return draft;\r\n};\r\n\r\nfunction DetermineDependencies(draft: Draft<PlayerModel>) {\r\n    const dependingDirectly: string[] = [];\r\n    const depending: string[] = [];\r\n    const DependingOnDeleted: string[] = [];\r\n    const activeMachine = draft.machines.find((m) => m.Id === draft.activeMachineId)!;\r\n\r\n    for (const machine of activeMachine.Setup.MachineInstances) {\r\n        if (machine.Status === \"Deleted\") {\r\n            DependingOnDeleted.push(machine.MachineId);\r\n            continue;\r\n        }\r\n        if (!IsDefaultMachine(machine.MachineId)) {\r\n            if (!dependingDirectly.some((d) => d === machine.MachineId)) {\r\n                dependingDirectly.push(machine.MachineId);\r\n            }\r\n        }\r\n        if (!depending.some((d) => d === machine.MachineId)) {\r\n            depending.push(machine.MachineId);\r\n            if (!IsDefaultMachine(machine.MachineId)) {\r\n                const machineType = draft.machines.find((m) => m.Id === machine.MachineId)!;\r\n                for (const depMachine of machineType.DependingOn) {\r\n                    if (!depending.some((d) => d === depMachine)) {\r\n                        depending.push(depMachine);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    activeMachine.DependingOn = depending;\r\n    activeMachine.DirectlyDependingOn = dependingDirectly;\r\n    return draft;\r\n}\r\n\r\nfunction SetApi(draft: Draft<PlayerModel>) {\r\n    const activeMachine = draft.machines.find((m) => m.Id === draft.activeMachineId)!;\r\n\r\n    activeMachine.Setup.MachineInstances.forEach((mi) => {\r\n        mi.InputChannels.forEach((ic) => {\r\n            ic.Status = \"DoesNotExist\";\r\n        });\r\n    });\r\n\r\n    activeMachine.ExitCells = CalculateExits(activeMachine.Setup, new TypeProvider([...draft.machines, ...draft.deletedMachines]));\r\n\r\n    const exitColors = activeMachine.ExitCells.map((ec) => {\r\n        switch (ec.Direction) {\r\n            case DirectionEnum.Right:\r\n                return ChannelColorEnum.Green;\r\n            case DirectionEnum.Up:\r\n                return ChannelColorEnum.Blue;\r\n            case DirectionEnum.Down:\r\n                return ChannelColorEnum.Red;\r\n            case DirectionEnum.Left:\r\n                return ChannelColorEnum.Yellow;\r\n            default:\r\n                throw Error(\"Invalid value for direction\");\r\n        }\r\n    });\r\n\r\n    const outputs: ChannelColorEnum[] = [];\r\n    for (const color of exitColors) {\r\n        if (!outputs.some((o) => o === color)) {\r\n            outputs.push(color);\r\n        }\r\n    }\r\n    const startMachines = GetStartMachines(activeMachine.Setup);\r\n    const inputs = startMachines.map((mi) => {\r\n        switch (mi.MachineId) {\r\n            case \"0\":\r\n                return ChannelColorEnum.Green;\r\n            case \"1\":\r\n                return ChannelColorEnum.Red;\r\n            case \"2\":\r\n                return ChannelColorEnum.Blue;\r\n            case \"3\":\r\n                return ChannelColorEnum.Yellow;\r\n            default:\r\n                throw Error(\"Unknown startmachine \" + mi.MachineId);\r\n        }\r\n    });\r\n    const newApi: MachineApi = { InputChannels: inputs, OutputChannels: outputs };\r\n    if (!ApiAreEqual(newApi, activeMachine.Api)) {\r\n        UpdateStatusDependentMachines(draft, newApi);\r\n    }\r\n    activeMachine.Api = newApi;\r\n    CheckMachineStatus(activeMachine);\r\n    return draft;\r\n}\r\n\r\nfunction CheckMachineStatus(draft: Draft<CustomMachineModel>) {\r\n    if (draft.Setup.MachineInstances.some((m) => m.Status !== \"Valid\")) {\r\n        draft.Status = \"Invalid\";\r\n    } else {\r\n        draft.Status = \"Valid\";\r\n    }\r\n}\r\n\r\nfunction UpdateStatusDependentMachines(draft: Draft<PlayerModel>, api: MachineApi) {\r\n    const activeMachineId = draft.activeMachineId!;\r\n    const dependentMachines = draft.machines.filter((m) => m.DirectlyDependingOn.some((dp) => dp === activeMachineId));\r\n    for (const dependentMachine of dependentMachines) {\r\n        for (const machineInstance of dependentMachine.Setup.MachineInstances.filter((mi) => mi.Status !== \"Deleted\" && mi.MachineId === activeMachineId)) {\r\n            UpdateMachineStatus(api, machineInstance);\r\n        }\r\n\r\n        CheckMachineStatus(dependentMachine);\r\n    }\r\n}","import { ChannelColorEnum } from \"./ChannelColorsEnum\";\n\nexport interface MachineApi {\n    readonly OutputChannels: ChannelColorEnum[];\n    readonly InputChannels: ChannelColorEnum[];\n}\n\nexport function ApiAreEqual(first: MachineApi, second: MachineApi): boolean {\n    if (first.InputChannels.length !== second.InputChannels.length) {\n        return false;\n    }\n    if (first.OutputChannels.length !== second.OutputChannels.length) {\n        return false;\n    }\n    if (first.InputChannels.some((i) => !second.InputChannels.some((o) => i === o))) {\n        return false;\n    }\n    if (first.OutputChannels.some((i) => !second.OutputChannels.some((o) => i === o))) {\n        return false;\n    }\n\n    return true;\n}","import produce, { Draft } from \"immer\";\r\nimport { Constants } from \"../../Components/Constants\";\r\nimport { CreateGuid } from \"../../Helper/Guid\";\r\nimport { GetActiveMachine } from \"../../Helper/StoreHelper\";\r\nimport { CleanInput } from \"../../Helper/TextInputHelper\";\r\nimport { IsDefaultMachine } from \"../../MachineStore/IMachine\";\r\nimport { Actions } from \"../Actions\";\r\nimport { GameData } from \"./GameModel\";\r\nimport { LevelReducer } from \"./Level/Reducer\";\r\nimport { LevelState } from \"./PlayerReducer/LevelData\";\r\nimport { PlayerModel } from \"./PlayerReducer/PlayerModel\";\r\nimport { PlayerReducer } from \"./PlayerReducer/PlayerReducer\";\r\n\r\nexport const GameReducer: (state: GameData, action: Actions) => GameData = produce((draft: Draft<GameData>, action: Actions) => {\r\n    switch (action.type) {\r\n        case \"SwitchScreen\":\r\n            draft.screen = action.screen;\r\n            break;\r\n        case \"SetMessagesActionType\":\r\n            draft.messages = action.messages;\r\n            break;\r\n        case \"SetMovingOutput\":\r\n            draft.movingOutput = action.outputChannel;\r\n            break;\r\n        case \"ImportPlayerData\":\r\n            const existingPlayer = draft.players.findIndex(p => p.id === action.data.id);\r\n            if (existingPlayer !== -1) {\r\n                draft.players[existingPlayer] = action.data;\r\n            } else {\r\n                draft.players.push(action.data);\r\n            }\r\n            break;\r\n        case \"SwitchPlayer\":\r\n            draft.activePlayerId = action.id;\r\n            break;\r\n        case \"DeletePlayer\":\r\n\r\n            draft.players = draft.players.filter((p) => p.id !== action.id);\r\n            if (draft.activePlayerId === action.id) {\r\n                if (draft.players.length > 0) {\r\n                    draft.activePlayerId = draft.players[0].id;\r\n                } else {\r\n                    draft.activePlayerId = \"\";\r\n                }\r\n            }\r\n            break;\r\n        case \"AddPlayer\":\r\n            const newName = CleanInput(action.name)\r\n            const newPlayer = GetNewPlayer(newName);\r\n            draft.players.push(newPlayer);\r\n            break;\r\n        case \"ChangePlayerName\":\r\n            const player = draft.players.find((p) => p.id === action.id);\r\n            if (player !== undefined) {\r\n                player.name = CleanInput(action.name);\r\n            }\r\n            break;\r\n        default:\r\n            switch (action.type) {\r\n                case \"AddNewMachineActionType\":\r\n                    draft.messages = [];\r\n                    break;\r\n                case \"LoadLevelActionType\":\r\n                    draft.screen = \"playing\";\r\n                    break;\r\n                case \"ChannelChangedActionType\":\r\n                    if (action.channel.Status === \"Exists\") {\r\n                        draft.movingOutput = undefined;\r\n                    }\r\n            }\r\n\r\n            if (draft.activePlayerId === \"\") {\r\n                return;\r\n            }\r\n\r\n            const activePlayer = draft.players.find((p) => p.id === draft.activePlayerId);\r\n            if (activePlayer !== undefined) {\r\n                PlayerReducer(activePlayer, action);\r\n            }\r\n            break;\r\n    }\r\n\r\n    draft.activeLevel = LevelReducer(draft.activeLevel, action);\r\n\r\n    switch (action.type) {\r\n        case \"ReportOutputActionType\":\r\n            CheckLevelCompleted(draft);\r\n            break;\r\n        case \"MachineRemovedActionType\":\r\n            const activePlayer = draft.players.find((p) => p.id === draft.activePlayerId)!;\r\n            const levelData = activePlayer.levelData.find((l) => l.Id === draft.activeLevel!.id)!;\r\n            if (levelData.State === LevelState.NonValidMachineUsed) {\r\n                if (CheckValidMachinesUsed(draft)) {\r\n                    levelData.State = LevelState.InProgress;\r\n                }\r\n            }\r\n            break;\r\n    }\r\n\r\n    return;\r\n});\r\n\r\n\r\nexport function GetNewPlayer(name: string): PlayerModel {\r\n    return {\r\n        deletedMachines: [],\r\n        id: CreateGuid(),\r\n        levelData: [],\r\n        machines: [],\r\n        name,\r\n        showAnimations: true,\r\n        stepTime: 10,\r\n        activeMachineId: undefined,\r\n        activeLevel: undefined,\r\n        cellSize: Constants.CellSize\r\n    }\r\n}\r\n\r\nfunction CheckValidMachinesUsed(gameData: GameData): boolean {\r\n    return GetActiveMachine(gameData)?.DependingOn.filter((mu) => IsDefaultMachine(mu)).every((mu) => gameData.activeLevel!.allowedMachines.some((am) => am === mu)) !== false;\r\n}\r\n\r\nfunction CheckLevelCompleted(draft: Draft<GameData>) {\r\n    const activePlayer = draft.players.find((p) => p.id === draft.activePlayerId)!;\r\n    const levelData = activePlayer.levelData.find((l) => l.Id === draft.activeLevel!.id)!;\r\n\r\n    const onlyAllowedMachinesUsed = CheckValidMachinesUsed(draft);\r\n    if (!onlyAllowedMachinesUsed) {\r\n        levelData.State = LevelState.NonValidMachineUsed;\r\n    } else if (levelData.State !== LevelState.Completed) {\r\n        levelData.State = LevelState.InProgress;\r\n    }\r\n\r\n    levelData.LastUsedMachineId = activePlayer.activeMachineId;\r\n}\r\n","import { createStore } from \"redux\";\r\nimport { CustomMachinesActionTypes } from \"./GameDataReducer/PlayerReducer/Actions\";\r\nimport { GridSetupActionTypes } from \"./GameDataReducer/PlayerReducer/GridSetup/Actions\";\r\nimport { MachineInstanceActionTypes } from \"./GameDataReducer/PlayerReducer/GridSetup/MachineInstances/Actions\";\r\nimport { LevelActionTypes } from \"./GameDataReducer/Level/Actions\";\r\nimport { ActionTypes } from \"./GameDataReducer/Actions\";\r\nimport { GameReducer } from \"./GameDataReducer/GameReducer\";\r\nimport { GameData } from \"./GameDataReducer/GameModel\";\r\nimport { GetNewPlayer } from \"./GameDataReducer/GameReducer\";\r\nimport { Draft } from \"immer\";\r\nimport { PlayerModel } from \"./GameDataReducer/PlayerReducer/PlayerModel\";\r\nimport { LevelState } from \"./GameDataReducer/PlayerReducer/LevelData\";\r\n\r\nfunction rootReducer(state: GameData | undefined, action: CustomMachinesActionTypes | GridSetupActionTypes | MachineInstanceActionTypes | LevelActionTypes | ActionTypes): GameData {\r\n    if (state === undefined) {\r\n        const player = GetNewPlayer(\"anonymous\");\r\n        return {\r\n            players: [player],\r\n            activePlayerId: player.id,\r\n            messages: [],\r\n            screen: \"startMenu\",\r\n            activeLevel: undefined,\r\n            movingOutput: undefined\r\n        };\r\n    }\r\n\r\n    const returnValue = GameReducer(state, action);\r\n    window.localStorage.setItem(\"Players\", JSON.stringify(returnValue.players));\r\n    window.localStorage.setItem(\"activePlayer\", returnValue.activePlayerId);\r\n\r\n    return returnValue;\r\n}\r\n\r\nfunction getInitialState(): GameData | undefined {\r\n\r\n    // return TestState as GameData;\r\n\r\n    const version = Number.parseInt(window.localStorage.getItem(\"Version\") ?? \"0\", 10);\r\n\r\n    switch (version) {\r\n        case 0:\r\n            window.localStorage.removeItem(\"State\");\r\n            window.localStorage.setItem(\"Version\", \"1\");\r\n\r\n            return undefined;\r\n        case 1:\r\n            const players = JSON.parse(window.localStorage.getItem(\"Players\")!);\r\n            for (const player of players){\r\n                // 3 is levelState completed, 1 is levelState inProgress\r\n                for (const level of player.levelData.filter((l: any) => l.State === 3)){\r\n                    level.State = 1;\r\n                }\r\n            }\r\n\r\n            window.localStorage.setItem(\"Players\", JSON.stringify(players));\r\n            window.localStorage.setItem(\"Version\", \"2\");\r\n    }\r\n\r\n    const state: Draft<GameData> = {\r\n        players: JSON.parse(window.localStorage.getItem(\"Players\")!),\r\n        activePlayerId: window.localStorage.getItem(\"activePlayer\")!,\r\n        messages: [],\r\n        screen: \"startMenu\",\r\n        movingOutput: undefined,\r\n    };\r\n\r\n    if (state.players === null) {\r\n        return undefined;\r\n    }\r\n\r\n    return state;\r\n}\r\n\r\nexport const AppStore = createStore(rootReducer, getInitialState(), (window as any).__REDUX_DEVTOOLS_EXTENSION__ && (window as any).__REDUX_DEVTOOLS_EXTENSION__());\r\nexport const AppState = () => {\r\n    return AppStore.getState();\r\n};","import { IActor } from \"../IActor\";\nimport { MessageModel } from \"../../Models/MessageModel\";\nimport { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\n\nexport class JoinActor implements IActor {\n    private greenInput: string | undefined;\n    private redInput: string | undefined;\n    public Act(message: MessageModel): Promise<MessageModel[]> {\n        switch (message.Channel) {\n            case ChannelColorEnum.Green:\n                this.greenInput = message.Content;\n                break;\n            case ChannelColorEnum.Red:\n                this.redInput = message.Content;\n                break;\n            default:\n                throw Error(\"Machine does not have inputchannel \" + message.Channel);\n        }\n\n        if (this.greenInput === undefined || this.redInput === undefined) {\n            return Promise.resolve([]);\n        }\n        const returnMessage = this.greenInput.concat(this.redInput);\n        this.greenInput = undefined;\n        this.redInput = undefined;\n        const returnValue: MessageModel[] = [{ Channel: ChannelColorEnum.Green, Content: returnMessage }];\n\n        return Promise.resolve(returnValue);\n    }\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { JoinActor } from \"./JoinActor\";\r\n\r\nexport class JoinMachine implements IMachine {\r\n    public GetActor(): IActor {\r\n        return new JoinActor();\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Style: {\r\n                BorderColor: \"Orange\",\r\n                Color: \"Grey\",\r\n                Name: \"Join\",\r\n                Description: \"Exits with the input from the green channel before the red channel\",\r\n            },\r\n            Api: {\r\n                InputChannels: [ChannelColorEnum.Green, ChannelColorEnum.Red],\r\n                OutputChannels: [ChannelColorEnum.Green]\r\n            },\r\n            DependingOn: [],\r\n            DirectlyDependingOn: []\r\n        };\r\n    }\r\n    public id = \"14\";\r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\n\r\nexport class SplitMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            const firstCharacterLength = message.Content[0] !== \"{\" ? 1 : message.Content.indexOf(\"}\") + 1;         \r\n\r\n            returnValue.push({ Content: message.Content.slice(0, firstCharacterLength), Channel: ChannelColorEnum.Green });\r\n            returnValue.push({ Content: message.Content.slice(firstCharacterLength), Channel: ChannelColorEnum.Red });\r\n\r\n            return Promise.resolve(returnValue);\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Style: {\r\n                BorderColor: \"Orange\",\r\n                Color: \"Black\",\r\n                Name: \"Split\",\r\n\r\n                Description: \"The first character exits green, the other characters exit red\",\r\n            },\r\n            Api: {\r\n                InputChannels: [ChannelColorEnum.Green],\r\n                OutputChannels: [ChannelColorEnum.Green, ChannelColorEnum.Red],\r\n\r\n            },\r\n            DependingOn: [],\r\n            DirectlyDependingOn: []\r\n        };\r\n    }\r\n    public id =\"13\";\r\n}\r\n","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\n\r\nexport class BlueStartMachine implements IMachine {\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            returnValue.push({ Content: message.Content, Channel: ChannelColorEnum.Green });\r\n            return Promise.resolve(returnValue);\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Style: {\r\n                Color: \"white\",\r\n                BorderColor: \"blue\",\r\n                Name: \"Start\",\r\n                Description: \"Starting point of the computation. Acts as a move machine for all other purposes\"\r\n            },\r\n            Api: {\r\n                InputChannels: [ChannelColorEnum.Green],\r\n                OutputChannels: [ChannelColorEnum.Green],\r\n            },\r\n            DependingOn: [],\r\n            DirectlyDependingOn: []\r\n        };\r\n    }\r\n    public readonly id = \"2\";\r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\n\r\nexport class YellowStartMachine implements IMachine {\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            returnValue.push({ Content: message.Content, Channel: ChannelColorEnum.Green });\r\n            return Promise.resolve(returnValue);\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Style: {\r\n                Color: \"white\",\r\n                BorderColor: \"#fff020\",\r\n                Name: \"Start\",\r\n                Description: \"Starting point of the computation. Acts as a move machine for all other purposes\"\r\n            },\r\n            Api: {\r\n                InputChannels: [ChannelColorEnum.Green],\r\n                OutputChannels: [ChannelColorEnum.Green],\r\n            },\r\n            DependingOn: [],\r\n            DirectlyDependingOn: []\r\n        };\r\n    }\r\n    public readonly id = \"3\";\r\n}","import { Computer } from \"../Computing/Computer\";\r\nimport { CleanStars, RestoreStars } from \"../Computing/MessageCleaner\";\r\nimport { MessageModel } from \"../Models/MessageModel\";\r\nimport { GridSetupModel } from \"../Redux/GameDataReducer/PlayerReducer/GridSetup/GridModel\";\r\nimport { AddStarMachine } from \"./DefaultMachines/AddStarMachine\";\r\nimport { AddZeroMachine } from \"./DefaultMachines/AddZeroMachine\";\r\nimport { CompareMachine } from \"./DefaultMachines/CompareMachine\";\r\nimport { CopyMachine } from \"./DefaultMachines/CopyMachine\";\r\nimport { DeleteMachine } from \"./DefaultMachines/DeleteMachine\";\r\nimport { GreenStartMachine } from \"./DefaultMachines/GreenStartMachine\";\r\nimport { IncrementMachine } from \"./DefaultMachines/IncrementMachine\";\r\nimport { MoveMachine } from \"./DefaultMachines/MoveMachine\";\r\nimport { RedStartMachine } from \"./DefaultMachines/RedStartMachine\";\r\nimport { RotateMachine } from \"./DefaultMachines/RotateMachine\";\r\nimport { IActor } from \"./IActor\";\r\nimport { IMachine, IsDefaultMachine } from \"./IMachine\";\r\nimport { IMachineType } from \"./IMachineType\";\r\nimport { AppState } from \"../Redux/Store\";\r\nimport { JoinMachine } from \"./DefaultMachines/JoinMachine\";\r\nimport { SplitMachine } from \"./DefaultMachines/SplitMachine\";\r\nimport { BlueStartMachine } from \"./DefaultMachines/BlueStartMachine\";\r\nimport { YellowStartMachine } from \"./DefaultMachines/YellowStartMachine\";\r\nimport { ITypeProvider } from \"./ITypeProvider\";\r\nimport { GetActivePlayer } from \"../Helper/StoreHelper\";\r\n\r\nexport class MachineStore implements ITypeProvider {\r\n    private static machineStore: MachineStore;\r\n    private machines: IMachine[];\r\n\r\n    private constructor() {\r\n        this.machines = [];\r\n        this.init();\r\n    }\r\n\r\n    public static GetStore(): MachineStore {\r\n        if (MachineStore.machineStore === undefined) {\r\n            MachineStore.machineStore = new MachineStore();\r\n        }\r\n\r\n        return MachineStore.machineStore;\r\n    }\r\n\r\n    private init(): void {\r\n        this.machines = [];\r\n        this.machines.push(new GreenStartMachine());\r\n        this.machines.push(new RedStartMachine());\r\n        this.machines.push(new BlueStartMachine());\r\n        this.machines.push(new YellowStartMachine());\r\n        this.machines.push(new MoveMachine());\r\n        this.machines.push(new CopyMachine());\r\n        this.machines.push(new DeleteMachine());\r\n        this.machines.push(new RotateMachine());\r\n        this.machines.push(new CompareMachine());\r\n        this.machines.push(new AddStarMachine());\r\n        this.machines.push(new AddZeroMachine());\r\n        this.machines.push(new IncrementMachine());\r\n        this.machines.push(new SplitMachine());\r\n        this.machines.push(new JoinMachine());\r\n    }\r\n\r\n    private FindMachine(id: string): IMachine {\r\n        const machine = this.machines.find((m) => m.id === id);\r\n        if (machine === undefined) {\r\n            throw new Error(\"No default machine found with id \" + id);\r\n        }\r\n\r\n        return machine;\r\n    }\r\n\r\n    public GetActor(id: string, parentStarNumber: number): IActor {\r\n        if (IsDefaultMachine(id)) {\r\n            return this.FindMachine(id).GetActor();\r\n        } else {\r\n            const customMachine = GetActivePlayer(AppState())?.machines.find((cm) => cm.Id === id);\r\n            if (customMachine === undefined) {\r\n                throw new Error(\"No custom machine found with id \" + id);\r\n            }\r\n            return this.CreateCustomActor(customMachine.Setup, parentStarNumber);\r\n        }\r\n    }\r\n\r\n    public GetMachineType(id: string): IMachineType {\r\n        if (IsDefaultMachine(id)) {\r\n            return this.FindMachine(id).GetType();\r\n        } else {\r\n            const activePlayer = GetActivePlayer(AppState())!;\r\n            let customMachine = activePlayer?.machines.find((cm) => cm.Id === id);\r\n            if (customMachine === undefined){\r\n                customMachine = activePlayer.deletedMachines.find((cm) => cm.Id === id);\r\n                if (customMachine === undefined) {\r\n                    throw new Error(\"No custom machine found with id \" + id);\r\n                }\r\n            }\r\n\r\n            return customMachine;\r\n        }\r\n    }\r\n\r\n    public GetAllMachines(): string[] {\r\n        const machines: string[] = this.machines.map((m) => m.id);\r\n        return machines;\r\n    }\r\n\r\n    private CreateCustomActor(setup: GridSetupModel, parentStarNumber: number): IActor {\r\n        const computer = new Computer(setup, false);\r\n\r\n        return {\r\n            Act: (message) => {\r\n                const saveMessage = RestoreStars(CleanStars(message.Content, parentStarNumber), computer.starNumber);\r\n                const cleanedMessage: MessageModel = { Content: saveMessage, Channel: message.Channel };\r\n\r\n                const computedMessages = computer.RunInput(cleanedMessage);\r\n                const returnValue: Promise<MessageModel[]> = computedMessages.then((messages) => messages.map((mm) => ({ Channel: mm.Channel, Content: RestoreStars(CleanStars(mm.Content, computer.starNumber), parentStarNumber) })));\r\n                return returnValue;\r\n            }\r\n        };\r\n    }\r\n}","import { OrderedMessageModel } from \"../../../Models/OrderedMessageModel\";\r\n\r\nexport const LoadLevelActionType = \"LoadLevelActionType\";\r\ninterface LoadLevelActionType {\r\n    type: typeof LoadLevelActionType;\r\n    id: string;\r\n}\r\n\r\nexport function LoadLevel(id: string): LevelActionTypes {\r\n    return {\r\n        type: \"LoadLevelActionType\",\r\n        id\r\n    };\r\n}\r\n\r\nexport const ReportOutputActionType = \"ReportOutputActionType\";\r\ninterface ReportOutputActionType {\r\n    type: typeof ReportOutputActionType;\r\n    outputMessage: OrderedMessageModel;\r\n    testId: number;\r\n}\r\n\r\nexport function ReportOutput(outputMessage: OrderedMessageModel, testId: number): LevelActionTypes {\r\n    return {\r\n        type: \"ReportOutputActionType\",\r\n        outputMessage,\r\n        testId\r\n    };\r\n}\r\nexport const ClearTestOutputActionType = \"ClearTestOutputActionType\";\r\ninterface ClearTestOutputActionType {\r\n    type: typeof ClearTestOutputActionType;\r\n    testId: number;\r\n}\r\n\r\nexport function ClearTestOutput(testId: number): LevelActionTypes {\r\n    return {\r\n        type: \"ClearTestOutputActionType\",\r\n        testId\r\n    };\r\n}\r\nexport const AddTestActionType = \"AddTestActionType\";\r\ninterface AddTestActionType {\r\n    type: typeof AddTestActionType;\r\n}\r\n\r\nexport function AddTest(): LevelActionTypes {\r\n    return {\r\n        type: \"AddTestActionType\",\r\n    };\r\n}\r\n\r\nexport const SetCustomTestActionType = \"SetCustomTestActionType\";\r\ninterface SetCustomTestActionType {\r\n    type: typeof SetCustomTestActionType;\r\n    inputs: OrderedMessageModel[]\r\n}\r\n\r\nexport function SetCustomTest(inputs: OrderedMessageModel[]): LevelActionTypes {\r\n    return {\r\n        type: \"SetCustomTestActionType\",\r\n        inputs\r\n    };\r\n}\r\n\r\n\r\nexport const RemoveTestActionType = \"RemoveTestActionType\";\r\ninterface RemoveTestActionType {\r\n    type: typeof RemoveTestActionType;\r\n    testId: number;\r\n}\r\n\r\nexport function RemoveTest(testId: number): LevelActionTypes {\r\n    return {\r\n        type: \"RemoveTestActionType\",\r\n        testId\r\n    };\r\n}\r\n\r\nexport const UpdateInputActionType = \"UpdateInputActionType\";\r\ninterface UpdateInputActionType {\r\n    type: typeof UpdateInputActionType;\r\n    testId: number;\r\n    input: OrderedMessageModel;\r\n}\r\n\r\nexport function UpdateInput(input: OrderedMessageModel, testId: number): LevelActionTypes {\r\n    return {\r\n        type: \"UpdateInputActionType\",\r\n        input,\r\n        testId\r\n    };\r\n}\r\n\r\nexport const AddInputActionType = \"AddInputActionType\";\r\ninterface AddInputActionType {\r\n    type: typeof AddInputActionType;\r\n    testId: number;\r\n}\r\n\r\nexport function AddInput(testId: number): LevelActionTypes {\r\n    return {\r\n        type: \"AddInputActionType\",\r\n        testId\r\n    };\r\n}\r\n\r\nexport const RemoveInputActionType = \"RemoveInputActionType\";\r\ninterface RemoveInputActionType {\r\n    type: typeof RemoveInputActionType;\r\n    testId: number;\r\n    order: number;\r\n}\r\n\r\nexport function RemoveInput(testId: number, order: number): LevelActionTypes {\r\n    return {\r\n        type: \"RemoveInputActionType\",\r\n        testId,\r\n        order\r\n    };\r\n}\r\n\r\nexport type LevelActionTypes = LoadLevelActionType\r\n    | ReportOutputActionType\r\n    | ClearTestOutputActionType\r\n    | AddTestActionType\r\n    | SetCustomTestActionType\r\n    | RemoveTestActionType\r\n    | UpdateInputActionType\r\n    | AddInputActionType\r\n    | RemoveInputActionType;","import { MessageLocationModel } from \"../../../../Models/MessageLocationModel\";\r\nimport { MachineInstanceActionTypes } from \"./MachineInstances/Actions\";\r\ninterface SetMessagesActionType {\r\n    type: \"SetMessagesActionType\";\r\n    messages: MessageLocationModel[];\r\n}\r\n\r\nexport function SetMessages(messages: MessageLocationModel[]): GridSetupActionTypes {\r\n    return {\r\n        type: \"SetMessagesActionType\",\r\n        messages\r\n    };\r\n}\r\n\r\nexport function ClearMessages(): GridSetupActionTypes {\r\n    return {\r\n        type: \"SetMessagesActionType\",\r\n        messages: []\r\n    };\r\n}\r\n\r\ninterface SetColorActionType {\r\n    type: \"SetColorActionType\";\r\n    color: string;\r\n}\r\n\r\nexport function SetColor(color: string): GridSetupActionTypes {\r\n    return {\r\n        type: \"SetColorActionType\",\r\n        color\r\n    };\r\n}\r\n\r\ninterface SetBorderColorActionType {\r\n    type: \"SetBorderColorActionType\";\r\n    borderColor: string;\r\n}\r\n\r\nexport function SetBorderColor(borderColor: string): GridSetupActionTypes {\r\n    return {\r\n        type: \"SetBorderColorActionType\",\r\n        borderColor\r\n    };\r\n}\r\ninterface SetDescriptionActionType {\r\n    type: \"SetDescriptionActionType\";\r\n    description: string;\r\n}\r\n\r\nexport function SetDescription(description: string): GridSetupActionTypes {\r\n    return {\r\n        type: \"SetDescriptionActionType\",\r\n        description\r\n    };\r\n}\r\n\r\ninterface SetNameActionType {\r\n    type: \"SetNameActionType\";\r\n    name: string;\r\n}\r\n\r\nexport function SetName(name: string): GridSetupActionTypes {\r\n    return {\r\n        type: \"SetNameActionType\",\r\n        name\r\n    };\r\n}\r\n\r\nexport type GridSetupActionTypes =\r\n    | SetMessagesActionType\r\n    | SetColorActionType\r\n    | SetBorderColorActionType\r\n    | SetNameActionType\r\n    | SetDescriptionActionType\r\n    | MachineInstanceActionTypes;","import { IActor } from \"../MachineStore/IActor\";\r\nimport { MachineStore } from \"../MachineStore/MachineStore\";\r\nimport { CellModel } from \"../Models/CellModel\";\r\nimport { ChannelColorEnum } from \"../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../Models/DirectionEnum\";\r\nimport { Move } from \"../Helper/SetupHelper\";\r\nimport { MachineInstanceModel } from \"../Models/MachineInstanceModel\";\r\nimport { MessageLocationModel } from \"../Models/MessageLocationModel\";\r\nimport { MessageModel } from \"../Models/MessageModel\";\r\nimport { GridSetupModel } from \"../Redux/GameDataReducer/PlayerReducer/GridSetup/GridModel\";\r\nimport { OrderedMessageModel } from \"../Models/OrderedMessageModel\";\r\nimport { ClearTestOutput, ReportOutput } from \"../Redux/GameDataReducer/Level/Actions\";\r\nimport { SetMessages } from \"../Redux/GameDataReducer/PlayerReducer/GridSetup/Actions\";\r\nimport { IStore } from \"../Redux/IStore\";\r\nimport { GetActivePlayer } from \"../Helper/StoreHelper\";\r\nimport { TestStateModel } from \"../Redux/GameDataReducer/Level/TestStateModel\";\r\nexport class Computer {\r\n    private setup: GridSetupModel;\r\n    private machines: Array<{ id: number, actor: IActor }> = [];\r\n    private store: MachineStore;\r\n    private outputs: MessageModel[] = [];\r\n    private static cancelComputation: (() => void) | undefined = undefined;\r\n    private static stepCount: number;\r\n    private static starNumberCounter: number;\r\n    private activeSetup: boolean;\r\n    public starNumber: number;\r\n\r\n    constructor(setup: GridSetupModel, activeSetup: boolean) {\r\n        this.setup = setup;\r\n        this.activeSetup = activeSetup;\r\n        this.starNumber = Computer.starNumberCounter++;\r\n        this.store = MachineStore.GetStore();\r\n        this.HandleNextMessages = this.HandleNextMessages.bind(this);\r\n        this.CalculateNextMessages = this.CalculateNextMessages.bind(this);\r\n        this.RunInput = this.RunInput.bind(this);\r\n        this.RunComputation = this.RunComputation.bind(this);\r\n        this.SetDelay = this.SetDelay.bind(this);\r\n    }\r\n\r\n    public GetStartMachine(color: ChannelColorEnum): MachineInstanceModel | undefined {\r\n\r\n        let id: string = \"0\";\r\n        switch (color) {\r\n            case ChannelColorEnum.Green:\r\n                id = \"0\";\r\n                break;\r\n            case ChannelColorEnum.Red:\r\n                id = \"1\";\r\n                break;\r\n            case ChannelColorEnum.Blue:\r\n                id = \"2\";\r\n                break;\r\n            case ChannelColorEnum.Yellow:\r\n                id = \"3\";\r\n                break;\r\n        }\r\n\r\n        return this.setup.MachineInstances.find((mi) => mi.MachineId === id);\r\n    }\r\n\r\n    public async RunComputation(testId: number, store: IStore): Promise<OrderedMessageModel[]> {\r\n        Computer.StopComputation();\r\n        Computer.starNumberCounter = 1;\r\n        this.starNumber = 0;\r\n        this.machines = [];\r\n        store.dispatch(ClearTestOutput(testId));\r\n        const test = store.getState().activeLevel!.tests.find((t) => t.id === testId);\r\n        if (test === undefined) {\r\n            return Promise.resolve([]);\r\n        } else {\r\n            return this.RunInputs(test.inputs, store, testId);\r\n        }\r\n    }\r\n\r\n    public async RunInputs(inputs: OrderedMessageModel[], store?: IStore, testId?: number): Promise<OrderedMessageModel[]> {\r\n        let orderedOutputs: OrderedMessageModel[] = [];\r\n        for (const input of inputs) {\r\n            const results = await this.RunInput(input, store, testId, input.Order).catch((reason) => Promise.reject(reason));\r\n            orderedOutputs = orderedOutputs.concat(results.map((mm) => ({ Content: mm.Content, Channel: mm.Channel, Order: input.Order })));\r\n        }\r\n        return Promise.resolve(orderedOutputs);\r\n    }\r\n\r\n    public static StopComputation(): void {\r\n        if (Computer.cancelComputation) {\r\n            Computer.cancelComputation();\r\n            Computer.cancelComputation = undefined;\r\n        }\r\n\r\n        Computer.stepCount = 0;\r\n    }\r\n\r\n    public RunInput(input: MessageModel, store?: IStore, testId?: number, order?: number): Promise<MessageModel[]> {\r\n        this.outputs = [];\r\n        const messageLocations: MessageLocationModel[] = [];\r\n        const machineInstance = this.GetStartMachine(input.Channel);\r\n        if (machineInstance !== undefined) {\r\n            const direction = machineInstance.OutputChannels[0].Direction;\r\n            const messageLocation: MessageLocationModel = { Content: input.Content, Direction: direction, Cell: machineInstance.Cell };\r\n            messageLocations.push(messageLocation);\r\n        }\r\n\r\n        if (store !== undefined && this.activeSetup && GetActivePlayer(store.getState())!.showAnimations) {\r\n            store.dispatch(SetMessages(messageLocations));\r\n        }\r\n\r\n        return this.OrderNewCalculation({ messageLocations, store, testId, order });\r\n    }\r\n\r\n    private SetDelay<U, T>(callback: (args: U) => Promise<T>, args: U, timeout: number): Promise<T> {\r\n        return new Promise<T>((resolve, reject) => {\r\n            const clearHandle = window.setTimeout(() => callback(args).then(resolve).catch(reject), timeout);\r\n            Computer.cancelComputation = () => {\r\n                window.clearTimeout(clearHandle);\r\n                reject(\"Computation cancelled\");\r\n            };\r\n        });\r\n    }\r\n\r\n    private async HandleNextMessages(args: { messageLocations: MessageLocationModel[], store?: IStore, testId?: number, order?: number }): Promise<MessageModel[]> {\r\n        const [nextMessages, outputMessages] = await this.CalculateNextMessages(args.messageLocations);\r\n        if (outputMessages.length > 0) {\r\n            this.outputs = this.outputs.concat(outputMessages);\r\n        }\r\n\r\n        if (args.store !== undefined) {\r\n            for (const message of outputMessages) {\r\n                args.store.dispatch(ReportOutput({ Channel: message.Channel, Content: message.Content, Order: args.order! }, args.testId!));\r\n            }\r\n        }\r\n\r\n        if (args.store !== undefined && this.activeSetup && GetActivePlayer(args.store.getState())!.showAnimations) {\r\n            args.store.dispatch(SetMessages(nextMessages));\r\n        }\r\n\r\n        if (nextMessages.length > 0) {\r\n            return this.OrderNewCalculation({ ...args, messageLocations: nextMessages });\r\n        } else {\r\n            return Promise.resolve(this.outputs);\r\n        }\r\n    }\r\n\r\n    private OrderNewCalculation(args: { messageLocations: MessageLocationModel[], store?: IStore, testId?: number, order?: number }): Promise<MessageModel[]> {\r\n        Computer.stepCount++;\r\n        const showAnimations = args.store === undefined || GetActivePlayer(args.store.getState())!.showAnimations;\r\n        if ((this.activeSetup && showAnimations) || Computer.stepCount % 100000 === 0) {\r\n            const timeout = args.store !== undefined && showAnimations ? GetActivePlayer(args.store.getState())!.stepTime * 100 : 0;\r\n\r\n            return this.SetDelay(this.HandleNextMessages, args, timeout);\r\n        } else {\r\n            return this.HandleNextMessages(args);\r\n        }\r\n    }\r\n\r\n    private async CalculateNextMessages(messages: MessageLocationModel[]): Promise<[MessageLocationModel[], MessageModel[]]> {\r\n        const doneMessages: MessageLocationModel[] = [];\r\n        const nextMessages: MessageLocationModel[] = [];\r\n        for (const message of messages) {\r\n            let machine: MachineInstanceModel | undefined;\r\n            let messageCell: CellModel | undefined = message.Cell;\r\n\r\n            while (machine === undefined) {\r\n                messageCell = Move(this.setup, messageCell!, message.Direction);\r\n                if (messageCell === undefined) {\r\n                    break;\r\n                }\r\n\r\n                // eslint-disable-next-line\r\n                machine = this.setup.MachineInstances.find((mi) => mi.Cell.Column === messageCell!.Column && mi.Cell.Row === messageCell!.Row);\r\n            }\r\n\r\n            if (messageCell === undefined) {\r\n                doneMessages.push({ Cell: undefined, Direction: message.Direction, Content: message.Content });\r\n                continue;\r\n            }\r\n\r\n            if (machine!.Status !== \"Valid\") {\r\n                return Promise.reject(\"Encountered invalid machine, check your machines\");\r\n            }\r\n\r\n            let channel = ChannelColorEnum.Green;\r\n            const inputChannel = machine!.InputChannels.find((ic) => ic.Direction === message.Direction);\r\n            if (inputChannel !== undefined) {\r\n                channel = inputChannel.Channel;\r\n            }\r\n\r\n            let cachedMachine = this.machines.find((m) => m.id === machine!.Id);\r\n            if (cachedMachine === undefined) {\r\n                const machineInstance = this.setup.MachineInstances.find((mi) => mi.Id === machine!.Id)!;\r\n                cachedMachine = { id: machineInstance.Id, actor: this.store.GetActor(machineInstance.MachineId, this.starNumber) };\r\n                this.machines.push(cachedMachine);\r\n            }\r\n\r\n            const actor = cachedMachine.actor;\r\n\r\n            const nextContents = await actor.Act({ Content: message.Content, Channel: channel });\r\n            for (const nextContent of nextContents) {\r\n                const channelMap = machine!.OutputChannels.find((cm) => cm.Channel === nextContent.Channel);\r\n                if (channelMap === undefined) {\r\n                    throw Error(\"Channelmap \" + nextContent.Channel + \"undefined\");\r\n                }\r\n\r\n                const messageLocation: MessageLocationModel = { Cell: machine!.Cell, Content: nextContent.Content, Direction: channelMap.Direction };\r\n                nextMessages.push(messageLocation);\r\n            }\r\n        }\r\n\r\n        const outputs: MessageModel[] = [];\r\n        for (const doneMessage of doneMessages) {\r\n            switch (doneMessage.Direction) {\r\n                case DirectionEnum.Up:\r\n                    outputs.push({ Content: doneMessage.Content, Channel: ChannelColorEnum.Blue });\r\n                    break;\r\n                case DirectionEnum.Down:\r\n                    outputs.push({ Content: doneMessage.Content, Channel: ChannelColorEnum.Red });\r\n                    break;\r\n                case DirectionEnum.Right:\r\n                    outputs.push({ Content: doneMessage.Content, Channel: ChannelColorEnum.Green });\r\n                    break;\r\n                case DirectionEnum.Left:\r\n                    outputs.push({ Content: doneMessage.Content, Channel: ChannelColorEnum.Yellow });\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return [nextMessages, outputs];\r\n    }\r\n}","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport NumberInput from \"../NumberInput/NumberInput\";\r\nimport { Props } from \"./Props\";\r\nimport { GameData } from \"../../Redux/GameDataReducer/GameModel\";\r\nimport { GetActivePlayer } from \"../../Helper/StoreHelper\";\r\nimport { UpdateStepTime, UpdateShowAnimations } from \"../../Redux/GameDataReducer/Actions\";\r\nimport { Computer } from \"../../Computing/Computer\";\r\n\r\nconst DashboardInternal: React.FC<Props> = (props) => {\r\n\r\n    const onClicked = () => {\r\n        props.UpdateShowAnimations(!props.ShowAnimations);\r\n    };\r\n    return (\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\", width: \"100%\", height: \"100%\" }}>\r\n            <div style={{paddingRight: 30}}>\r\n                <button onClick={Computer.StopComputation} title=\"Stop the running computation\">Stop</button>\r\n            </div>\r\n            <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                <label title=\"Show animations, will calculate as fast as possible when turned of\">Animations</label>\r\n                {props.ShowAnimations && <label title=\"Step time in tenths of seconds, lower for faster animations\">Step Time</label>}\r\n            </div>\r\n\r\n            <div style={{ display: \"flex\", flexDirection: \"column\", width: 100 }}>\r\n                <button onClick={onClicked} style={{ marginLeft: 5, width: 63}}>{props.ShowAnimations ? \"On\" : \"Off\"}</button>\r\n                {props.ShowAnimations && <NumberInput value={props.StepTime} valueChanged={props.UpdateStepTime} />}\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: GameData) => {\r\n    return {\r\n        ShowAnimations: GetActivePlayer(state)!.showAnimations,\r\n        StepTime: GetActivePlayer(state)!.stepTime,\r\n    };\r\n};\r\n\r\nexport const Dashboard = connect(\r\n    mapStateToProps,\r\n    {\r\n        UpdateStepTime, UpdateShowAnimations\r\n    }\r\n)(DashboardInternal);","import { CellModel } from \"../../../../../Models/CellModel\";\r\nimport { ChannelModel } from \"../../../../../Models/ChannelModel\";\r\nimport { MachineApi } from \"../../../../../Models/MachineApi\";\r\n\r\ninterface ChannelChangedActionType {\r\n    type: \"ChannelChangedActionType\";\r\n    machineInstanceId: number;\r\n    channel: ChannelModel;\r\n    angle?: number;\r\n}\r\n\r\nexport function ChangeChannel(machineInstanceId: number, channel: ChannelModel, angle?: number): MachineInstanceActionTypes {\r\n    return {\r\n        type: \"ChannelChangedActionType\",\r\n        machineInstanceId,\r\n        channel,\r\n        angle\r\n    };\r\n}\r\n\r\ninterface InputChannelChangedActionType {\r\n    type: \"InputChannelChangedActionType\";\r\n    machineInstanceId: number;\r\n    channelIndex: number;\r\n    channel: ChannelModel;\r\n}\r\n\r\nexport function ChangeInputChannel(machineInstanceId: number, channelIndex: number, channel: ChannelModel): MachineInstanceActionTypes {\r\n    return {\r\n        type: \"InputChannelChangedActionType\",\r\n        machineInstanceId,\r\n        channelIndex,\r\n        channel\r\n    };\r\n}\r\n\r\ninterface MachineRemovedActionType {\r\n    type: \"MachineRemovedActionType\";\r\n    machineInstanceId: number;\r\n}\r\n\r\nexport function RemoveMachine(machineInstanceId: number): MachineInstanceActionTypes {\r\n    return {\r\n        type: \"MachineRemovedActionType\",\r\n        machineInstanceId\r\n    };\r\n}\r\n\r\ninterface MachineAddedActionType {\r\n    type: \"MachineAddedActionType\";\r\n    machineId: string;\r\n    cell: CellModel;\r\n    api: MachineApi;\r\n}\r\n\r\nexport function AddMachine(machineId: string, api: MachineApi, cellId: CellModel): MachineInstanceActionTypes {\r\n    return {\r\n        type: \"MachineAddedActionType\",\r\n        machineId,\r\n        cell: cellId,\r\n        api\r\n    };\r\n}\r\n\r\ninterface MachineMovedActionType {\r\n    type: \"MachineMovedActionType\";\r\n    machineInstanceId: number;\r\n    newCell: CellModel;\r\n}\r\n\r\nexport function MoveMachine(machineInstanceId: number, newCell: CellModel): MachineInstanceActionTypes {\r\n    return {\r\n        type: \"MachineMovedActionType\",\r\n        machineInstanceId,\r\n        newCell\r\n    };\r\n}\r\n\r\ninterface FixMachineActionType {\r\n    type: \"FixMachineActionType\";\r\n    machineInstanceId: number;\r\n}\r\n\r\nexport function FixMachine(machineInstanceId: number): MachineInstanceActionTypes {\r\n    return {\r\n        type: \"FixMachineActionType\",\r\n        machineInstanceId\r\n    };\r\n}\r\n\r\nexport type MachineInstanceActionTypes = ChannelChangedActionType |\r\n    MachineRemovedActionType |\r\n    MachineAddedActionType |\r\n    MachineMovedActionType |\r\n    FixMachineActionType |\r\n    InputChannelChangedActionType;\r\n","import { ChannelModel } from \"../Models/ChannelModel\";\n\nexport const DragItemTypes = {\n  MachineInstance: \"MachineInstance\",\n  NewMachine: \"NewMachine\",\n  OutputChannel: \"OutputChannel\",\n  Grid: \"Grid\"\n};\n\nexport interface DraggedOutputChannel {\n  type: typeof DragItemTypes.OutputChannel;\n  channel: ChannelModel;\n  machineInstanceId: number;\n  offsetX: number;\n  offsetY: number;\n}\n\nexport interface DraggedNewMachine {\n  type: typeof DragItemTypes.NewMachine;\n  id: string;\n}\n\nexport interface MovingOutputChannel extends DraggedOutputChannel {\n  angle: number;\n}","export const FormatMessage = (content: string): string => {\n    let formattedMessage: string | undefined;\n\n    if (content === \"\") {\n        formattedMessage = \"<Empty>\";\n    } else {\n        formattedMessage = content;\n        let seekPosition = 0;\n\n        while (true) {\n            seekPosition = formattedMessage.indexOf(\"{\", seekPosition);\n            if (seekPosition === -1) {\n                break;\n            }\n\n            const lastIndex = formattedMessage.indexOf(\"}\", seekPosition);\n            formattedMessage = formattedMessage.substring(0, seekPosition) + \"?\" + formattedMessage.substring(lastIndex + 1);\n        }\n    }\n    return formattedMessage;\n};\n","import { ChannelModel } from \"../../../../../Models/ChannelModel\";\nimport React, { useEffect } from \"react\";\nimport { heightFactor, widthFactor, marginFactor } from \"./ChannelGroup\";\nimport { useDrag } from \"react-dnd\";\nimport { DragItemTypes, DraggedOutputChannel } from \"../../../../DragItemTypes\";\nimport { DirectionEnum } from \"../../../../../Models/DirectionEnum\";\nimport { getEmptyImage } from \"react-dnd-html5-backend\";\nimport { GetAngleFromMonitor } from \"../../../../../Helper/AngleHelper\";\n\nexport const ChannelClickArea: React.FC<{\n    Channel: ChannelModel,\n    MachineInstanceId: number,\n    OnClick: (channel: ChannelModel, angle?: number) => void,\n    OffsetX: number,\n    OffsetY: number,\n    CellSize: number\n}> = (props) => {\n\n    const [{ isDragging }, drag, preview] = useDrag<DraggedOutputChannel, unknown, { isDragging: boolean }>({\n        item: { type: DragItemTypes.OutputChannel, channel: props.Channel, machineInstanceId: props.MachineInstanceId, offsetX: props.OffsetX, offsetY: props.OffsetY},\n        begin: () => {\n            props.OnClick({ ...props.Channel, Status: \"DoesNotExist\" });\n        },\n        end: (dropResult, monitor) => {\n            if (!monitor.didDrop()) {\n                const outputItem = monitor.getItem() as DraggedOutputChannel;\n                const angle = GetAngleFromMonitor(monitor, props.OffsetX, props.OffsetY);\n                if (angle !== undefined) {\n                    const adjustedAngle = angle + Math.PI * 2.75;\n                    const direction = Math.floor(adjustedAngle / (Math.PI * 0.5)) % 4;\n                    props.OnClick({ Direction: direction, Channel: props.Channel.Channel, Status: outputItem.channel.Status }, angle);\n                }\n            }\n        },\n        collect: (monitor) => ({ isDragging: monitor.isDragging() })\n    });\n\n    const onClicked = () => {\n        const newDirection: DirectionEnum = props.Channel.Direction === 3 ? 0 : props.Channel.Direction + 1;\n        props.OnClick({ Direction: newDirection, Channel: props.Channel.Channel, Status: props.Channel.Status });\n    };\n\n    const channelStyle: React.CSSProperties = {\n        width: widthFactor * props.CellSize,\n        marginLeft: marginFactor * props.CellSize,\n        opacity: isDragging ? 0 : 1,\n        height: heightFactor*props.CellSize,\n        pointerEvents: \"all\"\n    };\n\n    useEffect(() => {\n        preview(getEmptyImage(), { captureDraggingState: true });\n    }, [preview]);\n\n    return <div ref={drag} style={channelStyle} onClick={onClicked}>\n    </div>;\n};\n","import React from \"react\";\nimport { DirectionEnum } from \"../../../../../Models/DirectionEnum\";\nimport { Props } from \"./Props\";\nimport { ChannelClickArea } from \"./ChannelClickArea\";\n\nexport const widthFactor = 0.07;\nexport const heightFactor = 0.31;\nexport const marginFactor = 0.05;\n\nexport const ChannelGroup: React.FC<Props> = (props) => {\n\n    if (props.ChannelModels.length === 0) {\n        return <></>;\n    }\n\n    const width = props.cellSize * widthFactor;\n    const height = props.cellSize * heightFactor;\n    const heightOffset = props.cellSize * 0.06;\n    const margin = props.cellSize * marginFactor;\n\n    let baseOffsetX = (props.cellSize - (props.ChannelModels.length * (width + margin) - margin)) / 2;\n    let baseOffsetY = props.cellSize / 2 - height - heightOffset;\n    let deltaX = width + margin;\n    let deltaY = 0;\n\n    const channelSetStyle: React.CSSProperties = {\n        position: \"absolute\",\n        marginLeft: baseOffsetX - margin,\n        marginTop: baseOffsetY,\n        display: \"flex\",\n        flexDirection: \"row\"\n    };\n\n    let rotate: string = \"\";\n\n    switch (props.ChannelModels[0].Direction) {\n        case DirectionEnum.Down:\n            rotate = \"rotate(180deg)\";\n            baseOffsetY = props.cellSize / 2 + heightOffset;\n            baseOffsetX = props.cellSize - baseOffsetX - width;\n            deltaX = -deltaX;\n            break;\n        case DirectionEnum.Left:\n            rotate = \"rotate(270deg)\";\n            const tempBaseOffsetX = baseOffsetY;\n            baseOffsetY = props.cellSize - baseOffsetX - width;\n            baseOffsetX = tempBaseOffsetX;\n            deltaY = -deltaX;\n            deltaX = 0;\n            break;\n        case DirectionEnum.Right:\n            rotate = \"rotate(90deg)\";\n            baseOffsetY = baseOffsetX;\n            baseOffsetX = props.cellSize / 2 + heightOffset;\n            deltaY = deltaX;\n            deltaX = 0;\n            break;\n    }\n\n    const rotation: React.CSSProperties = {\n        transform: rotate,\n        height: props.cellSize,\n        width: props.cellSize,\n        position: \"absolute\",\n        pointerEvents: \"none\"\n    };\n\n    return (\n        <div style={rotation}>\n            <div style={channelSetStyle}>\n                {props.ChannelModels.map((cm, index) => <ChannelClickArea key={index} Channel={cm} OnClick={props.OnChanged} MachineInstanceId={props.MachineInstanceId} OffsetX={baseOffsetX + deltaX * index} OffsetY={baseOffsetY + deltaY * index} CellSize={props.cellSize} />)}\n            </div>\n        </div>\n    );\n}\n","import { DrawModel } from \"./DrawModel\";\nimport { DirectionEnum } from \"../../../../../Models/DirectionEnum\";\nimport { InputChannelModel } from \"./InputChannelModel\";\nimport { ChannelModel } from \"../../../../../Models/ChannelModel\";\nimport { DraggedOutputModel } from \"./DraggedOutputModel\";\nimport { GetAngleFromDirection } from \"../../../../../Helper/AngleHelper\";\nimport { DrawConstants } from \"./DrawConstants\";\n\nexport abstract class MachineDrawer {\n    protected ctx: CanvasRenderingContext2D;\n    protected innerColor: string;\n    protected borderColor: string;\n    protected inputChannels: InputChannelModel[];\n    protected outputChannels: ChannelModel[][];\n    protected draggedOutput: DraggedOutputModel | undefined;\n    protected draggedDirection: DirectionEnum | undefined;\n    protected backgroundColor: string;\n    public drawConstants: DrawConstants;\n\n    constructor(ctx: CanvasRenderingContext2D, props: DrawModel) {\n        this.ctx = ctx;\n        this.innerColor = props.MachineStyle.Color;\n        this.borderColor = props.MachineStyle.BorderColor;\n        this.inputChannels = [...props.InputChannels].sort((ic, id) => ic.Direction > id.Direction ? 1 : -1);\n        this.outputChannels = props.OutputChannels;\n        this.draggedOutput = props.MovingOutput;\n        this.backgroundColor = props.BackgroundColor;\n        this.drawConstants = new DrawConstants(props.CellSize);\n        if (this.draggedOutput !== undefined) {\n            if (this.draggedOutput !== undefined) {\n                const adjustedAngle = this.draggedOutput.angle + Math.PI * 2.75;\n                this.draggedDirection = Math.floor(adjustedAngle / (Math.PI * 0.5)) % 4;\n            }\n        }\n    }\n\n    public DrawMachine() {\n\n        this.DrawBody();\n\n        for (const input of this.inputChannels) {\n            this.DrawInputGradient(input);\n        }\n\n        for (const outputGroup of this.outputChannels) {\n            this.DrawOutputGroup(outputGroup, true);\n        }\n\n        if (this.draggedOutput !== undefined) {\n            this.DraggedOutputDrawer(true);\n        }\n\n        if (this.inputChannels.length === 0) {\n            this.DrawNoInputOutline();\n        } else {\n            let startIndex = 0;\n            let endIndex = 0;\n            do {\n                endIndex = (endIndex + 1) % this.inputChannels.length;\n                this.DrawInputOutline(this.inputChannels[startIndex].Direction, this.inputChannels[endIndex].Direction);\n                startIndex++;\n            } while (startIndex < this.inputChannels.length);\n        }\n\n        for (const outputGroup of this.outputChannels) {\n            this.DrawOutputGroup(outputGroup, false);\n        }\n\n        if (this.draggedOutput !== undefined) {\n            this.DraggedOutputDrawer(false);\n        }\n    }\n    protected abstract DrawInputOutline(startDirection: DirectionEnum, endDirection: DirectionEnum): void;\n    protected abstract DrawBody(): void;\n    protected abstract DrawNoInputOutline(): void;\n    protected abstract DrawInputGradient(input: InputChannelModel): void;\n\n    protected SetShadowStyle() {\n        this.ctx.shadowColor = \"black\";\n        this.ctx.shadowOffsetX = this.drawConstants.shadeOffset;\n        this.ctx.shadowOffsetY = this.drawConstants.shadeOffset;\n    }\n\n    protected ClearShadowStyle() {\n        this.ctx.shadowColor = \"transparent\";\n        this.ctx.shadowOffsetX = 0;\n        this.ctx.shadowOffsetY = 0;\n    }\n    private DrawOutputGroup(outputs: ChannelModel[], isShade: boolean) {\n\n        this.ClearShadowStyle();\n\n        const baseAngle = GetAngleFromDirection(outputs[0].Direction) + Math.PI;\n        const filteredOutputs = outputs.filter((c) => c.Status !== \"DoesNotExist\");\n        let split = -(filteredOutputs.length - 1) / 2 * this.drawConstants.outputSplit;\n\n        if (this.draggedDirection === outputs[0].Direction) {\n            let increasedSplit = -(filteredOutputs.length) / 2 * this.drawConstants.outputSplit;\n            let draggedIsDrawn = false;\n            const draggedSplit = Math.sin(this.draggedOutput!.angle - baseAngle) * this.drawConstants.outputStartLength;\n            for (let index = 0; index < filteredOutputs.length; index++) {\n                if (!draggedIsDrawn && draggedSplit < split) {\n                    draggedIsDrawn = true;\n                    increasedSplit += this.drawConstants.outputSplit;\n                }\n\n                if (isShade) {\n                    this.DrawOutputChannel(\"black\", baseAngle, increasedSplit, this.drawConstants.shadeOffset * 2);\n                } else {\n                    this.DrawOutputChannel(\"black\", baseAngle, increasedSplit, this.drawConstants.shadeOffset);\n                    this.DrawOutputChannel(filteredOutputs[index].Channel, baseAngle, increasedSplit);\n                }\n\n                split += this.drawConstants.outputSplit;\n                increasedSplit += this.drawConstants.outputSplit;\n            }\n        } else {\n            for (const output of filteredOutputs) {\n                if (isShade) {\n                    this.DrawOutputChannel(\"black\", baseAngle, split, this.drawConstants.shadeOffset * 2);\n                } else {\n                    this.DrawOutputChannel(\"black\", baseAngle, split, this.drawConstants.shadeOffset);\n                    this.DrawOutputChannel(output.Channel, baseAngle, split);\n                }\n\n                split += this.drawConstants.outputSplit;\n            }\n        }\n    }\n\n    private DraggedOutputDrawer(isShade: boolean) {\n        this.ClearShadowStyle();\n        if (isShade) {\n            this.DrawDraggedOutput(\"black\", this.drawConstants.shadeOffset * 2);\n        } else {\n            this.DrawDraggedOutput(\"black\", this.drawConstants.shadeOffset);\n            this.DrawDraggedOutput(this.draggedOutput!.channel.Channel, 0);\n        }\n    }\n\n    private DrawDraggedOutput(color: string, offset: number) {\n        const adjustedAngle = this.draggedOutput!.angle! + Math.PI * 0.25;\n        const direction = Math.floor(adjustedAngle / (Math.PI * 0.5)) * Math.PI * 0.5;\n\n        const firstX = this.drawConstants.center + this.drawConstants.outputStartLength * Math.cos(this.draggedOutput!.angle!) + offset;\n        const firstY = this.drawConstants.center + this.drawConstants.outputStartLength * Math.sin(this.draggedOutput!.angle!) + offset;\n        const endX = firstX + (this.drawConstants.outputLength - this.drawConstants.outputStartLength) * Math.cos(direction);\n        const endY = firstY + (this.drawConstants.outputLength - this.drawConstants.outputStartLength) * Math.sin(direction);\n\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.drawConstants.center, this.drawConstants.center);\n\n        const gradient = this.ctx.createRadialGradient(this.drawConstants.center, this.drawConstants.center, 0, this.drawConstants.center, this.drawConstants.center, this.drawConstants.outputLength);\n        gradient.addColorStop(0, this.innerColor);\n        gradient.addColorStop(0.6, color);\n\n        this.ctx.arcTo(firstX, firstY, endX, endY, this.drawConstants.outputRadius);\n        this.ctx.lineTo(endX, endY);\n        this.ctx.strokeStyle = gradient;\n        this.ctx.lineWidth = this.drawConstants.outputWidth;\n\n        this.ctx.stroke();\n    }\n\n    private DrawOutputChannel(color: string, mainAngle: number, outputOffset: number, offset = 0) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.drawConstants.center, this.drawConstants.center);\n        const differenceAngle = Math.asin(outputOffset / this.drawConstants.outputStartLength);\n\n        const firstX = this.drawConstants.center + this.drawConstants.outputStartLength * Math.cos(mainAngle + differenceAngle) + offset;\n        const firstY = this.drawConstants.center + this.drawConstants.outputStartLength * Math.sin(mainAngle + differenceAngle) + offset;\n        const endX = firstX + (this.drawConstants.outputLength - this.drawConstants.outputStartLength) * Math.cos(mainAngle);\n        const endY = firstY + (this.drawConstants.outputLength - this.drawConstants.outputStartLength) * Math.sin(mainAngle);\n\n        const gradient = this.ctx.createRadialGradient(this.drawConstants.center, this.drawConstants.center, 0, this.drawConstants.center, this.drawConstants.center, this.drawConstants.outputLength)\n        gradient.addColorStop(0, this.innerColor);\n        gradient.addColorStop(0.6, color);\n\n        this.ctx.arcTo(firstX, firstY, endX, endY, this.drawConstants.outputRadius);\n        this.ctx.lineTo(endX, endY);\n        this.ctx.strokeStyle = gradient;\n        this.ctx.lineWidth = this.drawConstants.outputWidth;\n\n        this.ctx.stroke();\n    }\n}","import { DirectionEnum } from \"../../../../../Models/DirectionEnum\";\nimport { InputChannelModel } from \"./InputChannelModel\";\nimport { MachineDrawer } from \"./MachineDrawer\";\nimport { GetAngleFromDirection } from \"../../../../../Helper/AngleHelper\";\n\nexport class MachineCircleDrawer extends MachineDrawer {\n    protected DrawBody() {\n        this.ctx.beginPath();\n        this.ClearShadowStyle();\n        this.ctx.moveTo(this.drawConstants.center + this.drawConstants.circleRadius, this.drawConstants.center);\n        this.ctx.arc(this.drawConstants.center, this.drawConstants.center, this.drawConstants.circleRadius, 0, Math.PI * 2);\n        this.ctx.fillStyle = this.innerColor;\n        this.ctx.fill();\n    }\n    \n    protected DrawInputOutline(startDirection: DirectionEnum, endDirection: DirectionEnum): void {\n        const localcenter = this.drawConstants.center;\n        const startDirectionAngle = GetAngleFromDirection(startDirection);\n        const startAngle = startDirectionAngle + this.drawConstants.apertureAngle;\n\n        const startInnerX = localcenter + this.drawConstants.circleRadius * Math.cos(startAngle);\n        const startInnerY = localcenter + this.drawConstants.circleRadius * Math.sin(startAngle);\n        const startOuterX = startInnerX + this.drawConstants.armLength * Math.cos(startDirectionAngle + this.drawConstants.armAngle);\n        const startOuterY = startInnerY + this.drawConstants.armLength * Math.sin(startDirectionAngle + this.drawConstants.armAngle);\n\n        const endDirectionAngle = GetAngleFromDirection(endDirection);\n        const endAngle = endDirectionAngle - this.drawConstants.apertureAngle;\n        const endInnerX = localcenter + this.drawConstants.circleRadius * Math.cos(endAngle);\n        const endInnerY = localcenter + this.drawConstants.circleRadius * Math.sin(endAngle);\n\n        const endOuterX = endInnerX + this.drawConstants.armLength * Math.cos(endDirectionAngle - this.drawConstants.armAngle);\n        const endOuterY = endInnerY + this.drawConstants.armLength * Math.sin(endDirectionAngle - this.drawConstants.armAngle);\n\n        this.ctx.beginPath();\n        this.ctx.moveTo(startOuterX, startOuterY);\n        this.ctx.lineTo(startInnerX, startInnerY);\n        this.ctx.arc(localcenter, localcenter, this.drawConstants.circleRadius, startAngle, endAngle);\n        this.ctx.lineTo(endOuterX, endOuterY);\n\n        this.ctx.strokeStyle = this.borderColor;\n        this.ctx.lineWidth = this.drawConstants.borderWidth;\n        this.SetShadowStyle();\n        this.ctx.stroke();\n\n    }\n\n    protected DrawNoInputOutline(): void {\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.drawConstants.center + this.drawConstants.circleRadius, this.drawConstants.center);\n        this.ctx.arc(this.drawConstants.center, this.drawConstants.center, this.drawConstants.circleRadius, 0, Math.PI * 2);\n\n        this.ctx.strokeStyle = this.borderColor;\n        this.SetShadowStyle();\n        this.ctx.lineWidth = this.drawConstants.borderWidth;\n\n        this.ctx.stroke();\n    }\n    protected DrawInputGradient(input: InputChannelModel): void {\n\n        const directionAngle = GetAngleFromDirection(input.Direction);\n        const endAngle = directionAngle - this.drawConstants.apertureAngle;\n\n        const endInnerX = this.drawConstants.center + this.drawConstants.circleRadius * Math.cos(endAngle);\n        const endInnerY = this.drawConstants.center + this.drawConstants.circleRadius * Math.sin(endAngle);\n\n        const endOuterX = endInnerX + this.drawConstants.armLength * Math.cos(directionAngle - this.drawConstants.armAngle);\n        const endOuterY = endInnerY + this.drawConstants.armLength * Math.sin(directionAngle - this.drawConstants.armAngle);\n\n        const startAngle = directionAngle + this.drawConstants.apertureAngle;\n\n        const startInnerX = this.drawConstants.center + this.drawConstants.circleRadius * Math.cos(startAngle);\n        const startInnerY = this.drawConstants.center + this.drawConstants.circleRadius * Math.sin(startAngle);\n\n        const startOuterX = startInnerX + this.drawConstants.armLength * Math.cos(directionAngle + this.drawConstants.armAngle);\n        const startOuterY = startInnerY + this.drawConstants.armLength * Math.sin(directionAngle + this.drawConstants.armAngle);\n\n        this.ctx.beginPath();\n\n        this.ClearShadowStyle();\n        this.ctx.moveTo(endInnerX, endInnerY);\n        const endOuterAngle = Math.atan2(endOuterY - this.drawConstants.center, endOuterX - this.drawConstants.center);\n        const startOuterAngle = Math.atan2(startOuterY - this.drawConstants.center, startOuterX - this.drawConstants.center);\n\n        this.ctx.arc(this.drawConstants.center, this.drawConstants.center, this.drawConstants.circleRadius + this.drawConstants.protrudingArm, endOuterAngle, startOuterAngle);\n        this.ctx.arc(this.drawConstants.center, this.drawConstants.center, this.drawConstants.circleRadius - this.drawConstants.borderWidth * 0.5, startAngle, endAngle, true);\n\n        const grd = this.ctx.createRadialGradient(this.drawConstants.center, this.drawConstants.center, this.drawConstants.circleRadius, this.drawConstants.center, this.drawConstants.center, this.drawConstants.circleRadius + this.drawConstants.protrudingArm);\n\n        if (input.UseMachineColor) {\n            grd.addColorStop(0, this.innerColor);\n        } else {\n            grd.addColorStop(0, input.Channel);\n            grd.addColorStop(0.7, input.Channel);\n            grd.addColorStop(0.8, this.backgroundColor);\n        }\n        grd.addColorStop(1, this.backgroundColor);\n        this.ctx.fillStyle = grd;\n        this.ctx.fill();\n    }\n}","import { DirectionEnum } from \"../../../../../Models/DirectionEnum\";\nimport { DrawModel } from \"./DrawModel\";\nimport { InputChannelModel } from \"./InputChannelModel\";\nimport { MachineDrawer } from \"./MachineDrawer\";\n\n\n\nexport class MachineSquareDrawer extends MachineDrawer {\n    private closeSide: number;\n    private farSide : number;\n    private innerClose : number;\n    private innerFar : number;\n    private armProtrudingClose : number;\n    private armProtrudingFar: number;\n    private armWidthClose : number;\n    private armWidthFar: number;\n\n    constructor(ctx: CanvasRenderingContext2D, props: DrawModel) {\n        super(ctx, props);\n        this.closeSide = this.drawConstants.center - this.drawConstants.halfSquareSize;\n        this.farSide = this.drawConstants.center + this.drawConstants.halfSquareSize;\n        this.innerClose = this.drawConstants.center - 0.5 * this.drawConstants.aperture;\n        this.innerFar = this.drawConstants.center + 0.5 * this.drawConstants.aperture;\n        this.armProtrudingClose = this.closeSide - Math.cos(this.drawConstants.armAngle) * this.drawConstants.armLength;\n        this.armProtrudingFar = this.farSide + Math.cos(this.drawConstants.armAngle) * this.drawConstants.armLength;\n        this.armWidthClose = this.innerClose - Math.sin(this.drawConstants.armAngle) * this.drawConstants.armLength;\n        this.armWidthFar = this.innerFar + Math.sin(this.drawConstants.armAngle) * this.drawConstants.armLength;\n    }\n    protected DrawBody() {\n        this.ctx.beginPath();\n        this.ClearShadowStyle();\n        this.ctx.moveTo(this.drawConstants.center + this.drawConstants.circleRadius, this.drawConstants.center);\n        this.ctx.rect(this.drawConstants.center - this.drawConstants.halfSquareSize, this.drawConstants.center - this.drawConstants.halfSquareSize, this.drawConstants.halfSquareSize * 2, this.drawConstants.halfSquareSize * 2);\n        this.ctx.fillStyle = this.innerColor;\n        this.ctx.fill();\n        this.ctx.beginPath();\n    }\n    protected DrawInputOutline(startDirection: DirectionEnum, endDirection: DirectionEnum): void {\n        this.ctx.beginPath();\n        this.ctx.strokeStyle = this.borderColor;\n        this.SetShadowStyle();\n        this.ctx.lineWidth = this.drawConstants.borderWidth;\n\n        switch (startDirection) {\n            case DirectionEnum.Down:\n                this.ctx.moveTo(this.armWidthFar, this.armProtrudingClose);\n                this.ctx.lineTo(this.innerFar, this.closeSide);\n                break;\n            case DirectionEnum.Left:\n                this.ctx.moveTo(this.armProtrudingFar, this.armWidthFar);\n                this.ctx.lineTo(this.farSide, this.innerFar);\n                break;\n            case DirectionEnum.Up:\n                this.ctx.moveTo(this.armWidthClose, this.armProtrudingFar);\n                this.ctx.lineTo(this.innerClose, this.farSide);\n                break;\n            case DirectionEnum.Right:\n                this.ctx.moveTo(this.armProtrudingClose, this.armWidthClose);\n                this.ctx.lineTo(this.closeSide, this.innerClose);\n                break;\n            default:\n                throw Error(\"Unknown direction\");\n        }\n\n        let currentDirection = startDirection;\n\n        do {\n            switch (currentDirection) {\n                case DirectionEnum.Down:\n                    this.ctx.lineTo(this.farSide, this.closeSide);\n                    break;\n                case DirectionEnum.Left:\n                    this.ctx.lineTo(this.farSide, this.farSide);\n                    break;\n                case DirectionEnum.Up:\n                    this.ctx.lineTo(this.closeSide, this.farSide);\n                    break;\n                case DirectionEnum.Right:\n                    this.ctx.lineTo(this.closeSide, this.closeSide);\n                    break;\n                default:\n                    throw Error(\"Unknown direction\");\n            }\n\n            currentDirection = (currentDirection + 1) % 4;\n        } while (currentDirection !== endDirection);\n\n        switch (endDirection) {\n            case DirectionEnum.Down:\n                this.ctx.lineTo(this.innerClose, this.closeSide);\n                this.ctx.lineTo(this.armWidthClose, this.armProtrudingClose);\n                break;\n            case DirectionEnum.Left:\n                this.ctx.lineTo(this.farSide, this.innerClose);\n                this.ctx.lineTo(this.armProtrudingFar, this.armWidthClose);\n                break;\n            case DirectionEnum.Up:\n                this.ctx.lineTo(this.innerFar, this.farSide);\n                this.ctx.lineTo(this.armWidthFar, this.armProtrudingFar);\n                break;\n            case DirectionEnum.Right:\n                this.ctx.lineTo(this.closeSide, this.innerFar);\n                this.ctx.lineTo(this.armProtrudingClose, this.armWidthFar);\n                break;\n            default:\n                throw Error(\"Unknown direction\");\n        }\n\n        this.ctx.stroke();\n    }\n\n    protected DrawNoInputOutline(): void {\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.drawConstants.center + this.drawConstants.circleRadius, this.drawConstants.center);\n        this.ctx.rect(this.drawConstants.center - this.drawConstants.halfSquareSize, this.drawConstants.center - this.drawConstants.halfSquareSize, this.drawConstants.halfSquareSize * 2, this.drawConstants.halfSquareSize * 2);\n        this.ctx.strokeStyle = this.borderColor;\n        this.SetShadowStyle();\n        this.ctx.lineWidth = this.drawConstants.borderWidth;\n\n        this.ctx.stroke();\n    }\n    protected DrawInputGradient(input: InputChannelModel): void {\n        this.ctx.beginPath();\n        this.ClearShadowStyle();\n        let grd: CanvasGradient;\n        switch (input.Direction) {\n            case DirectionEnum.Down:\n                this.ctx.moveTo(this.innerClose, this.closeSide + 0.4 * this.drawConstants.borderWidth);\n                this.ctx.lineTo(this.armWidthClose, this.armProtrudingClose);\n                this.ctx.lineTo(this.armWidthFar, this.armProtrudingClose);\n                this.ctx.lineTo(this.innerFar, this.closeSide + 0.4 * this.drawConstants.borderWidth);\n                this.ctx.lineTo(this.innerClose, this.closeSide + 0.4 * this.drawConstants.borderWidth);\n                grd = this.ctx.createLinearGradient(this.drawConstants.center, this.closeSide + 0.4 * this.drawConstants.borderWidth, this.drawConstants.center, this.armProtrudingClose);\n                break;\n            case DirectionEnum.Left:\n                this.ctx.moveTo(this.farSide - 0.4 * this.drawConstants.borderWidth, this.innerClose);\n                this.ctx.lineTo(this.armProtrudingFar, this.armWidthClose);\n                this.ctx.lineTo(this.armProtrudingFar, this.armWidthFar);\n                this.ctx.lineTo(this.farSide - 0.4 * this.drawConstants.borderWidth, this.innerFar);\n                this.ctx.lineTo(this.farSide - 0.4 * this.drawConstants.borderWidth, this.innerClose);\n                grd = this.ctx.createLinearGradient(this.farSide - 0.4 * this.drawConstants.borderWidth, this.drawConstants.center, this.armProtrudingFar, this.drawConstants.center);\n                break;\n            case DirectionEnum.Up:\n                this.ctx.moveTo(this.innerFar, this.farSide - 0.4 * this.drawConstants.borderWidth);\n                this.ctx.lineTo(this.armWidthFar, this.armProtrudingFar);\n                this.ctx.lineTo(this.armWidthClose, this.armProtrudingFar);\n                this.ctx.lineTo(this.innerClose, this.farSide - 0.4 * this.drawConstants.borderWidth);\n                this.ctx.lineTo(this.innerFar, this.farSide - 0.4 * this.drawConstants.borderWidth);\n                grd = this.ctx.createLinearGradient(this.drawConstants.center, this.farSide - 0.4 * this.drawConstants.borderWidth, this.drawConstants.center, this.armProtrudingFar);\n                break;\n            case DirectionEnum.Right:\n                this.ctx.moveTo(this.closeSide + 0.4 * this.drawConstants.borderWidth, this.innerFar);\n                this.ctx.lineTo(this.armProtrudingClose, this.armWidthFar);\n                this.ctx.lineTo(this.armProtrudingClose, this.armWidthClose);\n                this.ctx.lineTo(this.closeSide + 0.4 * this.drawConstants.borderWidth, this.innerClose);\n                this.ctx.lineTo(this.closeSide + 0.4 * this.drawConstants.borderWidth, this.innerFar);\n                grd = this.ctx.createLinearGradient(this.closeSide + 0.4 * this.drawConstants.borderWidth, this.drawConstants.center, this.armProtrudingClose, this.drawConstants.center);\n                break;\n            default:\n                throw Error(\"Unknown direction\");\n        }\n\n        if (input.UseMachineColor) {\n            grd.addColorStop(0, this.innerColor);\n        } else {\n            grd.addColorStop(0, input.Channel);\n            grd.addColorStop(0.9, input.Channel);\n            grd.addColorStop(0.9, this.backgroundColor);\n        }\n        grd.addColorStop(1, this.backgroundColor);\n        this.ctx.fillStyle = grd;\n        this.ctx.fill();\n    }\n}","import React, { useRef, useEffect } from \"react\";\nimport { DrawModel } from \"./DrawModel\";\nimport { MachineCircleDrawer } from \"./MachineCircleDrawer\";\nimport { MachineDrawer } from \"./MachineDrawer\";\nimport { MachineSquareDrawer } from \"./MachineSquareDrawer\";\n\nexport const MachineCanvasHolder: React.FC<DrawModel> = (props) => {\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n\n    useEffect(() => {\n        if (canvasRef.current) {\n            const ctx = canvasRef.current.getContext(\"2d\")!;\n            ctx.clearRect(0, 0, props.CellSize, props.CellSize);\n            let drawer: MachineDrawer;\n            if (props.IsDefault) {\n                drawer = new MachineCircleDrawer(ctx, props);\n            } else {\n                drawer = new MachineSquareDrawer(ctx, props);\n            }\n\n            drawer.DrawMachine();\n        }\n    });\n\n    return <div style={{\n        height: props.CellSize,\n        width: props.CellSize,\n        position: \"absolute\"\n    }}>\n        <canvas ref={canvasRef} style={{ position: \"absolute\" }} height={props.CellSize} width={props.CellSize}></canvas>\n    </div>;\n};","import React from \"react\";\nimport { DirectionEnum } from \"../../../../../Models/DirectionEnum\";\nimport { Props } from \"./Props\";\n\nexport class InputChannelClickArea extends React.Component<Props> {\n\n    constructor(props: Props) {\n        super(props);\n        this.onClicked = this.onClicked.bind(this);\n    }\n    public render() {\n\n        const cellSize = this.props.cellSize - 2;\n\n        const channelStyle: React.CSSProperties = {\n            position: \"absolute\",\n            height: cellSize * 0.20,\n            width: cellSize * 0.4,\n            marginLeft: cellSize * 0.3,\n            marginTop: cellSize * 0.05,\n            pointerEvents: \"all\",\n        };\n\n        let rotate: string = \"\";\n        switch (this.props.Direction) {\n            case DirectionEnum.Left:\n                rotate = \"rotate(90deg)\";\n                break;\n            case DirectionEnum.Up:\n                rotate = \"rotate(180deg)\";\n                break;\n            case DirectionEnum.Right:\n                rotate = \"rotate(270deg)\";\n                break;\n        }\n\n        const rotation: React.CSSProperties = {\n            transform: rotate,\n            height: cellSize,\n            width: cellSize,\n            position: \"absolute\",\n            pointerEvents: \"none\"\n        };\n\n        return (\n            <div style={rotation}>\n                <div style={channelStyle} onClick={this.onClicked}></div>\n            </div>\n        );\n    }\n\n    public onClicked(event: React.MouseEvent<HTMLDivElement, MouseEvent>): void {\n        this.props.OnClick(this.props.Direction);\n    }\n}","import React, { Dispatch } from \"react\";\r\nimport { useDrag } from \"react-dnd\";\r\nimport { connect } from \"react-redux\";\r\nimport { MachineStore } from \"../../../../MachineStore/MachineStore\";\r\nimport { ChannelModel } from \"../../../../Models/ChannelModel\";\r\nimport { ChangeChannel, MachineInstanceActionTypes, FixMachine, ChangeInputChannel } from \"../../../../Redux/GameDataReducer/PlayerReducer/GridSetup/MachineInstances/Actions\";\r\nimport { DragItemTypes } from \"../../../DragItemTypes\";\r\nimport { ChannelGroup } from \"./ChannelClickArea/ChannelGroup\";\r\nimport { Props } from \"./Props\";\r\nimport { GetLighterColor } from \"../../../../Helper/ColorHelper\";\r\nimport { MachineCanvasHolder } from \"./MachineDrawer/MachineCanvasHolder\";\r\nimport { DirectionEnum } from \"../../../../Models/DirectionEnum\";\r\nimport { InputChannelModel } from \"./MachineDrawer/InputChannelModel\";\r\nimport { InputChannelClickArea } from \"./InputChannelClickArea/InputChannelClickArea\";\r\nimport * as dc from \"./MachineDrawer/DrawConstants\";\r\nimport { IsDefaultMachine } from \"../../../../MachineStore/IMachine\";\r\nimport { GameData } from \"../../../../Redux/GameDataReducer/GameModel\";\r\nimport { GetActiveMachine, GetActivePlayer } from \"../../../../Helper/StoreHelper\";\r\n\r\nconst MachineInstanceInternal: React.FC<Props> = (props) => {\r\n    const [{ isDragging }, drag, preview] = useDrag({\r\n        item: { type: DragItemTypes.MachineInstance, id: props.MachineInstanceId },\r\n        collect: (monitor) => ({\r\n            isDragging: !!monitor.isDragging(),\r\n        }),\r\n    });\r\n\r\n    const OnClick = () => {\r\n        if (props.MachineInstance.Status !== \"Valid\") {\r\n            props.FixMachine();\r\n        }\r\n    };\r\n\r\n    const api = MachineStore.GetStore().GetMachineType(props.MachineInstance.MachineId).Api;\r\n    const onInputChannelClick = (direction: DirectionEnum) => {\r\n\r\n        const channelIndex = props.MachineInstance.InputChannels.findIndex((ic) => ic.Direction === direction)!;\r\n        const channel = props.MachineInstance.InputChannels[channelIndex];\r\n        const currentIndex = api.InputChannels.indexOf(channel.Channel);\r\n        const newChannel: ChannelModel = {\r\n            Channel: currentIndex === api.InputChannels.length - 1 ? api.InputChannels[0] : api.InputChannels[currentIndex + 1],\r\n            Direction: channel.Direction,\r\n            Status: channel.Status\r\n        };\r\n\r\n        props.ChangeInputChannel(channelIndex, newChannel);\r\n    };\r\n\r\n    const machineStyle = props.MachineStyle ?? MachineStore.GetStore().GetMachineType(props.MachineInstance.MachineId).Style;\r\n\r\n    const hasMultipleInputs = api.InputChannels.length > 1 || props.MachineInstance.InputChannels.some((ic) => ic.Status === \"Exists\" && ic.Channel !== api.InputChannels[0]);\r\n\r\n    const inputChannels: InputChannelModel[] = props.MachineInstance.InputChannels.filter((ic) => ic.Status !== \"DoesNotExist\").map((c) =>\r\n    ({\r\n        UseMachineColor: !hasMultipleInputs,\r\n        ...c\r\n    })\r\n    );\r\n\r\n    const machineSize: React.CSSProperties = { height: props.CellSize, width: props.CellSize, margin: 1 };\r\n\r\n    switch (props.MachineInstance.Status) {\r\n        case \"Deleted\":\r\n            machineSize.borderBottom = props.CellSize / 18 + \"px dotted red\";\r\n            machineSize.boxSizing = \"border-box\";\r\n            machineSize.opacity = 0.4;\r\n            break;\r\n        case \"ChannelsInvalid\":\r\n            machineSize.borderBottom = props.CellSize / 18 + \"px dotted orange\";\r\n            machineSize.boxSizing = \"border-box\";\r\n            break;\r\n    }\r\n\r\n    const outputChannels: ChannelModel[][] = [];\r\n    for (const channel of props.MachineInstance.OutputChannels) {\r\n        const group = outputChannels.find((o) => o[0].Direction === channel.Direction);\r\n        if (group === undefined) {\r\n            outputChannels.push([channel]);\r\n        } else {\r\n            group.push(channel);\r\n        }\r\n    }\r\n\r\n    const machineMargin = props.CellSize * 0.5 - dc.halfSquareFactor * props.CellSize;\r\n\r\n    return (\r\n        <div ref={preview} style={machineSize}>\r\n            {!isDragging && <MachineCanvasHolder\r\n                MachineStyle={machineStyle}\r\n                IsDefault={IsDefaultMachine(props.MachineInstance.MachineId)}\r\n                BackgroundColor={props.BackgroundColor}\r\n                InputChannels={inputChannels}\r\n                OutputChannels={outputChannels}\r\n                MovingOutput={props.MovingOutput !== undefined ? props.MovingOutput : undefined}\r\n                CellSize={props.CellSize}\r\n            />}\r\n            <div style={{ position: \"absolute\", marginLeft: machineMargin, marginTop: machineMargin, height: dc.halfSquareFactor * props.CellSize * 2, width: dc.halfSquareFactor * props.CellSize * 2 }} ref={drag} onClick={OnClick}></div>\r\n            {inputChannels.filter((ic) => !ic.UseMachineColor).map((ic, index) => <InputChannelClickArea key={index} Direction={ic.Direction} OnClick={onInputChannelClick} cellSize={props.CellSize} />)}\r\n            {outputChannels.map((oc, index) => <ChannelGroup key={index} ChannelModels={oc} OnChanged={props.ChangeOwnChannel} MachineInstanceId={props.MachineInstanceId} cellSize={props.CellSize}/>)}\r\n        </div >\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: GameData, ownProps: { MachineInstanceId: number }) => {\r\n    const activeMachine = GetActiveMachine(state);\r\n\r\n    const background = GetLighterColor(activeMachine!.Style.Color, 0.3);\r\n    const MachineInstanceProp = activeMachine!.Setup.MachineInstances.find((mi) => mi.Id === ownProps.MachineInstanceId)!;\r\n    const machineStyle = IsDefaultMachine(MachineInstanceProp.MachineId) ? undefined\r\n        : MachineInstanceProp.Status === \"Deleted\" ? GetActivePlayer(state)!.deletedMachines.find((dm) => dm.Id === MachineInstanceProp.MachineId)!.Style\r\n            : GetActivePlayer(state)!.machines.find((m) => m.Id === MachineInstanceProp.MachineId)!.Style;\r\n    const MovingOutput = state.movingOutput?.machineInstanceId === ownProps.MachineInstanceId ? state.movingOutput : undefined;\r\n\r\n    return {\r\n        MachineInstance: MachineInstanceProp,\r\n        MachineStyle: machineStyle,\r\n        BackgroundColor: background,\r\n        MovingOutput\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<MachineInstanceActionTypes>, ownProps: { MachineInstanceId: number }) => {\r\n\r\n    return {\r\n        ChangeOwnChannel: (channel: ChannelModel, angle?: number) => dispatch(ChangeChannel(ownProps.MachineInstanceId, channel, angle)),\r\n        ChangeChannel: (machineInstanceId: number, channel: ChannelModel, angle?: number) => dispatch(ChangeChannel(machineInstanceId, channel, angle)),\r\n        ChangeInputChannel: (index: number, channel: ChannelModel) => dispatch(ChangeInputChannel(ownProps.MachineInstanceId, index, channel)),\r\n        FixMachine: () => dispatch(FixMachine(ownProps.MachineInstanceId))\r\n    };\r\n};\r\n\r\nexport const MachineInstance = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(MachineInstanceInternal);\r\n","import React from \"react\";\r\nimport { useDrop } from \"react-dnd\";\r\nimport { connect } from \"react-redux\";\r\nimport { AreEqual, CellModel } from \"../../../Models/CellModel\";\r\nimport { DirectionEnum } from \"../../../Models/DirectionEnum\";\r\nimport { AddMachine, MoveMachine, ChangeChannel } from \"../../../Redux/GameDataReducer/PlayerReducer/GridSetup/MachineInstances/Actions\";\r\nimport { DragItemTypes, DraggedOutputChannel } from \"../../DragItemTypes\";\r\nimport { FormatMessage } from \"../../MessageFormatter\";\r\nimport { MachineInstance } from \"./MachineInstance/MachineInstance\";\r\nimport { Props } from \"./Props\";\r\nimport { MachineStore } from \"../../../MachineStore/MachineStore\";\r\nimport { GetAngleFromMonitor } from \"../../../Helper/AngleHelper\";\r\nimport { GameData } from \"../../../Redux/GameDataReducer/GameModel\";\r\nimport { GetActiveMachine, GetActivePlayer, GetCellSize } from \"../../../Helper/StoreHelper\";\r\n\r\nconst CellInternal: React.FC<Props> = (props) => {\r\n\r\n    const [, drop] = useDrop({\r\n        accept: [DragItemTypes.MachineInstance, DragItemTypes.NewMachine, DragItemTypes.OutputChannel],\r\n        drop: (item, monitor) => {\r\n            switch (item.type) {\r\n                case DragItemTypes.MachineInstance:\r\n                    props.OnMovedMachine(monitor.getItem().id, props.cellId);\r\n                    break;\r\n                case DragItemTypes.NewMachine:\r\n                    const itemProps = monitor.getItem() as { id: string };\r\n                    const machineType = MachineStore.GetStore().GetMachineType(itemProps.id);\r\n                    props.OnNewMachine(itemProps.id, machineType.Api, props.cellId);\r\n                    break;\r\n                case DragItemTypes.OutputChannel:\r\n                    const outputItem = monitor.getItem() as DraggedOutputChannel;\r\n                    const angle = GetAngleFromMonitor(monitor, outputItem.offsetX, outputItem.offsetY);\r\n                    if (angle !== undefined) {\r\n                        const adjustedAngle = angle + Math.PI * 2.75;\r\n                        const direction = Math.floor(adjustedAngle / (Math.PI * 0.5)) % 4;\r\n                        props.ChangeChannel(outputItem.machineInstanceId, { Direction: direction, Channel: outputItem.channel.Channel, Status: outputItem.channel.Status }, angle);\r\n                    }\r\n                    break;\r\n            }\r\n        },\r\n    });\r\n\r\n    const style: React.CSSProperties = {\r\n        height: props.smallHeigth ? props.CellSize * 0.625 : props.CellSize,\r\n        width: props.smallWidth ? props.CellSize * 0.625 : props.CellSize,\r\n        border: \"1px solid black\",\r\n        float: \"left\",\r\n        marginTop: -1,\r\n        marginLeft: -1,\r\n        position: \"relative\"\r\n    };\r\n\r\n    const ExitThickness = props.CellSize * 0.2;\r\n\r\n    if (props.Exit !== undefined) {\r\n        switch (props.Exit) {\r\n            case DirectionEnum.Up:\r\n                style.borderRight = \"1px solid black\";\r\n                style.borderBottom = \"1px solid black\";\r\n                style.borderLeft = \"1px solid black\";\r\n                style.borderTop = ExitThickness + \"px solid blue\";\r\n                style.marginTop = -ExitThickness;\r\n                break;\r\n            case DirectionEnum.Down:\r\n                style.borderRight = \"1px solid black\";\r\n                style.borderTop = \"1px solid black\";\r\n                style.borderLeft = \"1px solid black\";\r\n                style.borderBottom = ExitThickness + \"px solid red\";\r\n                style.marginBottom = -ExitThickness + 1;\r\n                break;\r\n            case DirectionEnum.Right:\r\n                style.borderTop = \"1px solid black\";\r\n                style.borderBottom = \"1px solid black\";\r\n                style.borderLeft = \"1px solid black\";\r\n                style.borderRight = ExitThickness + \"px solid green\";\r\n                style.marginRight = -ExitThickness + 1;\r\n                break;\r\n            case DirectionEnum.Left:\r\n                style.borderRight = \"1px solid black\";\r\n                style.borderBottom = \"1px solid black\";\r\n                style.borderTop = \"1px solid black\";\r\n                style.borderLeft = ExitThickness + \"px solid #fff020\";\r\n                style.marginLeft = -ExitThickness;\r\n                break;\r\n        }\r\n    } else {\r\n        style.borderRight = \"1px solid black\";\r\n        style.borderBottom = \"1px solid black\";\r\n        style.borderLeft = \"1px solid black\";\r\n        style.borderTop = \"1px solid black\";\r\n    }\r\n\r\n    let formattedMessage: string | undefined;\r\n    if (props.Message !== undefined) {\r\n        formattedMessage = FormatMessage(props.Message);\r\n    }\r\n\r\n    return (\r\n        <div style={style} ref={drop}>\r\n            {formattedMessage !== undefined && formattedMessage}\r\n            {props.MachineInstanceId !== undefined ? <MachineInstance MachineInstanceId={props.MachineInstanceId} CellSize={props.CellSize - 2} /> : \"\"}\r\n        </div >\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: GameData, ownProps: { cellId: CellModel }) => {\r\n    const activeMachine = GetActiveMachine(state);\r\n    const machineInstance = activeMachine!.Setup.MachineInstances.find((mi) => AreEqual(mi.Cell, ownProps.cellId));\r\n    const exit = activeMachine!.ExitCells.find((ec) => AreEqual(ec.Cell, ownProps.cellId));\r\n    const message = state.messages.find((m) => AreEqual(m.Cell!, ownProps.cellId));\r\n    const CellSize = GetCellSize(state);\r\n\r\n    return {\r\n        Exit: exit === undefined ? undefined : exit.Direction,\r\n        Message: message === undefined ? undefined : message.Content,\r\n        MachineInstanceId: machineInstance === undefined ? undefined : machineInstance.Id,\r\n        CellSize\r\n    };\r\n};\r\n\r\nexport const Cell = connect(\r\n    mapStateToProps,\r\n    {\r\n        OnNewMachine: AddMachine,\r\n        OnMovedMachine: MoveMachine,\r\n        ChangeChannel\r\n    }\r\n\r\n)(CellInternal);","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Cell } from \"./Cell/Cell\";\r\nimport { GetLighterColor } from \"../../Helper/ColorHelper\";\r\nimport { GameData } from \"../../Redux/GameDataReducer/GameModel\";\r\nimport { GetActiveMachine, GetCellSize } from \"../../Helper/StoreHelper\";\r\nimport { MachineStyleModel } from \"../../Models/MachineStyleModel\";\r\n\r\nconst GridInternal: React.FC<{\r\n    Rows: number;\r\n    Columns: number;\r\n    CellSize: number;\r\n    Style: MachineStyleModel;\r\n}> = (props) => {\r\n    const rows = [];\r\n    for (let rowIndex = 0; rowIndex < props.Rows; rowIndex++) {\r\n        const row = [];\r\n        for (let columnIndex = 0; columnIndex < props.Columns; columnIndex++) {\r\n\r\n            row.push(<Cell key={columnIndex} cellId={{ Row: rowIndex, Column: columnIndex }} smallHeigth={rowIndex === 0 || rowIndex === props.Rows - 1} smallWidth={columnIndex === 0 || columnIndex === props.Columns - 1} />);\r\n        }\r\n        rows.push(<div key={rowIndex} style={{ display: \"flex\", flexDirection: \"row\", opacity: 1 }}>{row}</div>);\r\n    }\r\n\r\n    return (\r\n        <div style={{ position: \"absolute\", borderColor: GetLighterColor(props.Style.BorderColor, 0.4), borderWidth: props.CellSize * 0.2, borderStyle: \"solid\", marginBottom: 0 }}>\r\n            <div style={{ display: \"flex\", flexDirection: \"column\", backgroundColor: GetLighterColor(props.Style.Color, 0.3) }}>\r\n                {rows}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nfunction mapStateToProps(state: GameData) {\r\n    const activeMachine = GetActiveMachine(state);\r\n    const CellSize = GetCellSize(state);\r\n    return {\r\n        Rows: activeMachine!.Setup.NumberOfRows,\r\n        Columns: activeMachine!.Setup.NumberOfColumns,\r\n        Style: activeMachine!.Style,\r\n        CellSize\r\n    };\r\n}\r\n\r\nexport const Grid = connect(\r\n    mapStateToProps\r\n)(GridInternal);","export enum OutputStatus {\n    NotChecked,\n    NotFullfilled,\n    Fullfilled,\n    NotMatched\n}","import React from \"react\";\nimport { FormatMessage } from \"../../../MessageFormatter\";\nimport { Props } from \"./Props\";\nimport { OutputStatus } from \"../../../../Models/OutputStatusEnum\";\nimport { ChannelColorEnum } from \"../../../../Models/ChannelColorsEnum\";\n\nexport const MessageDisplay: React.FC<Props> = (props) => {\n    const onContentChanged: ((event: React.ChangeEvent<HTMLInputElement>) => void) = (event: React.ChangeEvent<HTMLInputElement>) => {\n        if (props.OnMessageChanged !== undefined) {\n            props.OnMessageChanged({ Content: event.target.value, Channel: props.Message.Channel });\n        }\n    };\n    const onChannelChanged = (event: React.ChangeEvent<HTMLSelectElement>) => {\n        if (props.OnMessageChanged !== undefined) {\n            props.OnMessageChanged({ Content: props.Message.Content, Channel: event.target.value as ChannelColorEnum });\n        }\n    };\n\n    const style: React.CSSProperties = { display: \"flex\", flexFlow: \"row\", justifyContent: props.Input ? \"flex-start\" : \"flex-end\", marginBottom: 1 };\n    const statusStyle: React.CSSProperties = { display: \"flex\", flexFlow: \"row\" };\n    switch (props.Status) {\n        case OutputStatus.Fullfilled:\n            statusStyle.backgroundColor = \"#d9ffb3\";\n            if (props.Editable) {\n                statusStyle.borderRight = \"solid green\";\n                statusStyle.borderBottom = \"solid green\";\n            }\n            break;\n        case OutputStatus.NotFullfilled:\n            // statusStyle.backgroundColor = \"#ffb3b3\";\n            break;\n        case OutputStatus.NotMatched:\n            statusStyle.border = \"solid red\";\n            statusStyle.backgroundColor = \"#ffb3b3\";\n            break;\n        default:\n            break;\n    }\n\n    return (<div style={style}>\n        <div style={statusStyle}>\n            {props.Input && props.Remove !== undefined && <button onClick={props.Remove}>-</button>}\n            {props.Input && (props.Editable && props.AllowedInputColors.length > 1 ? <select value={props.Message.Channel} style={{ backgroundColor: props.Message.Channel }} onChange={onChannelChanged}>\n                {props.AllowedInputColors.map((cc, index) => <option value={cc} key={index} style={{ backgroundColor: cc }}></option>)}\n            </select> : <div style={{ backgroundColor: props.Message.Channel, width: 10 }} />)}\n            {props.Editable ?\n                <input value={props.Message.Content} onChange={onContentChanged}></input>\n                :\n                <label>{FormatMessage(props.Message.Content)}</label>}\n            {!props.Input && <div style={{ backgroundColor: props.Message.Channel, width: 10 }} /> }\n        </div>\n    </div>);\n};","import React, { useState } from \"react\";\r\nimport { OrderedMessageModel } from \"../../../Models/OrderedMessageModel\";\r\nimport { OutputStatus } from \"../../../Models/OutputStatusEnum\";\r\nimport { MessageDisplay } from \"./MessageDisplay/MessageDisplay\";\r\nimport { Props } from \"./Props\";\r\nimport { AppStore, AppState } from \"../../../Redux/Store\";\r\nimport { RemoveTest, RemoveInput, UpdateInput, AddInput } from \"../../../Redux/GameDataReducer/Level/Actions\";\r\nimport { connect } from \"react-redux\";\r\nimport { ChannelColorEnum } from \"../../../Models/ChannelColorsEnum\";\r\nimport { Computer } from \"../../../Computing/Computer\";\r\nimport { GetActiveMachine } from \"../../../Helper/StoreHelper\";\r\n\r\nconst TestDisplayInternal: React.FC<Props> = (props) => {\r\n\r\n    const [error, setError] = useState<string | undefined>(undefined);\r\n    const PlayTest = () => {\r\n        setError(undefined);\r\n        const activeMachine = GetActiveMachine(AppState());\r\n\r\n        if (activeMachine !== undefined) {\r\n            const computer = new Computer(activeMachine.Setup, true);\r\n            computer.RunComputation(props.Test.id, AppStore).catch((reason) => {\r\n                setError(reason.toString());\r\n            });\r\n        }\r\n    };\r\n\r\n    const inputs = props.Test.inputs;\r\n    const outputs = props.Test.expectedOutputs;\r\n    let messages: JSX.Element[] = [];\r\n    let index = 0;\r\n\r\n    for (let i = 0; i < inputs.length; i++) {\r\n        messages.push(\r\n            <div key={index++} style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\" }}>\r\n                <MessageDisplay Message={inputs[i]} Input={true} Status={OutputStatus.NotChecked} Editable={props.Test.editable} AllowedInputColors={props.MultipleInputsEditable ? [ChannelColorEnum.Green, ChannelColorEnum.Blue, ChannelColorEnum.Red, ChannelColorEnum.Yellow]: [ChannelColorEnum.Green]} Remove={props.MultipleInputsEditable ? () => props.RemoveInput(props.Test.id, i) : undefined} OnMessageChanged={(message) => props.UpdateInput({ ...message, Order: i }, props.Test.id)} />\r\n            </div>\r\n        );\r\n        const expectedOutputs = outputs.filter((o) => o.Order === i);\r\n        let actuals: OrderedMessageModel[] | undefined;\r\n\r\n        if (props.Test.actualOutputs !== undefined) {\r\n            actuals = props.Test.actualOutputs.filter((o) => o.Order === i);\r\n        }\r\n\r\n        for (let j = 0; j < expectedOutputs.length; j++) {\r\n            const expected = expectedOutputs[j];\r\n            let valid = OutputStatus.NotChecked;\r\n            if (actuals !== undefined) {\r\n                const indexActual = (actuals.findIndex((o) => o.Channel === expected.Channel && o.Content === expected.Content));\r\n                if (indexActual > -1) {\r\n                    valid = OutputStatus.Fullfilled;\r\n                    actuals.splice(indexActual, 1);\r\n                } else {\r\n                    valid = OutputStatus.NotFullfilled;\r\n                }\r\n            }\r\n\r\n            /* eslint-disable */\r\n            messages = messages.concat(<MessageDisplay Message={expectedOutputs[j]} Input={false} key={index++} Status={valid} Editable={false} AllowedInputColors={[]} />);\r\n        }\r\n\r\n        if (actuals !== undefined) {\r\n            messages = messages.concat(actuals.map((o) => <MessageDisplay Message={o} Input={false} key={index++} Status={props.IsSandBoxLevel ? OutputStatus.NotFullfilled : OutputStatus.NotMatched} AllowedInputColors={[]} Editable={false} />));\r\n        }\r\n    }\r\n    /* eslint-enable */\r\n\r\n    const style: React.CSSProperties = { display: \"flex\", flexDirection: \"row\", borderBottom: props.CanPlay ? \"solid 0.5px\" : \"\", marginTop: 5 };\r\n    const verticalStyle: React.CSSProperties = { display: \"flex\", flexDirection: \"column\", flexGrow: 1 };\r\n\r\n    return (\r\n        <div style={style}>\r\n            {props.IsSandBoxLevel && <button onClick={() => props.RemoveTest(props.Test.id)}>-</button>}\r\n            {props.CanPlay && <button onClick={PlayTest}>Play</button>}\r\n            <div style={verticalStyle}>\r\n                {error !== undefined && <div style={{ color: \"red\" }}>\r\n                    <label>{error}</label>\r\n                </div>}\r\n                {messages}\r\n                {props.MultipleInputsEditable && <button style={{ alignSelf: \"start\" }} onClick={() => props.AddInput(props.Test.id)}>+</button>}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const TestDisplay = connect(\r\n    undefined,\r\n    { RemoveTest, RemoveInput, UpdateInput, AddInput }\r\n)(TestDisplayInternal);","import React from \"react\";\r\nimport { Props } from \"./Props\";\r\nimport { TestDisplay } from \"./TestDisplay/TestDisplay\";\r\nimport { connect } from \"react-redux\";\r\nimport { AddTest } from \"../../Redux/GameDataReducer/Level/Actions\";\r\nimport { SwitchScreen } from \"../../Redux/GameDataReducer/Actions\";\r\nimport { GameData } from \"../../Redux/GameDataReducer/GameModel\";\r\nimport { GetActiveMachine, GetActivePlayer } from \"../../Helper/StoreHelper\";\r\nimport { LevelState } from \"../../Redux/GameDataReducer/PlayerReducer/LevelData\";\r\nimport { AppState, AppStore } from \"../../Redux/Store\";\r\nimport { Computer } from \"../../Computing/Computer\";\r\nimport { IsStartMachine } from \"../../MachineStore/IMachine\";\r\n\r\nconst LevelDisplayInternal: React.FC<Props> = (props) => {\r\n\r\n    const tests = props.Level.tests.filter(t => t.showing).map((t, index) => <TestDisplay CanPlay={true} Test={{ ...t, expectedOutputs: props.Level.getOutputs(t.inputs) }} MultipleInputsEditable={t.editable && props.Level.allowedMachines.filter(m => IsStartMachine(m)).length > 1} IsSandBoxLevel={props.Level.id === \"12\"} key={index} />);\r\n\r\n    async function PlayAll() {\r\n        const activeMachine = GetActiveMachine(AppState());\r\n\r\n        if (activeMachine !== undefined) {\r\n            for (let test of props.Level.tests) {\r\n                const computer = new Computer(activeMachine.Setup, true);\r\n                const result = await computer.RunComputation(test.id, AppStore).catch((reason) => {\r\n                    return false;\r\n                });\r\n\r\n                if (result === false) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={{ height: props.Height, display: \"flex\", flexDirection: \"column\" }}>\r\n            <div>\r\n                <b>{props.Level.name}</b>\r\n                <br />\r\n                <i>{props.Level.description}</i>\r\n            </div>\r\n            <div style={{ overflow: \"auto\" }}>\r\n                {tests}\r\n                {props.Level.id === \"12\" && <><button onClick={props.AddTest}>Add custom test</button></>}\r\n            </div>\r\n            <div style={{display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\"}}>\r\n                <button style={{ marginTop: 5 }} onClick={PlayAll}>Play all tests</button>\r\n                {props.Level.id !== \"12\" && <button style={{ marginTop: 5 }} onClick={props.CompleteLevel}>Complete level</button>}\r\n            </div>\r\n\r\n            {props.Status === LevelState.NonValidMachineUsed && <b style={{ color: \"red\" }}>Machine used that is not allowed this level</b>}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: GameData) => {\r\n    return {\r\n        Level: state.activeLevel!,\r\n        Status: GetActivePlayer(state)!.levelData.find((l) => l.Id === state.activeLevel!.id)!.State\r\n    };\r\n};\r\n\r\nexport const LevelDisplay = connect(\r\n    mapStateToProps,\r\n    { AddTest, SwitchScreen }\r\n)(LevelDisplayInternal);","import React from \"react\";\nimport { Constants } from \"../../../Constants\";\nimport { Props } from \"./Props\";\nimport { GetDirectedChannelSet } from \"../../../../Helper/NewChannelSet\";\nimport { MachineCanvasHolder } from \"../../../Grid/Cell/MachineInstance/MachineDrawer/MachineCanvasHolder\";\n\nconst size = Constants.CellSize * 0.33;\nexport const MachineDisplay: React.FC<Props> = (props) => {\n\n    const { inputChannels, outputChannels } = GetDirectedChannelSet(props.MachineType.Api);\n    \n    return (\n        <div style={{display:\"flex\"}}>\n            <div style={{height:size , width: size}}>\n                <MachineCanvasHolder\n                    MachineStyle={props.MachineType.Style}\n                    IsDefault={props.IsDefault}\n                    BackgroundColor={\"White\"}\n                    InputChannels={inputChannels}\n                    OutputChannels={outputChannels}\n                    CellSize={size}\n                />\n            </div>\n            <label>{props.MachineType.Style.Name}</label>\n        </div>);\n};\n","import { GridSetupActionTypes } from \"./GridSetup/Actions\";\r\n\r\ninterface AddNewMachineActionType {\r\n    type: \"AddNewMachineActionType\";\r\n}\r\n\r\nexport function AddNewMachine(): CustomMachinesActionTypes {\r\n    return {\r\n        type: \"AddNewMachineActionType\",\r\n    };\r\n}\r\n\r\ninterface DeleteMachineActionType {\r\n    type: \"DeleteMachineActionType\";\r\n    machineId: string;\r\n}\r\n\r\nexport function DeleteMachine(machineId: string): CustomMachinesActionTypes {\r\n    return {\r\n        type: \"DeleteMachineActionType\",\r\n        machineId\r\n    };\r\n}\r\n\r\ninterface LoadCustomMachineActionType {\r\n    type: \"LoadCustomMachineActionType\";\r\n    machineId: string;\r\n}\r\n\r\nexport function LoadCustomMachine(machineId: string): CustomMachinesActionTypes {\r\n    return {\r\n        type: \"LoadCustomMachineActionType\",\r\n        machineId\r\n    };\r\n}\r\n\r\ninterface ChangeCellSizeActionType {\r\n    type: \"ChangeCellSizeActionType\";\r\n    cellSize: number;\r\n}\r\n\r\nexport function ChangeCellSize(cellSize: number): ChangeCellSizeActionType {\r\n    return {\r\n        type: \"ChangeCellSizeActionType\",\r\n        cellSize\r\n    };\r\n}\r\n\r\ninterface SetLevelCompleteActionType {\r\n    type: \"SetLevelCompleteActionType\";\r\n    levelId: string;\r\n}\r\n\r\nexport function SetLevelComplete(levelId: string): SetLevelCompleteActionType {\r\n    return {\r\n        type: \"SetLevelCompleteActionType\",\r\n        levelId\r\n    };\r\n}\r\n\r\nexport type CustomMachinesActionTypes = AddNewMachineActionType\r\n    | LoadCustomMachineActionType\r\n    | DeleteMachineActionType\r\n    | GridSetupActionTypes\r\n    | ChangeCellSizeActionType\r\n    | SetLevelCompleteActionType;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useDrag } from \"react-dnd\";\r\nimport { DraggedNewMachine, DragItemTypes } from \"../../DragItemTypes\";\r\nimport { MachineDisplay } from \"./MachineDisplay/MachineDisplay\";\r\nimport { MachineStore } from \"../../../MachineStore/MachineStore\";\r\nimport { LoadCustomMachine, DeleteMachine } from \"../../../Redux/GameDataReducer/PlayerReducer/Actions\";\r\nimport { connect } from \"react-redux\";\r\nimport { Constants } from \"../../Constants\";\r\nimport { GameData } from \"../../../Redux/GameDataReducer/GameModel\";\r\nimport { IsDefaultMachine } from \"../../../MachineStore/IMachine\";\r\nimport { GetActivePlayer } from \"../../../Helper/StoreHelper\";\r\nimport { getEmptyImage } from \"react-dnd-html5-backend\";\r\nimport { IMachineType } from \"../../../MachineStore/IMachineType\";\r\n\r\nconst StoredMachineInternal: React.FC<{\r\n    machine: string;\r\n    LoadCustomMachine: typeof LoadCustomMachine;\r\n    DeleteMachine: typeof DeleteMachine;\r\n    status: \"Valid\" | \"Invalid\";\r\n    machineType: IMachineType; \r\n}> = (props) => {\r\n    const [, drag, preview] = useDrag<DraggedNewMachine, unknown, unknown>({\r\n        item: { type: DragItemTypes.NewMachine, id: props.machine },\r\n        collect: (monitor) => ({\r\n            isDragging: !!monitor.isDragging(),\r\n        }),\r\n    });\r\n    const [showMenu, changeShow] = useState(false);\r\n    useEffect(() => {\r\n        preview(getEmptyImage(), { captureDraggingState: true })\r\n    }, [preview])\r\n\r\n    const isDefault = IsDefaultMachine(props.machine);\r\n    const machineStyle: React.CSSProperties = props.status === \"Invalid\" ? { borderBottom: Constants.CellSize / 18 + \"px dotted orange\", boxSizing: \"border-box\" } : {};\r\n\r\n    return (\r\n        <div ref={drag} title={props.machineType.Style.Description} onClick={() => changeShow(!showMenu)}>\r\n            <div style={machineStyle}>\r\n                <MachineDisplay MachineType={props.machineType} IsDefault={isDefault} />\r\n            </div>\r\n            {!isDefault && showMenu && <div style={{ display: \"flex\" }}>\r\n                <button onClick={(event) => props.LoadCustomMachine(props.machine)}>Edit</button>\r\n                <button onClick={(event) => {\r\n                    props.DeleteMachine(props.machine);\r\n                }}>Delete</button>\r\n            </div>}\r\n        </div>);\r\n};\r\n\r\nconst mapStateToProps = (state: GameData, ownProps: { machine: string }) => {\r\n    return {\r\n        status: IsDefaultMachine(ownProps.machine) ? \"Valid\" : GetActivePlayer(state)!.machines.find((m) => m.Id === ownProps.machine)!.Status,\r\n        machineType: MachineStore.GetStore().GetMachineType(ownProps.machine)\r\n    };\r\n};\r\n\r\nexport const StoredMachine = connect(\r\n    mapStateToProps,\r\n    {\r\n        LoadCustomMachine, DeleteMachine\r\n    }\r\n)(StoredMachineInternal);","import React from \"react\";\nimport { Props } from \"./Props\";\nimport { StoredMachine } from \"./StoredMachine/StoredMachine\";\nimport { AddNewMachine } from \"../../Redux/GameDataReducer/PlayerReducer/Actions\";\nimport { connect } from \"react-redux\";\nimport { MachineStore } from \"../../MachineStore/MachineStore\";\nimport { GameData } from \"../../Redux/GameDataReducer/GameModel\";\nimport { GetActiveMachine, GetActivePlayer } from \"../../Helper/StoreHelper\";\nimport { IsStartMachine, IsDefaultMachine } from \"../../MachineStore/IMachine\";\n\nconst MachineCollectionInternal: React.FC<Props> = (props) => {\n\n    const storedMachines = props.allowedMachines.map((m) => <div key={m}><StoredMachine machine={m} /></div>);\n\n    return (\n        <div style={{ overflow: \"auto\", width: \"100%\", height: props.height, position: \"absolute\" }}>\n            <button onClick={props.AddNewMachine}>Create new machine</button>\n            {storedMachines}\n        </div>\n    );\n};\n\nconst mapStateToProps = (state: GameData) => {\n    const store = MachineStore.GetStore();\n    const machines = store.GetAllMachines();\n    let allowedMachines: string[] = [];\n    const disallowedMachines: string[] = [];\n    const allowedStartMachines: string[] = [];\n\n    for (const machine of machines) {\n        if (state.activeLevel!.allowedMachines.some((am) => machine === am)) {\n            if (IsStartMachine(machine)) {\n                allowedStartMachines.push(machine);\n            }\n            else {\n                allowedMachines.push(machine);\n            }\n        } else {\n            disallowedMachines.push(machine);\n        }\n    }\n\n    const activeMachine = GetActiveMachine(state);\n    if (activeMachine !== undefined) {\n        const usedStartMachines = activeMachine.Setup.MachineInstances.filter((m) => IsStartMachine(m.MachineId));\n\n        const nextStartMachine = allowedStartMachines.find((m) => !usedStartMachines.some((s) => s.MachineId === m));\n        if (nextStartMachine !== undefined) {\n            allowedMachines = [nextStartMachine, ...allowedMachines];\n        }\n    }\n\n    const allowedCustomMachines: string[] = GetActivePlayer(state)!.machines.filter((customMachine) => !customMachine.DependingOn.some((dm) => IsDefaultMachine(dm) && disallowedMachines.some((dis) => dis === dm))).map((cm) => cm.Id);\n    allowedMachines = allowedMachines.concat(allowedCustomMachines);\n\n    return {\n        allowedMachines\n    };\n};\n\nexport const MachineCollection = connect(\n    mapStateToProps,\n    { AddNewMachine }\n)(MachineCollectionInternal);","export function StopPropagation(event: React.MouseEvent<HTMLDivElement, MouseEvent>): void{\r\n    event.stopPropagation();\r\n}","import React, { useState } from \"react\";\r\nimport { ChangeCellSize } from \"../../../Redux/GameDataReducer/PlayerReducer/Actions\";\r\nimport { connect } from \"react-redux\";\r\nimport { IMachineType } from \"../../../MachineStore/IMachineType\";\r\nimport { GetDirectedChannelSet } from \"../../../Helper/NewChannelSet\";\r\nimport { MachineCanvasHolder } from \"../../Grid/Cell/MachineInstance/MachineDrawer/MachineCanvasHolder\";\r\nimport { GetActiveMachine, GetCellSize } from \"../../../Helper/StoreHelper\";\r\nimport { GameData } from \"../../../Redux/GameDataReducer/GameModel\";\r\nimport { GetLighterColor, GetRandomColor } from \"../../../Helper/ColorHelper\";\r\nimport { MachineApi } from \"../../../Models/MachineApi\";\r\nimport { ChannelColorEnum } from \"../../../Models/ChannelColorsEnum\";\r\nimport { MachineStyleModel } from \"../../../Models/MachineStyleModel\";\r\n\r\nconst ChangeSizeInternal: React.FC<{ MachineType: IMachineType | undefined; CellSize: number; ChangeCellSize: typeof ChangeCellSize; Close(): void }> = (props) => {\r\n\r\n    const [size, setSize] = useState(props.CellSize);\r\n    const [borderColor] = useState(GetRandomColor());\r\n    const [backgroundColor] = useState(GetLighterColor(GetRandomColor(), 0.3));\r\n\r\n    function SizeChanged(newSize: number) {\r\n        props.ChangeCellSize(newSize);\r\n        setSize(newSize);\r\n    }\r\n\r\n    const api: MachineApi = props.MachineType?.Api ?? { OutputChannels: [ChannelColorEnum.Green], InputChannels: [ChannelColorEnum.Green] };\r\n    const style: MachineStyleModel = props.MachineType?.Style ?? { BorderColor: \"red\", Color: \"green\", Name: \"Dummy\", Description: \"dummy\" }\r\n    const channels = GetDirectedChannelSet(api);\r\n    return (\r\n        <div style={{ margin: 10, width: 500, borderColor, backgroundColor, borderWidth: 20, borderStyle: \"solid\", padding: 30 }}>\r\n            <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                <div style={{ height: props.CellSize, width: props.CellSize, alignSelf: \"center\" }}>\r\n                    <MachineCanvasHolder MachineStyle={style}\r\n                        IsDefault={false}\r\n                        BackgroundColor={backgroundColor}\r\n                        InputChannels={channels.inputChannels}\r\n                        OutputChannels={channels.outputChannels}\r\n                        MovingOutput={undefined}\r\n                        CellSize={props.CellSize} />\r\n                </div>\r\n                <input type=\"range\" min=\"10\" max=\"200\" onChange={(event) => SizeChanged(Number(event.currentTarget.value))} value={size} />\r\n                {size}\r\n            </div>\r\n            <button className=\"startMenu\" onClick={props.Close}>Close</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: GameData) => {\r\n    const activeMachine = GetActiveMachine(state);\r\n    const cellSize = GetCellSize(state);\r\n    return ({\r\n        MachineType: activeMachine,\r\n        CellSize: cellSize\r\n    });\r\n};\r\n\r\nexport const ChangeSizeComponent = connect(\r\n    mapStateToProps,\r\n    { ChangeCellSize }\r\n)(ChangeSizeInternal);\r\n","import React, { useState } from \"react\";\r\nimport { SetName, SetDescription, SetColor, SetBorderColor } from \"../../../../Redux/GameDataReducer/PlayerReducer/GridSetup/Actions\";\r\nimport { Props } from \"./Props\";\r\nimport { connect } from \"react-redux\";\r\nimport { GameData } from \"../../../../Redux/GameDataReducer/GameModel\";\r\nimport { GetActiveMachine, GetCellSize } from \"../../../../Helper/StoreHelper\";\r\nimport { MachineCanvasHolder } from \"../../../Grid/Cell/MachineInstance/MachineDrawer/MachineCanvasHolder\";\r\nimport { GetDirectedChannelSet } from \"../../../../Helper/NewChannelSet\";\r\nimport { GetLighterColor, GetRandomColor } from \"../../../../Helper/ColorHelper\";\r\nimport { Constants } from \"../../../Constants\";\r\n\r\nconst EditMachineInternal: React.FC<Props> = (props) => {\r\n    const [color, setColor] = useState<string>(props.MachineType.Style.Color);\r\n    const [borderColor, setBorderColor] = useState<string>(props.MachineType.Style.BorderColor);\r\n    const [dialogBorderColor] = useState(GetRandomColor());\r\n    const [backgroundColor] = useState(GetLighterColor(GetRandomColor(), 0.3));\r\n\r\n    function colorChanged(color: string): void {\r\n        setColor(color);\r\n        props.SetColor(color);\r\n    }\r\n\r\n    function borderChanged(borderColor: string): void {\r\n        setBorderColor(borderColor);\r\n        props.SetBorderColor(borderColor);\r\n    }\r\n\r\n    const channels = GetDirectedChannelSet(props.MachineType.Api);\r\n    return (\r\n        <div style={{ margin: 10, width: 500, borderColor: dialogBorderColor, backgroundColor, borderWidth: 20, borderStyle: \"solid\", padding: 30 }}>\r\n            {props.MachineType !== undefined &&\r\n                <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                    <div style={{ height: props.CellSize, width: props.CellSize, alignSelf: \"center\" }}>\r\n                        <MachineCanvasHolder MachineStyle={props.MachineType.Style}\r\n                            IsDefault={false}\r\n                            BackgroundColor={backgroundColor}\r\n                            InputChannels={channels.inputChannels}\r\n                            OutputChannels={channels.outputChannels}\r\n                            MovingOutput={undefined}\r\n                            CellSize={Constants.CellSize} />\r\n                    </div>\r\n                    <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\" }}>\r\n                        <label>Name</label>\r\n                        <input onChange={(event) => props.SetName(event.target.value)} value={props.MachineType.Style.Name}></input>\r\n                    </div>\r\n                    <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\" }}>\r\n                        <label>Color</label>\r\n                        <input onChange={(event) => colorChanged(event.target.value)} value={color}></input>\r\n                    </div>\r\n                    <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\" }}>\r\n                        <label>BorderColor</label>\r\n                        <input onChange={(event) => borderChanged(event.target.value)} value={borderColor}></input>\r\n                    </div>\r\n                    <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\" }}>\r\n                        <label>Description</label>\r\n                        <textarea cols={50} rows={5} onChange={(event) => props.SetDescription(event.target.value)} value={props.MachineType.Style.Description}></textarea>\r\n                    </div>\r\n                </div>}\r\n                <button className=\"startMenu\" onClick={props.Close}>Close</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: GameData) => {\r\n    const activeMachine = GetActiveMachine(state);\r\n    const cellSize = GetCellSize(state);\r\n    return ({\r\n        MachineType: activeMachine!,\r\n        CellSize: cellSize\r\n    });\r\n};\r\n\r\nexport const EditMachine = connect(\r\n    mapStateToProps,\r\n    { SetName, SetDescription, SetColor, SetBorderColor }\r\n)(EditMachineInternal);\r\n","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { StopPropagation } from \"../../../Helper/ClickHelper\";\r\nimport { GetLighterColor, GetRandomColor } from \"../../../Helper/ColorHelper\";\r\nimport { GetActiveMachine } from \"../../../Helper/StoreHelper\";\r\nimport { SwitchScreen } from \"../../../Redux/GameDataReducer/Actions\";\r\nimport { GameData } from \"../../../Redux/GameDataReducer/GameModel\";\r\nimport { ChangeSizeComponent } from \"./ChangeSizeComponent\";\r\nimport { EditMachine } from \"./EditMachine/EditMachine\";\r\n\r\n\r\nconst GameMenuInternal: React.FC<{ SwitchScreen: typeof SwitchScreen; Close(): void, hasActiveMachine: boolean }> = (props) => {\r\n\r\n    const [dialog, setdialog] = useState<\"none\" | \"editMachine\" | \"changeCellSize\">(\"none\");\r\n\r\n    const [borderColor] = useState(GetRandomColor());\r\n    const [backgroundColor] = useState(GetLighterColor(GetRandomColor(), 0.3));\r\n\r\n    return (\r\n        <div style={{ display: \"flex\", flexDirection: \"row\", alignItems: \"center\" }} onClick={StopPropagation}>\r\n            {dialog !== \"none\" && <div style={{ width: 220 }} ></div>}\r\n            <div style={{ borderColor, backgroundColor, borderWidth: 20, borderStyle: \"solid\", padding: 30, display: \"flex\", flexDirection: \"column\" }}>\r\n                <button className=\"startMenu\" onClick={() => props.SwitchScreen(\"startMenu\")}>Back to menu</button>\r\n                {props.hasActiveMachine && <button className=\"startMenu\" onClick={() => setdialog(\"editMachine\")}>Edit machine style</button>}\r\n                <button className=\"startMenu\" onClick={() => setdialog(\"changeCellSize\")}>Change cell size</button>\r\n\r\n                <button className=\"startMenu\" onClick={props.Close}>Continue playing</button>\r\n            </div>\r\n            {dialog === \"editMachine\" && <EditMachine Close={() => setdialog(\"none\")}/>}\r\n            {dialog === \"changeCellSize\" && <ChangeSizeComponent Close={() => setdialog(\"none\")}/>}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nfunction mapStateToProps(state: GameData){\r\n    const activeMachine = GetActiveMachine(state);\r\n    return {hasActiveMachine: activeMachine !== undefined}\r\n}\r\n\r\nexport const GameMenu = connect(\r\n    mapStateToProps,\r\n    { SwitchScreen }\r\n)(GameMenuInternal);\r\n","import React from \"react\";\r\nimport { XYCoord } from \"react-dnd\";\r\nimport { connect } from \"react-redux\";\r\nimport { GetDirectedChannelSet } from \"../../../Helper/NewChannelSet\";\r\nimport { GetCellSize } from \"../../../Helper/StoreHelper\";\r\nimport { IsDefaultMachine } from \"../../../MachineStore/IMachine\";\r\nimport { MachineStore } from \"../../../MachineStore/MachineStore\";\r\nimport { GameData } from \"../../../Redux/GameDataReducer/GameModel\";\r\nimport { MachineCanvasHolder } from \"../../Grid/Cell/MachineInstance/MachineDrawer/MachineCanvasHolder\";\r\n\r\nconst DraggedMachineInternal: React.FC<{ machineId: string, offset: XYCoord, cellSize: number }> = (props) => {\r\n    const machineType = MachineStore.GetStore().GetMachineType(props.machineId);\r\n    const { inputChannels, outputChannels } = GetDirectedChannelSet(machineType.Api);\r\n    const transform = `translate(${props.offset.x - props.cellSize / 2}px, ${props.offset.y - props.cellSize / 2}px)`\r\n    return <div style={{ position: \"absolute\", transform, pointerEvents: \"none\" }}>\r\n        <MachineCanvasHolder InputChannels={inputChannels}\r\n            OutputChannels={outputChannels}\r\n            MachineStyle={machineType.Style}\r\n            BackgroundColor={\"white\"}\r\n            CellSize={props.cellSize}\r\n            IsDefault={IsDefaultMachine(props.machineId)} />\r\n    </div>\r\n};\r\n\r\nconst mapStateToProps = (state: GameData) => {\r\n\r\n    return {\r\n        cellSize: GetCellSize(state)\r\n    };\r\n};\r\nexport const DraggedMachine = connect(\r\n    mapStateToProps,\r\n    {}\r\n)(DraggedMachineInternal);","import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { GameData } from \"../../Redux/GameDataReducer/GameModel\";\r\nimport { GetActiveMachine, GetCellSize } from \"../../Helper/StoreHelper\";\r\nimport { useDrag, useDragLayer, XYCoord } from \"react-dnd\";\r\nimport { DragItemTypes } from \"../DragItemTypes\";\r\nimport { getEmptyImage } from \"react-dnd-html5-backend\";\r\n\r\nconst MovingElementInternal: React.FC<{\r\n    Rows: number;\r\n    Columns: number;\r\n    CellSize: number;\r\n    WindowHeight: number;\r\n    WindowWidth: number; \r\n    children?: React.ReactNode;\r\n}> = (props) => {\r\n    const calculatedHeight = props.CellSize * (props.Rows - .35);\r\n    const calculatedWidth = props.CellSize * (props.Columns - 0.35);\r\n\r\n    const [leftStart, setLeftStart] = useState((props.WindowWidth - calculatedWidth) / 2);\r\n    const [topStart, setTopStart] = useState((props.WindowHeight - calculatedHeight) / 2);\r\n    const [finalOffset, setFinalOffset] = useState<XYCoord>({ x: 0, y: 0 });\r\n    const [{ isDragging }, drag, preview] = useDrag({\r\n        item: { type: DragItemTypes.Grid },\r\n        end: (result, monitor) => {\r\n            const offSet = monitor.getDifferenceFromInitialOffset();\r\n            if (offSet !== null) {\r\n                setFinalOffset(offSet);\r\n            }\r\n        },\r\n        collect: (monitor) => ({ isDragging: monitor.isDragging() })\r\n    });\r\n\r\n    useEffect(() => {\r\n        setLeftStart((l) => l + finalOffset.x);\r\n        setTopStart((t) => t + finalOffset.y);\r\n    }, [finalOffset])\r\n\r\n    const offSet = useDragLayer((monitor) => {\r\n        if (monitor.getItemType() === DragItemTypes.Grid) {\r\n            const offSet = monitor.getDifferenceFromInitialOffset();\r\n            if (offSet !== null) {\r\n                return offSet;\r\n            } else {\r\n                return undefined;\r\n            }\r\n        }\r\n    });\r\n\r\n    useEffect(() => {\r\n        preview(getEmptyImage(), { captureDraggingState: true })\r\n    }, [preview])\r\n\r\n    const left = isDragging && offSet !== undefined ? leftStart + offSet.x : leftStart;\r\n    const top = isDragging && offSet !== undefined ? topStart + offSet.y : topStart;\r\n\r\n    return (\r\n        <div ref={drag} style={{ position: \"absolute\", top, left, height: calculatedHeight, width: calculatedWidth }}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nfunction mapStateToProps(state: GameData) {\r\n    const activeMachine = GetActiveMachine(state);\r\n    const CellSize = GetCellSize(state);\r\n    return {\r\n        Rows: activeMachine!.Setup.NumberOfRows,\r\n        Columns: activeMachine!.Setup.NumberOfColumns,\r\n        Style: activeMachine!.Style,\r\n        CellSize\r\n    };\r\n}\r\n\r\nexport const MovingElement = connect(\r\n    mapStateToProps\r\n)(MovingElementInternal);","import React, { useState } from \"react\";\r\nimport { GetLighterColor, GetRandomColor } from \"../../Helper/ColorHelper\";\r\n\r\nexport const MenuBox: React.FC<unknown> = (props) => {\r\n    const [backgroundColor] = useState(GetLighterColor(GetRandomColor(), 0.3));\r\n    const [borderColor] = useState(GetRandomColor());\r\n\r\n    return <div style={{ borderColor, backgroundColor, borderWidth: 20, borderStyle: \"solid\", padding: 30, display: \"flex\", flexDirection: \"column\" }}>\r\n        {props.children}\r\n    </div>;\r\n};","import { OrderedMessageModel } from \"../Models/OrderedMessageModel\";\r\n\r\nexport function CheckTest(expecteds: OrderedMessageModel[], actuals: OrderedMessageModel[]): boolean {\r\n    if (expecteds.length !== actuals.length) {\r\n        return false;\r\n    }\r\n    for (const expected of expecteds) {\r\n        const actual = actuals.filter(a => a.Order === expected.Order && a.Channel === expected.Channel && a.Content === expected.Content);\r\n        if (actual.length !== 1) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Computer } from \"../../Computing/Computer\";\r\nimport { GetActiveMachine } from \"../../Helper/StoreHelper\";\r\nimport { CheckTest } from \"../../Helper/TestHelper\";\r\nimport { LevelModel } from \"../../Levels/LevelModel\";\r\nimport { ExecutedTest } from \"../../Models/ExecutedTest\";\r\nimport { SwitchScreen } from \"../../Redux/GameDataReducer/Actions\"\r\nimport { SetCustomTest } from \"../../Redux/GameDataReducer/Level/Actions\"\r\nimport { SetLevelComplete } from \"../../Redux/GameDataReducer/PlayerReducer/Actions\"\r\nimport { GameData } from \"../../Redux/GameDataReducer/GameModel\";\r\nimport { CustomMachineModel } from \"../../Redux/GameDataReducer/PlayerReducer/GridSetup/CustomMachineModel\";\r\nimport { AppState } from \"../../Redux/Store\";\r\nimport { TestDisplay } from \"../LevelDisplay/TestDisplay/TestDisplay\";\r\nimport { LevelStore } from \"../../Levels/LevelStore\";\r\nimport { GetOpaqueColor } from \"../../Helper/ColorHelper\";\r\n\r\nconst CheckLevelInternal: React.FC<{\r\n    Level: LevelModel,\r\n    close: () => void,\r\n    SetLevelComplete: typeof SetLevelComplete;\r\n    SwitchScreen: typeof SwitchScreen;\r\n    SetCustomTest: typeof SetCustomTest\r\n}> = (props) => {\r\n    const [state, setState] = useState<\"Checking\" | \"Passed\" | \"Failed\">(\"Checking\");\r\n    const [testsSucceeded, setTestsSucceeded] = useState(0);\r\n    const [failedTest, setFailedTest] = useState<undefined | (ExecutedTest & {showingTest: boolean})>(undefined);\r\n\r\n    useEffect(() => {\r\n        const activeMachine = GetActiveMachine(AppState());\r\n\r\n        if (activeMachine !== undefined) {\r\n\r\n            RunTests(activeMachine, props.Level, setTestsSucceeded).then((failingTest) => {\r\n                if (failingTest === undefined) {\r\n                    props.SetLevelComplete(props.Level.Id);\r\n                    setState(\"Passed\");\r\n                } else {\r\n                    setFailedTest(failingTest);\r\n                    setState(\"Failed\");\r\n                }\r\n            }).catch(() => {\r\n                props.close();\r\n            });\r\n        }\r\n    }, [setTestsSucceeded, props])\r\n    return <div style={{ width: 266 }}>\r\n        {state === \"Checking\" && <>\r\n            Checking tests<br />\r\n            {testsSucceeded}/{props.Level.Tests.length + 10} tests passed\r\n        </>\r\n        }\r\n        {state === \"Passed\" && <>\r\n            All {props.Level.Tests.length + 10} tests have been passed<br />\r\n            <b style={{ color: \"green\" }}>Level completed!</b><br />\r\n            <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\", marginTop: 10 }} >\r\n                <button onClick={props.close} title=\"Continue editing this machine\">Back</button>\r\n                <button onClick={() => props.SwitchScreen(\"levelSelect\")} title=\"Go to the level select screen\">Select next level</button>\r\n            </div>\r\n\r\n        </>}\r\n        {state === \"Failed\" && <>\r\n            The following test failed:\r\n            <div style={{ backgroundColor: GetOpaqueColor(\"white\", 0.7), padding: 3 }}>\r\n                <TestDisplay CanPlay={false} Test={{ ...failedTest!, id: 0, editable: false, showing: true }} MultipleInputsEditable={false} IsSandBoxLevel={false} />\r\n            </div>\r\n            <div style={{ display: \"flex\", flexDirection: \"row-reverse\", justifyContent: \"space-between\", marginTop: 10 }} >\r\n                <button onClick={props.close} title=\"Close this screen\">Close</button>\r\n                {!failedTest!.showingTest && <button onClick={() => props.SetCustomTest(failedTest!.inputs)} title=\"Send input to the custom test\">Examine</button>}\r\n            </div>\r\n        </>}\r\n    </div>\r\n}\r\n\r\nasync function RunTests(activeMachine: CustomMachineModel, level: LevelModel, setTestsSucceeded: (test: number) => void): Promise<undefined | (ExecutedTest & { showingTest: boolean })> {\r\n    const computer = new Computer(activeMachine.Setup, true);\r\n\r\n    for (let i = 0; i < level.Tests.length + 10; i++) {\r\n\r\n        const input = i < level.Tests.length ? level.Tests[i].inputs : level.GetRandomTestInputs();\r\n        const output = await computer.RunInputs(input);\r\n        const expected = level.GetTestExpectedOutputs(input);\r\n        if (CheckTest(expected, output)) {\r\n            setTestsSucceeded(i);\r\n        } else {\r\n            return Promise.resolve({ inputs: input, expectedOutputs: expected, actualOutputs: output, showingTest: i < level.Tests.length && level.Tests[i].showing })\r\n        }\r\n    }\r\n\r\n    return Promise.resolve(undefined);\r\n}\r\n\r\nconst mapStateToProps = (state: GameData) => {\r\n\r\n    const Level = LevelStore.GetStore().GetLevel(state.activeLevel!.id)\r\n\r\n\r\n    return {\r\n        Level\r\n    };\r\n};\r\n\r\nexport const CheckLevel = connect(\r\n    mapStateToProps,\r\n    { SetLevelComplete, SwitchScreen, SetCustomTest }\r\n)(CheckLevelInternal);","import React, { useEffect, useState } from \"react\";\nimport { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\nimport { Dashboard } from \"../Dashboard/Dashboard\";\nimport { Grid } from \"../Grid/Grid\";\nimport { LevelDisplay } from \"../LevelDisplay/LevelDisplay\";\nimport { MachineCollection } from \"../MachineCollection/MachineCollection\";\nimport { Computer } from \"../../Computing/Computer\";\nimport { AddNewMachine, ChangeCellSize } from \"../../Redux/GameDataReducer/PlayerReducer/Actions\";\nimport { RemoveMachine } from \"../../Redux/GameDataReducer/PlayerReducer/GridSetup/MachineInstances/Actions\";\nimport { connect } from \"react-redux\";\nimport { Props } from \"./Props\";\nimport { ClearMessages } from \"../../Redux/GameDataReducer/PlayerReducer/GridSetup/Actions\";\nimport { GetActiveMachine, GetCellSize } from \"../../Helper/StoreHelper\";\nimport { GameData } from \"../../Redux/GameDataReducer/GameModel\";\nimport { useDragLayer, useDrop } from \"react-dnd\";\nimport { DraggedNewMachine, DraggedOutputChannel, DragItemTypes } from \"../DragItemTypes\";\nimport { GetAngleFromMonitor } from \"../../Helper/AngleHelper\";\nimport { SetMovingOutput } from \"../../Redux/GameDataReducer/Actions\";\nimport { GameMenu } from \"./GameMenu/GameMenu\";\nimport { Constants } from \"../Constants\";\nimport { DraggedMachine } from \"../MachineCollection/DraggedMachine/DraggedMachine\";\nimport { MovingElement } from \"../Grid/MovingElement\";\nimport { AppState } from \"../../Redux/Store\";\nimport { MenuBox } from \"../StartMenu/MenuBox\";\nimport { CheckLevel } from \"./CheckLevel\";\n\nconst GameInternal: React.FC<Props> = (props) => {\n    const [menu, setMenu] = useState<\"none\" | \"options\" | \"checkLevel\">(\"none\");\n\n    const [height, setHeight] = useState(window.innerHeight - 1);\n    const [width, setWidth] = useState(window.innerWidth - 1);\n\n    useEffect(() => {\n        document.addEventListener(\"keyup\", handleKeyPress, false);\n        window.addEventListener(\"resize\", handleResize);\n        return () => {\n            document.removeEventListener(\"keyup\", handleKeyPress, false);\n            window.removeEventListener(\"resize\", handleResize, false);\n\n        }\n    });\n\n    const [, drop] = useDrop({\n        accept: [DragItemTypes.MachineInstance],\n        drop: (item, monitor) => {\n            if (monitor.isOver()) {\n                switch (item.type) {\n                    case DragItemTypes.MachineInstance:\n                        props.RemoveMachine(monitor.getItem().id);\n                        break;\n                }\n            }\n        },\n    });\n\n    const dragPreviewElement = useDragLayer((monitor) => {\n        switch (monitor.getItemType()) {\n            case DragItemTypes.OutputChannel:\n\n                const outputItem: DraggedOutputChannel = monitor.getItem() as DraggedOutputChannel;\n                const draggedOutputAngle = GetAngleFromMonitor(monitor, outputItem.offsetX, outputItem.offsetY);\n                if (draggedOutputAngle !== undefined) {\n                    props.SetMovingOutput({ angle: draggedOutputAngle, ...outputItem });\n                }\n                break;\n            case DragItemTypes.NewMachine:\n                if (monitor.isDragging()) {\n                    const offset = monitor.getClientOffset();\n                    if (offset !== null) {\n                        const item = monitor.getItem() as DraggedNewMachine;\n                        return <DraggedMachine machineId={item.id} offset={offset} />\n                    }\n                }\n                break\n        }\n        return null;\n    });\n\n    function handleKeyPress(event: KeyboardEvent): void {\n        switch (event.key) {\n            case \" \":\n                Computer.StopComputation();\n                props.ClearMessages();\n                event.stopPropagation();\n                break;\n            default:\n                break;\n        }\n    }\n\n    function handleResize(): void {\n        setHeight(window.innerHeight - 1);\n        setWidth(window.innerWidth - 1);\n    }\n\n    function handleWheel(event: React.WheelEvent<HTMLDivElement>) {\n        if (props.HasActiveMachine) {\n            const currentSize = GetCellSize(AppState());\n            props.ChangeCellSize(currentSize - Math.round(event.deltaY * 0.04));\n            event.stopPropagation();\n        }\n    }\n\n    const allowedInputColors = [ChannelColorEnum.Green];\n    const opagueBackground = \"rgba(255,255,255,.8)\";\n    return (\n        <div ref={drop} style={{ position: \"absolute\", height, width, overflow: \"hidden\" }}>\n            <div onWheel={handleWheel} style={{ position: \"absolute\", height: \"100%\", width: \"100%\" }}>\n                {!props.HasActiveMachine ?\n                    <div style={{ display: \"flex\", height: \"100%\", width: \"100%\", justifyContent: \"center\", alignItems: \"center\" }}>\n                        <button title={\"Add new machine\"} onClick={props.AddNewMachine}>Create new machine</button>\n                    </div>\n                    :\n                    <MovingElement WindowHeight={height} WindowWidth={width}><Grid /></MovingElement>\n                }\n            </div >\n            <div style={{ position: \"absolute\", left: width / 2 - 150, padding: 10, width: 300, backgroundColor: opagueBackground }}>\n                <h2 style={{ textAlign: \"center\", margin: 0 }}>{props.MachineName}</h2>\n            </div>\n            <div style={{ position: \"absolute\", padding: \"10px 0px 10px 10px\", right: 10, width: 180, height: height - 20, backgroundColor: opagueBackground }}>\n                <button onClick={() => setMenu(\"options\")} title=\"Options\">Options</button>\n                <MachineCollection height={height - 40} />\n            </div>\n            <div style={{ position: \"absolute\", padding: 10, left: 10, top: 10, width: 300, backgroundColor: opagueBackground }}>\n                <LevelDisplay AllowedInputs={allowedInputColors} Height={height - 40} CompleteLevel={() => setMenu(\"checkLevel\")} />\n            </div>\n            <div style={{ position: \"absolute\", padding: \"10px 10px 0px 10px\", height: 65, width: 240, left: width / 2 - 150, top: height - 65, backgroundColor: opagueBackground }}>\n                <Dashboard />\n            </div>\n            {menu !== \"none\" &&\n                <div onClick={() => setMenu(\"none\")} style={{ position: \"absolute\", height: \"100%\", width: \"100%\", display: \"flex\", justifyContent: \"center\", alignItems: \"center\", background: Constants.MenuBackGround }}>\n                    {menu === \"options\" && <GameMenu Close={() => setMenu(\"none\")} />}\n                    {menu === \"checkLevel\" && <MenuBox>\n                        <CheckLevel close={() => setMenu(\"none\")}/>\n                    </MenuBox>\n                    }\n                </div>\n            }\n\n            {dragPreviewElement}\n        </div>\n    );\n}\n\nconst mapStateToProps = (state: GameData) => {\n    const activeMachine = GetActiveMachine(state);\n\n    return {\n        HasActiveMachine: activeMachine !== undefined,\n        MachineName: activeMachine?.Style.Name\n    };\n};\nexport const Game = connect(\n    mapStateToProps,\n    { AddNewMachine, ClearMessages, SetMovingOutput, RemoveMachine, ChangeCellSize }\n)(GameInternal);","import React, { useState } from \"react\";\r\n\r\nexport const NameDialog: React.FC<{name: string, close: (name: string) => void}> = (props) => {\r\n    const [name, setName] = useState(props.name);\r\n\r\n    function handleKeyUp(event: React.KeyboardEvent<HTMLInputElement>): void\r\n    {\r\n        switch (event.key) {\r\n            case \"Enter\":\r\n                props.close(name);\r\n                break;        \r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    return <div style={{width: 200, margin: 10}}>\r\n        <input onChange={(value) => setName(value.target.value)} onKeyUp={handleKeyUp} value={name} ></input>\r\n        <button onClick={() => props.close(name)}>OK</button>\r\n        <button onClick={() => props.close(\"\")}>Cancel</button>\r\n\r\n    </div>;\r\n};","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { GameData } from \"../../../Redux/GameDataReducer/GameModel\";\r\nimport { PlayerModel } from \"../../../Redux/GameDataReducer/PlayerReducer/PlayerModel\";\r\nimport { ImportPlayerData } from \"../../../Redux/GameDataReducer/Actions\";\r\n\r\nconst NameDialogInternal: React.FC<{ ImportPlayerData: typeof ImportPlayerData, close: () => void; players: { name: string, id: string }[] }> = (props) => {\r\n    const [data, setData] = useState<string>(\"\");\r\n\r\n    const [message, setMessage] = useState<string>();\r\n    const [state, setState] = useState<\"empty\" | \"loaded\">(\"empty\");\r\n\r\n\r\n\r\n    function prepareImport() {\r\n        const indexOfParathesis = data.indexOf(\"(\");\r\n        if (indexOfParathesis !== -1) {\r\n            setMessage(\"Data blocked\");\r\n            return;\r\n        }\r\n\r\n        let playerModel: PlayerModel;\r\n\r\n        try {\r\n            playerModel = JSON.parse(data);\r\n        }\r\n        catch (error) {\r\n            setMessage(\"Data import failed, something is wrong with the data\");\r\n            return;\r\n        }\r\n\r\n        if (playerModel.name === undefined || playerModel.id === undefined) {\r\n            setMessage(\"Data import failed, missing data\");\r\n            return;\r\n        }\r\n\r\n        const player = props.players.find(p => p.id === playerModel.id);\r\n        if (player === undefined) {\r\n            setMessage(`Import new player with name '${playerModel.name}'?`);\r\n        }\r\n        if (player !== undefined) {\r\n            if (player.name !== playerModel.name) {\r\n                setMessage(`Update player '${player.name}', which will be renamed to '${playerModel.name}'?`);\r\n            } else {\r\n                setMessage(`Update player '${player.name}'?`);\r\n            }\r\n        }\r\n\r\n        setState(\"loaded\");\r\n    };\r\n\r\n    function importData() {\r\n        props.ImportPlayerData(JSON.parse(data));\r\n        props.close();\r\n    }\r\n\r\n    return <>\r\n        <p>Only import data from sources you trust!</p>\r\n        <input onChange={(value) => setData(value.target.value)} value={data} ></input>\r\n        <p>{message}</p>\r\n        <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n            {state === \"empty\" && <button onClick={prepareImport}>Preload</button>}\r\n            {state === \"loaded\" && <button onClick={importData}>Confirm</button>}\r\n            <button onClick={() => props.close()}>Cancel</button>\r\n        </div>\r\n    </>;\r\n};\r\n\r\nconst mapStateToProps = (state: GameData) => {\r\n    return {\r\n        players: state.players.map(p => ({ name: p.name, id: p.id }))\r\n    };\r\n};\r\n\r\nexport const ImportDialog = connect(\r\n    mapStateToProps,\r\n    { ImportPlayerData }\r\n)(NameDialogInternal);","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { GameData } from \"../../../Redux/GameDataReducer/GameModel\";\r\nimport { ChangePlayerName, DeletePlayer, AddPlayer, SwitchPlayer } from \"../../../Redux/GameDataReducer/Actions\"\r\nimport { NameDialog } from \"./Player/NameDialog\";\r\nimport { AppState } from \"../../../Redux/Store\";\r\nimport { ImportDialog } from \"./ImportDialog\";\r\n\r\nconst PlayersDialogInternal: React.FC<{\r\n    close: () => void,\r\n    ChangePlayerName: typeof ChangePlayerName,\r\n    AddPlayer: typeof AddPlayer,\r\n    SwitchPlayer: typeof SwitchPlayer,\r\n    DeletePlayer: typeof DeletePlayer,\r\n    players: { name: string, id: string, active: boolean }[]\r\n}> = (props) => {\r\n\r\n    const [dialog, setDialog] = useState<\"none\" | \"deletePlayer\" | \"exportPlayer\" | \"importPlayer\" | \"addPlayer\">(\"none\");\r\n    const [selectedPlayer, setSelectedPlayer] = useState<string>(\"\");\r\n    const [playerIdToBeDeleted, setPlayerIdToBeDeleted] = useState<string>(\"\");\r\n    const [playerData, setPlayerData] = useState<string>(\"\");\r\n    const [message, setMessage] = useState<string>(\"\");\r\n\r\n\r\n    function SetDeleteDialog(name: string, id: string) {\r\n        setDialog(\"deletePlayer\");\r\n        setSelectedPlayer(name);\r\n        setPlayerIdToBeDeleted(id);\r\n    }\r\n\r\n    function SetExportDialog(name: string, id: string) {\r\n        const player = AppState().players.find(p => p.id === id);\r\n        if (player !== undefined) {\r\n            const data = JSON.stringify(player);\r\n            if (-1 !== data.indexOf(\"(\")) {\r\n                setMessage(`Cannot export data of '${name}', it contains a '('`);\r\n            } else {\r\n                setMessage(`Exporting data of '${name}', copy data below`);\r\n                setPlayerData(data);\r\n            }\r\n\r\n            setDialog(\"exportPlayer\");\r\n        }\r\n    }\r\n\r\n    function deletePlayer(id: string) {\r\n        setDialog(\"none\");\r\n        props.DeletePlayer(id);\r\n    }\r\n\r\n    return <>\r\n        <div style={{ display: \"flex\", flexDirection: \"column\", opacity: dialog === \"none\" ? 1 : 0.5 }}>\r\n            {props.players.map(p =>\r\n                <div style={{ display: \"flex\", flexDirection: \"row\", border: p.active ? \"4px solid lime\" : \"4px\", padding: p.active ? 5 : 9 }}>\r\n                    <input disabled={dialog !== \"none\"} onChange={(event) => props.ChangePlayerName(event.target.value, p.id)} value={p.name}></input>\r\n                    <button disabled={p.active || dialog !== \"none\"} onClick={() => props.SwitchPlayer(p.id)}>Activate</button>\r\n                    <button disabled={dialog !== \"none\"} onClick={() => SetDeleteDialog(p.name, p.id)}>Delete</button>\r\n                    <button disabled={dialog !== \"none\"} onClick={() => SetExportDialog(p.name, p.id)}>Export</button>\r\n                </div>)}\r\n            {dialog === \"none\" && <div style={{ padding: 9, display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\" }}>\r\n                <div>\r\n                    <button onClick={() => setDialog(\"addPlayer\")}>Add player</button>\r\n                    <button onClick={() => setDialog(\"importPlayer\")}>Import player</button>\r\n                </div>\r\n                <div>\r\n                    <button onClick={props.close}>Done</button>\r\n                </div>\r\n            </div>}\r\n        </div>\r\n        {dialog === \"addPlayer\" &&\r\n            <NameDialog name=\"\" close={(name) => {\r\n                if (name !== \"\") {\r\n                    props.AddPlayer(name);\r\n                }\r\n                setDialog(\"none\");\r\n            }}></NameDialog>}\r\n        {dialog === \"deletePlayer\" &&\r\n            <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                Delete '{selectedPlayer}', are you sure?\r\n                <div>\r\n                    <button style={{ margin: 5 }} onClick={() => deletePlayer(playerIdToBeDeleted)}>Delete</button>\r\n                    <button style={{ margin: 5 }} onClick={() => setDialog(\"none\")}>Cancel</button>\r\n                </div>\r\n            </div>\r\n        }\r\n        {dialog === \"exportPlayer\" &&\r\n            <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                {message}\r\n                <input style={{ margin: 5 }} disabled={true} value={playerData}></input>\r\n                <div>\r\n                    <button style={{ margin: 5 }} onClick={() => { navigator.clipboard.writeText(playerData); setDialog(\"none\"); }}>Copy to clipboard</button>\r\n                    <button style={{ margin: 5 }} onClick={() => setDialog(\"none\")}>Done</button>\r\n                </div>\r\n            </div>\r\n        }\r\n        {dialog === \"importPlayer\" &&\r\n            <ImportDialog close={() => setDialog(\"none\")}></ImportDialog>}\r\n    </>\r\n};\r\n\r\nconst mapStateToProps = (state: GameData) => {\r\n    return {\r\n        players: state.players.map(p => ({ name: p.name, id: p.id, active: state.activePlayerId === p.id })),\r\n    };\r\n};\r\n\r\nexport const PlayersDialog = connect(\r\n    mapStateToProps,\r\n    { ChangePlayerName, DeletePlayer, SwitchPlayer, AddPlayer }\r\n)(PlayersDialogInternal);","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { SwitchScreen } from \"../../Redux/GameDataReducer/Actions\";\r\nimport { LoadLevel } from \"../../Redux/GameDataReducer/Level/Actions\";\r\nimport { Props } from \"./Props\";\r\nimport { GetActivePlayer } from \"../../Helper/StoreHelper\";\r\nimport { GameData } from \"../../Redux/GameDataReducer/GameModel\";\r\nimport { PlayersDialog } from \"./Dialog/PlayersDialog\";\r\nimport { LevelState } from \"../../Redux/GameDataReducer/PlayerReducer/LevelData\";\r\nimport { LevelStore } from \"../../Levels/LevelStore\";\r\nimport { LevelModel } from \"../../Levels/LevelModel\";\r\nimport { MenuBox } from \"./MenuBox\";\r\n\r\nconst StartMenuInternal: React.FC<Props> = (props) => {\r\n    const [dialog, setdialog] = useState<\"none\" | \"editPlayers\" | \"importData\">(\"none\");\r\n\r\n    return (\r\n        <div style={{ height: \"100%\", width: \"100%\", display: \"flex\", flexDirection: \"column\", justifyContent: \"center\", alignItems: \"center\" }}>\r\n            <h1>Contexion</h1>\r\n            {dialog === \"none\" && <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\r\n                <MenuBox>\r\n                    {props.continueLevel !== undefined && <button className=\"startMenu\" onClick={() => props.LoadLevel(props.continueLevel!.Id)}>Continue with {props.continueLevel.Name}</button>}\r\n                    {props.playerName !== undefined && <>\r\n                        <button className=\"startMenu\" onClick={() => props.SwitchScreen(\"levelSelect\")}>Select level</button>\r\n                        <button className=\"startMenu\" onClick={() => props.LoadLevel(\"12\")}>Sandbox</button>\r\n                    </>}\r\n                    <button className=\"startMenu\" onClick={() => setdialog(\"editPlayers\")}>Manage players</button>\r\n                </MenuBox>\r\n                {props.playerName === undefined ? <h4>No player profile, make one to play!</h4> : <h4> Playing as {props.playerName}</h4>}\r\n            </div>}\r\n            {dialog === \"editPlayers\" &&\r\n                <MenuBox>\r\n                    <PlayersDialog close={() => {\r\n                        setdialog(\"none\");\r\n                    }}></PlayersDialog>\r\n                </MenuBox>}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: GameData) => {\r\n    const player = GetActivePlayer(state);\r\n    let continueLevel: LevelModel | undefined = undefined;\r\n    if (player?.activeLevel !== undefined) {\r\n        const data = player.levelData.find((ld) => ld.Id === player.activeLevel);\r\n        if (data?.State === LevelState.InProgress || data?.State === LevelState.NonValidMachineUsed) {\r\n            continueLevel = LevelStore.GetStore().GetLevel(player.activeLevel);\r\n        }\r\n    }\r\n\r\n    return {\r\n        playerName: player?.name,\r\n        continueLevel\r\n    };\r\n};\r\n\r\nexport const StartMenu = connect(\r\n    mapStateToProps,\r\n    { SwitchScreen, LoadLevel }\r\n)(StartMenuInternal);\r\n","import { Props } from \"./Props\";\r\nimport React, { useState } from \"react\";\r\nimport { LoadLevel } from \"../../../Redux/GameDataReducer/Level/Actions\";\r\nimport { connect } from \"react-redux\";\r\nimport { LevelState } from \"../../../Redux/GameDataReducer/PlayerReducer/LevelData\";\r\nimport { MachineCanvasHolder } from \"../../Grid/Cell/MachineInstance/MachineDrawer/MachineCanvasHolder\";\r\nimport { GetGrayScaleColor, GetLighterColor, GetOpaqueColor } from \"../../../Helper/ColorHelper\";\r\nimport { Constants } from \"../../Constants\";\r\nimport { MachineStore } from \"../../../MachineStore/MachineStore\";\r\nimport { ChannelModel } from \"../../../Models/ChannelModel\";\r\n\r\nconst LevelPreviewInternal: React.FC<Props> = (props) => {\r\n    const OnClick = () => props.LoadLevel(props.Level.Id);\r\n    const [showLabel, setShowLabel] = useState(props.Data?.LastUsedMachineId !== undefined || props.Level.Inputs.length !== 0);\r\n\r\n    let color: string;\r\n    let borderColor: string;\r\n\r\n    let outputChannels: ChannelModel[][] = [];\r\n\r\n    if (props.Data?.LastUsedMachineId === undefined) {\r\n        color = \"rgb(200,200,200)\";\r\n        borderColor = \"rgb(160,160,160)\";\r\n    } else {\r\n        var machine = MachineStore.GetStore().GetMachineType(props.Data!.LastUsedMachineId);\r\n        switch (props.Data.State) {\r\n            case LevelState.Completed:\r\n                color = machine.Style.Color;\r\n                borderColor = machine.Style.BorderColor;\r\n                outputChannels = props.Level.OutputChannels.map((oc) => [oc]);\r\n                break;\r\n            case LevelState.InProgress:\r\n            case LevelState.NonValidMachineUsed:\r\n                color = GetLighterColor(GetGrayScaleColor(machine.Style.Color, 0.4), 0.5);\r\n                borderColor = GetLighterColor(GetGrayScaleColor(machine.Style.BorderColor, 0.4), 0.5);\r\n                break;\r\n            case LevelState.NoMachineLinked:\r\n                throw Error(\"State is not linked, but there is a machine linked\")\r\n        }\r\n    }\r\n\r\n    function onHover() {\r\n        if (props.Data?.LastUsedMachineId === undefined && props.Level.Inputs.length === 0) {\r\n            setShowLabel(true);\r\n        }\r\n    }\r\n\r\n    function onExit() {\r\n        if (props.Data?.LastUsedMachineId === undefined && props.Level.Inputs.length === 0) {\r\n            setShowLabel(false);\r\n        }\r\n    }\r\n\r\n    const machineStyle = {\r\n        Color: color,\r\n        BorderColor: borderColor,\r\n    }\r\n\r\n    return (<div onMouseOver={onHover} onMouseOut={onExit} style={{ position: \"absolute\", marginLeft: props.Level.Cell.Column * 140 + 50, marginTop: props.Level.Cell.Row * 115 + 20 }}>\r\n        <div onClick={OnClick}  title={props.Level.LevelDescription} style={{ height: Constants.CellSize - 2, width: Constants.CellSize - 2 }}>\r\n            <MachineCanvasHolder IsDefault={false} MachineStyle={machineStyle} BackgroundColor={\"white\"} InputChannels={props.Level.Inputs} OutputChannels={outputChannels} CellSize={Constants.CellSize} />\r\n            {showLabel && <div style={{ display: \"flex\", position: \"absolute\", height: \"20%\", width: \"100%\", justifyContent: \"center\", alignItems: \"center\", pointerEvents: \"none\" }}>\r\n                <label style={{ fontFamily: \"Comic Sans MS\", background: GetOpaqueColor(\"White\", 0.7) }}>{props.Level.Name}</label>\r\n            </div>}\r\n        </div>\r\n    </div>);\r\n};\r\n\r\nexport const LevelPreview = connect(\r\n    undefined,\r\n    { LoadLevel }\r\n)(LevelPreviewInternal);","import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { GameData } from \"../../Redux/GameDataReducer/GameModel\";\r\nimport { Props } from \"./Props\";\r\nimport { SwitchScreen } from \"../../Redux/GameDataReducer/Actions\";\r\nimport { GetActivePlayer } from \"../../Helper/StoreHelper\";\r\nimport { LevelStore } from \"../../Levels/LevelStore\";\r\nimport { LevelModel } from \"../../Levels/LevelModel\";\r\nimport { LevelData, LevelState } from \"../../Redux/GameDataReducer/PlayerReducer/LevelData\";\r\nimport { LevelPreview } from \"./LevelPreview/LevelPreview\";\r\nimport { Move } from \"../../Helper/SetupHelper\";\r\nimport { AreEqual } from \"../../Models/CellModel\";\r\nimport { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { InputChannelModel } from \"../Grid/Cell/MachineInstance/MachineDrawer/InputChannelModel\";\r\n\r\nconst LevelSelectScreenInternal: React.FC<Props> = (props) => {\r\n    const [levelModels, setLevelModels] = useState<{ model: LevelModel & {Inputs: InputChannelModel[]}; data: LevelData | undefined }[]>([]);\r\n    useEffect(() => {\r\n        const levels = LevelStore.GetStore().GetAllLevels();\r\n        const models = levels.filter((l) => l.Cell.Row >= 0).map((l) => {\r\n            const levelData = props.levels.find((ld) => ld.Id === l.Id);\r\n            return { model: {...l, Inputs: [...l.InputChannels]}, data: levelData };\r\n        });\r\n\r\n        const maxColumn = Math.max(...levels.map((l) => l.Cell.Column));\r\n        const maxRow = Math.max(...levels.map((l) => l.Cell.Column));\r\n        const setup = { NumberOfRows: maxRow, NumberOfColumns: maxColumn };\r\n        const completedLevels = models.filter((lm) => lm.data?.State === LevelState.Completed).map((lm) => lm.model);\r\n        for (const completedLevel of completedLevels) {\r\n            for (const direction of completedLevel.OutputChannels.map((oc) => oc.Direction)) {\r\n                let newCell = Move(setup, completedLevel.Cell, direction);\r\n                while (newCell !== undefined) {\r\n                    // eslint-disable-next-line\r\n                    const nextLevel = models.find((cl) => AreEqual(cl.model.Cell, newCell!));\r\n                    if (nextLevel !== undefined) {\r\n                        nextLevel.model.Inputs.push({ Channel: ChannelColorEnum.Green, Direction: direction, Status: \"Exists\", UseMachineColor: true });\r\n                        break;\r\n                    }\r\n\r\n                    newCell = Move(setup, newCell, direction);\r\n                }\r\n            }\r\n        }\r\n        setLevelModels(models);\r\n    }, [props.levels]);\r\n\r\n    return <div style={{ position: \"absolute\", width: \"100%\" }}>\r\n        <button style={{position: \"fixed\", top: 10, right: 10}} onClick={() => props.SwitchScreen(\"startMenu\")}>Back</button>\r\n        {levelModels.map((lm) => <LevelPreview Level={lm.model} Data={lm.data} key={lm.model.Id} />)}\r\n    </div>\r\n}\r\n\r\nconst mapStateToProps = (state: GameData) => {\r\n    var levels = GetActivePlayer(state)!.levelData;\r\n    return {\r\n        levels\r\n    };\r\n};\r\n\r\nexport const LevelSelectScreen = connect(\r\n    mapStateToProps,\r\n    { SwitchScreen }\r\n)(LevelSelectScreenInternal);","import React from \"react\";\r\nimport { DndProvider } from \"react-dnd\";\r\nimport HTML5Backend from \"react-dnd-html5-backend\";\r\nimport { Game } from \"./Components/Game/Game\";\r\nimport { connect } from \"react-redux\";\r\nimport { GameData } from \"./Redux/GameDataReducer/GameModel\";\r\nimport { Props } from \"./Props\";\r\nimport { StartMenu } from \"./Components/StartMenu/StartMenu\";\r\nimport { LevelSelectScreen } from \"./Components/LevelSelectsScreen/LevelSelectScreen\";\r\n\r\nconst AppInternal: React.FC<Props> = (props) => {\r\n  return (\r\n    <DndProvider backend={HTML5Backend}>\r\n      {props.screen === \"startMenu\" && <StartMenu />}\r\n      {props.screen === \"levelSelect\" && <LevelSelectScreen />}\r\n      {props.screen === \"playing\" && <Game />}\r\n\r\n    </DndProvider>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: GameData) => {\r\n  return {\r\n      screen: state.screen,\r\n    };\r\n};\r\n\r\nexport const App = connect(\r\n  mapStateToProps\r\n)(AppInternal);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport {App} from \"./App\";\r\nimport \"./index.css\";\r\nimport { AppStore } from \"./Redux/Store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={AppStore}>\r\n        <App />\r\n    </Provider>\r\n    , document.getElementById(\"root\"));\r\n"],"sourceRoot":""}