{"version":3,"sources":["Models/ChannelColorsEnum.ts","MachineStore/DefaultMachines/AddStarMachine.ts","Models/DirectionEnum.ts","MachineStore/DefaultMachines/AddZeroMachine.ts","MachineStore/DefaultMachines/CompareMachine.ts","MachineStore/DefaultMachines/CopyMachine.ts","MachineStore/DefaultMachines/DeleteMachine.ts","MachineStore/DefaultMachines/GreenStartMachine.ts","MachineStore/DefaultMachines/IncrementMachine.ts","MachineStore/DefaultMachines/MoveMachine.ts","MachineStore/DefaultMachines/RedStartMachine.ts","MachineStore/DefaultMachines/RotateMachine.ts","MachineStore/MachineStore.ts","Computing/Computer.ts","Computing/Setup.ts","Levels/Levels/Sandbox.ts","Components/Constants.ts","Components/NumberInput/NumberInput.tsx","Models/OutputStatusEnum.ts","Components/Dashboard/Dashboard.tsx","Components/DragItemTypes.ts","Components/Channel/Channel.tsx","Components/Machine/Machine.tsx","Components/MachineInstance/MachineInstance.tsx","Components/MessageFormatter.ts","Components/Cell/Cell.tsx","Components/Grid/Grid.tsx","Components/EditableMessageDisplay/EditableMessageDisplay.tsx","Components/MessageDisplay/MessageDisplay.tsx","Components/CustomTest/CustomTest.tsx","Components/TestDisplay/TestDisplay.tsx","Components/LevelDisplay/LevelDisplay.tsx","Components/LevelPreview/LevelPreview.tsx","Levels/Levels/AppendLength.ts","Levels/Levels/GetLength.ts","Levels/Levels/GetType.ts","Levels/Levels/IsEmpty.ts","Levels/Levels/KeepNumbers.ts","Levels/Levels/PlusOne.ts","Levels/Levels/RemoveAllRepeats.ts","Levels/Levels/RotateBackwards.ts","Levels/LevelStore.ts","Components/LevelList/LevelList.tsx","Components/StoredMachine/StoredMachine.tsx","Components/MachineStore/MachineStore.tsx","Components/MenuItem/MenuItem.tsx","Components/Settings/GridSizeSetting/GridSizeSetting.tsx","Components/Settings/SaveMenu/SaveMenu.tsx","Components/Settings/Settings.tsx","Components/Game/Game.tsx","App.tsx","index.tsx"],"names":["ChannelColorEnum","DirectionEnum","AddStarMachine","actor","Act","message","returnValue","content","Content","push","Channel","Green","Id","Type","this","BorderColor","Color","Name","InputChannels","OutputChannels","Description","AddZeroMachine","CompareMachine","channel","length","Red","CopyMachine","DeleteMachine","slice","GreenStartMachine","IncrementMachine","newMessage","char","String","fromCharCode","charCodeAt","MoveMachine","RedStartMachine","RotateMachine","MachineStore","machines","init","id","machine","find","m","undefined","Error","FindMachine","GetActor","GetType","machineStore","GridSetup","Computer","setup","store","GetStore","GetMachines","MachineInstances","map","mi","MachineId","startMachines","machineInstance","color","Blue","Yellow","input","messageLocations","GetStartMachine","direction","Channels","Direction","messageLocation","Cell","messages","nextMessages","messageCell","Move","Column","Row","nextContents","nextContent","channelMap","cm","cell","Down","NumberOfRows","Up","Right","NumberOfColumns","Left","LoadGridSetup","LoadSetup","Sandbox","AllowedMachines","Tests","Constants","CellSize","OutputStatus","NumberInput","props","style","marginLeft","marginRight","onClick","valueChanged","value","Dashboard","title","StepTime","OnStepTimeChanged","DragItemTypes","onClicked","bind","cellSize","channelStyle","position","height","width","marginTop","backgroundColor","ChannelMap","borderStyle","borderWidth","border","pointerEvents","rotate","rotation","transform","event","OnChanged","newDirection","React","Component","Machine","machineSize","borderSize","machineStyle","borderColor","borderRadius","MachineInstance","useDrag","item","type","end","dropResult","monitor","didDrop","OnRemoved","collect","isDragging","drag","channels","c","index","key","i","OnChannelChanged","margin","machineType","GetMachineType","ref","FormatMessage","formattedMessage","seekPosition","indexOf","lastIndex","substring","useDrop","accept","drop","OnMovedMachine","getItem","location","itemProps","OnNewMachine","float","OnMachineRemoved","Grid","ChannelChanged","MachineMoved","MachineAdded","MachineRemoved","rows","rowIndex","row","columnIndex","foundMachineInstance","foundMessage","Messages","newGridSetup","findIndex","filter","Math","max","EditableMessageDisplay","display","flexDirection","AllowedInputColors","Message","onChange","MessageChanged","target","cc","MessageDisplay","flexFlow","justifyContent","Input","marginBottom","colorCode","statusStyle","Status","Fullfilled","NotMatched","CustomTest","InputChanged","AddInput","DeleteInput","Play","state","Inputs","Outputs","inputs","setState","splice","PlayTest","then","outputs","lineNumber","o","Order","NotChecked","concat","MultipleInputs","TestDisplay","Test","expectedOutputs","actuals","ActualOutputs","j","expected","valid","indexActual","NotFullfilled","padding","borderBottom","OnPlay","flexGrow","LevelDisplay","testStarted","test","actualOutputs","catch","tests","Level","t","AllowedInputs","MultipleInputsAllowed","LevelPreview","LevelClicked","AppendLength","GetLength","IsEmpty","KeepNumbers","PlusOne","RemoveAllRepeats","RotateBackwards","LevelStore","levels","levelStore","LevelList","GetAllLevels","l","OnLevelClicked","StoredMachine","channelComponents","absoluteStyle","left","Store","GetAllMachine","relativeStyle","storedMachines","disallowedMachines","some","MenuItem","showItem","Showing","ItemName","borderLeft","children","GridSizeSetting","Setup","OnSetupChanged","SaveMenu","ShowSetupString","SetupStringChanged","SetupString","NewSetupString","ShowSetup","JSON","stringify","OnShowingSetup","setupModel","parse","Settings","Game","computer","cancelComputation","inputChanged","startComputation","CalculateNextMessages","GridSetupChanged","StepTimeChanged","stopComputation","handleKeyPress","LevelSelected","gridSetup","Computing","CustomInput","ShowingSetup","SelectedLevel","e","text","replace","handleNextInput","inputNumber","Promise","resolve","StartComputation","SetDelay","callback","args","reject","clearHandle","window","setTimeout","clearTimeout","GetNextMessages","doneMessages","mm","doneMessage","newOutputs","newSetup","document","addEventListener","removeEventListener","disallowedStartMachines","GetStartMachines","allowedInputColors","gridSizeStyle","textAlign","flex","alignItems","NewSetup","newStepTime","level","App","backend","HTML5Backend","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.a4b11cc2.chunk.js","sourcesContent":["export enum ChannelColorEnum {\r\n    Green = \"green\",\r\n    Red = \"red\",\r\n    Blue = \"blue\",\r\n    Yellow = \"yellow\",\r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { MachineId } from \"../MachineId\";\r\n\r\nexport class AddStarMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            const content = \"*\" + message.Content;\r\n\r\n            returnValue.push({ Content: content, Channel: ChannelColorEnum.Green });\r\n            return returnValue;\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            BorderColor: \"blue\",\r\n            Color: \"grey\",\r\n            Name: \"Add *\",\r\n            InputChannels: [],\r\n            OutputChannels: [ChannelColorEnum.Green],\r\n            Description: \"Puts a star in front of the string. There is guaranteed not to be a star in the input\"\r\n        };\r\n    }\r\n    public Id: MachineId = {\r\n        Id: 10,\r\n        Type: \"Default\"\r\n    };\r\n}","export enum DirectionEnum {\r\n    Up,\r\n    Down,\r\n    Left,\r\n    Right,\r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { MachineId } from \"../MachineId\";\r\n\r\nexport class AddZeroMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            const content = \"0\" + message.Content;\r\n\r\n            returnValue.push({ Content: content, Channel: ChannelColorEnum.Green });\r\n            return returnValue;\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            BorderColor: \"yellow\",\r\n            Color: \"darkorange\",\r\n            Name: \"Add 0\",\r\n            InputChannels: [],\r\n            OutputChannels: [ChannelColorEnum.Green],\r\n            Description: \"Puts a zero in front of the string\"\r\n        };\r\n    }\r\n    public Id: MachineId = {\r\n        Id: 11,\r\n        Type: \"Default\"\r\n    };\r\n}\r\n","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { MachineId } from \"../MachineId\";\r\n\r\nexport class CompareMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            const channel: ChannelColorEnum = message.Content.length > 1 && message.Content[0] === message.Content[1] ? ChannelColorEnum.Green : ChannelColorEnum.Red;\r\n\r\n            returnValue.push({ Content: message.Content, Channel: channel });\r\n            return returnValue;\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            BorderColor: \"red\",\r\n            Color: \"green\",\r\n            Name: \"Compare\",\r\n            InputChannels: [],\r\n            OutputChannels: [ChannelColorEnum.Green, ChannelColorEnum.Red],\r\n            Description: \"Compares the first two characters in the string. If they are the same, exits green. If they are different exits red\"\r\n        };\r\n    }\r\n    public Id: MachineId = {\r\n        Id: 9,\r\n        Type: \"Default\"\r\n    };\r\n}\r\n","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { MachineId } from \"../MachineId\";\r\n\r\nexport class CopyMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            const content = message.Content.length > 0 ? message.Content[0] + message.Content : \"\";\r\n\r\n            returnValue.push({ Content: content, Channel: ChannelColorEnum.Green });\r\n            return returnValue;\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            BorderColor: \"green\",\r\n            Color: \"yellow\",\r\n            Name: \"Copy\",\r\n            InputChannels: [],\r\n            OutputChannels: [ChannelColorEnum.Green],\r\n            Description: \"Copies the first character of the string and puts it in front of the string\"\r\n        };\r\n    }\r\n    public Id: MachineId = {\r\n        Id: 6,\r\n        Type: \"Default\"\r\n    };\r\n}\r\n","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { MachineId } from \"../MachineId\";\r\n\r\nexport class DeleteMachine implements IMachine {\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            const content = message.Content.length > 0 ? message.Content.slice(1) : \"\";\r\n\r\n            returnValue.push({ Content: content, Channel: ChannelColorEnum.Green });\r\n            return returnValue;\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            BorderColor: \"red\",\r\n            Color: \"red\",\r\n            Name: \"Delete\",\r\n            InputChannels: [],\r\n            OutputChannels: [ChannelColorEnum.Green],\r\n            Description: \"Deletes the first character of the string\"\r\n        };\r\n    }\r\n    public Id: MachineId = {\r\n        Id: 7,\r\n        Type: \"Default\"\r\n    };\r\n}\r\n","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { MachineId } from \"../MachineId\";\r\n\r\nexport class GreenStartMachine implements IMachine {\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            returnValue.push({ Content: message.Content, Channel: ChannelColorEnum.Green });\r\n            return returnValue;\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Color: \"white\",\r\n            BorderColor: \"green\",\r\n            OutputChannels: [ChannelColorEnum.Green],\r\n            InputChannels: [],\r\n            Name: \"Start\",\r\n            Description: \"Starting point of the computation. Acts as a move machine for all other purposes\"\r\n        };\r\n    }\r\n    public readonly Id: MachineId = { Id: 0, Type: \"Default\" };\r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { MachineId } from \"../MachineId\";\r\n\r\nexport class IncrementMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            let newMessage = \"\";\r\n            if (message.Content.length > 0) {\r\n                const char = message.Content[0];\r\n\r\n                if ((char >= \"0\" && char <= \"8\") || (char >= \"a\" && char < \"z\") || (char >= \"A\" && char < \"Z\")) {\r\n                    newMessage = String.fromCharCode(char.charCodeAt(0) + 1) + message.Content.slice(1);\r\n                } else if (char === \"9\") {\r\n                    newMessage = \"0\" + message.Content.slice(1);\r\n                } else if (char === \"z\") {\r\n                    newMessage = \"a\" + message.Content.slice(1);\r\n                } else if (char === \"Z\") {\r\n                    newMessage = \"A\" + message.Content.slice(1);\r\n                } else {\r\n                    newMessage = message.Content;\r\n                }\r\n            }\r\n\r\n            returnValue.push({ Content: newMessage, Channel: ChannelColorEnum.Green });\r\n            return returnValue;\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            BorderColor: \"DodgerBlue\",\r\n            Color: \"MediumVioletRed\",\r\n            Name: \"Increment\",\r\n            InputChannels: [],\r\n            OutputChannels: [ChannelColorEnum.Green],\r\n            Description: \"Increases a number in front of the string by 1, makes as letter the next letter in the alphabet. 9 becomes 0, z becomes a. All other starting characters are not changed\"\r\n        };\r\n    }\r\n    public Id: MachineId = {\r\n        Id: 12,\r\n        Type: \"Default\"\r\n    };\r\n}\r\n","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { MachineId } from \"../MachineId\";\r\n\r\nexport class MoveMachine implements IMachine {\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            returnValue.push({ Content: message.Content, Channel: ChannelColorEnum.Green });\r\n            return returnValue;\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Color: \"green\",\r\n            BorderColor: \"lightgreen\",\r\n            OutputChannels: [ChannelColorEnum.Green],\r\n            InputChannels: [],\r\n            Name: \"Move\",\r\n            Description: \"Does nothing with the string, only used to get the message to the right place\"\r\n        };\r\n    }\r\n    public readonly Id: MachineId = { Id: 5, Type: \"Default\" };\r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { MachineId } from \"../MachineId\";\r\n\r\nexport class RedStartMachine implements IMachine {\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            returnValue.push({ Content: message.Content, Channel: ChannelColorEnum.Green });\r\n            return returnValue;\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Color: \"white\",\r\n            BorderColor: \"red\",\r\n            OutputChannels: [ChannelColorEnum.Green],\r\n            InputChannels: [],\r\n            Name: \"Start\",\r\n            Description: \"Starting point of the computation. Acts as a move machine for all other purposes\"\r\n        };\r\n    }\r\n    public readonly Id: MachineId = { Id: 1, Type: \"Default\" };\r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { MachineId } from \"../MachineId\";\r\n\r\nexport class RotateMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            let content: string;\r\n            if ( message.Content.length > 1) {\r\n                content = message.Content.slice(1) + message.Content.slice(0, 1);\r\n            } else {\r\n                content = message.Content;\r\n            }\r\n\r\n            returnValue.push({ Content: content, Channel: ChannelColorEnum.Green });\r\n            return returnValue;\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            BorderColor: \"blue\",\r\n            Color: \"cyan\",\r\n            Name: \"Rotate\",\r\n            InputChannels: [],\r\n            OutputChannels: [ChannelColorEnum.Green],\r\n            Description: \"Removes the first character of the string, and adds it to the end of the string\"\r\n        };\r\n    }\r\n    public Id: MachineId = {\r\n        Id: 8,\r\n        Type: \"Default\"\r\n    };\r\n}\r\n","import { AddStarMachine } from \"./DefaultMachines/AddStarMachine\";\r\nimport { AddZeroMachine } from \"./DefaultMachines/AddZeroMachine\";\r\nimport { CompareMachine } from \"./DefaultMachines/CompareMachine\";\r\nimport { CopyMachine } from \"./DefaultMachines/CopyMachine\";\r\nimport { DeleteMachine } from \"./DefaultMachines/DeleteMachine\";\r\nimport { GreenStartMachine } from \"./DefaultMachines/GreenStartMachine\";\r\nimport { IncrementMachine } from \"./DefaultMachines/IncrementMachine\";\r\nimport { MoveMachine } from \"./DefaultMachines/MoveMachine\";\r\nimport { RedStartMachine } from \"./DefaultMachines/RedStartMachine\";\r\nimport { RotateMachine } from \"./DefaultMachines/RotateMachine\";\r\nimport { IActor } from \"./IActor\";\r\nimport { IMachine } from \"./IMachine\";\r\nimport { IMachineType } from \"./IMachineType\";\r\nimport { MachineId } from \"./MachineId\";\r\n\r\nexport class MachineStore {\r\n    private static machineStore: MachineStore;\r\n    private machines: IMachine[];\r\n\r\n    private constructor() {\r\n        this.machines = [];\r\n        this.init();\r\n    }\r\n\r\n    public static GetStore(): MachineStore {\r\n        if (MachineStore.machineStore === undefined)        {\r\n            MachineStore.machineStore = new MachineStore();\r\n        }\r\n\r\n        return MachineStore.machineStore;\r\n    }\r\n\r\n    private init(): void {\r\n        this.machines = [];\r\n        this.machines.push(new GreenStartMachine());\r\n        this.machines.push(new RedStartMachine());\r\n        this.machines.push(new MoveMachine());\r\n        this.machines.push(new CopyMachine());\r\n        this.machines.push(new DeleteMachine());\r\n        this.machines.push(new RotateMachine());\r\n        this.machines.push(new CompareMachine());\r\n        this.machines.push(new AddStarMachine());\r\n        this.machines.push(new AddZeroMachine());\r\n        this.machines.push(new IncrementMachine());\r\n        // this.machines.push(new SplitMachine());\r\n    }\r\n\r\n    private FindMachine(id: MachineId): IMachine {\r\n        const machine = this.machines.find((m) => m.Id.Id === id.Id && m.Id.Type === id.Type);\r\n        if (machine === undefined) {\r\n            throw new Error(\"No machine found with id \" + id.Id + \" and type \" + id.Type);\r\n        }\r\n\r\n        return machine;\r\n    }\r\n\r\n    public GetActor(id: MachineId): IActor {\r\n        return this.FindMachine(id).GetActor();\r\n    }\r\n\r\n    public GetMachineType(id: MachineId): IMachineType {\r\n        return this.FindMachine(id).GetType();\r\n    }\r\n\r\n    public GetAllMachine(): IMachine[] {\r\n        return this.machines;\r\n    }\r\n}","import { IActor } from \"../MachineStore/IActor\";\r\nimport { MachineStore } from \"../MachineStore/MachineStore\";\r\nimport { CellModel } from \"../Models/CellModel\";\r\nimport { ChannelColorEnum } from \"../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../Models/DirectionEnum\";\r\nimport { GridSetupModel } from \"../Models/GridSetupModel\";\r\nimport { MachineInstanceModel } from \"../Models/MachineInstanceModel\";\r\nimport { MessageLocationModel } from \"../Models/MessageLocationModel\";\r\nimport { MessageModel } from \"../Models/MessageModel\";\r\n\r\nexport class Computer {\r\n    private setup: GridSetupModel;\r\n    private machines: Array<{ id: number, actor: IActor }> = [];\r\n    private store: MachineStore;\r\n\r\n    constructor(setup: GridSetupModel) {\r\n        this.setup = setup;\r\n        this.store = MachineStore.GetStore();\r\n        this.GetMachines();\r\n    }\r\n\r\n    public NewSetup(setup: GridSetupModel) {\r\n        this.setup = setup;\r\n        this.GetMachines();\r\n    }\r\n\r\n    private GetMachines(): void {\r\n        this.machines = this.setup.MachineInstances.map((mi) => ({ id: mi.Id, actor: this.store.GetActor(mi.MachineId) }));\r\n    }\r\n\r\n    public GetStartMachines() {\r\n        const startMachines: MachineInstanceModel[] = [];\r\n        for (const machineInstance of this.setup.MachineInstances) {\r\n            if (machineInstance.MachineId.Id < 4 && machineInstance.MachineId.Type === \"Default\") {\r\n                startMachines.push(machineInstance);\r\n            }\r\n        }\r\n\r\n        return startMachines;\r\n    }\r\n\r\n    public GetStartMachine(color: ChannelColorEnum): MachineInstanceModel | undefined {\r\n\r\n        let id: number = 0;\r\n        switch (color) {\r\n            case ChannelColorEnum.Green:\r\n                id = 0;\r\n                break;\r\n            case ChannelColorEnum.Red:\r\n                id = 1;\r\n                break;\r\n            case ChannelColorEnum.Blue:\r\n                id = 2;\r\n                break;\r\n            case ChannelColorEnum.Yellow:\r\n                id = 3;\r\n                break;\r\n        }\r\n\r\n        return this.setup.MachineInstances.find((mi) => mi.MachineId.Id === id && mi.MachineId.Type === \"Default\");\r\n\r\n    }\r\n\r\n    public StartComputation(input: MessageModel): MessageLocationModel[] {\r\n        const messageLocations: MessageLocationModel[] = [];\r\n\r\n        const machineInstance = this.GetStartMachine(input.Channel);\r\n        if (machineInstance === undefined) {\r\n            return [];\r\n        }\r\n\r\n        const direction = machineInstance.Channels[0].Direction;\r\n        const messageLocation: MessageLocationModel = { Content: input.Content, Direction: direction, Cell: machineInstance.Cell };\r\n        messageLocations.push(messageLocation);\r\n\r\n        return messageLocations;\r\n    }\r\n\r\n    public GetNextMessages(messages: MessageLocationModel[]): MessageLocationModel[] {\r\n        const nextMessages: MessageLocationModel[] = [];\r\n        for (const message of messages) {\r\n            let machine: MachineInstanceModel | undefined;\r\n            let messageCell: CellModel | undefined = message.Cell;\r\n\r\n            while (machine === undefined) {\r\n                messageCell = this.Move(messageCell!, message.Direction);\r\n                if (messageCell === undefined) {\r\n                    break;\r\n                }\r\n\r\n                // eslint-disable-next-line\r\n                machine = this.setup.MachineInstances.find((mi) => mi.Cell.Column === messageCell!.Column && mi.Cell.Row === messageCell!.Row);\r\n            }\r\n\r\n            if (messageCell === undefined) {\r\n                nextMessages.push({ Cell: undefined, Direction: message.Direction, Content: message.Content })\r\n                continue;\r\n            }\r\n\r\n            const channel = ChannelColorEnum.Green;\r\n\r\n            const actor = this.machines.find((m) => m.id === machine!.Id)!.actor;\r\n            const nextContents = actor.Act({ Content: message.Content, Channel: channel });\r\n            for (const nextContent of nextContents) {\r\n                const channelMap = machine!.Channels.find((cm) => cm.Channel === nextContent.Channel);\r\n                if (channelMap === undefined) {\r\n                    throw Error(\"Channelmap \" + nextContent.Channel + \"undefined\");\r\n                }\r\n\r\n                const messageLocation: MessageLocationModel = { Cell: machine!.Cell, Content: nextContent.Content, Direction: channelMap.Direction };\r\n                nextMessages.push(messageLocation);\r\n            }\r\n        }\r\n\r\n        return nextMessages;\r\n    }\r\n\r\n    private Move(cell: CellModel, direction: DirectionEnum): CellModel | undefined {\r\n        switch (direction) {\r\n            case DirectionEnum.Down:\r\n                if (cell.Row === this.setup.NumberOfRows - 1) {\r\n                    return;\r\n                }\r\n                return { Column: cell.Column, Row: cell.Row + 1 };\r\n            case DirectionEnum.Up:\r\n                if (cell.Row === 0) {\r\n                    return;\r\n                }\r\n                return { Column: cell.Column, Row: cell.Row - 1 };\r\n            case DirectionEnum.Right:\r\n                if (cell.Column === this.setup.NumberOfColumns - 1) {\r\n                    return;\r\n                }\r\n                return { Column: cell.Column + 1, Row: cell.Row };\r\n            case DirectionEnum.Left:\r\n                if (cell.Column === 0) {\r\n                    return;\r\n                }\r\n                return { Column: cell.Column - 1, Row: cell.Row };\r\n        }\r\n    }\r\n}","import { ChannelColorEnum } from \"../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../Models/DirectionEnum\";\r\nimport { GridSetupModel } from \"../Models/GridSetupModel\";\r\n\r\nlet GridSetup: GridSetupModel;\r\n\r\nexport const LoadGridSetup = (): GridSetupModel => {\r\n    if (GridSetup === undefined) {\r\n        GridSetup = LoadSetup();\r\n    }\r\n\r\n    return GridSetup;\r\n};\r\n\r\nconst LoadSetup = (): GridSetupModel => ({\r\n    NumberOfColumns: 6,\r\n    NumberOfRows: 5,\r\n    MachineInstances: [{\r\n        Cell: { Row: 2, Column: 0 },\r\n        MachineId: { Id: 0, Type: \"Default\" },\r\n        Channels: [{ Direction: DirectionEnum.Right, Channel: ChannelColorEnum.Green }],\r\n        InputChannels: [], Id: 1\r\n    }]\r\n});\r\n","import { LevelModel } from \"../../Models/LevelModel\";\r\n\r\nexport const Sandbox: LevelModel ={\r\n    AllowedMachines : [],\r\n    Description: \"Sandbox level, no specific goals\",\r\n    Name: \"Sandbox\",\r\n    Tests: [       \r\n    ]\r\n}","export class Constants {\r\n    public static CellSize = 100;\r\n}","import React from \"react\";\r\nimport { Props } from \"./Props\";\r\n\r\nconst NumberInput: React.FC<Props> = (props) => {\r\n    const IncreaseValue: () => void = () => {\r\n        props.valueChanged(props.value + 1);\r\n    };\r\n    const DecreaseValue: () => void = () => {\r\n        props.valueChanged(props.value - 1);\r\n    };\r\n\r\n    const style: React.CSSProperties = { marginLeft: 5, marginRight: 5 };\r\n\r\n    return (<div>\r\n        <button style={style} onClick={DecreaseValue}>-</button>\r\n        <label >{props.value}</label>\r\n        <button style={style} onClick={IncreaseValue}>+</button>\r\n    </div>);\r\n};\r\n\r\nexport default NumberInput;","export enum OutputStatus {\r\n    NotChecked,\r\n    NotFullfilled,\r\n    Fullfilled,\r\n    NotMatched\r\n}","import React from \"react\";\r\nimport NumberInput from \"../NumberInput/NumberInput\";\r\nimport { Props } from \"./Props\";\r\n\r\nexport const Dashboard: React.FC<Props> = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <label title=\"Step time in tenths of seconds, lower for faster animations\">Step Time</label>\r\n            <NumberInput value={props.StepTime} valueChanged={props.OnStepTimeChanged} />\r\n        </div>\r\n    );\r\n};","export const DragItemTypes = {\r\n  MachineInstance: \"MachineInstance\",\r\n  NewMachine: \"NewMachine\"\r\n};","import React from \"react\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { Constants } from \"../Constants\";\r\nimport { Props } from \"./Props\";\r\n\r\nexport class Channel extends React.Component<Props> {\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.onClicked = this.onClicked.bind(this);\r\n    }\r\n    public render() {\r\n\r\n        const cellSize = Constants.CellSize - 2;\r\n        const width = 19;\r\n        const height = 4;\r\n        const border = 1;\r\n        const channelStyle: React.CSSProperties = {\r\n            position: \"absolute\",\r\n            height: cellSize / 50 * height,\r\n            width: cellSize / 50 * width,\r\n            marginLeft: cellSize / 50 * (25 + (height + border) / 2),\r\n            marginTop: cellSize / 50 * (25 - (height + border) / 2),\r\n            backgroundColor: this.props.ChannelMap.Channel,\r\n            borderStyle: \"solid\",\r\n            borderWidth: border + \"px\",\r\n            pointerEvents: \"visible\"\r\n        };\r\n\r\n        let rotate: string = \"\";\r\n        switch (this.props.ChannelMap.Direction) {\r\n            case DirectionEnum.Down:\r\n                rotate = \"rotate(90deg)\";\r\n                break;\r\n            case DirectionEnum.Left:\r\n                rotate = \"rotate(180deg)\";\r\n                break;\r\n            case DirectionEnum.Up:\r\n                rotate = \"rotate(270deg)\";\r\n                break;\r\n            case DirectionEnum.Right:\r\n                rotate = \"rotate(0deg)\";\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        const rotation: React.CSSProperties = {\r\n            transform: rotate,\r\n            height: cellSize,\r\n            width: cellSize,\r\n            position: \"absolute\",\r\n            pointerEvents: \"none\"\r\n        };\r\n\r\n        return (\r\n            <div style={rotation}>\r\n                <div style={channelStyle} onClick={this.onClicked}></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public onClicked(event: React.MouseEvent<HTMLDivElement, MouseEvent>): void {\r\n        if (this.props.OnChanged !== undefined) {\r\n            let newDirection: DirectionEnum = DirectionEnum.Left;\r\n            switch (this.props.ChannelMap.Direction) {\r\n                case DirectionEnum.Down:\r\n                    newDirection = DirectionEnum.Left;\r\n                    break;\r\n                case DirectionEnum.Left:\r\n                    newDirection = DirectionEnum.Up;\r\n                    break;\r\n                case DirectionEnum.Up:\r\n                    newDirection = DirectionEnum.Right;\r\n                    break;\r\n                case DirectionEnum.Right:\r\n                    newDirection = DirectionEnum.Down;\r\n                    break;\r\n            }\r\n\r\n            this.props.OnChanged({ Direction: newDirection, Channel: this.props.ChannelMap.Channel });\r\n        }\r\n    }\r\n}","import React from \"react\";\r\nimport { Constants } from \"../Constants\";\r\nimport { Props } from \"./Props\";\r\n\r\nexport class Machine extends React.Component<Props> {\r\n    public render() {\r\n        const machineSize = Constants.CellSize / 5 * 3;\r\n        const borderSize = machineSize / 10;\r\n\r\n        const machineStyle: React.CSSProperties = {\r\n            // position: \"absolute\",\r\n            height: machineSize,\r\n            width: machineSize,\r\n            backgroundColor: this.props.Machine.Color,\r\n            borderStyle: \"solid\",\r\n            borderColor: this.props.Machine.BorderColor,\r\n            borderWidth: borderSize,\r\n            borderRadius: \"50%\",\r\n            marginLeft: ((Constants.CellSize - machineSize) / 2 - borderSize),\r\n            marginTop: ((Constants.CellSize - machineSize) / 2 - borderSize)\r\n        };\r\n\r\n        return (\r\n            <div style={machineStyle} />\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport { useDrag } from \"react-dnd\";\r\nimport { MachineStore } from \"../../MachineStore/MachineStore\";\r\nimport { ChannelModel } from \"../../Models/ChannelMapModel\";\r\nimport { MachineInstanceModel } from \"../../Models/MachineInstanceModel\";\r\nimport { Channel } from \"../Channel/Channel\";\r\nimport { Constants } from \"../Constants\";\r\nimport { DragItemTypes } from \"../DragItemTypes\";\r\nimport { Machine } from \"../Machine/Machine\";\r\nimport { Props } from \"./Props\";\r\n\r\nconst MachineInstance: React.FC<Props> = (props) => {\r\n    const [, drag] = useDrag({\r\n        item: { type: DragItemTypes.MachineInstance, id: props.MachineInstance.Id },\r\n        end: (dropResult, monitor) => {\r\n            if (!monitor.didDrop()) {\r\n                props.OnRemoved(props.MachineInstance.Id);\r\n            }\r\n        },\r\n        collect: (monitor) => ({\r\n            isDragging: !!monitor.isDragging(),\r\n        }),\r\n    });\r\n\r\n    const OnChannelChanged = (channel: ChannelModel, index: number) => {\r\n        const machineInstance: MachineInstanceModel = {\r\n            Cell: props.MachineInstance.Cell,\r\n            MachineId: props.MachineInstance.MachineId,\r\n            Channels: props.MachineInstance.Channels.map((c, i) => (i === index) ? channel : c),\r\n            InputChannels: props.MachineInstance.InputChannels,\r\n            Id: props.MachineInstance.Id\r\n        };\r\n\r\n        props.OnChanged(machineInstance);\r\n    };\r\n\r\n    const channels = props.MachineInstance.Channels.map((c, index) => <div key={index}><Channel OnChanged={(channelMap) => OnChannelChanged(channelMap, index)} ChannelMap={c} /></div>);\r\n    const absoluteStyle: React.CSSProperties = {\r\n        position: \"absolute\",\r\n    };\r\n    const machineSize: React.CSSProperties = { height: Constants.CellSize - 2, width: Constants.CellSize - 2, margin: 1 };\r\n\r\n    const machineType = MachineStore.GetStore().GetMachineType(props.MachineInstance.MachineId);\r\n    return (\r\n        <div ref={drag} style={machineSize}>\r\n            <div style={absoluteStyle}>\r\n                <Machine Machine={machineType} />\r\n            </div>\r\n            {channels}\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default MachineInstance;\r\n","export const FormatMessage = (content: string): string => {\r\n    let formattedMessage: string | undefined;\r\n\r\n    if (content === \"\") {\r\n        formattedMessage = \"<Empty>\";\r\n    } else {\r\n        formattedMessage = content;\r\n        let seekPosition = 0;\r\n\r\n        while (true) {\r\n            seekPosition = formattedMessage.indexOf(\"<\", seekPosition);\r\n            if (seekPosition === -1) {\r\n                break;\r\n            }\r\n\r\n            const lastIndex = formattedMessage.indexOf(\">\", seekPosition);\r\n            formattedMessage = formattedMessage.substring(0, seekPosition) + \"?\" + formattedMessage.substring(lastIndex + 1);\r\n        }\r\n    }\r\n    return formattedMessage;\r\n};\r\n","import React from \"react\";\r\nimport { useDrop } from \"react-dnd\";\r\nimport { MachineId } from \"../../MachineStore/MachineId\";\r\nimport { Constants } from \"../Constants\";\r\nimport { DragItemTypes } from \"../DragItemTypes\";\r\nimport MachineInstance from \"../MachineInstance/MachineInstance\";\r\nimport { FormatMessage } from \"../MessageFormatter\";\r\nimport { Props } from \"./Props\";\r\n\r\nconst Cell: React.FC<Props> = (props) => {\r\n\r\n    const [, drop] = useDrop({\r\n        accept: [DragItemTypes.MachineInstance, DragItemTypes.NewMachine],\r\n        drop: (item, monitor) => {\r\n            switch (item.type) {\r\n                case DragItemTypes.MachineInstance:\r\n                    props.OnMovedMachine(monitor.getItem().id, props.location);\r\n                    break;\r\n                case DragItemTypes.NewMachine:\r\n                    const itemProps = monitor.getItem() as { id: MachineId };\r\n                    props.OnNewMachine(itemProps.id, props.location);\r\n                    break;\r\n            }\r\n        },\r\n    });\r\n\r\n    const style: React.CSSProperties = {\r\n        height: Constants.CellSize,\r\n        width: Constants.CellSize,\r\n        border: \"1px solid #999\",\r\n        float: \"left\",\r\n        marginTop: -1,\r\n        marginRight: -1,\r\n        position: \"relative\"\r\n    };\r\n\r\n    let formattedMessage: string | undefined;\r\n    if (props.message !== undefined) {\r\n        formattedMessage = FormatMessage(props.message.Content);\r\n    }\r\n\r\n    return (\r\n        <div style={style} ref={drop}>\r\n            {formattedMessage !== undefined && formattedMessage}\r\n            {props.machineInstance !== undefined ? <MachineInstance MachineInstance={props.machineInstance} OnChanged={props.OnChanged} OnRemoved={props.OnMachineRemoved} /> : \"\"}\r\n\r\n        </div >\r\n    );\r\n};\r\n\r\nexport default Cell;","import React from \"react\";\r\nimport { MachineId } from \"../../MachineStore/MachineId\";\r\nimport { MachineStore } from \"../../MachineStore/MachineStore\";\r\nimport { CellModel } from \"../../Models/CellModel\";\r\nimport { ChannelModel } from \"../../Models/ChannelMapModel\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { GridSetupModel } from \"../../Models/GridSetupModel\";\r\nimport { MachineInstanceModel } from \"../../Models/MachineInstanceModel\";\r\nimport { MessageLocationModel } from \"../../Models/MessageLocationModel\";\r\nimport Cell from \"../Cell/Cell\";\r\nimport { GridProps } from \"./Props\";\r\n\r\nexport class Grid extends React.Component<GridProps> {\r\n    private store: MachineStore;\r\n    constructor(props: GridProps) {\r\n        super(props);\r\n        this.ChannelChanged = this.ChannelChanged.bind(this);\r\n        this.MachineMoved = this.MachineMoved.bind(this);\r\n        this.MachineAdded = this.MachineAdded.bind(this);\r\n        this.MachineRemoved = this.MachineRemoved.bind(this);\r\n\r\n        this.store = MachineStore.GetStore();\r\n    }\r\n\r\n    public render() {\r\n        const rows = [];\r\n        for (let rowIndex = 0; rowIndex < this.props.GridSetup.NumberOfRows; rowIndex++) {\r\n            const row = [];\r\n            for (let columnIndex = 0; columnIndex < this.props.GridSetup.NumberOfColumns; columnIndex++) {\r\n                let foundMachineInstance: MachineInstanceModel | undefined;\r\n                let foundMessage: MessageLocationModel | undefined;\r\n\r\n                for (const machineInstance of this.props.GridSetup.MachineInstances) {\r\n                    if (machineInstance.Cell.Column === columnIndex && machineInstance.Cell.Row === rowIndex) {\r\n                        foundMachineInstance = machineInstance;\r\n                    }\r\n                }\r\n\r\n                for (const message of this.props.Messages) {\r\n                    if (message.Cell!.Column === columnIndex && message.Cell!.Row === rowIndex) {\r\n                        foundMessage = message;\r\n                    }\r\n                }\r\n\r\n                row.push(<Cell\r\n                    key={columnIndex}\r\n                    machineInstance={foundMachineInstance}\r\n                    message={foundMessage}\r\n                    OnChanged={this.ChannelChanged}\r\n                    OnMovedMachine={this.MachineMoved}\r\n                    OnNewMachine={this.MachineAdded}\r\n                    OnMachineRemoved={this.MachineRemoved}\r\n                    location={{ Row: rowIndex, Column: columnIndex }} />);\r\n            }\r\n            rows.push(<div key={rowIndex}>{row}</div>);\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                {rows}\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n    private ChannelChanged(machineInstance: MachineInstanceModel) {\r\n        const newGridSetup: GridSetupModel = {\r\n            NumberOfColumns: this.props.GridSetup.NumberOfColumns,\r\n            NumberOfRows: this.props.GridSetup.NumberOfRows,\r\n            MachineInstances: this.props.GridSetup.MachineInstances.map((mi) =>\r\n                (mi.Cell.Column === machineInstance.Cell.Column && mi.Cell.Row === machineInstance.Cell.Row) ?\r\n                    machineInstance\r\n                    :\r\n                    mi)\r\n        };\r\n\r\n        this.props.OnChanged(newGridSetup);\r\n    }\r\n\r\n    private MachineMoved(id: number, location: CellModel): void {\r\n        const index = this.props.GridSetup.MachineInstances.findIndex((mi) => mi.Id === id);\r\n        this.props.GridSetup.MachineInstances[index].Cell = location;\r\n        this.props.OnChanged(this.props.GridSetup);\r\n    }\r\n    private MachineRemoved(id: number): void {\r\n        this.props.GridSetup.MachineInstances = this.props.GridSetup.MachineInstances.filter((mi) => mi.Id !== id);\r\n        this.props.OnChanged(this.props.GridSetup);\r\n    }\r\n    private MachineAdded(id: MachineId, location: CellModel): void {\r\n        const machine = this.store.GetMachineType(id);\r\n        const channels: ChannelModel[] = [];\r\n        let direction: DirectionEnum.Up = DirectionEnum.Up;\r\n        for (const color of machine.OutputChannels) {\r\n            channels.push({ Channel: color, Direction: direction });\r\n            direction++;\r\n        }\r\n\r\n        const maxId = (this.props.GridSetup.MachineInstances.length === 0) ? 0 : Math.max(...this.props.GridSetup.MachineInstances.map((mi) => mi.Id));\r\n\r\n        const machineInstance: MachineInstanceModel = {\r\n            Cell: location,\r\n            MachineId: id,\r\n            Channels: channels,\r\n            InputChannels: [],\r\n            Id: maxId + 1\r\n        };\r\n        this.props.GridSetup.MachineInstances.push(machineInstance);\r\n        this.props.OnChanged(this.props.GridSetup);\r\n    }\r\n}","import React from \"react\";\r\nimport { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { Props } from \"./Props\";\r\n\r\nexport const EditableMessageDisplay: React.FC<Props> = (props) => {\r\n    const onMessageChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        props.MessageChanged({ Content: event.target.value, Channel: props.Message.Channel });\r\n    };\r\n\r\n    const onChannelChanged = (event: React.ChangeEvent<HTMLSelectElement>) => {\r\n        props.MessageChanged({ Content: props.Message.Content, Channel: event.target.value as ChannelColorEnum });\r\n    };\r\n\r\n    return (\r\n        <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n            {props.AllowedInputColors.length > 1 ? <select value={props.Message.Channel} style={{ backgroundColor: props.Message.Channel }} onChange={onChannelChanged}>\r\n                {props.AllowedInputColors.map((cc, index) => <option value={cc} key={index} style={{ backgroundColor: cc }}></option>)}\r\n            </select> : <div style={{ backgroundColor: props.Message.Channel, width: 10 }} />}\r\n            <input value={props.Message.Content} onChange={onMessageChanged}></input>\r\n        </div>\r\n    );\r\n};","import React from \"react\";\r\nimport { FormatMessage } from \"../MessageFormatter\";\r\nimport { Props } from \"./Props\";\r\nimport { OutputStatus } from \"../../Models/OutputStatusEnum\";\r\n\r\nexport const MessageDisplay: React.FC<Props> = (props) => {\r\n    const style: React.CSSProperties = { display: \"flex\", flexFlow: \"row\", justifyContent: props.Input ? \"flex-start\" : \"flex-end\", marginBottom: 1 };\r\n    const colorCode: React.CSSProperties = { backgroundColor: props.Message.Channel, width: 8, marginLeft: 5, marginRight: 5 };\r\n    const statusStyle: React.CSSProperties = { display: \"flex\", flexFlow: \"row\" };\r\n    switch (props.Status) {\r\n        case OutputStatus.Fullfilled:\r\n            statusStyle.backgroundColor = \"#d9ffb3\";\r\n            break;\r\n        case OutputStatus.NotMatched:\r\n            statusStyle.border = \"solid red\";\r\n            statusStyle.backgroundColor = \"#ffb3b3\";\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n    return (<div style={style}>\r\n        <div style={statusStyle}>\r\n            {props.Input && <div style={colorCode}></div>}\r\n            <label>{FormatMessage(props.Message.Content)}</label>\r\n            {!props.Input && <div style={colorCode}></div>}\r\n        </div>\r\n    </div>);\r\n};","import React from \"react\";\r\nimport { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { OutputStatus } from \"../../Models/OutputStatusEnum\";\r\nimport { EditableMessageDisplay } from \"../EditableMessageDisplay/EditableMessageDisplay\";\r\nimport { MessageDisplay } from \"../MessageDisplay/MessageDisplay\";\r\nimport { Props } from \"./Props\";\r\nimport { State } from \"./State\";\r\n\r\nexport class CustomTest extends React.Component<Props, State> {\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.InputChanged = this.InputChanged.bind(this);\r\n        this.AddInput = this.AddInput.bind(this);\r\n        this.DeleteInput = this.DeleteInput.bind(this);\r\n        this.Play = this.Play.bind(this);\r\n\r\n        this.state = { Inputs: [{ Content: \"\", Channel: ChannelColorEnum.Green }], Outputs: [] };\r\n    }\r\n\r\n    private InputChanged(index: number, message: MessageModel) {\r\n        const inputs = this.state.Inputs;\r\n        inputs[index] = message;\r\n        this.setState({ Inputs: inputs });\r\n    }\r\n\r\n    private AddInput(): void {\r\n        const message: MessageModel = { Channel: ChannelColorEnum.Green, Content: \"\" };\r\n        const inputs = this.state.Inputs;\r\n        inputs.push(message);\r\n        this.setState({ Inputs: inputs });\r\n    }\r\n\r\n    private DeleteInput(index: number): void {\r\n        const inputs = this.state.Inputs;\r\n        inputs.splice(index, 1);\r\n        this.setState({ Inputs: inputs });\r\n    }\r\n\r\n    private Play(): void {\r\n        this.props.PlayTest(this.state.Inputs).then((outputs) => {\r\n            this.setState({ Outputs: outputs });\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        let inputs: JSX.Element[] = [];\r\n        let lineNumber = 0;\r\n        for (let i = 0; i < this.state.Inputs.length; i++) {\r\n            inputs.push(<div key={lineNumber++} >\r\n                <EditableMessageDisplay\r\n                    Message={this.state.Inputs[i]}\r\n                    AllowedInputColors={this.props.AllowedInputColors}\r\n                    MessageChanged={(message: MessageModel) => this.InputChanged(i, message)} />\r\n                {this.state.Inputs.length > 1 && <button onClick={() => this.DeleteInput(i)}>Delete</button>}\r\n            </div>);\r\n            let outputs: JSX.Element[] = [];\r\n            const outputsForThisInput = this.state.Outputs.filter((o) => o.Order === i);\r\n            // eslint-disable-next-line\r\n            outputs = outputsForThisInput.map((o, index) => <MessageDisplay Message={o} Input={false} key={lineNumber++} Status={OutputStatus.NotChecked} />);\r\n            inputs = inputs.concat(outputs);\r\n        }\r\n        return (\r\n            <div>\r\n                <button onClick={this.Play}>Play</button>\r\n                <div>\r\n                    {inputs}\r\n                    {this.props.MultipleInputs &&\r\n                        <button onClick={this.AddInput}>Add input</button>}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport { OutputMessageModel } from \"../../Models/OutputMessageModel\";\r\nimport { OutputStatus } from \"../../Models/OutputStatusEnum\";\r\nimport { MessageDisplay } from \"../MessageDisplay/MessageDisplay\";\r\nimport { Props } from \"./Props\";\r\n\r\nexport const TestDisplay: React.FC<Props> = (props) => {\r\n\r\n    const OnClick = () => {\r\n        props.OnPlay(props.Test);\r\n    };\r\n\r\n    const inputs = props.Test.inputs;\r\n    const outputs = props.Test.outputs;\r\n    let messages: JSX.Element[] = [];\r\n    let index = 0;\r\n    for (let i = 0; i < inputs.length; i++) {\r\n        messages.push(<MessageDisplay Message={inputs[i]} Input={true} key={index++} Status={OutputStatus.NotChecked}/>);\r\n        const expectedOutputs = outputs.filter((o) => o.Order === i);\r\n        let actuals: OutputMessageModel[] | undefined;\r\n        if (props.ActualOutputs !== undefined) {\r\n            actuals = props.ActualOutputs.filter((o) => o.Order === i);\r\n        }\r\n        for (let j = 0; j < expectedOutputs.length; j++) {\r\n            const expected = expectedOutputs[j];\r\n            let valid = OutputStatus.NotChecked;\r\n            if (actuals !== undefined) {\r\n                const indexActual = (actuals.findIndex((o) => o.Channel === expected.Channel && o.Content === expected.Content));\r\n                if (indexActual > -1) {\r\n                    valid = OutputStatus.Fullfilled;\r\n                    actuals.splice(indexActual, 1);\r\n                } else {\r\n                    valid = OutputStatus.NotFullfilled;\r\n                }\r\n            }\r\n            messages = messages.concat(<MessageDisplay Message={expectedOutputs[j]} Input={false} key={index++} Status={valid} />);\r\n        }\r\n\r\n        if (actuals !== undefined) {\r\n            // eslint-disable-next-line\r\n            messages = messages.concat(actuals.map((o) => <MessageDisplay Message={o} Input={false} key={index++} Status={OutputStatus.NotMatched} />));\r\n        }\r\n    }\r\n\r\n    const style: React.CSSProperties = { display: \"flex\", flexDirection: \"row\", padding: 0, borderBottom: \"solid 0.5px\", margin: 5 };\r\n    const verticalStyle: React.CSSProperties = { display: \"flex\", flexDirection: \"column\", flexGrow: 1 };\r\n\r\n    return (\r\n        <div style={style}>\r\n            <button onClick={OnClick}>Play</button>\r\n            <div style={verticalStyle}>\r\n                {messages}\r\n            </div>\r\n        </div>\r\n    );\r\n};","import React from \"react\";\r\nimport { OutputMessageModel } from \"../../Models/OutputMessageModel\";\r\nimport { TestModel } from \"../../Models/TestModel\";\r\nimport { CustomTest } from \"../CustomTest/CustomTest\";\r\nimport { TestDisplay } from \"../TestDisplay/TestDisplay\";\r\nimport { Props } from \"./Props\";\r\nimport { State } from \"./State\";\r\n\r\nexport class LevelDisplay extends React.Component<Props, State> {\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.testStarted = this.testStarted.bind(this);\r\n        this.state = { ActualOutputs: [] };\r\n    }\r\n    private testStarted(test: TestModel, index: number) {\r\n        this.props.PlayTest(test.inputs).then((outputs: OutputMessageModel[]) => {\r\n            const actualOutputs = this.state.ActualOutputs;\r\n            actualOutputs[index] = outputs;\r\n            this.setState({ ActualOutputs: actualOutputs });\r\n        }).catch(() => {\r\n            this.setState({ ActualOutputs: [] });\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        const tests = this.props.Level.Tests.map((t, index) => <TestDisplay Test={t} OnPlay={(test: TestModel) => this.testStarted(test, index)} key={index} ActualOutputs={this.state.ActualOutputs[index]} />);\r\n        const style: React.CSSProperties = { padding: 10 };\r\n\r\n        return (\r\n            <div style={style}>\r\n                <b>{this.props.Level.Name}</b>\r\n                <br />\r\n                <i>{this.props.Level.Description}</i>\r\n                {this.props.Level.Tests.length === 0 && <CustomTest PlayTest={this.props.PlayTest} AllowedInputColors={this.props.AllowedInputs} MultipleInputs={this.props.MultipleInputsAllowed} />}\r\n                {tests}\r\n            </div>\r\n        );\r\n    }\r\n}","import { Props } from \"./Props\";\r\nimport React from \"react\";\r\n\r\nexport const LevelPreview: React.FC<Props> = (props) => {\r\n    const OnClick = () => props.LevelClicked(props.Level);\r\n    return (<div onClick={OnClick}>\r\n        <label title={props.Level.Description}>{props.Level.Name}</label>\r\n    </div>)\r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { LevelModel } from \"../../Models/LevelModel\";\r\n\r\nexport const AppendLength: LevelModel = {\r\n    AllowedMachines: [1, 5, 6, 7, 8, 9, 10, 11, 12],\r\n    Description: \"The machine should append the length of the input string to the string\",\r\n    Name: \"AppendLength\",\r\n    Tests: [\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"four\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"four4\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"aabccd\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"aabccd6\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"1\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"11\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"0\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"This is hard\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"This is hard12\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"This might even be harder\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"This might even be harder25\" }]\r\n        }\r\n    ]\r\n};","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { LevelModel } from \"../../Models/LevelModel\";\r\n\r\nexport const GetLength: LevelModel = {\r\n    AllowedMachines: [1, 5, 6, 7, 8, 9, 10, 11, 12],\r\n    Description: \"The machine should return the length of the input string\",\r\n    Name: \"GetLength\",\r\n    Tests: [\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"four\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"4\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"aabccd\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"6\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"1\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"1\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"0\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"This is hard\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"12\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"This might even be harder\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"25\" }]\r\n        }\r\n    ]\r\n};","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { LevelModel } from \"../../Models/LevelModel\";\r\n\r\nexport const GetType: LevelModel = {\r\n    AllowedMachines: [1, 5, 6, 7, 8, 9, 10, 11, 12],\r\n    Description: \"The machine should exit green is the first character is a number, exit red if it is a letter and exit blue otherwise\",\r\n    Name: \"GetType\",\r\n    Tests: [\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"42\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"42\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"this starts with a letter\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Red, Content: \"this starts with a letter\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \",#@%!\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Blue, Content: \",#@%!\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Blue, Content: \"\" }]\r\n        }\r\n    ]\r\n};","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { LevelModel } from \"../../Models/LevelModel\";\r\n\r\nexport const IsEmpty: LevelModel = {\r\n    AllowedMachines: [1, 5, 6, 7, 8, 9, 10],\r\n    Description: \"The machine should exit green if the message is empty, otherwise exit red\",\r\n    Name: \"IsEmpty\",\r\n    Tests: [\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"abc\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Red, Content: \"abc\" }]\r\n        }\r\n    ]\r\n};","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { LevelModel } from \"../../Models/LevelModel\";\r\n\r\nexport const KeepNumbers: LevelModel = {\r\n    AllowedMachines: [1, 5, 6, 7, 8, 9, 10, 11, 12],\r\n    Description: \"The machine should keep all numbers in the input string, and remove all other characters\",\r\n    Name: \"KeepNumbers\",\r\n    Tests: [\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"42\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"42\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"fortytwo\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"1 and 1 is\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Blue, Content: \"11\" }]\r\n        }\r\n    ]\r\n};","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { LevelModel } from \"../../Models/LevelModel\";\r\n\r\nexport const PlusOne: LevelModel = {\r\n    AllowedMachines: [1, 5, 6, 7, 8, 9, 10, 11, 12],\r\n    Description: \"The machine should increase the input number by 1. Input only contains digits\",\r\n    Name: \"PlusOne\",\r\n    Tests: [\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"4\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"5\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"0\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"1\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"42\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"43\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"9\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Blue, Content: \"10\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"39\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Blue, Content: \"40\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"23999999\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Blue, Content: \"24000000\"}]\r\n        }\r\n    ]\r\n};","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { LevelModel } from \"../../Models/LevelModel\";\r\n\r\nexport const RemoveAllRepeats: LevelModel = {\r\n    AllowedMachines: [1, 5, 6, 7, 8, 9, 10],\r\n    Description: \"The machine should remove all repeating characters from the input string\",\r\n    Name: \"RemoveAllRepeats\",\r\n    Tests: [\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"aabc\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abc\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"aaaabccc\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abc\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"a\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"a\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"hhhhhhhhhiiiii wwwworllllldddddddd\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"hi world\" }]\r\n        }\r\n    ]\r\n};","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { LevelModel } from \"../../Models/LevelModel\";\r\n\r\nexport const RotateBackwards: LevelModel = {\r\n    AllowedMachines: [1, 5, 6, 7, 8, 9, 10, 11, 12],\r\n    Description: \"The machine should put the last character in front of the string\",\r\n    Name: \"RotateBackwards\",\r\n    Tests: [\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"abc\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"cab\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"otater\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"rotate\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"a\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"a\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"ello world!H\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"ello world!H\" }]\r\n        }\r\n    ]\r\n};","import { LevelModel } from \"../Models/LevelModel\";\r\nimport { AppendLength } from \"./Levels/AppendLength\";\r\nimport { GetLength } from \"./Levels/GetLength\";\r\nimport { GetType } from \"./Levels/GetType\";\r\nimport { IsEmpty } from \"./Levels/IsEmpty\";\r\nimport { KeepNumbers } from \"./Levels/KeepNumbers\";\r\nimport { PlusOne } from \"./Levels/PlusOne\";\r\nimport { RemoveAllRepeats } from \"./Levels/RemoveAllRepeats\";\r\nimport { RotateBackwards } from \"./Levels/RotateBackwards\";\r\nimport { Sandbox } from \"./Levels/Sandbox\";\r\n\r\nexport class LevelStore {\r\n    private static levelStore: LevelStore;\r\n    private levels: LevelModel[];\r\n\r\n    private constructor() {\r\n        this.levels = [];\r\n        this.init();\r\n    }\r\n\r\n    public static GetStore(): LevelStore {\r\n        if (LevelStore.levelStore === undefined) {\r\n            LevelStore.levelStore = new LevelStore();\r\n        }\r\n\r\n        return LevelStore.levelStore;\r\n    }\r\n\r\n    private init(): void {\r\n        this.levels.push(Sandbox);\r\n        this.levels.push(IsEmpty);\r\n        this.levels.push(RemoveAllRepeats);\r\n        this.levels.push(GetType);\r\n        this.levels.push(KeepNumbers);\r\n        this.levels.push(GetLength);\r\n        this.levels.push(AppendLength);\r\n        this.levels.push(RotateBackwards);\r\n        this.levels.push(PlusOne);\r\n    }\r\n\r\n    public GetAllLevels(): LevelModel[] {\r\n        return this.levels;\r\n    }\r\n}","import { Props } from \"./Props\";\r\nimport React from \"react\";\r\nimport { LevelPreview } from \"../LevelPreview/LevelPreview\";\r\nimport { LevelStore } from \"../../Levels/LevelStore\";\r\n\r\nconst LevelList: React.FC<Props> = (props) => {\r\n    const levelStore = LevelStore.GetStore();\r\n\r\n    const levels = levelStore.GetAllLevels().map((l, index) => <LevelPreview Level={l} LevelClicked={props.OnLevelClicked} key={index}/>)\r\n\r\n    return (\r\n        <div>\r\n            <b>Challenges:</b>\r\n            {levels}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LevelList;\r\n","import React from \"react\";\r\nimport { useDrag } from \"react-dnd\";\r\nimport { ChannelModel } from \"../../Models/ChannelMapModel\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { Channel } from \"../Channel/Channel\";\r\nimport { Constants } from \"../Constants\";\r\nimport { DragItemTypes } from \"../DragItemTypes\";\r\nimport { Machine } from \"../Machine/Machine\";\r\nimport { Props } from \"./Props\";\r\n\r\nconst StoredMachine: React.FC<Props> = (props) => {\r\n    const [, drag] = useDrag({\r\n        item: { type: DragItemTypes.NewMachine, id: props.machine.Id },\r\n        collect: (monitor) => ({\r\n            isDragging: !!monitor.isDragging(),\r\n        }),\r\n    });\r\n\r\n    const machineType = props.machine.GetType();\r\n    const channels: ChannelModel[] = [];\r\n    let direction: DirectionEnum.Up = DirectionEnum.Up;\r\n    for (const color of machineType.OutputChannels) {\r\n        channels.push({ Channel: color, Direction: direction });\r\n        direction++;\r\n    }\r\n\r\n    const channelComponents = channels.map((c, index) => <Channel key={index} ChannelMap={c} />);\r\n    const absoluteStyle: React.CSSProperties = {\r\n        position: \"absolute\",\r\n\r\n        left: Constants.CellSize / 3\r\n    };\r\n    const labelStyle: React.CSSProperties = {\r\n        position: \"absolute\"\r\n    };\r\n    return (\r\n        <div ref={drag} title={machineType.Description}>\r\n\r\n            <div style={absoluteStyle}>\r\n                <Machine Machine={props.machine.GetType()} />\r\n            </div>\r\n            <div style={absoluteStyle}>\r\n                {channelComponents}\r\n            </div>\r\n            <label style={labelStyle}>{machineType.Name}</label>\r\n        </div>);\r\n};\r\n\r\nexport default StoredMachine;","import React from \"react\";\r\nimport { MachineStore as Store } from \"../../MachineStore/MachineStore\";\r\nimport { Constants } from \"../Constants\";\r\nimport StoredMachine from \"../StoredMachine/StoredMachine\";\r\nimport { Props } from \"./Props\";\r\n\r\nconst MachineStore: React.FC<Props> = (props) => {\r\n\r\n    const machines = Store.GetStore().GetAllMachine();\r\n    const relativeStyle: React.CSSProperties = {\r\n        position: \"relative\",\r\n        height: Constants.CellSize,\r\n        width: Constants.CellSize\r\n    };\r\n\r\n    const filteredMachines = machines.filter((m) => !props.disallowedMachines.some((mi) => mi.Id === m.Id.Id && mi.Type === m.Id.Type));\r\n    const storedMachines = filteredMachines.map((m, index) => <div style={relativeStyle} key={index}><StoredMachine machine={m} /></div>);\r\n\r\n    return (\r\n        <div style={{ marginLeft: 50 }}>\r\n            {storedMachines}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MachineStore;","import React from \"react\";\r\nimport { Props } from \"./Props\";\r\nimport { State } from \"./State\";\r\n\r\nexport class MenuItem extends React.Component<Props, State> {\r\n    /**\r\n     *\r\n     */\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.showItem = this.showItem.bind(this);\r\n        this.state = { Showing: false };\r\n    }\r\n\r\n    private showItem() {\r\n        this.setState({ Showing: !this.state.Showing });\r\n    }\r\n\r\n    public render() {\r\n        const style: React.CSSProperties = { borderLeft: \"solid 0.5px\", marginLeft: 10, padding: 10 };\r\n        return (\r\n            <div style={{ marginLeft: 10 }}>\r\n                <button onClick={this.showItem}>{this.state.Showing ? \"Hide \" + this.props.ItemName : \"Show \" + this.props.ItemName}</button>\r\n                {this.state.Showing &&\r\n                    <div style={style}>\r\n                        {this.props.children}\r\n                    </div>}\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport { GridSetupModel } from \"../../../Models/GridSetupModel\";\r\nimport NumberInput from \"../../NumberInput/NumberInput\";\r\nimport { Props } from \"./Props\";\r\n\r\nexport const GridSizeSetting: React.FC<Props> = (props) => {\r\n    const columnsChanged = (value: number) => {\r\n        const newGridSetup: GridSetupModel = {\r\n            NumberOfColumns: value,\r\n            NumberOfRows: props.Setup.NumberOfRows,\r\n            MachineInstances: props.Setup.MachineInstances\r\n        };\r\n\r\n        props.OnSetupChanged(newGridSetup);\r\n    };\r\n\r\n    const rowsChanged = (value: number) => {\r\n        const newGridSetup: GridSetupModel = {\r\n            NumberOfColumns: props.Setup.NumberOfColumns,\r\n            NumberOfRows: value,\r\n            MachineInstances: props.Setup.MachineInstances\r\n        };\r\n\r\n        props.OnSetupChanged(newGridSetup);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <label>Rows:</label>\r\n            <NumberInput value={props.Setup.NumberOfRows} valueChanged={rowsChanged} />\r\n            <label>Columns:</label>\r\n            <NumberInput value={props.Setup.NumberOfColumns} valueChanged={columnsChanged} />\r\n        </div>\r\n    );\r\n};","import React from \"react\";\r\nimport { GridSetupModel } from \"../../../Models/GridSetupModel\";\r\nimport { Props } from \"./Props\";\r\nimport { State } from \"./State\";\r\n\r\nexport class SaveMenu extends React.Component<Props, State> {\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.ShowSetupString = this.ShowSetupString.bind(this);\r\n        this.LoadSetup = this.LoadSetup.bind(this);\r\n        this.SetupStringChanged = this.SetupStringChanged.bind(this);\r\n\r\n        this.state = { SetupString: \"\", NewSetupString: \"\" };\r\n    }\r\n    public render() {\r\n        const verticalFlex: React.CSSProperties = { display: \"flex\", flexFlow: \"column wrap\" };\r\n        const margin: React.CSSProperties = { display: \"flex\", flexDirection: \"column\" };\r\n        return (\r\n            <div style={verticalFlex}>\r\n                <div style={margin}>\r\n                    <button title={\"Show setup string, copy it so you can later restore your setup\"} onClick={this.ShowSetupString}>Show setup string</button>\r\n                    {this.props.ShowSetup && <input value={this.state.SetupString} />}\r\n                </div>\r\n                <div style={margin}>\r\n                    <label>Load Setup</label>\r\n                    <input value={this.state.NewSetupString} onChange={this.SetupStringChanged} />\r\n                    {this.state.NewSetupString !== \"\" && <button title={\"Load Setup, after having pasted a setup above, click to load this setup\"} onClick={this.LoadSetup}>Load setup</button>}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private SetupStringChanged(event: React.ChangeEvent<HTMLInputElement>): void {\r\n        this.setState({ NewSetupString: event.target.value });\r\n    }\r\n\r\n    private ShowSetupString(): void {\r\n        this.setState({ SetupString: JSON.stringify(this.props.Setup) });\r\n        this.props.OnShowingSetup();\r\n    }\r\n\r\n    private LoadSetup(): void {\r\n        const setupModel = JSON.parse(this.state.NewSetupString) as GridSetupModel;\r\n        if (setupModel !== undefined) {\r\n            this.props.OnSetupChanged(setupModel);\r\n            this.setState({ NewSetupString: \"\" });\r\n        }\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { GridSizeSetting } from \"./GridSizeSetting/GridSizeSetting\";\r\nimport { Props } from \"./Props\";\r\nimport { SaveMenu } from \"./SaveMenu/SaveMenu\";\r\n\r\nexport class Settings extends React.Component<Props> {\r\n\r\n    public render() {\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <SaveMenu Setup={this.props.Setup} OnSetupChanged={this.props.OnSetupChanged} OnShowingSetup={this.props.OnShowingSetup} ShowSetup={this.props.ShowSetup} />\r\n                    <GridSizeSetting Setup={this.props.Setup} OnSetupChanged={this.props.OnSetupChanged} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport { Computer } from \"../../Computing/Computer\";\r\nimport { LoadGridSetup } from \"../../Computing/Setup\";\r\nimport { Sandbox } from \"../../Levels/Levels/Sandbox\";\r\nimport { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { GridSetupModel } from \"../../Models/GridSetupModel\";\r\nimport { LevelModel } from \"../../Models/LevelModel\";\r\nimport { MessageLocationModel } from \"../../Models/MessageLocationModel\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { OutputMessageModel } from \"../../Models/OutputMessageModel\";\r\nimport { Constants } from \"../Constants\";\r\nimport { Dashboard } from \"../Dashboard/Dashboard\";\r\nimport { Grid } from \"../Grid/Grid\";\r\nimport { LevelDisplay } from \"../LevelDisplay/LevelDisplay\";\r\nimport LevelList from \"../LevelList/LevelList\";\r\nimport MachineStore from \"../MachineStore/MachineStore\";\r\nimport { MenuItem } from \"../MenuItem/MenuItem\";\r\nimport { Settings } from \"../Settings/Settings\";\r\nimport { State } from \"./State\";\r\n\r\nexport class Game extends React.Component<{}, State> {\r\n    private computer: Computer;\r\n    private inputs: MessageModel[] = [];\r\n    private outputs: OutputMessageModel[] = [];\r\n    private cancelComputation: (() => void) | undefined = undefined;\r\n    constructor(props: object) {\r\n        super(props);\r\n        this.inputChanged = this.inputChanged.bind(this);\r\n        this.startComputation = this.startComputation.bind(this);\r\n        this.CalculateNextMessages = this.CalculateNextMessages.bind(this);\r\n        this.GridSetupChanged = this.GridSetupChanged.bind(this);\r\n        this.LoadSetup = this.LoadSetup.bind(this);\r\n        this.StepTimeChanged = this.StepTimeChanged.bind(this);\r\n        this.OnShowingSetup = this.OnShowingSetup.bind(this);\r\n        this.stopComputation = this.stopComputation.bind(this);\r\n        this.handleKeyPress = this.handleKeyPress.bind(this);\r\n        this.LevelSelected = this.LevelSelected.bind(this);\r\n        this.PlayTest = this.PlayTest.bind(this);\r\n\r\n        const gridSetup = LoadGridSetup();\r\n        this.computer = new Computer(gridSetup);\r\n        this.state = {\r\n            Computing: false,\r\n            Messages: [],\r\n            GridSetup: gridSetup,\r\n            CustomInput: \"\",\r\n            StepTime: 6,\r\n            ShowingSetup: false,\r\n            SelectedLevel: Sandbox\r\n        };\r\n    }\r\n\r\n    private inputChanged(e: React.ChangeEvent<HTMLInputElement>): void {\r\n        let text = e.target.value;\r\n        text = text.replace(\"*\", \"\");\r\n        text = text.replace(\"<\", \"\");\r\n        text = text.replace(\">\", \"\");\r\n\r\n        this.setState({ CustomInput: text });\r\n    }\r\n    private startComputation(): Promise<OutputMessageModel[]> {\r\n        this.stopComputation();\r\n        this.outputs = [];\r\n        return this.handleNextInput(0);\r\n    }\r\n\r\n    private handleNextInput(inputNumber: number): Promise<OutputMessageModel[]> {\r\n\r\n        if (this.inputs.length <= inputNumber) {\r\n            this.setState({ Computing: false });\r\n            return new Promise<OutputMessageModel[]>((resolve) => {\r\n                resolve(this.outputs);\r\n                this.cancelComputation = undefined;\r\n            });\r\n\r\n        } else {\r\n            const messageModels: MessageLocationModel[] = this.state.Messages;\r\n\r\n            const nextMessages = messageModels.concat(this.computer.StartComputation(this.inputs[inputNumber]));\r\n\r\n            this.setState({ Computing: true, Messages: nextMessages });\r\n            return this.SetDelay(this.CalculateNextMessages, inputNumber);\r\n        }\r\n    }\r\n\r\n    private SetDelay<T>(callback: (args: any) => Promise<T>, args: any): Promise<T> {\r\n        return new Promise<T>((resolve, reject) => {\r\n            const clearHandle = window.setTimeout(() => callback(args).then(resolve).catch(reject), this.state.StepTime * 100);\r\n            this.cancelComputation = () => {\r\n                clearTimeout(clearHandle);\r\n                reject(\"Cancelled\");\r\n            };\r\n        });\r\n    }\r\n\r\n    private stopComputation(): void {\r\n        if (this.cancelComputation) {\r\n            this.cancelComputation();\r\n            this.cancelComputation = undefined;\r\n        }\r\n        this.setState({ Messages: [], Computing: false });\r\n    }\r\n\r\n    private CalculateNextMessages(inputNumber: number): Promise<OutputMessageModel[]> {\r\n\r\n        const messages = this.computer.GetNextMessages(this.state.Messages);\r\n\r\n        const doneMessages = messages.filter((mm) => mm.Cell === undefined);\r\n        const outputs: OutputMessageModel[] = [];\r\n        for (const doneMessage of doneMessages) {\r\n            switch (doneMessage.Direction) {\r\n                case DirectionEnum.Up:\r\n                    outputs.push({ Content: doneMessage.Content, Channel: ChannelColorEnum.Green, Order: inputNumber });\r\n                    break;\r\n                case DirectionEnum.Down:\r\n                    outputs.push({ Content: doneMessage.Content, Channel: ChannelColorEnum.Red, Order: inputNumber });\r\n                    break;\r\n                case DirectionEnum.Right:\r\n                    outputs.push({ Content: doneMessage.Content, Channel: ChannelColorEnum.Blue, Order: inputNumber });\r\n                    break;\r\n                case DirectionEnum.Left:\r\n                    outputs.push({ Content: doneMessage.Content, Channel: ChannelColorEnum.Yellow, Order: inputNumber });\r\n                    break;\r\n            }\r\n        }\r\n        if (doneMessages.length > 0) {\r\n            const newOutputs = this.outputs.concat(outputs);\r\n            this.outputs = newOutputs;\r\n        }\r\n\r\n        const nextMessages = messages.filter((mm) => mm.Cell !== undefined);\r\n        this.setState({ Messages: nextMessages });\r\n        if (nextMessages.length > 0) {\r\n            return this.SetDelay(this.CalculateNextMessages, inputNumber);\r\n        } else {\r\n            return this.handleNextInput(inputNumber + 1);\r\n        }\r\n    }\r\n\r\n    private LoadSetup(event: React.ChangeEvent<HTMLInputElement>): void {\r\n        const newValue = JSON.parse(event.target.value);\r\n        const newSetup = newValue as GridSetupModel;\r\n        if (newSetup !== undefined) {\r\n            this.GridSetupChanged(newSetup);\r\n        }\r\n    }\r\n\r\n    public componentDidMount(): void {\r\n        document.addEventListener(\"keyup\", (event) => this.handleKeyPress(event), false);\r\n    }\r\n\r\n    public componentWillUnmount() {\r\n        document.removeEventListener(\"keyup\", (event) => this.handleKeyPress(event), false);\r\n    }\r\n\r\n    public render() {\r\n        const startMachines = this.computer.GetStartMachines();\r\n\r\n        const disallowedStartMachines = startMachines.map((m) => m.MachineId);\r\n        disallowedStartMachines.push({ Id: 1, Type: \"Default\" });\r\n        // const allowedInputColors = [ChannelColorEnum.Green, ChannelColorEnum.Red, ChannelColorEnum.Blue];\r\n        const allowedInputColors = [ChannelColorEnum.Green];\r\n\r\n        const height = this.state.GridSetup.NumberOfRows * (Constants.CellSize + 1);\r\n        const width = this.state.GridSetup.NumberOfColumns * (Constants.CellSize + 1);\r\n        const gridSizeStyle: React.CSSProperties = { display: \"flex\", height, width, borderStyle: \"solid\", borderColor: \"green blue red yellow\", borderWidth: 5 };\r\n\r\n        return (\r\n            <div style={{ display: \"flex\", flexFlow: \"column wrap\" }}>\r\n                <div>\r\n                    <h2 style={{ textAlign: \"center\" }}>LogicBoxes</h2>\r\n                </div>\r\n                <div style={{ display: \"flex\", flexFlow: \"row wrap\" }}>\r\n                    <div style={{ flex: \"1 1 200px\" }}>\r\n                        <MenuItem ItemName=\"Settings\">\r\n                            <Settings\r\n                                Setup={this.state.GridSetup}\r\n                                OnSetupChanged={this.GridSetupChanged}\r\n                                ShowSetup={this.state.ShowingSetup}\r\n                                OnShowingSetup={this.OnShowingSetup} />\r\n                        </MenuItem>\r\n                        <MenuItem ItemName=\"Challenges\">\r\n                            <LevelList OnLevelClicked={this.LevelSelected} />\r\n                        </MenuItem>\r\n                        <LevelDisplay Level={this.state.SelectedLevel} PlayTest={this.PlayTest} MultipleInputsAllowed={false} AllowedInputs={allowedInputColors} />\r\n\r\n                    </div>\r\n                    <div style={{display: \"flex\", flex: \"4 1 400px\", flexFlow: \"column\", alignItems: \"center\"}}>\r\n                        <div style={gridSizeStyle}>\r\n                            <Grid\r\n                                GridSetup={this.state.GridSetup}\r\n                                Computing={this.state.Computing}\r\n                                Messages={this.state.Messages}\r\n                                OnChanged={this.GridSetupChanged} />\r\n                        </div>\r\n                        <div>\r\n                            <Dashboard StepTime={this.state.StepTime} OnStepTimeChanged={this.StepTimeChanged} />\r\n                        </div>\r\n                    </div>\r\n                    <div style={{ flex: \"1 1 200px\" }}>\r\n                        <MachineStore disallowedMachines={disallowedStartMachines} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private PlayTest(input: MessageModel[]): Promise<OutputMessageModel[]> {\r\n        this.inputs = input;\r\n        return this.startComputation();\r\n    }\r\n\r\n    private GridSetupChanged(newGridSetup: GridSetupModel): void {\r\n        this.computer.NewSetup(newGridSetup);\r\n        this.setState({ GridSetup: newGridSetup, ShowingSetup: false });\r\n    }\r\n\r\n    private StepTimeChanged(newStepTime: number): void {\r\n        this.setState({ StepTime: newStepTime });\r\n    }\r\n\r\n    private OnShowingSetup() {\r\n        this.setState({ ShowingSetup: true });\r\n    }\r\n\r\n    private LevelSelected(level: LevelModel) {\r\n        this.setState({ SelectedLevel: level });\r\n    }\r\n\r\n    private handleKeyPress(event: KeyboardEvent): void {\r\n        switch (event.key) {\r\n            case \"Enter\":\r\n                this.startComputation();\r\n                break;\r\n            case \" \":\r\n                this.stopComputation();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n}","import React from \"react\";\r\nimport { DndProvider } from \"react-dnd\";\r\nimport HTML5Backend from \"react-dnd-html5-backend\";\r\nimport { Game } from \"./Components/Game/Game\";\r\n\r\nconst App: React.FC = () => {\r\n\r\n  return (\r\n    <DndProvider backend={HTML5Backend}>\r\n      <Game />\r\n    </DndProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}