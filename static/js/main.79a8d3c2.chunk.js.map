{"version":3,"sources":["Models/ChannelColorsEnum.ts","Computing/MessageCleaner.ts","MachineStore/DefaultMachines/AddStarMachine.ts","Models/DirectionEnum.ts","MachineStore/DefaultMachines/AddZeroMachine.ts","MachineStore/DefaultMachines/CompareMachine.ts","MachineStore/DefaultMachines/CopyMachine.ts","MachineStore/DefaultMachines/DeleteMachine.ts","MachineStore/DefaultMachines/GreenStartMachine.ts","MachineStore/DefaultMachines/IncrementMachine.ts","MachineStore/DefaultMachines/MoveMachine.ts","MachineStore/DefaultMachines/RedStartMachine.ts","MachineStore/DefaultMachines/RotateMachine.ts","MachineStore/MachineStore.ts","Computing/Computer.ts","Computing/Setup.ts","Levels/Levels/Sandbox.ts","Components/NumberInput/NumberInput.tsx","Components/Dashboard/Dashboard.tsx","Components/Constants.ts","Components/DragItemTypes.ts","Models/OutputStatusEnum.ts","Components/MessageFormatter.ts","Components/Grid/Cell/MachineInstance/Channel/Channel.tsx","Components/Grid/Cell/MachineInstance/Machine/Machine.tsx","Components/Grid/Cell/MachineInstance/MachineInstance.tsx","Components/Grid/Cell/Cell.tsx","Components/Grid/Grid.tsx","Components/LevelDisplay/TestDisplay/MessageDisplay/MessageDisplay.tsx","Components/LevelDisplay/CustomTest/EditableMessageDisplay/EditableMessageDisplay.tsx","Components/LevelDisplay/CustomTest/CustomTest.tsx","Components/LevelDisplay/TestDisplay/TestDisplay.tsx","Components/LevelDisplay/LevelDisplay.tsx","Components/LevelList/LevelPreview/LevelPreview.tsx","Levels/Levels/AppendLength.ts","Levels/Levels/GetLength.ts","Levels/Levels/GetType.ts","Levels/Levels/IsEmpty.ts","Levels/Levels/KeepNumbers.ts","Levels/Levels/PlusOne.ts","Levels/Levels/RemoveAllRepeats.ts","Levels/Levels/RotateBackwards.ts","Levels/LevelStore.ts","Components/LevelList/LevelList.tsx","Components/MachineCollection/StoredMachine/MachineDisplay/MachineDisplay.tsx","Components/MachineCollection/StoredMachine/StoredMachine.tsx","Components/MachineCollection/MachineCollection.tsx","Components/SaveAsMachine/SaveAsMachine.tsx","Components/MachineMenu/MachineMenu.tsx","Components/MenuItem/MenuItem.tsx","Components/Settings/GridSizeSetting/GridSizeSetting.tsx","Components/Settings/SaveMenu/SaveMenu.tsx","Components/Settings/Settings.tsx","Components/Game/Game.tsx","App.tsx","index.tsx"],"names":["ChannelColorEnum","RestoreMessage","message","starNumber","seekString","seekLength","length","seekPosition","index","indexOf","indexStar","substring","DirectionEnum","AddStarMachine","actor","Act","returnValue","content","Content","push","Channel","Green","Id","Type","this","BorderColor","Color","Name","InputChannels","OutputChannels","Description","AddZeroMachine","CompareMachine","channel","Red","position","CopyMachine","DeleteMachine","GreenStartMachine","IncrementMachine","newMessage","char","String","fromCharCode","charCodeAt","slice","MoveMachine","RedStartMachine","RotateMachine","MachineStore","machines","customId","init","id","machine","find","m","undefined","Error","machineModel","model","JSON","parse","stringify","GetType","MachineType","GetActor","CreateCustomActor","Setup","existingMachine","findIndex","splice","savedMachines","filter","AddOrUpdateCustomMachine","FindMachine","setup","starIndex","usedStars","lastIndex","numberPart","parseInt","some","u","returnMessage","CleanMessage","saveMessage","cleanedMessage","Computer","RunSetup","map","mm","machineStore","GridSetup","store","GetStore","bind","GetMachines","MachineInstances","mi","MachineId","startMachines","machineInstance","color","Blue","Yellow","exitCells","cells","starts","GetStartMachines","concat","s","Cell","Direction","Channels","i","cell","Column","Row","cellModel","Move","c","input","messageLocations","GetStartMachine","direction","messageLocation","messages","newMessages","messageCell","nextContents","nextContent","channelMap","cm","doneMessages","outputs","doneMessage","Up","Down","Right","Left","startTime","Date","getTime","outputMessages","StartComputation","iteration","GetNextMessages","nextMessages","NumberOfRows","NumberOfColumns","LoadDefaultGameData","LoadDefaultData","ActiveSetup","SavedMachines","Sandbox","AllowedMachines","Tests","NumberInput","props","style","marginLeft","marginRight","onClick","valueChanged","value","Dashboard","display","flexDirection","title","OnShowAnimationsChanged","ShowAnimations","StepTime","OnStepTimeChanged","Constants","CellSize","OutputStatus","DragItemTypes","FormatMessage","formattedMessage","onClicked","cellSize","channelStyle","height","width","marginTop","backgroundColor","ChannelMap","borderStyle","borderWidth","border","pointerEvents","rotate","rotation","transform","event","OnChanged","newDirection","React","Component","Machine","machineSize","borderSize","machineStyle","IsDefault","borderColor","borderRadius","justifyContent","alignItems","MachineInstance","useDrag","item","type","end","dropResult","monitor","didDrop","OnRemoved","collect","isDragging","drag","channels","key","OnChannelChanged","margin","machineType","GetMachineType","ref","useDrop","accept","drop","OnMovedMachine","getItem","location","itemProps","OnNewMachine","float","exitCell","borderRight","borderBottom","borderLeft","borderTop","marginBottom","OnMachineRemoved","Grid","ChannelChanged","MachineMoved","MachineAdded","MachineRemoved","rows","rowIndex","row","columnIndex","foundMachineInstance","foundMessage","foundExit","Messages","ExitCells","exit","newGridSetup","Math","max","MessageDisplay","flexFlow","Input","colorCode","Message","statusStyle","Status","Fullfilled","NotMatched","EditableMessageDisplay","AllowedInputColors","onChange","MessageChanged","target","cc","CustomTest","InputChanged","AddInput","DeleteInput","Play","state","Inputs","Outputs","inputs","setState","PlayTest","then","catch","lineNumber","o","Order","NotChecked","MultipleInputs","TestDisplay","Test","expectedOutputs","actuals","ActualOutputs","j","expected","valid","indexActual","NotFullfilled","padding","OnPlay","flexGrow","LevelDisplay","testStarted","test","actualOutputs","tests","Level","t","AllowedInputs","MultipleInputsAllowed","LevelPreview","LevelClicked","AppendLength","GetLength","IsEmpty","KeepNumbers","PlusOne","RemoveAllRepeats","RotateBackwards","LevelStore","levels","levelStore","LevelList","GetAllLevels","l","OnLevelClicked","MachineDisplay","channelComponents","absoluteStyle","StoredMachine","useState","showMenu","changeShow","isDefault","OnEdit","MachineCollection","storedMachines","allowedMachines","onSwitch","OnDelete","SaveAsMachine","onSaveClicked","nameChanged","descriptionChanged","colorChanged","borderColorChanged","confirm","Saving","getMachineType","SaveCustomMachine","colors","ec","MachineMenu","CurrentlyEditingMachine","machineTypeOriginal","SaveNewCustomMachine","MenuItem","showItem","Showing","ItemName","children","GridSizeSetting","OnSetupChanged","SaveMenu","ShowSetupString","LoadSetup","SetupStringChanged","SetupString","NewSetupString","ShowSetup","readOnly","OnShowingSetup","setupModel","OnDataChanged","Settings","Game","computer","gameData","cancelComputation","inputChanged","startComputation","CalculateNextMessages","GridSetupChanged","SwitchSetup","NewGameDataLoaded","StepTimeChanged","stopComputation","handleKeyPress","LevelSelected","gridSetup","Computing","CustomInput","ShowingSetup","SelectedLevel","Machines","GetAllMachine","CurrentlyEditedMachine","e","text","replace","Promise","resolve","reject","handleNextInput","inputNumber","SetDelay","om","callback","args","clearHandle","window","setTimeout","clearTimeout","document","addEventListener","removeEventListener","NewSetup","exits","CalculateExits","newData","ReloadCustomMachines","modelWithId","newSetup","sm","setupString","newStepTime","level","disallowedStartMachines","mId","allowedInputColors","textAlign","flex","show","flexWrap","App","backend","HTML5Backend","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.79a8d3c2.chunk.js","sourcesContent":["export enum ChannelColorEnum {\r\n    Green = \"green\",\r\n    Red = \"red\",\r\n    Blue = \"blue\",\r\n    Yellow = \"yellow\",\r\n}","export const CleanMessage: (message: string) => [string, number] = (message: string) => {\r\n    let starIndex = message.indexOf(\"*\");\r\n    if (starIndex !== -1) {\r\n        const usedStars: number[] = [];\r\n        let seekPosition = 0;\r\n        while (true) {\r\n            seekPosition = message.indexOf(\"<\", seekPosition);\r\n            if (seekPosition === -1) {\r\n                break;\r\n            }\r\n\r\n            const lastIndex = message.indexOf(\">\", seekPosition);\r\n            const numberPart = message.substring(seekPosition + 1, lastIndex);\r\n            usedStars.push(parseInt(numberPart, 10));\r\n            seekPosition = lastIndex;\r\n        }\r\n\r\n        let starNumber = 0;\r\n\r\n        // eslint-disable-next-line\r\n        while (usedStars.some((u) => (u === starNumber))) {\r\n            starNumber++;\r\n        }\r\n\r\n        let returnMessage = message;\r\n        do {\r\n            returnMessage = returnMessage.substring(0, starIndex) + \"<\" + starNumber + \">\" + returnMessage.substring(starIndex + 1);\r\n            starIndex = returnMessage.indexOf(\"*\");\r\n        } while (starIndex !== -1);\r\n\r\n        return [returnMessage, starNumber];\r\n    }\r\n\r\n    return [message, -1];\r\n};\r\n\r\nexport const RestoreMessage = (message: string, starNumber: number) => {\r\n    if (starNumber !== -1) {\r\n        const seekString = \"<\" + starNumber + \">\";\r\n        const seekLength = seekString.length;\r\n        // message = message.replace(seekString, \"*\");\r\n        let seekPosition = 0;\r\n        let index = message.indexOf(seekString);\r\n        let indexStar = message.indexOf(\"*\");\r\n\r\n        while (index !== -1 || indexStar !== -1) {\r\n            if (index !== -1 && (indexStar === -1 || index < indexStar)) {\r\n                message = message.substring(0, index) + \"*\" + message.substring(index + seekLength);\r\n                seekPosition = index + 1;\r\n            } else {\r\n                message = message.substring(0, indexStar) + seekString + message.substring(indexStar + 1);\r\n                seekPosition = indexStar + seekLength;\r\n            }\r\n\r\n            index = message.indexOf(seekString, seekPosition);\r\n            indexStar = message.indexOf(\"*\", seekPosition);\r\n        }\r\n    }\r\n    return message;\r\n};","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { MachineId } from \"../MachineId\";\r\n\r\nexport class AddStarMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            const content = \"*\" + message.Content;\r\n\r\n            returnValue.push({ Content: content, Channel: ChannelColorEnum.Green });\r\n            return returnValue;\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            BorderColor: \"blue\",\r\n            Color: \"grey\",\r\n            Name: \"Add *\",\r\n            InputChannels: [],\r\n            OutputChannels: [ChannelColorEnum.Green],\r\n            Description: \"Puts a star in front of the string. There is guaranteed not to be a star in the input\"\r\n        };\r\n    }\r\n    public Id: MachineId = {\r\n        Id: 10,\r\n        Type: \"Default\"\r\n    };\r\n}","export enum DirectionEnum {\r\n    Up,\r\n    Down,\r\n    Left,\r\n    Right,\r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { MachineId } from \"../MachineId\";\r\n\r\nexport class AddZeroMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            const content = \"0\" + message.Content;\r\n\r\n            returnValue.push({ Content: content, Channel: ChannelColorEnum.Green });\r\n            return returnValue;\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            BorderColor: \"yellow\",\r\n            Color: \"darkorange\",\r\n            Name: \"Add 0\",\r\n            InputChannels: [],\r\n            OutputChannels: [ChannelColorEnum.Green],\r\n            Description: \"Puts a zero in front of the string\"\r\n        };\r\n    }\r\n    public Id: MachineId = {\r\n        Id: 11,\r\n        Type: \"Default\"\r\n    };\r\n}\r\n","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { MachineId } from \"../MachineId\";\r\n\r\nexport class CompareMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            let channel: ChannelColorEnum = ChannelColorEnum.Green;\r\n            if (message.Content.length < 2) {\r\n                channel = ChannelColorEnum.Red;\r\n            } else {\r\n                if (message.Content[0] !== \"<\") {\r\n                    if (message.Content[0] !== message.Content[1]) {\r\n                        channel = ChannelColorEnum.Red;\r\n                    }\r\n                } else {\r\n                    const position = message.Content.indexOf(\">\");\r\n                    const starNumber = message.Content.substring(0, position + 1);\r\n                    if (message.Content.length < starNumber.length * 2) {\r\n                        channel = ChannelColorEnum.Red;\r\n                    } else {\r\n                        const secondPart = message.Content.substring(position + 1, position + starNumber.length + 1);\r\n                        if (secondPart !== starNumber) {\r\n                            channel = ChannelColorEnum.Red;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            returnValue.push({ Content: message.Content, Channel: channel });\r\n            return returnValue;\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            BorderColor: \"red\",\r\n            Color: \"green\",\r\n            Name: \"Compare\",\r\n            InputChannels: [],\r\n            OutputChannels: [ChannelColorEnum.Green, ChannelColorEnum.Red],\r\n            Description: \"Compares the first two characters in the string. If they are the same, exits green. If they are different exits red\"\r\n        };\r\n    }\r\n    public Id: MachineId = {\r\n        Id: 9,\r\n        Type: \"Default\"\r\n    };\r\n}\r\n","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { MachineId } from \"../MachineId\";\r\n\r\nexport class CopyMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            let content: string;\r\n            if (message.Content.length < 1) {\r\n                content = \"\";\r\n            } else {\r\n                if (message.Content[0] !== \"<\") {\r\n                    content = message.Content[0] + message.Content;\r\n                } else {\r\n                    const index = message.Content.indexOf(\">\");\r\n                    content = message.Content.substring(0, index + 1) + message.Content;\r\n                }\r\n            }\r\n\r\n            returnValue.push({ Content: content, Channel: ChannelColorEnum.Green });\r\n            return returnValue;\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            BorderColor: \"green\",\r\n            Color: \"yellow\",\r\n            Name: \"Copy\",\r\n            InputChannels: [],\r\n            OutputChannels: [ChannelColorEnum.Green],\r\n            Description: \"Copies the first character of the string and puts it in front of the string\"\r\n        };\r\n    }\r\n    public Id: MachineId = {\r\n        Id: 6,\r\n        Type: \"Default\"\r\n    };\r\n}\r\n","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { MachineId } from \"../MachineId\";\r\n\r\nexport class DeleteMachine implements IMachine {\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            let content: string;\r\n            if (message.Content.length < 1) {\r\n                content = \"\";\r\n            } else {\r\n                if (message.Content[0] !== \"<\") {\r\n                    content = message.Content.substring(1);\r\n                } else {\r\n                    const index = message.Content.indexOf(\">\");\r\n                    content = message.Content.substring(index + 1);\r\n                }\r\n            }\r\n\r\n            returnValue.push({ Content: content, Channel: ChannelColorEnum.Green });\r\n            return returnValue;\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            BorderColor: \"red\",\r\n            Color: \"red\",\r\n            Name: \"Delete\",\r\n            InputChannels: [],\r\n            OutputChannels: [ChannelColorEnum.Green],\r\n            Description: \"Deletes the first character of the string\"\r\n        };\r\n    }\r\n    public Id: MachineId = {\r\n        Id: 7,\r\n        Type: \"Default\"\r\n    };\r\n}\r\n","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { MachineId } from \"../MachineId\";\r\n\r\nexport class GreenStartMachine implements IMachine {\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            returnValue.push({ Content: message.Content, Channel: ChannelColorEnum.Green });\r\n            return returnValue;\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Color: \"white\",\r\n            BorderColor: \"green\",\r\n            OutputChannels: [ChannelColorEnum.Green],\r\n            InputChannels: [],\r\n            Name: \"Start\",\r\n            Description: \"Starting point of the computation. Acts as a move machine for all other purposes\"\r\n        };\r\n    }\r\n    public readonly Id: MachineId = { Id: 0, Type: \"Default\" };\r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { MachineId } from \"../MachineId\";\r\n\r\nexport class IncrementMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            let newMessage = \"\";\r\n            if (message.Content.length > 0) {\r\n                const char = message.Content[0];\r\n\r\n                if ((char >= \"0\" && char <= \"8\") || (char >= \"a\" && char < \"z\") || (char >= \"A\" && char < \"Z\")) {\r\n                    newMessage = String.fromCharCode(char.charCodeAt(0) + 1) + message.Content.slice(1);\r\n                } else if (char === \"9\") {\r\n                    newMessage = \"0\" + message.Content.slice(1);\r\n                } else if (char === \"z\") {\r\n                    newMessage = \"a\" + message.Content.slice(1);\r\n                } else if (char === \"Z\") {\r\n                    newMessage = \"A\" + message.Content.slice(1);\r\n                } else {\r\n                    newMessage = message.Content;\r\n                }\r\n            }\r\n\r\n            returnValue.push({ Content: newMessage, Channel: ChannelColorEnum.Green });\r\n            return returnValue;\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            BorderColor: \"DodgerBlue\",\r\n            Color: \"MediumVioletRed\",\r\n            Name: \"Increment\",\r\n            InputChannels: [],\r\n            OutputChannels: [ChannelColorEnum.Green],\r\n            Description: \"Increases a number in front of the string by 1, makes as letter the next letter in the alphabet. 9 becomes 0, z becomes a. All other starting characters are not changed\"\r\n        };\r\n    }\r\n    public Id: MachineId = {\r\n        Id: 12,\r\n        Type: \"Default\"\r\n    };\r\n}\r\n","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { MachineId } from \"../MachineId\";\r\n\r\nexport class MoveMachine implements IMachine {\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            returnValue.push({ Content: message.Content, Channel: ChannelColorEnum.Green });\r\n            return returnValue;\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Color: \"green\",\r\n            BorderColor: \"lightgreen\",\r\n            OutputChannels: [ChannelColorEnum.Green],\r\n            InputChannels: [],\r\n            Name: \"Move\",\r\n            Description: \"Does nothing with the string, only used to get the message to the right place\"\r\n        };\r\n    }\r\n    public readonly Id: MachineId = { Id: 5, Type: \"Default\" };\r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { MachineId } from \"../MachineId\";\r\n\r\nexport class RedStartMachine implements IMachine {\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            returnValue.push({ Content: message.Content, Channel: ChannelColorEnum.Green });\r\n            return returnValue;\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Color: \"white\",\r\n            BorderColor: \"red\",\r\n            OutputChannels: [ChannelColorEnum.Green],\r\n            InputChannels: [],\r\n            Name: \"Start\",\r\n            Description: \"Starting point of the computation. Acts as a move machine for all other purposes\"\r\n        };\r\n    }\r\n    public readonly Id: MachineId = { Id: 1, Type: \"Default\" };\r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { MachineId } from \"../MachineId\";\r\n\r\nexport class RotateMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            let content: string;\r\n            if (message.Content.length < 2) {\r\n                content = message.Content;\r\n            } else {\r\n                if (message.Content[0] !== \"<\") {\r\n                    content = message.Content.substring(1) + message.Content.substring(0, 1);\r\n                } else {\r\n                    const index = message.Content.indexOf(\">\");\r\n                    content = message.Content.substring(index + 1) + message.Content.substring(0, index + 1);\r\n                }\r\n            }\r\n\r\n            returnValue.push({ Content: content, Channel: ChannelColorEnum.Green });\r\n            return returnValue;\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            BorderColor: \"blue\",\r\n            Color: \"cyan\",\r\n            Name: \"Rotate\",\r\n            InputChannels: [],\r\n            OutputChannels: [ChannelColorEnum.Green],\r\n            Description: \"Removes the first character of the string, and adds it to the end of the string\"\r\n        };\r\n    }\r\n    public Id: MachineId = {\r\n        Id: 8,\r\n        Type: \"Default\"\r\n    };\r\n}\r\n","import { Computer } from \"../Computing/Computer\";\r\nimport { CleanMessage, RestoreMessage } from \"../Computing/MessageCleaner\";\r\nimport { CustomMachineModel } from \"../Models/CustomMachineModel\";\r\nimport { GridSetupModel } from \"../Models/GridSetupModel\";\r\nimport { MessageModel } from \"../Models/MessageModel\";\r\nimport { AddStarMachine } from \"./DefaultMachines/AddStarMachine\";\r\nimport { AddZeroMachine } from \"./DefaultMachines/AddZeroMachine\";\r\nimport { CompareMachine } from \"./DefaultMachines/CompareMachine\";\r\nimport { CopyMachine } from \"./DefaultMachines/CopyMachine\";\r\nimport { DeleteMachine } from \"./DefaultMachines/DeleteMachine\";\r\nimport { GreenStartMachine } from \"./DefaultMachines/GreenStartMachine\";\r\nimport { IncrementMachine } from \"./DefaultMachines/IncrementMachine\";\r\nimport { MoveMachine } from \"./DefaultMachines/MoveMachine\";\r\nimport { RedStartMachine } from \"./DefaultMachines/RedStartMachine\";\r\nimport { RotateMachine } from \"./DefaultMachines/RotateMachine\";\r\nimport { IActor } from \"./IActor\";\r\nimport { IMachine } from \"./IMachine\";\r\nimport { IMachineType } from \"./IMachineType\";\r\nimport { MachineId } from \"./MachineId\";\r\n\r\nexport class MachineStore {\r\n    private static machineStore: MachineStore;\r\n    private machines: IMachine[];\r\n    private customId: number = 0;\r\n\r\n    private constructor() {\r\n        this.machines = [];\r\n        this.init();\r\n    }\r\n\r\n    public static GetStore(): MachineStore {\r\n        if (MachineStore.machineStore === undefined) {\r\n            MachineStore.machineStore = new MachineStore();\r\n        }\r\n\r\n        return MachineStore.machineStore;\r\n    }\r\n\r\n    private init(): void {\r\n        this.machines = [];\r\n        this.machines.push(new GreenStartMachine());\r\n        this.machines.push(new RedStartMachine());\r\n        this.machines.push(new MoveMachine());\r\n        this.machines.push(new CopyMachine());\r\n        this.machines.push(new DeleteMachine());\r\n        this.machines.push(new RotateMachine());\r\n        this.machines.push(new CompareMachine());\r\n        this.machines.push(new AddStarMachine());\r\n        this.machines.push(new AddZeroMachine());\r\n        this.machines.push(new IncrementMachine());\r\n        // this.machines.push(new SplitMachine());\r\n    }\r\n\r\n    private FindMachine(id: MachineId): IMachine {\r\n        const machine = this.machines.find((m) => m.Id.Id === id.Id && m.Id.Type === id.Type);\r\n        if (machine === undefined) {\r\n            throw new Error(\"No machine found with id \" + id.Id + \" and type \" + id.Type);\r\n        }\r\n\r\n        return machine;\r\n    }\r\n\r\n    public AddOrUpdateCustomMachine(machineModel: CustomMachineModel): CustomMachineModel {\r\n        if (machineModel.Id === undefined) {\r\n            machineModel.Id = this.customId++;\r\n        } else if (machineModel.Id >= this.customId) {\r\n            this.customId = machineModel.Id + 1;\r\n        }\r\n\r\n        const model = JSON.parse(JSON.stringify(machineModel)) as CustomMachineModel;\r\n\r\n        const machine: IMachine = {\r\n            Id: {\r\n                Id: model.Id!,\r\n                Type: \"Custom\"\r\n            },\r\n            GetType: () => model.MachineType,\r\n            GetActor: () => this.CreateCustomActor(model.Setup)\r\n        };\r\n        const existingMachine = this.machines.findIndex((m) => m.Id.Id === machineModel.Id && m.Id.Type === \"Custom\");\r\n        if (existingMachine !== -1) {\r\n            this.machines.splice(existingMachine, 1, machine);\r\n        } else {\r\n            this.machines.push(machine);\r\n        }\r\n        return model;\r\n    }\r\n\r\n    public ReloadCustomMachines(savedMachines: CustomMachineModel[]) {\r\n        this.machines = this.machines.filter((m) => m.Id.Type === \"Default\");\r\n        for (const machine of savedMachines) {\r\n            this.AddOrUpdateCustomMachine(machine);\r\n        }\r\n    }\r\n\r\n    public GetActor(id: MachineId): IActor {\r\n        return this.FindMachine(id).GetActor();\r\n    }\r\n\r\n    public GetMachineType(id: MachineId): IMachineType {\r\n        return this.FindMachine(id).GetType();\r\n    }\r\n\r\n    public GetAllMachine(): IMachine[] {\r\n        return this.machines;\r\n    }\r\n\r\n    private CreateCustomActor(setup: GridSetupModel): IActor {\r\n\r\n        return {\r\n            Act: (message) => {\r\n                const [saveMessage, starNumber] = CleanMessage(message.Content);\r\n                const cleanedMessage: MessageModel = { Content: saveMessage, Channel: message.Channel };\r\n                const computer = new Computer(setup);\r\n                const computedMessages = computer.RunSetup(cleanedMessage);\r\n                const returnValue: MessageModel[] = computedMessages.map((mm) => ({ Channel: mm.Channel, Content: RestoreMessage(mm.Content, starNumber) }));\r\n                return returnValue;\r\n            }\r\n        };\r\n    }\r\n}","import { IActor } from \"../MachineStore/IActor\";\r\nimport { MachineStore } from \"../MachineStore/MachineStore\";\r\nimport { CellModel } from \"../Models/CellModel\";\r\nimport { ChannelColorEnum } from \"../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../Models/DirectionEnum\";\r\nimport { ExitCellModel } from \"../Models/ExitCellModel\";\r\nimport { GridSetupModel } from \"../Models/GridSetupModel\";\r\nimport { MachineInstanceModel } from \"../Models/MachineInstanceModel\";\r\nimport { MessageLocationModel } from \"../Models/MessageLocationModel\";\r\nimport { MessageModel } from \"../Models/MessageModel\";\r\n\r\nexport class Computer {\r\n    private setup: GridSetupModel;\r\n    private machines: Array<{ id: number, actor: IActor }> = [];\r\n    private store: MachineStore;\r\n\r\n    constructor(setup: GridSetupModel) {\r\n        this.setup = setup;\r\n        this.store = MachineStore.GetStore();\r\n\r\n        this.RunSetup = this.RunSetup.bind(this);\r\n    }\r\n\r\n    public NewSetup(setup: GridSetupModel) {\r\n        this.setup = setup;\r\n        this.GetMachines();\r\n    }\r\n\r\n    private GetMachines(): void {\r\n        this.machines = this.setup.MachineInstances.map((mi) => ({ id: mi.Id, actor: this.store.GetActor(mi.MachineId) }));\r\n    }\r\n\r\n    public GetStartMachines(): MachineInstanceModel[] {\r\n        const startMachines: MachineInstanceModel[] = [];\r\n        for (const machineInstance of this.setup.MachineInstances) {\r\n            if (machineInstance.MachineId.Id < 4 && machineInstance.MachineId.Type === \"Default\") {\r\n                startMachines.push(machineInstance);\r\n            }\r\n        }\r\n\r\n        return startMachines;\r\n    }\r\n\r\n    public GetStartMachine(color: ChannelColorEnum): MachineInstanceModel | undefined {\r\n\r\n        let id: number = 0;\r\n        switch (color) {\r\n            case ChannelColorEnum.Green:\r\n                id = 0;\r\n                break;\r\n            case ChannelColorEnum.Red:\r\n                id = 1;\r\n                break;\r\n            case ChannelColorEnum.Blue:\r\n                id = 2;\r\n                break;\r\n            case ChannelColorEnum.Yellow:\r\n                id = 3;\r\n                break;\r\n        }\r\n\r\n        return this.setup.MachineInstances.find((mi) => mi.MachineId.Id === id && mi.MachineId.Type === \"Default\");\r\n    }\r\n\r\n    public CalculateExits(): ExitCellModel[] {\r\n        const exitCells: ExitCellModel[] = [];\r\n        let cells: ExitCellModel[] = [];\r\n        const starts = this.GetStartMachines();\r\n        cells = cells.concat(starts.map((s) => ({ Cell: s.Cell, Direction: s.Channels[0].Direction })));\r\n        for (let i = 0; i < cells.length; i++) {\r\n            const cell: ExitCellModel = { Direction: cells[i].Direction, Cell: { Column: cells[i].Cell.Column, Row: cells[i].Cell.Row } };\r\n            let machine: MachineInstanceModel | undefined;\r\n            let cellModel: CellModel | undefined;\r\n            while (machine === undefined) {\r\n                cellModel = this.Move(cell.Cell, cell.Direction);\r\n                if (cellModel === undefined) {\r\n                    break;\r\n                }\r\n\r\n                cell.Cell = cellModel;\r\n                // eslint-disable-next-line\r\n                machine = this.setup.MachineInstances.find((mi) => mi.Cell.Column === cell.Cell!.Column && mi.Cell.Row === cell.Cell!.Row);\r\n            }\r\n\r\n            if (cellModel === undefined) {\r\n                exitCells.push(cell);\r\n                continue;\r\n            }\r\n\r\n            if (!cells.some((c) => c.Cell.Column === cell.Cell.Column && c.Cell.Row === cell.Cell.Row)) {\r\n                cells = cells.concat(machine!.Channels.map((c) => ({ Cell: cell.Cell, Direction: c.Direction })));\r\n\r\n            }\r\n        }\r\n        return exitCells;\r\n    }\r\n    public StartComputation(input: MessageModel): MessageLocationModel[] {\r\n        this.GetMachines();\r\n        const messageLocations: MessageLocationModel[] = [];\r\n\r\n        const machineInstance = this.GetStartMachine(input.Channel);\r\n        if (machineInstance === undefined) {\r\n            return [];\r\n        }\r\n\r\n        const direction = machineInstance.Channels[0].Direction;\r\n        const messageLocation: MessageLocationModel = { Content: input.Content, Direction: direction, Cell: machineInstance.Cell };\r\n        messageLocations.push(messageLocation);\r\n\r\n        return messageLocations;\r\n    }\r\n\r\n    public GetNextMessages(messages: MessageLocationModel[]): [MessageLocationModel[], MessageModel[]] {\r\n        const newMessages: MessageLocationModel[] = [];\r\n        for (const message of messages) {\r\n            let machine: MachineInstanceModel | undefined;\r\n            let messageCell: CellModel | undefined = message.Cell;\r\n\r\n            while (machine === undefined) {\r\n                messageCell = this.Move(messageCell!, message.Direction);\r\n                if (messageCell === undefined) {\r\n                    break;\r\n                }\r\n\r\n                // eslint-disable-next-line\r\n                machine = this.setup.MachineInstances.find((mi) => mi.Cell.Column === messageCell!.Column && mi.Cell.Row === messageCell!.Row);\r\n            }\r\n\r\n            if (messageCell === undefined) {\r\n                newMessages.push({ Cell: undefined, Direction: message.Direction, Content: message.Content });\r\n                continue;\r\n            }\r\n\r\n            const channel = ChannelColorEnum.Green;\r\n\r\n            const actor = this.machines.find((m) => m.id === machine!.Id)!.actor;\r\n            const nextContents = actor.Act({ Content: message.Content, Channel: channel });\r\n            for (const nextContent of nextContents) {\r\n                const channelMap = machine!.Channels.find((cm) => cm.Channel === nextContent.Channel);\r\n                if (channelMap === undefined) {\r\n                    throw Error(\"Channelmap \" + nextContent.Channel + \"undefined\");\r\n                }\r\n\r\n                const messageLocation: MessageLocationModel = { Cell: machine!.Cell, Content: nextContent.Content, Direction: channelMap.Direction };\r\n                newMessages.push(messageLocation);\r\n            }\r\n        }\r\n\r\n        const doneMessages = newMessages.filter((mm) => mm.Cell === undefined);\r\n        const outputs: MessageModel[] = [];\r\n        for (const doneMessage of doneMessages) {\r\n            switch (doneMessage.Direction) {\r\n                case DirectionEnum.Up:\r\n                    outputs.push({ Content: doneMessage.Content, Channel: ChannelColorEnum.Green });\r\n                    break;\r\n                case DirectionEnum.Down:\r\n                    outputs.push({ Content: doneMessage.Content, Channel: ChannelColorEnum.Red });\r\n                    break;\r\n                case DirectionEnum.Right:\r\n                    outputs.push({ Content: doneMessage.Content, Channel: ChannelColorEnum.Blue });\r\n                    break;\r\n                case DirectionEnum.Left:\r\n                    outputs.push({ Content: doneMessage.Content, Channel: ChannelColorEnum.Yellow });\r\n                    break;\r\n            }\r\n        }\r\n\r\n        const nextMessages = newMessages.filter((mm) => mm.Cell !== undefined);\r\n\r\n        return [nextMessages, outputs];\r\n    }\r\n\r\n    public RunSetup(message: MessageModel): MessageModel[] {\r\n        const startTime = new Date().getTime();\r\n        let outputMessages: MessageModel[] = [];\r\n        let newMessages = this.StartComputation(message);\r\n        let iteration: number = 0;\r\n        while (newMessages.length !== 0) {\r\n            if (iteration++ > 1000) {\r\n                iteration = 0;\r\n                if (new Date().getTime() - startTime > 5000) {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            const [nextMessages, outputs] = this.GetNextMessages(newMessages);\r\n            outputMessages = outputMessages.concat(outputs);\r\n            newMessages = nextMessages;\r\n        }\r\n\r\n        return outputMessages;\r\n    }\r\n\r\n    private Move(cell: CellModel, direction: DirectionEnum): CellModel | undefined {\r\n        switch (direction) {\r\n            case DirectionEnum.Down:\r\n                if (cell.Row === this.setup.NumberOfRows - 1) {\r\n                    return;\r\n                }\r\n                return { Column: cell.Column, Row: cell.Row + 1 };\r\n            case DirectionEnum.Up:\r\n                if (cell.Row === 0) {\r\n                    return;\r\n                }\r\n                return { Column: cell.Column, Row: cell.Row - 1 };\r\n            case DirectionEnum.Right:\r\n                if (cell.Column === this.setup.NumberOfColumns - 1) {\r\n                    return;\r\n                }\r\n                return { Column: cell.Column + 1, Row: cell.Row };\r\n            case DirectionEnum.Left:\r\n                if (cell.Column === 0) {\r\n                    return;\r\n                }\r\n                return { Column: cell.Column - 1, Row: cell.Row };\r\n        }\r\n    }\r\n}","import { ChannelColorEnum } from \"../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../Models/DirectionEnum\";\r\nimport { GameDataModel } from \"../Models/GameDataModel\";\r\n\r\nlet GridSetup: GameDataModel;\r\n\r\nexport const LoadDefaultGameData = (): GameDataModel => {\r\n    if (GridSetup === undefined) {\r\n        GridSetup = LoadDefaultData();\r\n    }\r\n\r\n    return GridSetup;\r\n};\r\n\r\nconst LoadDefaultData = (): GameDataModel => ({\r\n    ActiveSetup: {\r\n        NumberOfColumns: 6,\r\n        NumberOfRows: 5,\r\n        MachineInstances: [{\r\n            Cell: { Row: 2, Column: 0 },\r\n            MachineId: { Id: 0, Type: \"Default\" },\r\n            Channels: [{ Direction: DirectionEnum.Right, Channel: ChannelColorEnum.Green }],\r\n            InputChannels: [], Id: 1\r\n        }]\r\n    },\r\n    SavedMachines: []\r\n});\r\n","import { LevelModel } from \"../../Models/LevelModel\";\r\n\r\nexport const Sandbox: LevelModel = {\r\n    AllowedMachines: [],\r\n    Description: \"Sandbox level, no specific goals\",\r\n    Name: \"Sandbox\",\r\n    Tests: [\r\n    ]\r\n};","import React from \"react\";\r\nimport { Props } from \"./Props\";\r\n\r\nconst NumberInput: React.FC<Props> = (props) => {\r\n    const IncreaseValue: () => void = () => {\r\n        props.valueChanged(props.value + 1);\r\n    };\r\n    const DecreaseValue: () => void = () => {\r\n        props.valueChanged(props.value - 1);\r\n    };\r\n\r\n    const style: React.CSSProperties = { marginLeft: 5, marginRight: 5 };\r\n\r\n    return (<div>\r\n        <button style={style} onClick={DecreaseValue}>-</button>\r\n        <label >{props.value}</label>\r\n        <button style={style} onClick={IncreaseValue}>+</button>\r\n    </div>);\r\n};\r\n\r\nexport default NumberInput;","import React from \"react\";\r\nimport NumberInput from \"../NumberInput/NumberInput\";\r\nimport { Props } from \"./Props\";\r\n\r\nexport const Dashboard: React.FC<Props> = (props) => {\r\n\r\n    const onClicked = () => {\r\n        props.OnShowAnimationsChanged(!props.ShowAnimations);\r\n    };\r\n    return (\r\n        <div style={{ display: \"flex\" }}>\r\n            <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                <label title=\"Show animations, will calculate as fast as possible when turned of\">Show animations</label>\r\n                <button onClick={onClicked}>{props.ShowAnimations ? \"On\" : \"Off\"}</button>\r\n            </div>\r\n            {props.ShowAnimations &&\r\n            <div>\r\n                <label title=\"Step time in tenths of seconds, lower for faster animations\">Step Time</label>\r\n                <NumberInput value={props.StepTime} valueChanged={props.OnStepTimeChanged} />\r\n            </div>}\r\n\r\n        </div>\r\n    );\r\n};","export class Constants {\r\n    public static CellSize = 100;\r\n}","export const DragItemTypes = {\r\n  MachineInstance: \"MachineInstance\",\r\n  NewMachine: \"NewMachine\"\r\n};","export enum OutputStatus {\r\n    NotChecked,\r\n    NotFullfilled,\r\n    Fullfilled,\r\n    NotMatched\r\n}","export const FormatMessage = (content: string): string => {\r\n    let formattedMessage: string | undefined;\r\n\r\n    if (content === \"\") {\r\n        formattedMessage = \"<Empty>\";\r\n    } else {\r\n        formattedMessage = content;\r\n        let seekPosition = 0;\r\n\r\n        while (true) {\r\n            seekPosition = formattedMessage.indexOf(\"<\", seekPosition);\r\n            if (seekPosition === -1) {\r\n                break;\r\n            }\r\n\r\n            const lastIndex = formattedMessage.indexOf(\">\", seekPosition);\r\n            formattedMessage = formattedMessage.substring(0, seekPosition) + \"?\" + formattedMessage.substring(lastIndex + 1);\r\n        }\r\n    }\r\n    return formattedMessage;\r\n};\r\n","import React from \"react\";\r\nimport { DirectionEnum } from \"../../../../../Models/DirectionEnum\";\r\nimport { Constants } from \"../../../../Constants\";\r\nimport { Props } from \"./Props\";\r\n\r\nexport class Channel extends React.Component<Props> {\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.onClicked = this.onClicked.bind(this);\r\n    }\r\n    public render() {\r\n\r\n        const cellSize = Constants.CellSize - 2;\r\n        const width = 19;\r\n        const height = 4;\r\n        const border = 1;\r\n        const channelStyle: React.CSSProperties = {\r\n            position: \"absolute\",\r\n            height: cellSize / 50 * height,\r\n            width: cellSize / 50 * width,\r\n            marginLeft: cellSize / 50 * (25 + (height + border) / 2),\r\n            marginTop: cellSize / 50 * (25 - (height + border) / 2),\r\n            backgroundColor: this.props.ChannelMap.Channel,\r\n            borderStyle: \"solid\",\r\n            borderWidth: border + \"px\",\r\n            pointerEvents: \"visible\"\r\n        };\r\n\r\n        let rotate: string = \"\";\r\n        switch (this.props.ChannelMap.Direction) {\r\n            case DirectionEnum.Down:\r\n                rotate = \"rotate(90deg)\";\r\n                break;\r\n            case DirectionEnum.Left:\r\n                rotate = \"rotate(180deg)\";\r\n                break;\r\n            case DirectionEnum.Up:\r\n                rotate = \"rotate(270deg)\";\r\n                break;\r\n            case DirectionEnum.Right:\r\n                rotate = \"rotate(0deg)\";\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        const rotation: React.CSSProperties = {\r\n            transform: rotate,\r\n            height: cellSize,\r\n            width: cellSize,\r\n            position: \"absolute\",\r\n            pointerEvents: \"none\"\r\n        };\r\n\r\n        return (\r\n            <div style={rotation}>\r\n                <div style={channelStyle} onClick={this.onClicked}></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public onClicked(event: React.MouseEvent<HTMLDivElement, MouseEvent>): void {\r\n        if (this.props.OnChanged !== undefined) {\r\n            let newDirection: DirectionEnum = DirectionEnum.Left;\r\n            switch (this.props.ChannelMap.Direction) {\r\n                case DirectionEnum.Down:\r\n                    newDirection = DirectionEnum.Left;\r\n                    break;\r\n                case DirectionEnum.Left:\r\n                    newDirection = DirectionEnum.Up;\r\n                    break;\r\n                case DirectionEnum.Up:\r\n                    newDirection = DirectionEnum.Right;\r\n                    break;\r\n                case DirectionEnum.Right:\r\n                    newDirection = DirectionEnum.Down;\r\n                    break;\r\n            }\r\n\r\n            this.props.OnChanged({ Direction: newDirection, Channel: this.props.ChannelMap.Channel });\r\n        }\r\n    }\r\n}","import React from \"react\";\r\nimport { Constants } from \"../../../../Constants\";\r\nimport { Props } from \"./Props\";\r\n\r\nexport class Machine extends React.Component<Props> {\r\n    public render() {\r\n        const machineSize = Constants.CellSize / 5 * 3;\r\n        const borderSize = machineSize / 10;\r\n\r\n        const machineStyle: React.CSSProperties = {\r\n            height: this.props.IsDefault ? machineSize : machineSize * 0.9,\r\n            width: this.props.IsDefault ? machineSize : machineSize * 0.9,\r\n            backgroundColor: this.props.Machine.Color,\r\n            borderStyle: \"solid\",\r\n            borderColor: this.props.Machine.BorderColor,\r\n            borderWidth: borderSize,\r\n            borderRadius: this.props.IsDefault ? \"50%\" : \"0%\",\r\n        };\r\n\r\n        return (\r\n            <div style={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\", height: Constants.CellSize - 2, width: Constants.CellSize - 2 }}>\r\n                <div style={machineStyle} />\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport { useDrag } from \"react-dnd\";\r\nimport { MachineStore } from \"../../../../MachineStore/MachineStore\";\r\nimport { ChannelModel } from \"../../../../Models/ChannelMapModel\";\r\nimport { MachineInstanceModel } from \"../../../../Models/MachineInstanceModel\";\r\nimport { Constants } from \"../../../Constants\";\r\nimport { DragItemTypes } from \"../../../DragItemTypes\";\r\nimport { Channel } from \"./Channel/Channel\";\r\nimport { Machine } from \"./Machine/Machine\";\r\nimport { Props } from \"./Props\";\r\n\r\nconst MachineInstance: React.FC<Props> = (props) => {\r\n    const [, drag] = useDrag({\r\n        item: { type: DragItemTypes.MachineInstance, id: props.MachineInstance.Id },\r\n        end: (dropResult, monitor) => {\r\n            if (!monitor.didDrop()) {\r\n                props.OnRemoved(props.MachineInstance.Id);\r\n            }\r\n        },\r\n        collect: (monitor) => ({\r\n            isDragging: !!monitor.isDragging(),\r\n        }),\r\n    });\r\n\r\n    const OnChannelChanged = (channel: ChannelModel, index: number) => {\r\n        const machineInstance: MachineInstanceModel = {\r\n            Cell: props.MachineInstance.Cell,\r\n            MachineId: props.MachineInstance.MachineId,\r\n            Channels: props.MachineInstance.Channels.map((c, i) => (i === index) ? channel : c),\r\n            InputChannels: props.MachineInstance.InputChannels,\r\n            Id: props.MachineInstance.Id\r\n        };\r\n\r\n        props.OnChanged(machineInstance);\r\n    };\r\n\r\n    const channels = props.MachineInstance.Channels.map((c, index) => <div key={index}><Channel OnChanged={(channelMap) => OnChannelChanged(channelMap, index)} ChannelMap={c} /></div>);\r\n    const absoluteStyle: React.CSSProperties = {\r\n        position: \"absolute\",\r\n    };\r\n    const machineSize: React.CSSProperties = { height: Constants.CellSize - 2, width: Constants.CellSize - 2, margin: 1 };\r\n\r\n    const machineType = MachineStore.GetStore().GetMachineType(props.MachineInstance.MachineId);\r\n    return (\r\n        <div ref={drag} style={machineSize}>\r\n            <div style={absoluteStyle}>\r\n                <Machine Machine={machineType} IsDefault={props.MachineInstance.MachineId.Type === \"Default\"}/>\r\n            </div>\r\n            {channels}\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default MachineInstance;\r\n","import React from \"react\";\r\nimport { useDrop } from \"react-dnd\";\r\nimport { MachineId } from \"../../../MachineStore/MachineId\";\r\nimport { DirectionEnum } from \"../../../Models/DirectionEnum\";\r\nimport { Constants } from \"../../Constants\";\r\nimport { DragItemTypes } from \"../../DragItemTypes\";\r\nimport { FormatMessage } from \"../../MessageFormatter\";\r\nimport MachineInstance from \"./MachineInstance/MachineInstance\";\r\nimport { Props } from \"./Props\";\r\n\r\nconst Cell: React.FC<Props> = (props) => {\r\n\r\n    const [, drop] = useDrop({\r\n        accept: [DragItemTypes.MachineInstance, DragItemTypes.NewMachine],\r\n        drop: (item, monitor) => {\r\n            switch (item.type) {\r\n                case DragItemTypes.MachineInstance:\r\n                    props.OnMovedMachine(monitor.getItem().id, props.location);\r\n                    break;\r\n                case DragItemTypes.NewMachine:\r\n                    const itemProps = monitor.getItem() as { id: MachineId };\r\n                    props.OnNewMachine(itemProps.id, props.location);\r\n                    break;\r\n            }\r\n        },\r\n    });\r\n\r\n    const style: React.CSSProperties = {\r\n        height: Constants.CellSize,\r\n        width: Constants.CellSize,\r\n        border: \"1px solid #999\",\r\n        float: \"left\",\r\n        marginTop: -1,\r\n        marginLeft: -1,\r\n        position: \"relative\"\r\n    };\r\n\r\n    if (props.exitCell !== undefined) {\r\n        switch (props.exitCell.Direction) {\r\n            case DirectionEnum.Up:\r\n                style.borderRight = \"1px solid black\";\r\n                style.borderBottom = \"1px solid black\";\r\n                style.borderLeft = \"1px solid black\";\r\n                style.borderTop = \"8px solid green\";\r\n                style.marginTop = -8;\r\n\r\n                break;\r\n            case DirectionEnum.Down:\r\n                style.borderRight = \"1px solid black\";\r\n                style.borderTop = \"1px solid black\";\r\n                style.borderLeft = \"1px solid black\";\r\n                style.borderBottom = \"8px solid red\";\r\n                style.marginBottom = -7;\r\n                break;\r\n            case DirectionEnum.Right:\r\n                style.borderTop = \"1px solid black\";\r\n                style.borderBottom = \"1px solid black\";\r\n                style.borderLeft = \"1px solid black\";\r\n                style.borderRight = \"8px solid blue\";\r\n                style.marginRight = -7;\r\n                break;\r\n            case DirectionEnum.Left:\r\n                style.borderRight = \"1px solid black\";\r\n                style.borderBottom = \"1px solid black\";\r\n                style.borderTop = \"1px solid black\";\r\n                style.borderLeft = \"8px solid yellow\";\r\n                style.marginLeft = -8;\r\n\r\n                break;\r\n        }\r\n    } else {\r\n        style.borderRight = \"1px solid black\";\r\n        style.borderBottom = \"1px solid black\";\r\n        style.borderLeft = \"1px solid black\";\r\n        style.borderTop = \"1px solid black\";\r\n    }\r\n\r\n    let formattedMessage: string | undefined;\r\n    if (props.message !== undefined) {\r\n        formattedMessage = FormatMessage(props.message.Content);\r\n    }\r\n\r\n    return (\r\n        <div style={style} ref={drop}>\r\n            {formattedMessage !== undefined && formattedMessage}\r\n            {props.machineInstance !== undefined ? <MachineInstance MachineInstance={props.machineInstance} OnChanged={props.OnChanged} OnRemoved={props.OnMachineRemoved} /> : \"\"}\r\n\r\n        </div >\r\n    );\r\n};\r\n\r\nexport default Cell;","import React from \"react\";\r\nimport { MachineId } from \"../../MachineStore/MachineId\";\r\nimport { MachineStore } from \"../../MachineStore/MachineStore\";\r\nimport { CellModel } from \"../../Models/CellModel\";\r\nimport { ChannelModel } from \"../../Models/ChannelMapModel\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { GridSetupModel } from \"../../Models/GridSetupModel\";\r\nimport { MachineInstanceModel } from \"../../Models/MachineInstanceModel\";\r\nimport { MessageLocationModel } from \"../../Models/MessageLocationModel\";\r\nimport Cell from \"./Cell/Cell\";\r\nimport { GridProps } from \"./Props\";\r\nimport { ExitCellModel } from \"../../Models/ExitCellModel\";\r\n\r\nexport class Grid extends React.Component<GridProps> {\r\n    private store: MachineStore;\r\n    constructor(props: GridProps) {\r\n        super(props);\r\n        this.ChannelChanged = this.ChannelChanged.bind(this);\r\n        this.MachineMoved = this.MachineMoved.bind(this);\r\n        this.MachineAdded = this.MachineAdded.bind(this);\r\n        this.MachineRemoved = this.MachineRemoved.bind(this);\r\n\r\n        this.store = MachineStore.GetStore();\r\n    }\r\n\r\n    public render() {\r\n        const rows = [];\r\n        for (let rowIndex = 0; rowIndex < this.props.GridSetup.NumberOfRows; rowIndex++) {\r\n            const row = [];\r\n            for (let columnIndex = 0; columnIndex < this.props.GridSetup.NumberOfColumns; columnIndex++) {\r\n                let foundMachineInstance: MachineInstanceModel | undefined;\r\n                let foundMessage: MessageLocationModel | undefined;\r\n                let foundExit: ExitCellModel | undefined;\r\n                for (const machineInstance of this.props.GridSetup.MachineInstances) {\r\n                    if (machineInstance.Cell.Column === columnIndex && machineInstance.Cell.Row === rowIndex) {\r\n                        foundMachineInstance = machineInstance;\r\n                    }\r\n                }\r\n\r\n                for (const message of this.props.Messages) {\r\n                    if (message.Cell!.Column === columnIndex && message.Cell!.Row === rowIndex) {\r\n                        foundMessage = message;\r\n                    }\r\n                }\r\n\r\n                for (const exit of this.props.ExitCells) {\r\n                    if (exit.Cell!.Column === columnIndex && exit.Cell!.Row === rowIndex) {\r\n                        foundExit = exit;\r\n                    }\r\n                }\r\n\r\n                row.push(<Cell\r\n                    key={columnIndex}\r\n                    machineInstance={foundMachineInstance}\r\n                    message={foundMessage}\r\n                    OnChanged={this.ChannelChanged}\r\n                    OnMovedMachine={this.MachineMoved}\r\n                    OnNewMachine={this.MachineAdded}\r\n                    OnMachineRemoved={this.MachineRemoved}\r\n                    location={{ Row: rowIndex, Column: columnIndex }}\r\n                    exitCell={foundExit} />);\r\n            }\r\n            rows.push(<div key={rowIndex} style={{ display: \"flex\", flexDirection: \"row\" }}>{row}</div>);\r\n        }\r\n\r\n        return (\r\n            <div style={{ display: \"flex\", flexDirection: \"column\", marginBottom: 8 }}>\r\n                {rows}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private ChannelChanged(machineInstance: MachineInstanceModel) {\r\n        const newGridSetup: GridSetupModel = {\r\n            NumberOfColumns: this.props.GridSetup.NumberOfColumns,\r\n            NumberOfRows: this.props.GridSetup.NumberOfRows,\r\n            MachineInstances: this.props.GridSetup.MachineInstances.map((mi) =>\r\n                (mi.Cell.Column === machineInstance.Cell.Column && mi.Cell.Row === machineInstance.Cell.Row) ?\r\n                    machineInstance\r\n                    :\r\n                    mi)\r\n        };\r\n\r\n        this.props.OnChanged(newGridSetup);\r\n    }\r\n\r\n    private MachineMoved(id: number, location: CellModel): void {\r\n        const index = this.props.GridSetup.MachineInstances.findIndex((mi) => mi.Id === id);\r\n        this.props.GridSetup.MachineInstances[index].Cell = location;\r\n        this.props.OnChanged(this.props.GridSetup);\r\n    }\r\n    private MachineRemoved(id: number): void {\r\n        this.props.GridSetup.MachineInstances = this.props.GridSetup.MachineInstances.filter((mi) => mi.Id !== id);\r\n        this.props.OnChanged(this.props.GridSetup);\r\n    }\r\n    private MachineAdded(id: MachineId, location: CellModel): void {\r\n        const machine = this.store.GetMachineType(id);\r\n        const channels: ChannelModel[] = [];\r\n        let direction: DirectionEnum.Up = DirectionEnum.Up;\r\n        for (const color of machine.OutputChannels) {\r\n            channels.push({ Channel: color, Direction: direction });\r\n            direction++;\r\n        }\r\n\r\n        const maxId = (this.props.GridSetup.MachineInstances.length === 0) ? 0 : Math.max(...this.props.GridSetup.MachineInstances.map((mi) => mi.Id));\r\n\r\n        const machineInstance: MachineInstanceModel = {\r\n            Cell: location,\r\n            MachineId: id,\r\n            Channels: channels,\r\n            InputChannels: [],\r\n            Id: maxId + 1\r\n        };\r\n        this.props.GridSetup.MachineInstances.push(machineInstance);\r\n        this.props.OnChanged(this.props.GridSetup);\r\n    }\r\n}","import React from \"react\";\r\nimport { FormatMessage } from \"../../../MessageFormatter\";\r\nimport { Props } from \"./Props\";\r\nimport { OutputStatus } from \"../../../../Models/OutputStatusEnum\";\r\n\r\nexport const MessageDisplay: React.FC<Props> = (props) => {\r\n    const style: React.CSSProperties = { display: \"flex\", flexFlow: \"row\", justifyContent: props.Input ? \"flex-start\" : \"flex-end\", marginBottom: 1 };\r\n    const colorCode: React.CSSProperties = { backgroundColor: props.Message.Channel, width: 8, marginLeft: 5, marginRight: 5 };\r\n    const statusStyle: React.CSSProperties = { display: \"flex\", flexFlow: \"row\" };\r\n    switch (props.Status) {\r\n        case OutputStatus.Fullfilled:\r\n            statusStyle.backgroundColor = \"#d9ffb3\";\r\n            break;\r\n        case OutputStatus.NotMatched:\r\n            statusStyle.border = \"solid red\";\r\n            statusStyle.backgroundColor = \"#ffb3b3\";\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n    return (<div style={style}>\r\n        <div style={statusStyle}>\r\n            {props.Input && <div style={colorCode}></div>}\r\n            <label>{FormatMessage(props.Message.Content)}</label>\r\n            {!props.Input && <div style={colorCode}></div>}\r\n        </div>\r\n    </div>);\r\n};","import React from \"react\";\r\nimport { ChannelColorEnum } from \"../../../../Models/ChannelColorsEnum\";\r\nimport { Props } from \"./Props\";\r\n\r\nexport const EditableMessageDisplay: React.FC<Props> = (props) => {\r\n    const onMessageChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        props.MessageChanged({ Content: event.target.value, Channel: props.Message.Channel });\r\n    };\r\n\r\n    const onChannelChanged = (event: React.ChangeEvent<HTMLSelectElement>) => {\r\n        props.MessageChanged({ Content: props.Message.Content, Channel: event.target.value as ChannelColorEnum });\r\n    };\r\n\r\n    return (\r\n        <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n            {props.AllowedInputColors.length > 1 ? <select value={props.Message.Channel} style={{ backgroundColor: props.Message.Channel }} onChange={onChannelChanged}>\r\n                {props.AllowedInputColors.map((cc, index) => <option value={cc} key={index} style={{ backgroundColor: cc }}></option>)}\r\n            </select> : <div style={{ backgroundColor: props.Message.Channel, width: 10 }} />}\r\n            <input value={props.Message.Content} onChange={onMessageChanged}></input>\r\n        </div>\r\n    );\r\n};","import React from \"react\";\r\nimport { ChannelColorEnum } from \"../../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../../Models/MessageModel\";\r\nimport { OutputStatus } from \"../../../Models/OutputStatusEnum\";\r\nimport { MessageDisplay } from \"../TestDisplay/MessageDisplay/MessageDisplay\";\r\nimport { EditableMessageDisplay } from \"./EditableMessageDisplay/EditableMessageDisplay\";\r\nimport { Props } from \"./Props\";\r\nimport { State } from \"./State\";\r\n\r\nexport class CustomTest extends React.Component<Props, State> {\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.InputChanged = this.InputChanged.bind(this);\r\n        this.AddInput = this.AddInput.bind(this);\r\n        this.DeleteInput = this.DeleteInput.bind(this);\r\n        this.Play = this.Play.bind(this);\r\n\r\n        this.state = { Inputs: [{ Content: \"\", Channel: ChannelColorEnum.Green }], Outputs: [] };\r\n    }\r\n\r\n    private InputChanged(index: number, message: MessageModel) {\r\n        const inputs = this.state.Inputs;\r\n        inputs[index] = message;\r\n        this.setState({ Inputs: inputs });\r\n    }\r\n\r\n    private AddInput(): void {\r\n        const message: MessageModel = { Channel: ChannelColorEnum.Green, Content: \"\" };\r\n        const inputs = this.state.Inputs;\r\n        inputs.push(message);\r\n        this.setState({ Inputs: inputs });\r\n    }\r\n\r\n    private DeleteInput(index: number): void {\r\n        const inputs = this.state.Inputs;\r\n        inputs.splice(index, 1);\r\n        this.setState({ Inputs: inputs });\r\n    }\r\n\r\n    private Play(): void {\r\n        this.props.PlayTest(this.state.Inputs).then((outputs) => {\r\n            this.setState({ Outputs: outputs });\r\n        }).catch(() => {\r\n            this.setState({ Outputs: [] });\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        let inputs: JSX.Element[] = [];\r\n        let lineNumber = 0;\r\n        for (let i = 0; i < this.state.Inputs.length; i++) {\r\n            inputs.push(<div key={lineNumber++} >\r\n                <EditableMessageDisplay\r\n                    Message={this.state.Inputs[i]}\r\n                    AllowedInputColors={this.props.AllowedInputColors}\r\n                    MessageChanged={(message: MessageModel) => this.InputChanged(i, message)} />\r\n                {this.state.Inputs.length > 1 && <button onClick={() => this.DeleteInput(i)}>Delete</button>}\r\n            </div>);\r\n            let outputs: JSX.Element[] = [];\r\n            const outputsForThisInput = this.state.Outputs.filter((o) => o.Order === i);\r\n            // eslint-disable-next-line\r\n            outputs = outputsForThisInput.map((o, index) => <MessageDisplay Message={o} Input={false} key={lineNumber++} Status={OutputStatus.NotChecked} />);\r\n            inputs = inputs.concat(outputs);\r\n        }\r\n        return (\r\n            <div>\r\n                <button onClick={this.Play}>Play</button>\r\n                <div>\r\n                    {inputs}\r\n                    {this.props.MultipleInputs &&\r\n                        <button onClick={this.AddInput}>Add input</button>}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport { OutputMessageModel } from \"../../../Models/OutputMessageModel\";\r\nimport { OutputStatus } from \"../../../Models/OutputStatusEnum\";\r\nimport { MessageDisplay } from \"./MessageDisplay/MessageDisplay\";\r\nimport { Props } from \"./Props\";\r\n\r\nexport const TestDisplay: React.FC<Props> = (props) => {\r\n\r\n    const OnClick = () => {\r\n        props.OnPlay(props.Test);\r\n    };\r\n\r\n    const inputs = props.Test.inputs;\r\n    const outputs = props.Test.outputs;\r\n    let messages: JSX.Element[] = [];\r\n    let index = 0;\r\n    for (let i = 0; i < inputs.length; i++) {\r\n        messages.push(<MessageDisplay Message={inputs[i]} Input={true} key={index++} Status={OutputStatus.NotChecked}/>);\r\n        const expectedOutputs = outputs.filter((o) => o.Order === i);\r\n        let actuals: OutputMessageModel[] | undefined;\r\n        if (props.ActualOutputs !== undefined) {\r\n            actuals = props.ActualOutputs.filter((o) => o.Order === i);\r\n        }\r\n        for (let j = 0; j < expectedOutputs.length; j++) {\r\n            const expected = expectedOutputs[j];\r\n            let valid = OutputStatus.NotChecked;\r\n            if (actuals !== undefined) {\r\n                const indexActual = (actuals.findIndex((o) => o.Channel === expected.Channel && o.Content === expected.Content));\r\n                if (indexActual > -1) {\r\n                    valid = OutputStatus.Fullfilled;\r\n                    actuals.splice(indexActual, 1);\r\n                } else {\r\n                    valid = OutputStatus.NotFullfilled;\r\n                }\r\n            }\r\n            messages = messages.concat(<MessageDisplay Message={expectedOutputs[j]} Input={false} key={index++} Status={valid} />);\r\n        }\r\n\r\n        if (actuals !== undefined) {\r\n            // eslint-disable-next-line\r\n            messages = messages.concat(actuals.map((o) => <MessageDisplay Message={o} Input={false} key={index++} Status={OutputStatus.NotMatched} />));\r\n        }\r\n    }\r\n\r\n    const style: React.CSSProperties = { display: \"flex\", flexDirection: \"row\", padding: 0, borderBottom: \"solid 0.5px\", margin: 5 };\r\n    const verticalStyle: React.CSSProperties = { display: \"flex\", flexDirection: \"column\", flexGrow: 1 };\r\n\r\n    return (\r\n        <div style={style}>\r\n            <button onClick={OnClick}>Play</button>\r\n            <div style={verticalStyle}>\r\n                {messages}\r\n            </div>\r\n        </div>\r\n    );\r\n};","import React from \"react\";\r\nimport { OutputMessageModel } from \"../../Models/OutputMessageModel\";\r\nimport { TestModel } from \"../../Models/TestModel\";\r\nimport { CustomTest } from \"./CustomTest/CustomTest\";\r\nimport { Props } from \"./Props\";\r\nimport { State } from \"./State\";\r\nimport { TestDisplay } from \"./TestDisplay/TestDisplay\";\r\n\r\nexport class LevelDisplay extends React.Component<Props, State> {\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.testStarted = this.testStarted.bind(this);\r\n        this.state = { ActualOutputs: [] };\r\n    }\r\n    private testStarted(test: TestModel, index: number) {\r\n        this.props.PlayTest(test.inputs).then((outputs: OutputMessageModel[]) => {\r\n            const actualOutputs = this.state.ActualOutputs;\r\n            actualOutputs[index] = outputs;\r\n            this.setState({ ActualOutputs: actualOutputs });\r\n        }).catch(() => {\r\n            this.setState({ ActualOutputs: [] });\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        const tests = this.props.Level.Tests.map((t, index) => <TestDisplay Test={t} OnPlay={(test: TestModel) => this.testStarted(test, index)} key={index} ActualOutputs={this.state.ActualOutputs[index]} />);\r\n        const style: React.CSSProperties = { padding: 10 };\r\n\r\n        return (\r\n            <div style={style}>\r\n                <b>{this.props.Level.Name}</b>\r\n                <br />\r\n                <i>{this.props.Level.Description}</i>\r\n                {this.props.Level.Tests.length === 0 && <CustomTest PlayTest={this.props.PlayTest} AllowedInputColors={this.props.AllowedInputs} MultipleInputs={this.props.MultipleInputsAllowed} />}\r\n                {tests}\r\n            </div>\r\n        );\r\n    }\r\n}","import { Props } from \"./Props\";\r\nimport React from \"react\";\r\n\r\nexport const LevelPreview: React.FC<Props> = (props) => {\r\n    const OnClick = () => props.LevelClicked(props.Level);\r\n    return (<div onClick={OnClick}>\r\n        <label title={props.Level.Description}>{props.Level.Name}</label>\r\n    </div>)\r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { LevelModel } from \"../../Models/LevelModel\";\r\n\r\nexport const AppendLength: LevelModel = {\r\n    AllowedMachines: [1, 5, 6, 7, 8, 9, 10, 11, 12],\r\n    Description: \"The machine should append the length of the input string to the string\",\r\n    Name: \"AppendLength\",\r\n    Tests: [\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"four\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"four4\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"aabccd\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"aabccd6\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"1\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"11\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"0\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"This is hard\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"This is hard12\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"This might even be harder\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"This might even be harder25\" }]\r\n        }\r\n    ]\r\n};","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { LevelModel } from \"../../Models/LevelModel\";\r\n\r\nexport const GetLength: LevelModel = {\r\n    AllowedMachines: [1, 5, 6, 7, 8, 9, 10, 11, 12],\r\n    Description: \"The machine should return the length of the input string\",\r\n    Name: \"GetLength\",\r\n    Tests: [\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"four\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"4\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"aabccd\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"6\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"1\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"1\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"0\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"This is hard\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"12\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"This might even be harder\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"25\" }]\r\n        }\r\n    ]\r\n};","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { LevelModel } from \"../../Models/LevelModel\";\r\n\r\nexport const GetType: LevelModel = {\r\n    AllowedMachines: [1, 5, 6, 7, 8, 9, 10, 11, 12],\r\n    Description: \"The machine should exit green is the first character is a number, exit red if it is a letter and exit blue otherwise\",\r\n    Name: \"GetType\",\r\n    Tests: [\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"42\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"42\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"this starts with a letter\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Red, Content: \"this starts with a letter\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \",#@%!\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Blue, Content: \",#@%!\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Blue, Content: \"\" }]\r\n        }\r\n    ]\r\n};","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { LevelModel } from \"../../Models/LevelModel\";\r\n\r\nexport const IsEmpty: LevelModel = {\r\n    AllowedMachines: [1, 5, 6, 7, 8, 9, 10],\r\n    Description: \"The machine should exit green if the message is empty, otherwise exit red\",\r\n    Name: \"IsEmpty\",\r\n    Tests: [\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"abc\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Red, Content: \"abc\" }]\r\n        }\r\n    ]\r\n};","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { LevelModel } from \"../../Models/LevelModel\";\r\n\r\nexport const KeepNumbers: LevelModel = {\r\n    AllowedMachines: [1, 5, 6, 7, 8, 9, 10, 11, 12],\r\n    Description: \"The machine should keep all numbers in the input string, and remove all other characters\",\r\n    Name: \"KeepNumbers\",\r\n    Tests: [\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"42\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"42\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"fortytwo\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"1 and 1 is\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"11\" }]\r\n        }\r\n    ]\r\n};","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { LevelModel } from \"../../Models/LevelModel\";\r\n\r\nexport const PlusOne: LevelModel = {\r\n    AllowedMachines: [1, 5, 6, 7, 8, 9, 10, 11, 12],\r\n    Description: \"The machine should increase the input number by 1. Input only contains digits\",\r\n    Name: \"PlusOne\",\r\n    Tests: [\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"4\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"5\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"0\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"1\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"42\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"43\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"9\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"10\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"39\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"40\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"23999999\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"24000000\"}]\r\n        }\r\n    ]\r\n};","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { LevelModel } from \"../../Models/LevelModel\";\r\n\r\nexport const RemoveAllRepeats: LevelModel = {\r\n    AllowedMachines: [1, 5, 6, 7, 8, 9, 10],\r\n    Description: \"The machine should remove all repeating characters from the input string\",\r\n    Name: \"RemoveAllRepeats\",\r\n    Tests: [\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"aabc\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abc\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"aaaabccc\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abc\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"a\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"a\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"hhhhhhhhhiiiii wwwworllllldddddddd\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"hi world\" }]\r\n        }\r\n    ]\r\n};","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { LevelModel } from \"../../Models/LevelModel\";\r\n\r\nexport const RotateBackwards: LevelModel = {\r\n    AllowedMachines: [1, 5, 6, 7, 8, 9, 10, 11, 12],\r\n    Description: \"The machine should put the last character in front of the string\",\r\n    Name: \"RotateBackwards\",\r\n    Tests: [\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"abc\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"cab\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"otater\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"rotate\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"a\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"a\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"ello world!H\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"Hello world!\" }]\r\n        }\r\n    ]\r\n};","import { LevelModel } from \"../Models/LevelModel\";\r\nimport { AppendLength } from \"./Levels/AppendLength\";\r\nimport { GetLength } from \"./Levels/GetLength\";\r\nimport { GetType } from \"./Levels/GetType\";\r\nimport { IsEmpty } from \"./Levels/IsEmpty\";\r\nimport { KeepNumbers } from \"./Levels/KeepNumbers\";\r\nimport { PlusOne } from \"./Levels/PlusOne\";\r\nimport { RemoveAllRepeats } from \"./Levels/RemoveAllRepeats\";\r\nimport { RotateBackwards } from \"./Levels/RotateBackwards\";\r\nimport { Sandbox } from \"./Levels/Sandbox\";\r\n\r\nexport class LevelStore {\r\n    private static levelStore: LevelStore;\r\n    private levels: LevelModel[];\r\n\r\n    private constructor() {\r\n        this.levels = [];\r\n        this.init();\r\n    }\r\n\r\n    public static GetStore(): LevelStore {\r\n        if (LevelStore.levelStore === undefined) {\r\n            LevelStore.levelStore = new LevelStore();\r\n        }\r\n\r\n        return LevelStore.levelStore;\r\n    }\r\n\r\n    private init(): void {\r\n        this.levels.push(Sandbox);\r\n        this.levels.push(IsEmpty);\r\n        this.levels.push(RemoveAllRepeats);\r\n        this.levels.push(GetType);\r\n        this.levels.push(KeepNumbers);\r\n        this.levels.push(GetLength);\r\n        this.levels.push(AppendLength);\r\n        this.levels.push(RotateBackwards);\r\n        this.levels.push(PlusOne);\r\n    }\r\n\r\n    public GetAllLevels(): LevelModel[] {\r\n        return this.levels;\r\n    }\r\n}","import { Props } from \"./Props\";\r\nimport React from \"react\";\r\nimport { LevelPreview } from \"./LevelPreview/LevelPreview\";\r\nimport { LevelStore } from \"../../Levels/LevelStore\";\r\n\r\nconst LevelList: React.FC<Props> = (props) => {\r\n    const levelStore = LevelStore.GetStore();\r\n\r\n    const levels = levelStore.GetAllLevels().map((l, index) => <LevelPreview Level={l} LevelClicked={props.OnLevelClicked} key={index}/>)\r\n\r\n    return (\r\n        <div>\r\n            <b>Challenges:</b>\r\n            {levels}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LevelList;\r\n","import React from \"react\";\r\nimport { ChannelModel } from \"../../../../Models/ChannelMapModel\";\r\nimport { DirectionEnum } from \"../../../../Models/DirectionEnum\";\r\nimport { Constants } from \"../../../Constants\";\r\nimport { Channel } from \"../../../Grid/Cell/MachineInstance/Channel/Channel\";\r\nimport { Machine } from \"../../../Grid/Cell/MachineInstance/Machine/Machine\";\r\nimport { Props } from \"./Props\";\r\n\r\nexport const MachineDisplay: React.FC<Props> = (props) => {\r\n\r\n    const channels: ChannelModel[] = [];\r\n    let direction: DirectionEnum.Up = DirectionEnum.Up;\r\n    for (const color of props.MachineType.OutputChannels) {\r\n        channels.push({ Channel: color, Direction: direction });\r\n        direction++;\r\n    }\r\n\r\n    const channelComponents = channels.map((c, index) => <Channel key={index} ChannelMap={c} />);\r\n    const absoluteStyle: React.CSSProperties = {\r\n        position: \"absolute\",\r\n    };\r\n\r\n    const cellSize: React.CSSProperties = { height: Constants.CellSize, width: Constants.CellSize };\r\n    return (\r\n        <div >\r\n            <label>{props.MachineType.Name}</label>\r\n            <div style={cellSize}>\r\n                <div style={absoluteStyle}>\r\n                    <Machine Machine={props.MachineType} IsDefault={props.IsDefault} />\r\n                </div>\r\n                <div style={absoluteStyle}>\r\n                    {channelComponents}\r\n                </div>\r\n            </div>\r\n           \r\n        </div>);\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { useDrag } from \"react-dnd\";\r\nimport { ChannelModel } from \"../../../Models/ChannelMapModel\";\r\nimport { DirectionEnum } from \"../../../Models/DirectionEnum\";\r\nimport { DragItemTypes } from \"../../DragItemTypes\";\r\nimport { MachineDisplay } from \"./MachineDisplay/MachineDisplay\";\r\nimport { Props } from \"./Props\";\r\n\r\nconst StoredMachine: React.FC<Props> = (props) => {\r\n    const [, drag] = useDrag({\r\n        item: { type: DragItemTypes.NewMachine, id: props.machine.Id },\r\n        collect: (monitor) => ({\r\n            isDragging: !!monitor.isDragging(),\r\n        }),\r\n    });\r\n    const [showMenu, changeShow] = useState(false);\r\n\r\n    const machineType = props.machine.GetType();\r\n    const channels: ChannelModel[] = [];\r\n    let direction: DirectionEnum.Up = DirectionEnum.Up;\r\n    for (const color of machineType.OutputChannels) {\r\n        channels.push({ Channel: color, Direction: direction });\r\n        direction++;\r\n    }\r\n    const isDefault = props.machine.Id.Type === \"Default\";\r\n\r\n    return (\r\n        <div ref={drag} title={machineType.Description} onClick={() => changeShow(!showMenu)}>\r\n            <MachineDisplay MachineType={machineType} IsDefault={isDefault} />\r\n            {!isDefault && showMenu && <div style={{ display: \"flex\" }}>\r\n                <button onClick={() => props.OnEdit(props.machine.Id)}>Edit</button>\r\n                {/* <button onClick={() => props.OnDelete(props.machine.Id)}>Delete</button> */}\r\n            </div>}\r\n        </div>);\r\n};\r\n\r\nexport default StoredMachine;","import React from \"react\";\r\nimport { Constants } from \"../Constants\";\r\nimport { Props } from \"./Props\";\r\nimport StoredMachine from \"./StoredMachine/StoredMachine\";\r\n\r\nexport const MachineCollection: React.FC<Props> = (props) => {\r\n\r\n    const storedMachines = props.allowedMachines.map((m, index) => <div key={index}><StoredMachine machine={m} OnEdit={() => props.onSwitch(m.Id)} OnDelete={() => { }} /></div>);\r\n\r\n    return (\r\n        <div style={{ display: \"flex\", flexFlow: \"column wrap\", height: Constants.CellSize * 8 }}>\r\n            {storedMachines}\r\n        </div>\r\n    );\r\n};","import React from \"react\";\r\nimport { MachineDisplay } from \"../MachineCollection/StoredMachine/MachineDisplay/MachineDisplay\";\r\nimport { Props } from \"./Props\";\r\nimport { State } from \"./State\";\r\nimport { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { IMachineType } from \"../../MachineStore/IMachineType\";\r\n\r\nexport class SaveAsMachine extends React.Component<Props, State>{\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.onSaveClicked = this.onSaveClicked.bind(this);\r\n        this.nameChanged = this.nameChanged.bind(this);\r\n        this.descriptionChanged = this.descriptionChanged.bind(this);\r\n        this.colorChanged = this.colorChanged.bind(this);\r\n        this.borderColorChanged = this.borderColorChanged.bind(this);\r\n        this.confirm = this.confirm.bind(this);\r\n\r\n        this.state = {\r\n            Saving: false,\r\n            Name: \"\",\r\n            Description: \"\",\r\n            Color: \"Yellow\",\r\n            BorderColor: \"Blue\"\r\n        };\r\n    }\r\n\r\n    private onSaveClicked(): void {\r\n        this.setState({ Saving: !this.state.Saving });\r\n    }\r\n\r\n    private nameChanged(event: React.ChangeEvent<HTMLInputElement>): void {\r\n        this.setState({\r\n            Name: event.target.value\r\n        });\r\n    }\r\n\r\n    private descriptionChanged(event: React.ChangeEvent<HTMLInputElement>): void {\r\n        this.setState({\r\n            Description: event.target.value\r\n        });\r\n    }\r\n\r\n    private colorChanged(event: React.ChangeEvent<HTMLInputElement>): void {\r\n        this.setState({\r\n            Color: event.target.value\r\n        });\r\n    }\r\n\r\n    private borderColorChanged(event: React.ChangeEvent<HTMLInputElement>): void {\r\n        this.setState({\r\n            BorderColor: event.target.value\r\n        });\r\n    }\r\n\r\n    private confirm(): void {\r\n\r\n        const type = this.getMachineType();\r\n        this.props.SaveCustomMachine(type);\r\n        this.setState({ Saving: false });\r\n    }\r\n\r\n    private getMachineType(): IMachineType {\r\n        const colors: ChannelColorEnum[] = [];\r\n        if (this.props.ExitCells.some((ec) => ec.Direction === DirectionEnum.Up)) {\r\n            colors.push(ChannelColorEnum.Green);\r\n        }\r\n        if (this.props.ExitCells.some((ec) => ec.Direction === DirectionEnum.Down)) {\r\n            colors.push(ChannelColorEnum.Red);\r\n        }\r\n        if (this.props.ExitCells.some((ec) => ec.Direction === DirectionEnum.Right)) {\r\n            colors.push(ChannelColorEnum.Blue);\r\n        }\r\n        if (this.props.ExitCells.some((ec) => ec.Direction === DirectionEnum.Left)) {\r\n            colors.push(ChannelColorEnum.Yellow);\r\n        }\r\n\r\n        return {\r\n            Name: this.state.Name,\r\n            Description: this.state.Description,\r\n            Color: this.state.Color,\r\n            BorderColor: this.state.BorderColor,\r\n            OutputChannels: colors,\r\n            InputChannels: []\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        let type: IMachineType | undefined;\r\n        if (this.state.Saving) {\r\n            type = this.getMachineType();\r\n        }\r\n        return (\r\n            <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                <button onClick={this.onSaveClicked}>{this.state.Saving ? \"Cancel\" : \"Save as new Machine\"}</button>\r\n                {this.state.Saving && <div>\r\n                    <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\" }}>\r\n                        <label>Name</label>\r\n                        <input onChange={this.nameChanged} value={this.state.Name}></input>\r\n                    </div>\r\n                    <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\" }}>\r\n\r\n                        <label>Description</label>\r\n                        <input onChange={this.descriptionChanged} value={this.state.Description}></input>\r\n                    </div>\r\n                    <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\" }}>\r\n\r\n                        <label>Color</label>\r\n                        <input onChange={this.colorChanged} value={this.state.Color}></input>\r\n                    </div>\r\n                    <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\" }}>\r\n                        <label>BorderColor</label>\r\n                        <input onChange={this.borderColorChanged} value={this.state.BorderColor}></input>\r\n                    </div>\r\n\r\n\r\n                    <MachineDisplay MachineType={type!} IsDefault={false} />\r\n                    <button onClick={this.confirm}>Confirm</button>\r\n                </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport { IMachineType } from \"../../MachineStore/IMachineType\";\r\nimport { MachineStore } from \"../../MachineStore/MachineStore\";\r\nimport { MachineDisplay } from \"../MachineCollection/StoredMachine/MachineDisplay/MachineDisplay\";\r\nimport { SaveAsMachine } from \"../SaveAsMachine/SaveAsMachine\";\r\nimport { Props } from \"./Props\";\r\nimport { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\n\r\nexport const MachineMenu: React.FC<Props> = (props) => {\r\n    let machineType: IMachineType | undefined;\r\n    if (props.CurrentlyEditingMachine !== -1) {\r\n        const store = MachineStore.GetStore();\r\n        const machineTypeOriginal = store.GetMachineType({ Id: props.CurrentlyEditingMachine, Type: \"Custom\" });\r\n        machineType = JSON.parse(JSON.stringify(machineTypeOriginal));\r\n        const colors: ChannelColorEnum[] = [];\r\n        if (props.ExitCells.some((ec) => ec.Direction === DirectionEnum.Up)) {\r\n            colors.push(ChannelColorEnum.Green);\r\n        }\r\n        if (props.ExitCells.some((ec) => ec.Direction === DirectionEnum.Down)) {\r\n            colors.push(ChannelColorEnum.Red);\r\n        }\r\n        if (props.ExitCells.some((ec) => ec.Direction === DirectionEnum.Right)) {\r\n            colors.push(ChannelColorEnum.Blue);\r\n        }\r\n        if (props.ExitCells.some((ec) => ec.Direction === DirectionEnum.Left)) {\r\n            colors.push(ChannelColorEnum.Yellow);\r\n        }\r\n        machineType!.OutputChannels = colors;\r\n    }\r\n    return (\r\n        <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n            {props.CurrentlyEditingMachine !== -1 &&\r\n                <div style={{ display: \"flex\", flexDirection: \"row\", alignItems: \"start\" }}>\r\n                    <MachineDisplay MachineType={machineType!} IsDefault={false} />\r\n                    <button onClick={() => props.SaveNewCustomMachine(machineType!, props.CurrentlyEditingMachine)}>Save Machine</button>\r\n                </div>}\r\n            <SaveAsMachine ExitCells={props.ExitCells} InputChannels={props.InputChannels} SaveCustomMachine={props.SaveNewCustomMachine} />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React from \"react\";\r\nimport { Props } from \"./Props\";\r\nimport { State } from \"./State\";\r\n\r\nexport class MenuItem extends React.Component<Props, State> {\r\n    /**\r\n     *\r\n     */\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.showItem = this.showItem.bind(this);\r\n        this.state = { Showing: false };\r\n    }\r\n\r\n    private showItem() {\r\n        this.setState({ Showing: !this.state.Showing });\r\n    }\r\n\r\n    public render() {\r\n        const style: React.CSSProperties = { borderLeft: \"solid 0.5px\", marginLeft: 10, padding: 10 };\r\n        return (\r\n            <div style={{ marginLeft: 10 }}>\r\n                <button onClick={this.showItem}>{this.state.Showing ? \"Hide \" + this.props.ItemName : \"Show \" + this.props.ItemName}</button>\r\n                {this.state.Showing &&\r\n                    <div style={style}>\r\n                        {this.props.children}\r\n                    </div>}\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport { GridSetupModel } from \"../../../Models/GridSetupModel\";\r\nimport NumberInput from \"../../NumberInput/NumberInput\";\r\nimport { Props } from \"./Props\";\r\n\r\nexport const GridSizeSetting: React.FC<Props> = (props) => {\r\n    const columnsChanged = (value: number) => {\r\n        const newGridSetup: GridSetupModel = {\r\n            NumberOfColumns: value,\r\n            NumberOfRows: props.Setup.NumberOfRows,\r\n            MachineInstances: props.Setup.MachineInstances\r\n        };\r\n\r\n        props.OnSetupChanged(newGridSetup);\r\n    };\r\n\r\n    const rowsChanged = (value: number) => {\r\n        const newGridSetup: GridSetupModel = {\r\n            NumberOfColumns: props.Setup.NumberOfColumns,\r\n            NumberOfRows: value,\r\n            MachineInstances: props.Setup.MachineInstances\r\n        };\r\n\r\n        props.OnSetupChanged(newGridSetup);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <label>Rows:</label>\r\n            <NumberInput value={props.Setup.NumberOfRows} valueChanged={rowsChanged} />\r\n            <label>Columns:</label>\r\n            <NumberInput value={props.Setup.NumberOfColumns} valueChanged={columnsChanged} />\r\n        </div>\r\n    );\r\n};","import React from \"react\";\r\nimport { GameDataModel } from \"../../../Models/GameDataModel\";\r\nimport { Props } from \"./Props\";\r\nimport { State } from \"./State\";\r\n\r\nexport class SaveMenu extends React.Component<Props, State> {\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.ShowSetupString = this.ShowSetupString.bind(this);\r\n        this.LoadSetup = this.LoadSetup.bind(this);\r\n        this.SetupStringChanged = this.SetupStringChanged.bind(this);\r\n\r\n        this.state = { SetupString: \"\", NewSetupString: \"\" };\r\n    }\r\n    public render() {\r\n        const verticalFlex: React.CSSProperties = { display: \"flex\", flexFlow: \"column wrap\" };\r\n        const margin: React.CSSProperties = { display: \"flex\", flexDirection: \"column\" };\r\n        return (\r\n            <div style={verticalFlex}>\r\n                <div style={margin}>\r\n                    <button title={\"Show setup string, copy it so you can later restore your setup\"} onClick={this.ShowSetupString}>Show setup string</button>\r\n                    {this.props.ShowSetup && <input value={this.state.SetupString} readOnly={true}/>}\r\n                </div>\r\n                <div style={margin}>\r\n                    <label>Load Setup</label>\r\n                    <input value={this.state.NewSetupString} onChange={this.SetupStringChanged} />\r\n                    {this.state.NewSetupString !== \"\" && <button title={\"Load Setup, after having pasted a setup above, click to load this setup\"} onClick={this.LoadSetup}>Load setup</button>}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private SetupStringChanged(event: React.ChangeEvent<HTMLInputElement>): void {\r\n        this.setState({ NewSetupString: event.target.value });\r\n    }\r\n\r\n    private ShowSetupString(): void {\r\n        this.setState({ SetupString: JSON.stringify(this.props.Setup) });\r\n        this.props.OnShowingSetup();\r\n    }\r\n\r\n    private LoadSetup(): void {\r\n        const setupModel = JSON.parse(this.state.NewSetupString) as GameDataModel;\r\n        if (setupModel !== undefined) {\r\n            this.props.OnDataChanged(setupModel);\r\n            this.setState({ NewSetupString: \"\" });\r\n        }\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { GridSizeSetting } from \"./GridSizeSetting/GridSizeSetting\";\r\nimport { Props } from \"./Props\";\r\nimport { SaveMenu } from \"./SaveMenu/SaveMenu\";\r\n\r\nexport class Settings extends React.Component<Props> {\r\n\r\n    public render() {\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <SaveMenu Setup={this.props.Setup} OnDataChanged={this.props.OnDataChanged} OnShowingSetup={this.props.OnShowingSetup} ShowSetup={this.props.ShowSetup} />\r\n                    <GridSizeSetting Setup={this.props.Setup.ActiveSetup} OnSetupChanged={this.props.OnSetupChanged} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport { Computer } from \"../../Computing/Computer\";\r\nimport { LoadDefaultGameData } from \"../../Computing/Setup\";\r\nimport { Sandbox } from \"../../Levels/Levels/Sandbox\";\r\nimport { IMachineType } from \"../../MachineStore/IMachineType\";\r\nimport { MachineId } from \"../../MachineStore/MachineId\";\r\nimport { MachineStore } from \"../../MachineStore/MachineStore\";\r\nimport { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { CustomMachineModel } from \"../../Models/CustomMachineModel\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { GameDataModel } from \"../../Models/GameDataModel\";\r\nimport { GridSetupModel } from \"../../Models/GridSetupModel\";\r\nimport { LevelModel } from \"../../Models/LevelModel\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { OutputMessageModel } from \"../../Models/OutputMessageModel\";\r\nimport { Dashboard } from \"../Dashboard/Dashboard\";\r\nimport { Grid } from \"../Grid/Grid\";\r\nimport { LevelDisplay } from \"../LevelDisplay/LevelDisplay\";\r\nimport LevelList from \"../LevelList/LevelList\";\r\nimport { MachineCollection } from \"../MachineCollection/MachineCollection\";\r\nimport { MachineMenu } from \"../MachineMenu/MachineMenu\";\r\nimport { MenuItem } from \"../MenuItem/MenuItem\";\r\nimport { Settings } from \"../Settings/Settings\";\r\nimport { State } from \"./State\";\r\n\r\nexport class Game extends React.Component<{}, State> {\r\n    private computer: Computer;\r\n    private inputs: MessageModel[] = [];\r\n    private outputs: OutputMessageModel[] = [];\r\n    private gameData: GameDataModel;\r\n    private cancelComputation: (() => void) | undefined = undefined;\r\n    private machineStore: MachineStore;\r\n    constructor(props: object) {\r\n        super(props);\r\n        this.inputChanged = this.inputChanged.bind(this);\r\n        this.startComputation = this.startComputation.bind(this);\r\n        this.CalculateNextMessages = this.CalculateNextMessages.bind(this);\r\n        this.GridSetupChanged = this.GridSetupChanged.bind(this);\r\n        this.SwitchSetup = this.SwitchSetup.bind(this);\r\n        this.NewGameDataLoaded = this.NewGameDataLoaded.bind(this);\r\n        this.StepTimeChanged = this.StepTimeChanged.bind(this);\r\n        this.OnShowingSetup = this.OnShowingSetup.bind(this);\r\n        this.stopComputation = this.stopComputation.bind(this);\r\n        this.handleKeyPress = this.handleKeyPress.bind(this);\r\n        this.LevelSelected = this.LevelSelected.bind(this);\r\n        this.PlayTest = this.PlayTest.bind(this);\r\n        this.SaveCustomMachine = this.SaveCustomMachine.bind(this);\r\n\r\n        this.gameData = LoadDefaultGameData();\r\n        const gridSetup = this.gameData.ActiveSetup;\r\n        this.computer = new Computer(gridSetup);\r\n        this.machineStore = MachineStore.GetStore();\r\n\r\n        this.state = {\r\n            Computing: false,\r\n            Messages: [],\r\n            GridSetup: gridSetup,\r\n            CustomInput: \"\",\r\n            StepTime: 6,\r\n            ShowingSetup: false,\r\n            SelectedLevel: Sandbox,\r\n            ExitCells: [{ Cell: { Column: 5, Row: 2 }, Direction: DirectionEnum.Right }],\r\n            Machines: this.machineStore.GetAllMachine(),\r\n            ShowAnimations: true,\r\n            CurrentlyEditedMachine: -1\r\n        };\r\n    }\r\n\r\n    private inputChanged(e: React.ChangeEvent<HTMLInputElement>): void {\r\n        let text = e.target.value;\r\n        text = text.replace(\"*\", \"\");\r\n        text = text.replace(\"<\", \"\");\r\n        text = text.replace(\">\", \"\");\r\n\r\n        this.setState({ CustomInput: text });\r\n    }\r\n    private startComputation(): Promise<OutputMessageModel[]> {\r\n\r\n        return new Promise<OutputMessageModel[]>((resolve, reject) => {\r\n            this.stopComputation().then(() => {\r\n                this.outputs = [];\r\n                return this.handleNextInput(0).then(resolve).catch(reject);\r\n            });\r\n        });\r\n    }\r\n\r\n    private handleNextInput(inputNumber: number): Promise<OutputMessageModel[]> {\r\n\r\n        if (this.inputs.length <= inputNumber) {\r\n            this.setState({ Computing: false });\r\n            return new Promise<OutputMessageModel[]>((resolve) => {\r\n                resolve(this.outputs);\r\n                this.cancelComputation = undefined;\r\n            });\r\n\r\n        } else {\r\n            if (this.state.ShowAnimations) {\r\n                //  const messageModels: MessageLocationModel[] = this.state.Messages; messageModels.concat\r\n                const nextMessages = this.computer.StartComputation(this.inputs[inputNumber]);\r\n\r\n                this.setState({ Computing: true, Messages: nextMessages });\r\n                return this.SetDelay(this.CalculateNextMessages, inputNumber);\r\n            } else {\r\n                const outputMessages = this.computer.RunSetup(this.inputs[inputNumber]);\r\n                if (outputMessages.length > 0) {\r\n                    const outputs: OutputMessageModel[] = outputMessages.map((om) => ({ Content: om.Content, Channel: om.Channel, Order: inputNumber }));\r\n                    this.outputs = this.outputs.concat(outputs);\r\n                }\r\n\r\n                return this.handleNextInput(inputNumber + 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    private SetDelay<T>(callback: (args: any) => Promise<T>, args: any): Promise<T> {\r\n        return new Promise<T>((resolve, reject) => {\r\n            const clearHandle = window.setTimeout(() => callback(args).then(resolve).catch(reject), this.state.StepTime * 100);\r\n            this.cancelComputation = () => {\r\n                window.clearTimeout(clearHandle);\r\n                reject(\"Cancelled\");\r\n            };\r\n        });\r\n    }\r\n\r\n    private stopComputation(): Promise<void> {\r\n        return new Promise((resolve) => {\r\n            if (this.cancelComputation) {\r\n                this.cancelComputation();\r\n                this.cancelComputation = undefined;\r\n            }\r\n            this.setState({ Messages: [], Computing: false }, () => resolve());\r\n        });\r\n    }\r\n\r\n    private CalculateNextMessages(inputNumber: number): Promise<OutputMessageModel[]> {\r\n\r\n        const [nextMessages, outputMessages] = this.computer.GetNextMessages(this.state.Messages);\r\n        if (outputMessages.length > 0) {\r\n            const outputs: OutputMessageModel[] = outputMessages.map((om) => ({ Content: om.Content, Channel: om.Channel, Order: inputNumber }));\r\n            this.outputs = this.outputs.concat(outputs);\r\n        }\r\n\r\n        this.setState({ Messages: nextMessages });\r\n        if (nextMessages.length > 0) {\r\n            return this.SetDelay(this.CalculateNextMessages, inputNumber);\r\n        } else {\r\n            return this.handleNextInput(inputNumber + 1);\r\n        }\r\n    }\r\n\r\n    public componentDidMount(): void {\r\n        document.addEventListener(\"keyup\", (event) => this.handleKeyPress(event), false);\r\n    }\r\n\r\n    public componentWillUnmount() {\r\n        document.removeEventListener(\"keyup\", (event) => this.handleKeyPress(event), false);\r\n    }\r\n\r\n    private PlayTest(input: MessageModel[]): Promise<OutputMessageModel[]> {\r\n        this.inputs = input;\r\n        return this.startComputation();\r\n    }\r\n\r\n    private GridSetupChanged(newGridSetup: GridSetupModel): void {\r\n        this.gameData.ActiveSetup = newGridSetup;\r\n        this.computer.NewSetup(newGridSetup);\r\n        const exits = this.computer.CalculateExits();\r\n        this.setState({ GridSetup: newGridSetup, ShowingSetup: false, ExitCells: exits });\r\n    }\r\n\r\n    private NewGameDataLoaded(newData: GameDataModel): void {\r\n        this.gameData = newData;\r\n        this.machineStore.ReloadCustomMachines(newData.SavedMachines);\r\n        this.computer.NewSetup(newData.ActiveSetup);\r\n        const exits = this.computer.CalculateExits();\r\n        const machines = this.machineStore.GetAllMachine();\r\n        this.setState({ GridSetup: newData.ActiveSetup, ShowingSetup: false, ExitCells: exits, Machines: machines });\r\n    }\r\n\r\n    private SaveCustomMachine(machine: IMachineType, id?: number): void {\r\n        const model: CustomMachineModel = {\r\n            MachineType: machine,\r\n            Setup: this.state.GridSetup,\r\n            Id: id\r\n        };\r\n        const modelWithId = this.machineStore.AddOrUpdateCustomMachine(model);\r\n        const index = this.gameData.SavedMachines.findIndex((m) => m.Id === modelWithId.Id);\r\n        if (index !== -1) {\r\n            this.gameData.SavedMachines.splice(index, 1, modelWithId);\r\n        } else {\r\n            this.gameData.SavedMachines.push(modelWithId);\r\n        }\r\n        const machines = this.machineStore.GetAllMachine();\r\n        this.setState({ Machines: machines });\r\n    }\r\n\r\n    private SwitchSetup(id: MachineId): void {\r\n        const newSetup = this.gameData.SavedMachines.find((sm) => sm.Id === id.Id)!;\r\n        const setupString = JSON.stringify(newSetup.Setup);\r\n        const setup = JSON.parse(setupString) as GridSetupModel;\r\n        this.setState({ CurrentlyEditedMachine: id.Id });\r\n        this.GridSetupChanged(setup);\r\n    }\r\n\r\n    private StepTimeChanged(newStepTime: number): void {\r\n        this.setState({ StepTime: newStepTime });\r\n    }\r\n\r\n    private OnShowingSetup() {\r\n        this.setState({ ShowingSetup: true });\r\n    }\r\n\r\n    private LevelSelected(level: LevelModel) {\r\n        this.setState({ SelectedLevel: level });\r\n    }\r\n\r\n    private handleKeyPress(event: KeyboardEvent): void {\r\n        switch (event.key) {\r\n            case \"Enter\":\r\n                this.startComputation();\r\n                break;\r\n            case \" \":\r\n                this.stopComputation();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        const startMachines = this.computer.GetStartMachines();\r\n\r\n        const disallowedStartMachines = startMachines.map((m) => m.MachineId);\r\n        disallowedStartMachines.push({ Id: 1, Type: \"Default\" });\r\n        const allowedMachines = this.state.Machines.filter((m) => !disallowedStartMachines.some((mId) => mId.Id === m.Id.Id && mId.Type === m.Id.Type));\r\n        // const allowedInputColors = [ChannelColorEnum.Green, ChannelColorEnum.Red, ChannelColorEnum.Blue];\r\n        const allowedInputColors = [ChannelColorEnum.Green];\r\n\r\n        return (\r\n            <div style={{ display: \"flex\", flexFlow: \"column wrap\" }}>\r\n                <div>\r\n                    <h2 style={{ textAlign: \"center\" }}>LogicBoxes</h2>\r\n                </div>\r\n                <div style={{ display: \"flex\", flexFlow: \"row wrap\" }}>\r\n                    <div style={{ flex: \"1 1 200px\" }}>\r\n                        <MenuItem ItemName=\"Settings\">\r\n                            <Settings\r\n                                Setup={this.gameData}\r\n                                OnSetupChanged={this.GridSetupChanged}\r\n                                OnDataChanged={this.NewGameDataLoaded}\r\n                                ShowSetup={this.state.ShowingSetup}\r\n                                OnShowingSetup={this.OnShowingSetup} />\r\n                        </MenuItem>\r\n                        <MenuItem ItemName=\"Challenges\">\r\n                            <LevelList OnLevelClicked={this.LevelSelected} />\r\n                        </MenuItem>\r\n                        <LevelDisplay Level={this.state.SelectedLevel} PlayTest={this.PlayTest} MultipleInputsAllowed={false} AllowedInputs={allowedInputColors} />\r\n\r\n                    </div>\r\n                    <div style={{ display: \"flex\", flex: \"4 1 400px\", flexFlow: \"column\", alignItems: \"center\" }}>\r\n                        <MachineMenu SaveNewCustomMachine={this.SaveCustomMachine} InputChannels={[]} ExitCells={this.state.ExitCells} CurrentlyEditingMachine={this.state.CurrentlyEditedMachine} />\r\n                        <div style={{ marginTop: 10 }}>\r\n                            <Grid\r\n                                GridSetup={this.state.GridSetup}\r\n                                Computing={this.state.Computing}\r\n                                Messages={this.state.Messages}\r\n                                OnChanged={this.GridSetupChanged}\r\n                                ExitCells={this.state.ExitCells} />\r\n                        </div>\r\n                        <div>\r\n                            <Dashboard StepTime={this.state.StepTime} OnStepTimeChanged={this.StepTimeChanged} ShowAnimations={this.state.ShowAnimations} OnShowAnimationsChanged={(show) => this.setState({ ShowAnimations: show })} />\r\n                        </div>\r\n                    </div>\r\n                    <div style={{ display: \"flex\", flexDirection: \"column\", flexWrap: \"wrap\", flex: \"1 1 200px\", marginLeft: 30 }}>\r\n                        <MachineCollection allowedMachines={allowedMachines} onSwitch={this.SwitchSetup} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import React from \"react\";\r\nimport { DndProvider } from \"react-dnd\";\r\nimport HTML5Backend from \"react-dnd-html5-backend\";\r\nimport { Game } from \"./Components/Game/Game\";\r\n\r\nconst App: React.FC = () => {\r\n\r\n  return (\r\n    <DndProvider backend={HTML5Backend}>\r\n      <Game />\r\n    </DndProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}