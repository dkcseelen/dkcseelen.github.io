{"version":3,"sources":["Models/ChannelColorsEnum.ts","Computing/MessageCleaner.ts","MachineStore/DefaultMachines/AddStarMachine.ts","Models/DirectionEnum.ts","MachineStore/DefaultMachines/AddZeroMachine.ts","MachineStore/DefaultMachines/CompareMachine.ts","MachineStore/DefaultMachines/CopyMachine.ts","MachineStore/DefaultMachines/DeleteMachine.ts","MachineStore/DefaultMachines/GreenStartMachine.ts","MachineStore/DefaultMachines/IncrementMachine.ts","MachineStore/DefaultMachines/MoveMachine.ts","MachineStore/DefaultMachines/RedStartMachine.ts","MachineStore/DefaultMachines/RotateMachine.ts","MachineStore/MachineStore.ts","Computing/Computer.ts","Computing/Setup.ts","Levels/Levels/Sandbox.ts","Components/NumberInput/NumberInput.tsx","Components/Dashboard/Dashboard.tsx","Components/Constants.ts","Components/DragItemTypes.ts","Models/OutputStatusEnum.ts","Components/MessageFormatter.ts","Components/Grid/Cell/MachineInstance/Channel/Channel.tsx","Components/Grid/Cell/MachineInstance/Machine/Machine.tsx","Components/Grid/Cell/MachineInstance/MachineInstance.tsx","Components/Grid/Cell/Cell.tsx","Components/Grid/Grid.tsx","Components/LevelDisplay/TestDisplay/MessageDisplay/MessageDisplay.tsx","Components/LevelDisplay/CustomTest/EditableMessageDisplay/EditableMessageDisplay.tsx","Components/LevelDisplay/CustomTest/CustomTest.tsx","Components/LevelDisplay/TestDisplay/TestDisplay.tsx","Components/LevelDisplay/LevelDisplay.tsx","Components/LevelList/LevelPreview/LevelPreview.tsx","Levels/Levels/AppendLength.ts","Levels/Levels/GetLength.ts","Levels/Levels/GetType.ts","Levels/Levels/IsEmpty.ts","Levels/Levels/KeepNumbers.ts","Levels/Levels/PlusOne.ts","Levels/Levels/RemoveAllRepeats.ts","Levels/Levels/RotateBackwards.ts","Levels/LevelStore.ts","Components/LevelList/LevelList.tsx","Components/MachineCollection/MachineDisplay/MachineDisplay.tsx","Components/MachineCollection/StoredMachine/StoredMachine.tsx","Components/MachineCollection/MachineCollection.tsx","Components/MachineMenu/MachineMenu.tsx","Components/MenuItem/MenuItem.tsx","Components/Settings/GridSizeSetting/GridSizeSetting.tsx","Components/Settings/SaveMenu/SaveMenu.tsx","Components/Settings/Settings.tsx","Components/Game/Game.tsx","App.tsx","index.tsx"],"names":["ChannelColorEnum","RestoreMessage","message","starNumber","seekString","seekLength","length","seekPosition","index","indexOf","indexStar","substring","DirectionEnum","AddStarMachine","actor","Act","returnValue","content","Content","push","Channel","Green","Id","Type","this","BorderColor","Color","Name","InputChannels","OutputChannels","Description","AddZeroMachine","CompareMachine","channel","Red","position","CopyMachine","DeleteMachine","GreenStartMachine","IncrementMachine","newMessage","char","String","fromCharCode","charCodeAt","slice","MoveMachine","RedStartMachine","RotateMachine","MachineStore","machines","customId","init","id","machine","find","m","undefined","Error","machineModel","model","JSON","parse","stringify","GetType","MachineType","GetActor","CreateCustomActor","Setup","savedMachines","filter","AddCustomMachine","FindMachine","setup","starIndex","usedStars","lastIndex","numberPart","parseInt","some","u","returnMessage","CleanMessage","saveMessage","cleanedMessage","Computer","RunSetup","map","mm","machineStore","GridSetup","store","GetStore","bind","GetMachines","MachineInstances","mi","MachineId","startMachines","machineInstance","color","Blue","Yellow","exitCells","cells","starts","GetStartMachines","concat","s","Cell","Direction","Channels","i","cell","Column","Row","cellModel","Move","c","input","messageLocations","GetStartMachine","direction","messageLocation","messages","newMessages","messageCell","nextContents","nextContent","channelMap","cm","doneMessages","outputs","doneMessage","Up","Down","Right","Left","outputMessages","StartComputation","GetNextMessages","nextMessages","NumberOfRows","NumberOfColumns","LoadDefaultGameData","LoadDefaultData","ActiveSetup","SavedMachines","Sandbox","AllowedMachines","Tests","NumberInput","props","style","marginLeft","marginRight","onClick","valueChanged","value","Dashboard","display","flexDirection","title","OnShowAnimationsChanged","ShowAnimations","StepTime","OnStepTimeChanged","Constants","CellSize","OutputStatus","DragItemTypes","FormatMessage","formattedMessage","onClicked","cellSize","channelStyle","height","width","marginTop","backgroundColor","ChannelMap","borderStyle","borderWidth","border","pointerEvents","rotate","rotation","transform","event","OnChanged","newDirection","React","Component","Machine","machineSize","borderSize","machineStyle","IsDefault","borderColor","borderRadius","justifyContent","alignItems","MachineInstance","useDrag","item","type","end","dropResult","monitor","didDrop","OnRemoved","collect","isDragging","drag","channels","key","OnChannelChanged","margin","machineType","GetMachineType","ref","useDrop","accept","drop","OnMovedMachine","getItem","location","itemProps","OnNewMachine","float","exitCell","borderRight","borderBottom","borderLeft","borderTop","marginBottom","OnMachineRemoved","Grid","ChannelChanged","MachineMoved","MachineAdded","MachineRemoved","rows","rowIndex","row","columnIndex","foundMachineInstance","foundMessage","foundExit","Messages","ExitCells","exit","newGridSetup","findIndex","Math","max","MessageDisplay","flexFlow","Input","colorCode","Message","statusStyle","Status","Fullfilled","NotMatched","EditableMessageDisplay","AllowedInputColors","onChange","MessageChanged","target","cc","CustomTest","InputChanged","AddInput","DeleteInput","Play","state","Inputs","Outputs","inputs","setState","splice","PlayTest","then","catch","lineNumber","o","Order","NotChecked","MultipleInputs","TestDisplay","Test","expectedOutputs","actuals","ActualOutputs","j","expected","valid","indexActual","NotFullfilled","padding","OnPlay","flexGrow","LevelDisplay","testStarted","test","actualOutputs","tests","Level","t","AllowedInputs","MultipleInputsAllowed","LevelPreview","LevelClicked","AppendLength","GetLength","IsEmpty","KeepNumbers","PlusOne","RemoveAllRepeats","RotateBackwards","LevelStore","levels","levelStore","LevelList","GetAllLevels","l","OnLevelClicked","MachineDisplay","channelComponents","absoluteStyle","left","StoredMachine","MachineCollection","relativeStyle","storedMachines","allowedMachines","MachineMenu","onSaveClicked","nameChanged","descriptionChanged","colorChanged","borderColorChanged","confirm","Saving","getMachineType","SaveCustomMachine","colors","ec","MenuItem","showItem","Showing","ItemName","children","GridSizeSetting","OnSetupChanged","SaveMenu","ShowSetupString","LoadSetup","SetupStringChanged","SetupString","NewSetupString","ShowSetup","readOnly","OnShowingSetup","setupModel","OnDataChanged","Settings","Game","computer","gameData","cancelComputation","inputChanged","startComputation","CalculateNextMessages","GridSetupChanged","NewGameDataLoaded","StepTimeChanged","stopComputation","handleKeyPress","LevelSelected","gridSetup","Computing","CustomInput","ShowingSetup","SelectedLevel","Machines","GetAllMachine","e","text","replace","Promise","resolve","reject","handleNextInput","inputNumber","SetDelay","om","callback","args","clearHandle","window","setTimeout","clearTimeout","document","addEventListener","removeEventListener","NewSetup","exits","CalculateExits","newData","ReloadCustomMachines","modelWithId","newStepTime","level","disallowedStartMachines","mId","allowedInputColors","textAlign","flex","show","flexWrap","App","backend","HTML5Backend","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.f748cd5d.chunk.js","sourcesContent":["export enum ChannelColorEnum {\r\n    Green = \"green\",\r\n    Red = \"red\",\r\n    Blue = \"blue\",\r\n    Yellow = \"yellow\",\r\n}","export const CleanMessage: (message: string) => [string, number] = (message: string) => {\r\n    let starIndex = message.indexOf(\"*\");\r\n    if (starIndex !== -1) {\r\n        const usedStars: number[] = [];\r\n        let seekPosition = 0;\r\n        while (true) {\r\n            seekPosition = message.indexOf(\"<\", seekPosition);\r\n            if (seekPosition === -1) {\r\n                break;\r\n            }\r\n\r\n            const lastIndex = message.indexOf(\">\", seekPosition);\r\n            const numberPart = message.substring(seekPosition + 1, lastIndex - seekPosition - 1);\r\n            usedStars.push(parseInt(numberPart, 10));\r\n            seekPosition = lastIndex;\r\n        }\r\n\r\n        let starNumber = 0;\r\n\r\n        // eslint-disable-next-line\r\n        while (usedStars.some((u) => (u === starNumber))) {\r\n            starNumber++;\r\n        }\r\n\r\n        let returnMessage = message;\r\n        do {\r\n            returnMessage = returnMessage.substring(0, starIndex) + \"<\" + starNumber + \">\" + returnMessage.substring(starIndex + 1);\r\n            starIndex = returnMessage.indexOf(\"*\");\r\n        } while (starIndex !== -1);\r\n\r\n        return [returnMessage, starNumber];\r\n    }\r\n\r\n    return [message, -1];\r\n};\r\n\r\nexport const RestoreMessage = (message: string, starNumber: number) => {\r\n    if (starNumber !== -1) {\r\n        const seekString = \"<\" + starNumber + \">\";\r\n        const seekLength = seekString.length;\r\n        // message = message.replace(seekString, \"*\");\r\n        let seekPosition = 0;\r\n        let index = message.indexOf(seekString);\r\n        let indexStar = message.indexOf(\"*\");\r\n\r\n        while (index !== -1 || indexStar !== -1) {\r\n            if (index !== -1 && (indexStar === -1 || index < indexStar)) {\r\n                message = message.substring(0, index) + \"*\" + message.substring(index + seekLength);\r\n                seekPosition = index + 1;\r\n            } else {\r\n                message = message.substring(0, indexStar) + seekString + message.substring(indexStar + 1);\r\n                seekPosition = indexStar + seekLength;\r\n            }\r\n\r\n            index = message.indexOf(seekString, seekPosition);\r\n            indexStar = message.indexOf(\"*\", seekPosition);\r\n        }\r\n    }\r\n    return message;\r\n};","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { MachineId } from \"../MachineId\";\r\n\r\nexport class AddStarMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            const content = \"*\" + message.Content;\r\n\r\n            returnValue.push({ Content: content, Channel: ChannelColorEnum.Green });\r\n            return returnValue;\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            BorderColor: \"blue\",\r\n            Color: \"grey\",\r\n            Name: \"Add *\",\r\n            InputChannels: [],\r\n            OutputChannels: [ChannelColorEnum.Green],\r\n            Description: \"Puts a star in front of the string. There is guaranteed not to be a star in the input\"\r\n        };\r\n    }\r\n    public Id: MachineId = {\r\n        Id: 10,\r\n        Type: \"Default\"\r\n    };\r\n}","export enum DirectionEnum {\r\n    Up,\r\n    Down,\r\n    Left,\r\n    Right,\r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { MachineId } from \"../MachineId\";\r\n\r\nexport class AddZeroMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            const content = \"0\" + message.Content;\r\n\r\n            returnValue.push({ Content: content, Channel: ChannelColorEnum.Green });\r\n            return returnValue;\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            BorderColor: \"yellow\",\r\n            Color: \"darkorange\",\r\n            Name: \"Add 0\",\r\n            InputChannels: [],\r\n            OutputChannels: [ChannelColorEnum.Green],\r\n            Description: \"Puts a zero in front of the string\"\r\n        };\r\n    }\r\n    public Id: MachineId = {\r\n        Id: 11,\r\n        Type: \"Default\"\r\n    };\r\n}\r\n","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { MachineId } from \"../MachineId\";\r\n\r\nexport class CompareMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            let channel: ChannelColorEnum = ChannelColorEnum.Green;\r\n            if (message.Content.length < 2) {\r\n                channel = ChannelColorEnum.Red;\r\n            } else {\r\n                if (message.Content[0] !== \"<\") {\r\n                    if (message.Content[0] !== message.Content[1]) {\r\n                        channel = ChannelColorEnum.Red;\r\n                    }\r\n                } else {\r\n                    const position = message.Content.indexOf(\">\");\r\n                    const starNumber = message.Content.substring(0, position + 1);\r\n                    if (message.Content.length < starNumber.length * 2) {\r\n                        channel = ChannelColorEnum.Red;\r\n                    } else {\r\n                        const secondPart = message.Content.substring(position + 1, position + starNumber.length + 1);\r\n                        if (secondPart !== starNumber) {\r\n                            channel = ChannelColorEnum.Red;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            returnValue.push({ Content: message.Content, Channel: channel });\r\n            return returnValue;\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            BorderColor: \"red\",\r\n            Color: \"green\",\r\n            Name: \"Compare\",\r\n            InputChannels: [],\r\n            OutputChannels: [ChannelColorEnum.Green, ChannelColorEnum.Red],\r\n            Description: \"Compares the first two characters in the string. If they are the same, exits green. If they are different exits red\"\r\n        };\r\n    }\r\n    public Id: MachineId = {\r\n        Id: 9,\r\n        Type: \"Default\"\r\n    };\r\n}\r\n","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { MachineId } from \"../MachineId\";\r\n\r\nexport class CopyMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            let content: string;\r\n            if (message.Content.length < 1) {\r\n                content = \"\";\r\n            } else {\r\n                if (message.Content[0] !== \"<\") {\r\n                    content = message.Content[0] + message.Content;\r\n                } else {\r\n                    const index = message.Content.indexOf(\">\");\r\n                    content = message.Content.substring(0, index + 1) + message.Content;\r\n                }\r\n            }\r\n\r\n            returnValue.push({ Content: content, Channel: ChannelColorEnum.Green });\r\n            return returnValue;\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            BorderColor: \"green\",\r\n            Color: \"yellow\",\r\n            Name: \"Copy\",\r\n            InputChannels: [],\r\n            OutputChannels: [ChannelColorEnum.Green],\r\n            Description: \"Copies the first character of the string and puts it in front of the string\"\r\n        };\r\n    }\r\n    public Id: MachineId = {\r\n        Id: 6,\r\n        Type: \"Default\"\r\n    };\r\n}\r\n","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { MachineId } from \"../MachineId\";\r\n\r\nexport class DeleteMachine implements IMachine {\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            let content: string;\r\n            if (message.Content.length < 1) {\r\n                content = \"\";\r\n            } else {\r\n                if (message.Content[0] !== \"<\") {\r\n                    content = message.Content.substring(1);\r\n                } else {\r\n                    const index = message.Content.indexOf(\">\");\r\n                    content = message.Content.substring(index + 1);\r\n                }\r\n            }\r\n\r\n            returnValue.push({ Content: content, Channel: ChannelColorEnum.Green });\r\n            return returnValue;\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            BorderColor: \"red\",\r\n            Color: \"red\",\r\n            Name: \"Delete\",\r\n            InputChannels: [],\r\n            OutputChannels: [ChannelColorEnum.Green],\r\n            Description: \"Deletes the first character of the string\"\r\n        };\r\n    }\r\n    public Id: MachineId = {\r\n        Id: 7,\r\n        Type: \"Default\"\r\n    };\r\n}\r\n","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { MachineId } from \"../MachineId\";\r\n\r\nexport class GreenStartMachine implements IMachine {\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            returnValue.push({ Content: message.Content, Channel: ChannelColorEnum.Green });\r\n            return returnValue;\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Color: \"white\",\r\n            BorderColor: \"green\",\r\n            OutputChannels: [ChannelColorEnum.Green],\r\n            InputChannels: [],\r\n            Name: \"Start\",\r\n            Description: \"Starting point of the computation. Acts as a move machine for all other purposes\"\r\n        };\r\n    }\r\n    public readonly Id: MachineId = { Id: 0, Type: \"Default\" };\r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { MachineId } from \"../MachineId\";\r\n\r\nexport class IncrementMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            let newMessage = \"\";\r\n            if (message.Content.length > 0) {\r\n                const char = message.Content[0];\r\n\r\n                if ((char >= \"0\" && char <= \"8\") || (char >= \"a\" && char < \"z\") || (char >= \"A\" && char < \"Z\")) {\r\n                    newMessage = String.fromCharCode(char.charCodeAt(0) + 1) + message.Content.slice(1);\r\n                } else if (char === \"9\") {\r\n                    newMessage = \"0\" + message.Content.slice(1);\r\n                } else if (char === \"z\") {\r\n                    newMessage = \"a\" + message.Content.slice(1);\r\n                } else if (char === \"Z\") {\r\n                    newMessage = \"A\" + message.Content.slice(1);\r\n                } else {\r\n                    newMessage = message.Content;\r\n                }\r\n            }\r\n\r\n            returnValue.push({ Content: newMessage, Channel: ChannelColorEnum.Green });\r\n            return returnValue;\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            BorderColor: \"DodgerBlue\",\r\n            Color: \"MediumVioletRed\",\r\n            Name: \"Increment\",\r\n            InputChannels: [],\r\n            OutputChannels: [ChannelColorEnum.Green],\r\n            Description: \"Increases a number in front of the string by 1, makes as letter the next letter in the alphabet. 9 becomes 0, z becomes a. All other starting characters are not changed\"\r\n        };\r\n    }\r\n    public Id: MachineId = {\r\n        Id: 12,\r\n        Type: \"Default\"\r\n    };\r\n}\r\n","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { MachineId } from \"../MachineId\";\r\n\r\nexport class MoveMachine implements IMachine {\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            returnValue.push({ Content: message.Content, Channel: ChannelColorEnum.Green });\r\n            return returnValue;\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Color: \"green\",\r\n            BorderColor: \"lightgreen\",\r\n            OutputChannels: [ChannelColorEnum.Green],\r\n            InputChannels: [],\r\n            Name: \"Move\",\r\n            Description: \"Does nothing with the string, only used to get the message to the right place\"\r\n        };\r\n    }\r\n    public readonly Id: MachineId = { Id: 5, Type: \"Default\" };\r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { MachineId } from \"../MachineId\";\r\n\r\nexport class RedStartMachine implements IMachine {\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            returnValue.push({ Content: message.Content, Channel: ChannelColorEnum.Green });\r\n            return returnValue;\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Color: \"white\",\r\n            BorderColor: \"red\",\r\n            OutputChannels: [ChannelColorEnum.Green],\r\n            InputChannels: [],\r\n            Name: \"Start\",\r\n            Description: \"Starting point of the computation. Acts as a move machine for all other purposes\"\r\n        };\r\n    }\r\n    public readonly Id: MachineId = { Id: 1, Type: \"Default\" };\r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { MachineId } from \"../MachineId\";\r\n\r\nexport class RotateMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            let content: string;\r\n            if (message.Content.length < 2) {\r\n                content = message.Content;\r\n            } else {\r\n                if (message.Content[0] !== \"<\") {\r\n                    content = message.Content.substring(1) + message.Content.substring(0, 1);\r\n                } else {\r\n                    const index = message.Content.indexOf(\">\");\r\n                    content = message.Content.substring(index + 1) + message.Content.substring(0, index + 1);\r\n                }\r\n            }\r\n\r\n            returnValue.push({ Content: content, Channel: ChannelColorEnum.Green });\r\n            return returnValue;\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            BorderColor: \"blue\",\r\n            Color: \"cyan\",\r\n            Name: \"Rotate\",\r\n            InputChannels: [],\r\n            OutputChannels: [ChannelColorEnum.Green],\r\n            Description: \"Removes the first character of the string, and adds it to the end of the string\"\r\n        };\r\n    }\r\n    public Id: MachineId = {\r\n        Id: 8,\r\n        Type: \"Default\"\r\n    };\r\n}\r\n","import { Computer } from \"../Computing/Computer\";\r\nimport { CleanMessage, RestoreMessage } from \"../Computing/MessageCleaner\";\r\nimport { CustomMachineModel } from \"../Models/CustomMachineModel\";\r\nimport { GridSetupModel } from \"../Models/GridSetupModel\";\r\nimport { MessageModel } from \"../Models/MessageModel\";\r\nimport { AddStarMachine } from \"./DefaultMachines/AddStarMachine\";\r\nimport { AddZeroMachine } from \"./DefaultMachines/AddZeroMachine\";\r\nimport { CompareMachine } from \"./DefaultMachines/CompareMachine\";\r\nimport { CopyMachine } from \"./DefaultMachines/CopyMachine\";\r\nimport { DeleteMachine } from \"./DefaultMachines/DeleteMachine\";\r\nimport { GreenStartMachine } from \"./DefaultMachines/GreenStartMachine\";\r\nimport { IncrementMachine } from \"./DefaultMachines/IncrementMachine\";\r\nimport { MoveMachine } from \"./DefaultMachines/MoveMachine\";\r\nimport { RedStartMachine } from \"./DefaultMachines/RedStartMachine\";\r\nimport { RotateMachine } from \"./DefaultMachines/RotateMachine\";\r\nimport { IActor } from \"./IActor\";\r\nimport { IMachine } from \"./IMachine\";\r\nimport { IMachineType } from \"./IMachineType\";\r\nimport { MachineId } from \"./MachineId\";\r\n\r\nexport class MachineStore {\r\n    private static machineStore: MachineStore;\r\n    private machines: IMachine[];\r\n    private customId: number = 0;\r\n\r\n    private constructor() {\r\n        this.machines = [];\r\n        this.init();\r\n    }\r\n\r\n    public static GetStore(): MachineStore {\r\n        if (MachineStore.machineStore === undefined) {\r\n            MachineStore.machineStore = new MachineStore();\r\n        }\r\n\r\n        return MachineStore.machineStore;\r\n    }\r\n\r\n    private init(): void {\r\n        this.machines = [];\r\n        this.machines.push(new GreenStartMachine());\r\n        this.machines.push(new RedStartMachine());\r\n        this.machines.push(new MoveMachine());\r\n        this.machines.push(new CopyMachine());\r\n        this.machines.push(new DeleteMachine());\r\n        this.machines.push(new RotateMachine());\r\n        this.machines.push(new CompareMachine());\r\n        this.machines.push(new AddStarMachine());\r\n        this.machines.push(new AddZeroMachine());\r\n        this.machines.push(new IncrementMachine());\r\n        // this.machines.push(new SplitMachine());\r\n    }\r\n\r\n    private FindMachine(id: MachineId): IMachine {\r\n        const machine = this.machines.find((m) => m.Id.Id === id.Id && m.Id.Type === id.Type);\r\n        if (machine === undefined) {\r\n            throw new Error(\"No machine found with id \" + id.Id + \" and type \" + id.Type);\r\n        }\r\n\r\n        return machine;\r\n    }\r\n\r\n    public AddCustomMachine(machineModel: CustomMachineModel): CustomMachineModel {\r\n        if (machineModel.Id === undefined) {\r\n            machineModel.Id = this.customId++;\r\n        } else if (machineModel.Id >= this.customId) {\r\n            this.customId = machineModel.Id + 1;\r\n        }\r\n\r\n        machineModel.Id = machineModel.Id !== undefined ? machineModel.Id : this.customId++;\r\n        const model = JSON.parse(JSON.stringify(machineModel)) as CustomMachineModel;\r\n\r\n        const machine: IMachine = {\r\n            Id: {\r\n                Id: model.Id!,\r\n                Type: \"Custom\"\r\n            },\r\n            GetType: () => model.MachineType,\r\n            GetActor: () => this.CreateCustomActor(model.Setup)\r\n        };\r\n        this.machines.push(machine);\r\n        return model;\r\n    }\r\n\r\n    public ReloadCustomMachines(savedMachines: CustomMachineModel[]) {\r\n        this.machines = this.machines.filter((m) => m.Id.Type === \"Default\");\r\n        for (const machine of savedMachines) {\r\n            this.AddCustomMachine(machine);\r\n        }\r\n    }\r\n\r\n    public GetActor(id: MachineId): IActor {\r\n        return this.FindMachine(id).GetActor();\r\n    }\r\n\r\n    public GetMachineType(id: MachineId): IMachineType {\r\n        return this.FindMachine(id).GetType();\r\n    }\r\n\r\n    public GetAllMachine(): IMachine[] {\r\n        return this.machines;\r\n    }\r\n\r\n    private CreateCustomActor(setup: GridSetupModel): IActor {\r\n\r\n        return {\r\n            Act: (message) => {\r\n                const [saveMessage, starNumber] = CleanMessage(message.Content);\r\n                const cleanedMessage: MessageModel = { Content: saveMessage, Channel: message.Channel };\r\n                const computer = new Computer(setup);\r\n                const computedMessages = computer.RunSetup(cleanedMessage);\r\n                const returnValue: MessageModel[] = computedMessages.map((mm) => ({ Channel: mm.Channel, Content: RestoreMessage(mm.Content, starNumber) }));\r\n                return returnValue;\r\n            }\r\n        };\r\n    }\r\n}","import { IActor } from \"../MachineStore/IActor\";\r\nimport { MachineStore } from \"../MachineStore/MachineStore\";\r\nimport { CellModel } from \"../Models/CellModel\";\r\nimport { ChannelColorEnum } from \"../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../Models/DirectionEnum\";\r\nimport { ExitCellModel } from \"../Models/ExitCellModel\";\r\nimport { GridSetupModel } from \"../Models/GridSetupModel\";\r\nimport { MachineInstanceModel } from \"../Models/MachineInstanceModel\";\r\nimport { MessageLocationModel } from \"../Models/MessageLocationModel\";\r\nimport { MessageModel } from \"../Models/MessageModel\";\r\n\r\nexport class Computer {\r\n    private setup: GridSetupModel;\r\n    private machines: Array<{ id: number, actor: IActor }> = [];\r\n    private store: MachineStore;\r\n\r\n    constructor(setup: GridSetupModel) {\r\n        this.setup = setup;\r\n        this.store = MachineStore.GetStore();\r\n\r\n        this.RunSetup = this.RunSetup.bind(this);\r\n    }\r\n\r\n    public NewSetup(setup: GridSetupModel) {\r\n        this.setup = setup;\r\n        this.GetMachines();\r\n    }\r\n\r\n    private GetMachines(): void {\r\n        this.machines = this.setup.MachineInstances.map((mi) => ({ id: mi.Id, actor: this.store.GetActor(mi.MachineId) }));\r\n    }\r\n\r\n    public GetStartMachines(): MachineInstanceModel[] {\r\n        const startMachines: MachineInstanceModel[] = [];\r\n        for (const machineInstance of this.setup.MachineInstances) {\r\n            if (machineInstance.MachineId.Id < 4 && machineInstance.MachineId.Type === \"Default\") {\r\n                startMachines.push(machineInstance);\r\n            }\r\n        }\r\n\r\n        return startMachines;\r\n    }\r\n\r\n    public GetStartMachine(color: ChannelColorEnum): MachineInstanceModel | undefined {\r\n\r\n        let id: number = 0;\r\n        switch (color) {\r\n            case ChannelColorEnum.Green:\r\n                id = 0;\r\n                break;\r\n            case ChannelColorEnum.Red:\r\n                id = 1;\r\n                break;\r\n            case ChannelColorEnum.Blue:\r\n                id = 2;\r\n                break;\r\n            case ChannelColorEnum.Yellow:\r\n                id = 3;\r\n                break;\r\n        }\r\n\r\n        return this.setup.MachineInstances.find((mi) => mi.MachineId.Id === id && mi.MachineId.Type === \"Default\");\r\n    }\r\n\r\n    public CalculateExits(): ExitCellModel[] {\r\n        const exitCells: ExitCellModel[] = [];\r\n        let cells: ExitCellModel[] = [];\r\n        const starts = this.GetStartMachines();\r\n        cells = cells.concat(starts.map((s) => ({ Cell: s.Cell, Direction: s.Channels[0].Direction })));\r\n        for (let i = 0; i < cells.length; i++) {\r\n            const cell: ExitCellModel = { Direction: cells[i].Direction, Cell: { Column: cells[i].Cell.Column, Row: cells[i].Cell.Row } };\r\n            let machine: MachineInstanceModel | undefined;\r\n            let cellModel: CellModel | undefined;\r\n            while (machine === undefined) {\r\n                cellModel = this.Move(cell.Cell, cell.Direction);\r\n                if (cellModel === undefined) {\r\n                    break;\r\n                }\r\n\r\n                cell.Cell = cellModel;\r\n                // eslint-disable-next-line\r\n                machine = this.setup.MachineInstances.find((mi) => mi.Cell.Column === cell.Cell!.Column && mi.Cell.Row === cell.Cell!.Row);\r\n            }\r\n\r\n            if (cellModel === undefined) {\r\n                exitCells.push(cell);\r\n                continue;\r\n            }\r\n\r\n            if (!cells.some((c) => c.Cell.Column === cell.Cell.Column && c.Cell.Row === cell.Cell.Row)) {\r\n                cells = cells.concat(machine!.Channels.map((c) => ({ Cell: cell.Cell, Direction: c.Direction })));\r\n\r\n            }\r\n        }\r\n        return exitCells;\r\n    }\r\n    public StartComputation(input: MessageModel): MessageLocationModel[] {\r\n        this.GetMachines();\r\n        const messageLocations: MessageLocationModel[] = [];\r\n\r\n        const machineInstance = this.GetStartMachine(input.Channel);\r\n        if (machineInstance === undefined) {\r\n            return [];\r\n        }\r\n\r\n        const direction = machineInstance.Channels[0].Direction;\r\n        const messageLocation: MessageLocationModel = { Content: input.Content, Direction: direction, Cell: machineInstance.Cell };\r\n        messageLocations.push(messageLocation);\r\n\r\n        return messageLocations;\r\n    }\r\n\r\n    public GetNextMessages(messages: MessageLocationModel[]): [MessageLocationModel[], MessageModel[]] {\r\n        const newMessages: MessageLocationModel[] = [];\r\n        for (const message of messages) {\r\n            let machine: MachineInstanceModel | undefined;\r\n            let messageCell: CellModel | undefined = message.Cell;\r\n\r\n            while (machine === undefined) {\r\n                messageCell = this.Move(messageCell!, message.Direction);\r\n                if (messageCell === undefined) {\r\n                    break;\r\n                }\r\n\r\n                // eslint-disable-next-line\r\n                machine = this.setup.MachineInstances.find((mi) => mi.Cell.Column === messageCell!.Column && mi.Cell.Row === messageCell!.Row);\r\n            }\r\n\r\n            if (messageCell === undefined) {\r\n                newMessages.push({ Cell: undefined, Direction: message.Direction, Content: message.Content });\r\n                continue;\r\n            }\r\n\r\n            const channel = ChannelColorEnum.Green;\r\n\r\n            const actor = this.machines.find((m) => m.id === machine!.Id)!.actor;\r\n            const nextContents = actor.Act({ Content: message.Content, Channel: channel });\r\n            for (const nextContent of nextContents) {\r\n                const channelMap = machine!.Channels.find((cm) => cm.Channel === nextContent.Channel);\r\n                if (channelMap === undefined) {\r\n                    throw Error(\"Channelmap \" + nextContent.Channel + \"undefined\");\r\n                }\r\n\r\n                const messageLocation: MessageLocationModel = { Cell: machine!.Cell, Content: nextContent.Content, Direction: channelMap.Direction };\r\n                newMessages.push(messageLocation);\r\n            }\r\n        }\r\n\r\n        const doneMessages = newMessages.filter((mm) => mm.Cell === undefined);\r\n        const outputs: MessageModel[] = [];\r\n        for (const doneMessage of doneMessages) {\r\n            switch (doneMessage.Direction) {\r\n                case DirectionEnum.Up:\r\n                    outputs.push({ Content: doneMessage.Content, Channel: ChannelColorEnum.Green });\r\n                    break;\r\n                case DirectionEnum.Down:\r\n                    outputs.push({ Content: doneMessage.Content, Channel: ChannelColorEnum.Red });\r\n                    break;\r\n                case DirectionEnum.Right:\r\n                    outputs.push({ Content: doneMessage.Content, Channel: ChannelColorEnum.Blue });\r\n                    break;\r\n                case DirectionEnum.Left:\r\n                    outputs.push({ Content: doneMessage.Content, Channel: ChannelColorEnum.Yellow });\r\n                    break;\r\n            }\r\n        }\r\n\r\n        const nextMessages = newMessages.filter((mm) => mm.Cell !== undefined);\r\n\r\n        return [nextMessages, outputs];\r\n    }\r\n\r\n    public RunSetup(message: MessageModel): MessageModel[] {\r\n        let outputMessages: MessageModel[] = [];\r\n        let newMessages = this.StartComputation(message);\r\n\r\n        while (newMessages.length !== 0) {\r\n            const [nextMessages, outputs] = this.GetNextMessages(newMessages);\r\n            outputMessages = outputMessages.concat(outputs);\r\n            newMessages = nextMessages;\r\n        }\r\n\r\n        return outputMessages;\r\n    }\r\n\r\n    private Move(cell: CellModel, direction: DirectionEnum): CellModel | undefined {\r\n        switch (direction) {\r\n            case DirectionEnum.Down:\r\n                if (cell.Row === this.setup.NumberOfRows - 1) {\r\n                    return;\r\n                }\r\n                return { Column: cell.Column, Row: cell.Row + 1 };\r\n            case DirectionEnum.Up:\r\n                if (cell.Row === 0) {\r\n                    return;\r\n                }\r\n                return { Column: cell.Column, Row: cell.Row - 1 };\r\n            case DirectionEnum.Right:\r\n                if (cell.Column === this.setup.NumberOfColumns - 1) {\r\n                    return;\r\n                }\r\n                return { Column: cell.Column + 1, Row: cell.Row };\r\n            case DirectionEnum.Left:\r\n                if (cell.Column === 0) {\r\n                    return;\r\n                }\r\n                return { Column: cell.Column - 1, Row: cell.Row };\r\n        }\r\n    }\r\n}","import { ChannelColorEnum } from \"../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../Models/DirectionEnum\";\r\nimport { GameDataModel } from \"../Models/GameDataModel\";\r\n\r\nlet GridSetup: GameDataModel;\r\n\r\nexport const LoadDefaultGameData = (): GameDataModel => {\r\n    if (GridSetup === undefined) {\r\n        GridSetup = LoadDefaultData();\r\n    }\r\n\r\n    return GridSetup;\r\n};\r\n\r\nconst LoadDefaultData = (): GameDataModel => ({\r\n    ActiveSetup: {\r\n        NumberOfColumns: 6,\r\n        NumberOfRows: 5,\r\n        MachineInstances: [{\r\n            Cell: { Row: 2, Column: 0 },\r\n            MachineId: { Id: 0, Type: \"Default\" },\r\n            Channels: [{ Direction: DirectionEnum.Right, Channel: ChannelColorEnum.Green }],\r\n            InputChannels: [], Id: 1\r\n        }]\r\n    },\r\n    SavedMachines: []\r\n});\r\n","import { LevelModel } from \"../../Models/LevelModel\";\r\n\r\nexport const Sandbox: LevelModel = {\r\n    AllowedMachines: [],\r\n    Description: \"Sandbox level, no specific goals\",\r\n    Name: \"Sandbox\",\r\n    Tests: [\r\n    ]\r\n};","import React from \"react\";\r\nimport { Props } from \"./Props\";\r\n\r\nconst NumberInput: React.FC<Props> = (props) => {\r\n    const IncreaseValue: () => void = () => {\r\n        props.valueChanged(props.value + 1);\r\n    };\r\n    const DecreaseValue: () => void = () => {\r\n        props.valueChanged(props.value - 1);\r\n    };\r\n\r\n    const style: React.CSSProperties = { marginLeft: 5, marginRight: 5 };\r\n\r\n    return (<div>\r\n        <button style={style} onClick={DecreaseValue}>-</button>\r\n        <label >{props.value}</label>\r\n        <button style={style} onClick={IncreaseValue}>+</button>\r\n    </div>);\r\n};\r\n\r\nexport default NumberInput;","import React from \"react\";\r\nimport NumberInput from \"../NumberInput/NumberInput\";\r\nimport { Props } from \"./Props\";\r\n\r\nexport const Dashboard: React.FC<Props> = (props) => {\r\n\r\n    const onClicked = () => {\r\n        props.OnShowAnimationsChanged(!props.ShowAnimations);\r\n    };\r\n    return (\r\n        <div style={{ display: \"flex\" }}>\r\n            <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                <label title=\"Show animations, will calculate as fast as possible when turned of\">Show animations</label>\r\n                <button onClick={onClicked}>{props.ShowAnimations ? \"On\" : \"Off\"}</button>\r\n            </div>\r\n            {props.ShowAnimations &&\r\n            <div>\r\n                <label title=\"Step time in tenths of seconds, lower for faster animations\">Step Time</label>\r\n                <NumberInput value={props.StepTime} valueChanged={props.OnStepTimeChanged} />\r\n            </div>}\r\n\r\n        </div>\r\n    );\r\n};","export class Constants {\r\n    public static CellSize = 100;\r\n}","export const DragItemTypes = {\r\n  MachineInstance: \"MachineInstance\",\r\n  NewMachine: \"NewMachine\"\r\n};","export enum OutputStatus {\r\n    NotChecked,\r\n    NotFullfilled,\r\n    Fullfilled,\r\n    NotMatched\r\n}","export const FormatMessage = (content: string): string => {\r\n    let formattedMessage: string | undefined;\r\n\r\n    if (content === \"\") {\r\n        formattedMessage = \"<Empty>\";\r\n    } else {\r\n        formattedMessage = content;\r\n        let seekPosition = 0;\r\n\r\n        while (true) {\r\n            seekPosition = formattedMessage.indexOf(\"<\", seekPosition);\r\n            if (seekPosition === -1) {\r\n                break;\r\n            }\r\n\r\n            const lastIndex = formattedMessage.indexOf(\">\", seekPosition);\r\n            formattedMessage = formattedMessage.substring(0, seekPosition) + \"?\" + formattedMessage.substring(lastIndex + 1);\r\n        }\r\n    }\r\n    return formattedMessage;\r\n};\r\n","import React from \"react\";\r\nimport { DirectionEnum } from \"../../../../../Models/DirectionEnum\";\r\nimport { Constants } from \"../../../../Constants\";\r\nimport { Props } from \"./Props\";\r\n\r\nexport class Channel extends React.Component<Props> {\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.onClicked = this.onClicked.bind(this);\r\n    }\r\n    public render() {\r\n\r\n        const cellSize = Constants.CellSize - 2;\r\n        const width = 19;\r\n        const height = 4;\r\n        const border = 1;\r\n        const channelStyle: React.CSSProperties = {\r\n            position: \"absolute\",\r\n            height: cellSize / 50 * height,\r\n            width: cellSize / 50 * width,\r\n            marginLeft: cellSize / 50 * (25 + (height + border) / 2),\r\n            marginTop: cellSize / 50 * (25 - (height + border) / 2),\r\n            backgroundColor: this.props.ChannelMap.Channel,\r\n            borderStyle: \"solid\",\r\n            borderWidth: border + \"px\",\r\n            pointerEvents: \"visible\"\r\n        };\r\n\r\n        let rotate: string = \"\";\r\n        switch (this.props.ChannelMap.Direction) {\r\n            case DirectionEnum.Down:\r\n                rotate = \"rotate(90deg)\";\r\n                break;\r\n            case DirectionEnum.Left:\r\n                rotate = \"rotate(180deg)\";\r\n                break;\r\n            case DirectionEnum.Up:\r\n                rotate = \"rotate(270deg)\";\r\n                break;\r\n            case DirectionEnum.Right:\r\n                rotate = \"rotate(0deg)\";\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        const rotation: React.CSSProperties = {\r\n            transform: rotate,\r\n            height: cellSize,\r\n            width: cellSize,\r\n            position: \"absolute\",\r\n            pointerEvents: \"none\"\r\n        };\r\n\r\n        return (\r\n            <div style={rotation}>\r\n                <div style={channelStyle} onClick={this.onClicked}></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public onClicked(event: React.MouseEvent<HTMLDivElement, MouseEvent>): void {\r\n        if (this.props.OnChanged !== undefined) {\r\n            let newDirection: DirectionEnum = DirectionEnum.Left;\r\n            switch (this.props.ChannelMap.Direction) {\r\n                case DirectionEnum.Down:\r\n                    newDirection = DirectionEnum.Left;\r\n                    break;\r\n                case DirectionEnum.Left:\r\n                    newDirection = DirectionEnum.Up;\r\n                    break;\r\n                case DirectionEnum.Up:\r\n                    newDirection = DirectionEnum.Right;\r\n                    break;\r\n                case DirectionEnum.Right:\r\n                    newDirection = DirectionEnum.Down;\r\n                    break;\r\n            }\r\n\r\n            this.props.OnChanged({ Direction: newDirection, Channel: this.props.ChannelMap.Channel });\r\n        }\r\n    }\r\n}","import React from \"react\";\r\nimport { Constants } from \"../../../../Constants\";\r\nimport { Props } from \"./Props\";\r\n\r\nexport class Machine extends React.Component<Props> {\r\n    public render() {\r\n        const machineSize = Constants.CellSize / 5 * 3;\r\n        const borderSize = machineSize / 10;\r\n\r\n        const machineStyle: React.CSSProperties = {\r\n            height: this.props.IsDefault ? machineSize : machineSize * 0.9,\r\n            width: this.props.IsDefault ? machineSize : machineSize * 0.9,\r\n            backgroundColor: this.props.Machine.Color,\r\n            borderStyle: \"solid\",\r\n            borderColor: this.props.Machine.BorderColor,\r\n            borderWidth: borderSize,\r\n            borderRadius: this.props.IsDefault ? \"50%\" : \"0%\",\r\n        };\r\n\r\n        return (\r\n            <div style={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\", height: Constants.CellSize - 2, width: Constants.CellSize - 2 }}>\r\n                <div style={machineStyle} />\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport { useDrag } from \"react-dnd\";\r\nimport { MachineStore } from \"../../../../MachineStore/MachineStore\";\r\nimport { ChannelModel } from \"../../../../Models/ChannelMapModel\";\r\nimport { MachineInstanceModel } from \"../../../../Models/MachineInstanceModel\";\r\nimport { Constants } from \"../../../Constants\";\r\nimport { DragItemTypes } from \"../../../DragItemTypes\";\r\nimport { Channel } from \"./Channel/Channel\";\r\nimport { Machine } from \"./Machine/Machine\";\r\nimport { Props } from \"./Props\";\r\n\r\nconst MachineInstance: React.FC<Props> = (props) => {\r\n    const [, drag] = useDrag({\r\n        item: { type: DragItemTypes.MachineInstance, id: props.MachineInstance.Id },\r\n        end: (dropResult, monitor) => {\r\n            if (!monitor.didDrop()) {\r\n                props.OnRemoved(props.MachineInstance.Id);\r\n            }\r\n        },\r\n        collect: (monitor) => ({\r\n            isDragging: !!monitor.isDragging(),\r\n        }),\r\n    });\r\n\r\n    const OnChannelChanged = (channel: ChannelModel, index: number) => {\r\n        const machineInstance: MachineInstanceModel = {\r\n            Cell: props.MachineInstance.Cell,\r\n            MachineId: props.MachineInstance.MachineId,\r\n            Channels: props.MachineInstance.Channels.map((c, i) => (i === index) ? channel : c),\r\n            InputChannels: props.MachineInstance.InputChannels,\r\n            Id: props.MachineInstance.Id\r\n        };\r\n\r\n        props.OnChanged(machineInstance);\r\n    };\r\n\r\n    const channels = props.MachineInstance.Channels.map((c, index) => <div key={index}><Channel OnChanged={(channelMap) => OnChannelChanged(channelMap, index)} ChannelMap={c} /></div>);\r\n    const absoluteStyle: React.CSSProperties = {\r\n        position: \"absolute\",\r\n    };\r\n    const machineSize: React.CSSProperties = { height: Constants.CellSize - 2, width: Constants.CellSize - 2, margin: 1 };\r\n\r\n    const machineType = MachineStore.GetStore().GetMachineType(props.MachineInstance.MachineId);\r\n    return (\r\n        <div ref={drag} style={machineSize}>\r\n            <div style={absoluteStyle}>\r\n                <Machine Machine={machineType} IsDefault={props.MachineInstance.MachineId.Type === \"Default\"}/>\r\n            </div>\r\n            {channels}\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default MachineInstance;\r\n","import React from \"react\";\r\nimport { useDrop } from \"react-dnd\";\r\nimport { MachineId } from \"../../../MachineStore/MachineId\";\r\nimport { DirectionEnum } from \"../../../Models/DirectionEnum\";\r\nimport { Constants } from \"../../Constants\";\r\nimport { DragItemTypes } from \"../../DragItemTypes\";\r\nimport { FormatMessage } from \"../../MessageFormatter\";\r\nimport MachineInstance from \"./MachineInstance/MachineInstance\";\r\nimport { Props } from \"./Props\";\r\n\r\nconst Cell: React.FC<Props> = (props) => {\r\n\r\n    const [, drop] = useDrop({\r\n        accept: [DragItemTypes.MachineInstance, DragItemTypes.NewMachine],\r\n        drop: (item, monitor) => {\r\n            switch (item.type) {\r\n                case DragItemTypes.MachineInstance:\r\n                    props.OnMovedMachine(monitor.getItem().id, props.location);\r\n                    break;\r\n                case DragItemTypes.NewMachine:\r\n                    const itemProps = monitor.getItem() as { id: MachineId };\r\n                    props.OnNewMachine(itemProps.id, props.location);\r\n                    break;\r\n            }\r\n        },\r\n    });\r\n\r\n    const style: React.CSSProperties = {\r\n        height: Constants.CellSize,\r\n        width: Constants.CellSize,\r\n        border: \"1px solid #999\",\r\n        float: \"left\",\r\n        marginTop: -1,\r\n        marginLeft: -1,\r\n        position: \"relative\"\r\n    };\r\n\r\n    if (props.exitCell !== undefined) {\r\n        switch (props.exitCell.Direction) {\r\n            case DirectionEnum.Up:\r\n                style.borderRight = \"1px solid black\";\r\n                style.borderBottom = \"1px solid black\";\r\n                style.borderLeft = \"1px solid black\";\r\n                style.borderTop = \"8px solid green\";\r\n                style.marginTop = -8;\r\n\r\n                break;\r\n            case DirectionEnum.Down:\r\n                style.borderRight = \"1px solid black\";\r\n                style.borderTop = \"1px solid black\";\r\n                style.borderLeft = \"1px solid black\";\r\n                style.borderBottom = \"8px solid red\";\r\n                style.marginBottom = -7;\r\n                break;\r\n            case DirectionEnum.Right:\r\n                style.borderTop = \"1px solid black\";\r\n                style.borderBottom = \"1px solid black\";\r\n                style.borderLeft = \"1px solid black\";\r\n                style.borderRight = \"8px solid blue\";\r\n                style.marginRight = -7;\r\n                break;\r\n            case DirectionEnum.Left:\r\n                style.borderRight = \"1px solid black\";\r\n                style.borderBottom = \"1px solid black\";\r\n                style.borderTop = \"1px solid black\";\r\n                style.borderLeft = \"8px solid yellow\";\r\n                style.marginLeft = -8;\r\n\r\n                break;\r\n        }\r\n    } else {\r\n        style.borderRight = \"1px solid black\";\r\n        style.borderBottom = \"1px solid black\";\r\n        style.borderLeft = \"1px solid black\";\r\n        style.borderTop = \"1px solid black\";\r\n    }\r\n\r\n    let formattedMessage: string | undefined;\r\n    if (props.message !== undefined) {\r\n        formattedMessage = FormatMessage(props.message.Content);\r\n    }\r\n\r\n    return (\r\n        <div style={style} ref={drop}>\r\n            {formattedMessage !== undefined && formattedMessage}\r\n            {props.machineInstance !== undefined ? <MachineInstance MachineInstance={props.machineInstance} OnChanged={props.OnChanged} OnRemoved={props.OnMachineRemoved} /> : \"\"}\r\n\r\n        </div >\r\n    );\r\n};\r\n\r\nexport default Cell;","import React from \"react\";\r\nimport { MachineId } from \"../../MachineStore/MachineId\";\r\nimport { MachineStore } from \"../../MachineStore/MachineStore\";\r\nimport { CellModel } from \"../../Models/CellModel\";\r\nimport { ChannelModel } from \"../../Models/ChannelMapModel\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { GridSetupModel } from \"../../Models/GridSetupModel\";\r\nimport { MachineInstanceModel } from \"../../Models/MachineInstanceModel\";\r\nimport { MessageLocationModel } from \"../../Models/MessageLocationModel\";\r\nimport Cell from \"./Cell/Cell\";\r\nimport { GridProps } from \"./Props\";\r\nimport { ExitCellModel } from \"../../Models/ExitCellModel\";\r\n\r\nexport class Grid extends React.Component<GridProps> {\r\n    private store: MachineStore;\r\n    constructor(props: GridProps) {\r\n        super(props);\r\n        this.ChannelChanged = this.ChannelChanged.bind(this);\r\n        this.MachineMoved = this.MachineMoved.bind(this);\r\n        this.MachineAdded = this.MachineAdded.bind(this);\r\n        this.MachineRemoved = this.MachineRemoved.bind(this);\r\n\r\n        this.store = MachineStore.GetStore();\r\n    }\r\n\r\n    public render() {\r\n        const rows = [];\r\n        for (let rowIndex = 0; rowIndex < this.props.GridSetup.NumberOfRows; rowIndex++) {\r\n            const row = [];\r\n            for (let columnIndex = 0; columnIndex < this.props.GridSetup.NumberOfColumns; columnIndex++) {\r\n                let foundMachineInstance: MachineInstanceModel | undefined;\r\n                let foundMessage: MessageLocationModel | undefined;\r\n                let foundExit: ExitCellModel | undefined;\r\n                for (const machineInstance of this.props.GridSetup.MachineInstances) {\r\n                    if (machineInstance.Cell.Column === columnIndex && machineInstance.Cell.Row === rowIndex) {\r\n                        foundMachineInstance = machineInstance;\r\n                    }\r\n                }\r\n\r\n                for (const message of this.props.Messages) {\r\n                    if (message.Cell!.Column === columnIndex && message.Cell!.Row === rowIndex) {\r\n                        foundMessage = message;\r\n                    }\r\n                }\r\n\r\n                for (const exit of this.props.ExitCells) {\r\n                    if (exit.Cell!.Column === columnIndex && exit.Cell!.Row === rowIndex) {\r\n                        foundExit = exit;\r\n                    }\r\n                }\r\n\r\n                row.push(<Cell\r\n                    key={columnIndex}\r\n                    machineInstance={foundMachineInstance}\r\n                    message={foundMessage}\r\n                    OnChanged={this.ChannelChanged}\r\n                    OnMovedMachine={this.MachineMoved}\r\n                    OnNewMachine={this.MachineAdded}\r\n                    OnMachineRemoved={this.MachineRemoved}\r\n                    location={{ Row: rowIndex, Column: columnIndex }}\r\n                    exitCell={foundExit} />);\r\n            }\r\n            rows.push(<div key={rowIndex} style={{ display: \"flex\", flexDirection: \"row\" }}>{row}</div>);\r\n        }\r\n\r\n        return (\r\n            <div style={{ display: \"flex\", flexDirection: \"column\", marginBottom: 8 }}>\r\n                {rows}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private ChannelChanged(machineInstance: MachineInstanceModel) {\r\n        const newGridSetup: GridSetupModel = {\r\n            NumberOfColumns: this.props.GridSetup.NumberOfColumns,\r\n            NumberOfRows: this.props.GridSetup.NumberOfRows,\r\n            MachineInstances: this.props.GridSetup.MachineInstances.map((mi) =>\r\n                (mi.Cell.Column === machineInstance.Cell.Column && mi.Cell.Row === machineInstance.Cell.Row) ?\r\n                    machineInstance\r\n                    :\r\n                    mi)\r\n        };\r\n\r\n        this.props.OnChanged(newGridSetup);\r\n    }\r\n\r\n    private MachineMoved(id: number, location: CellModel): void {\r\n        const index = this.props.GridSetup.MachineInstances.findIndex((mi) => mi.Id === id);\r\n        this.props.GridSetup.MachineInstances[index].Cell = location;\r\n        this.props.OnChanged(this.props.GridSetup);\r\n    }\r\n    private MachineRemoved(id: number): void {\r\n        this.props.GridSetup.MachineInstances = this.props.GridSetup.MachineInstances.filter((mi) => mi.Id !== id);\r\n        this.props.OnChanged(this.props.GridSetup);\r\n    }\r\n    private MachineAdded(id: MachineId, location: CellModel): void {\r\n        const machine = this.store.GetMachineType(id);\r\n        const channels: ChannelModel[] = [];\r\n        let direction: DirectionEnum.Up = DirectionEnum.Up;\r\n        for (const color of machine.OutputChannels) {\r\n            channels.push({ Channel: color, Direction: direction });\r\n            direction++;\r\n        }\r\n\r\n        const maxId = (this.props.GridSetup.MachineInstances.length === 0) ? 0 : Math.max(...this.props.GridSetup.MachineInstances.map((mi) => mi.Id));\r\n\r\n        const machineInstance: MachineInstanceModel = {\r\n            Cell: location,\r\n            MachineId: id,\r\n            Channels: channels,\r\n            InputChannels: [],\r\n            Id: maxId + 1\r\n        };\r\n        this.props.GridSetup.MachineInstances.push(machineInstance);\r\n        this.props.OnChanged(this.props.GridSetup);\r\n    }\r\n}","import React from \"react\";\r\nimport { FormatMessage } from \"../../../MessageFormatter\";\r\nimport { Props } from \"./Props\";\r\nimport { OutputStatus } from \"../../../../Models/OutputStatusEnum\";\r\n\r\nexport const MessageDisplay: React.FC<Props> = (props) => {\r\n    const style: React.CSSProperties = { display: \"flex\", flexFlow: \"row\", justifyContent: props.Input ? \"flex-start\" : \"flex-end\", marginBottom: 1 };\r\n    const colorCode: React.CSSProperties = { backgroundColor: props.Message.Channel, width: 8, marginLeft: 5, marginRight: 5 };\r\n    const statusStyle: React.CSSProperties = { display: \"flex\", flexFlow: \"row\" };\r\n    switch (props.Status) {\r\n        case OutputStatus.Fullfilled:\r\n            statusStyle.backgroundColor = \"#d9ffb3\";\r\n            break;\r\n        case OutputStatus.NotMatched:\r\n            statusStyle.border = \"solid red\";\r\n            statusStyle.backgroundColor = \"#ffb3b3\";\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n    return (<div style={style}>\r\n        <div style={statusStyle}>\r\n            {props.Input && <div style={colorCode}></div>}\r\n            <label>{FormatMessage(props.Message.Content)}</label>\r\n            {!props.Input && <div style={colorCode}></div>}\r\n        </div>\r\n    </div>);\r\n};","import React from \"react\";\r\nimport { ChannelColorEnum } from \"../../../../Models/ChannelColorsEnum\";\r\nimport { Props } from \"./Props\";\r\n\r\nexport const EditableMessageDisplay: React.FC<Props> = (props) => {\r\n    const onMessageChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        props.MessageChanged({ Content: event.target.value, Channel: props.Message.Channel });\r\n    };\r\n\r\n    const onChannelChanged = (event: React.ChangeEvent<HTMLSelectElement>) => {\r\n        props.MessageChanged({ Content: props.Message.Content, Channel: event.target.value as ChannelColorEnum });\r\n    };\r\n\r\n    return (\r\n        <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n            {props.AllowedInputColors.length > 1 ? <select value={props.Message.Channel} style={{ backgroundColor: props.Message.Channel }} onChange={onChannelChanged}>\r\n                {props.AllowedInputColors.map((cc, index) => <option value={cc} key={index} style={{ backgroundColor: cc }}></option>)}\r\n            </select> : <div style={{ backgroundColor: props.Message.Channel, width: 10 }} />}\r\n            <input value={props.Message.Content} onChange={onMessageChanged}></input>\r\n        </div>\r\n    );\r\n};","import React from \"react\";\r\nimport { ChannelColorEnum } from \"../../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../../Models/MessageModel\";\r\nimport { OutputStatus } from \"../../../Models/OutputStatusEnum\";\r\nimport { MessageDisplay } from \"../TestDisplay/MessageDisplay/MessageDisplay\";\r\nimport { EditableMessageDisplay } from \"./EditableMessageDisplay/EditableMessageDisplay\";\r\nimport { Props } from \"./Props\";\r\nimport { State } from \"./State\";\r\n\r\nexport class CustomTest extends React.Component<Props, State> {\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.InputChanged = this.InputChanged.bind(this);\r\n        this.AddInput = this.AddInput.bind(this);\r\n        this.DeleteInput = this.DeleteInput.bind(this);\r\n        this.Play = this.Play.bind(this);\r\n\r\n        this.state = { Inputs: [{ Content: \"\", Channel: ChannelColorEnum.Green }], Outputs: [] };\r\n    }\r\n\r\n    private InputChanged(index: number, message: MessageModel) {\r\n        const inputs = this.state.Inputs;\r\n        inputs[index] = message;\r\n        this.setState({ Inputs: inputs });\r\n    }\r\n\r\n    private AddInput(): void {\r\n        const message: MessageModel = { Channel: ChannelColorEnum.Green, Content: \"\" };\r\n        const inputs = this.state.Inputs;\r\n        inputs.push(message);\r\n        this.setState({ Inputs: inputs });\r\n    }\r\n\r\n    private DeleteInput(index: number): void {\r\n        const inputs = this.state.Inputs;\r\n        inputs.splice(index, 1);\r\n        this.setState({ Inputs: inputs });\r\n    }\r\n\r\n    private Play(): void {\r\n        this.props.PlayTest(this.state.Inputs).then((outputs) => {\r\n            this.setState({ Outputs: outputs });\r\n        }).catch(() => {\r\n            this.setState({ Outputs: [] });\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        let inputs: JSX.Element[] = [];\r\n        let lineNumber = 0;\r\n        for (let i = 0; i < this.state.Inputs.length; i++) {\r\n            inputs.push(<div key={lineNumber++} >\r\n                <EditableMessageDisplay\r\n                    Message={this.state.Inputs[i]}\r\n                    AllowedInputColors={this.props.AllowedInputColors}\r\n                    MessageChanged={(message: MessageModel) => this.InputChanged(i, message)} />\r\n                {this.state.Inputs.length > 1 && <button onClick={() => this.DeleteInput(i)}>Delete</button>}\r\n            </div>);\r\n            let outputs: JSX.Element[] = [];\r\n            const outputsForThisInput = this.state.Outputs.filter((o) => o.Order === i);\r\n            // eslint-disable-next-line\r\n            outputs = outputsForThisInput.map((o, index) => <MessageDisplay Message={o} Input={false} key={lineNumber++} Status={OutputStatus.NotChecked} />);\r\n            inputs = inputs.concat(outputs);\r\n        }\r\n        return (\r\n            <div>\r\n                <button onClick={this.Play}>Play</button>\r\n                <div>\r\n                    {inputs}\r\n                    {this.props.MultipleInputs &&\r\n                        <button onClick={this.AddInput}>Add input</button>}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport { OutputMessageModel } from \"../../../Models/OutputMessageModel\";\r\nimport { OutputStatus } from \"../../../Models/OutputStatusEnum\";\r\nimport { MessageDisplay } from \"./MessageDisplay/MessageDisplay\";\r\nimport { Props } from \"./Props\";\r\n\r\nexport const TestDisplay: React.FC<Props> = (props) => {\r\n\r\n    const OnClick = () => {\r\n        props.OnPlay(props.Test);\r\n    };\r\n\r\n    const inputs = props.Test.inputs;\r\n    const outputs = props.Test.outputs;\r\n    let messages: JSX.Element[] = [];\r\n    let index = 0;\r\n    for (let i = 0; i < inputs.length; i++) {\r\n        messages.push(<MessageDisplay Message={inputs[i]} Input={true} key={index++} Status={OutputStatus.NotChecked}/>);\r\n        const expectedOutputs = outputs.filter((o) => o.Order === i);\r\n        let actuals: OutputMessageModel[] | undefined;\r\n        if (props.ActualOutputs !== undefined) {\r\n            actuals = props.ActualOutputs.filter((o) => o.Order === i);\r\n        }\r\n        for (let j = 0; j < expectedOutputs.length; j++) {\r\n            const expected = expectedOutputs[j];\r\n            let valid = OutputStatus.NotChecked;\r\n            if (actuals !== undefined) {\r\n                const indexActual = (actuals.findIndex((o) => o.Channel === expected.Channel && o.Content === expected.Content));\r\n                if (indexActual > -1) {\r\n                    valid = OutputStatus.Fullfilled;\r\n                    actuals.splice(indexActual, 1);\r\n                } else {\r\n                    valid = OutputStatus.NotFullfilled;\r\n                }\r\n            }\r\n            messages = messages.concat(<MessageDisplay Message={expectedOutputs[j]} Input={false} key={index++} Status={valid} />);\r\n        }\r\n\r\n        if (actuals !== undefined) {\r\n            // eslint-disable-next-line\r\n            messages = messages.concat(actuals.map((o) => <MessageDisplay Message={o} Input={false} key={index++} Status={OutputStatus.NotMatched} />));\r\n        }\r\n    }\r\n\r\n    const style: React.CSSProperties = { display: \"flex\", flexDirection: \"row\", padding: 0, borderBottom: \"solid 0.5px\", margin: 5 };\r\n    const verticalStyle: React.CSSProperties = { display: \"flex\", flexDirection: \"column\", flexGrow: 1 };\r\n\r\n    return (\r\n        <div style={style}>\r\n            <button onClick={OnClick}>Play</button>\r\n            <div style={verticalStyle}>\r\n                {messages}\r\n            </div>\r\n        </div>\r\n    );\r\n};","import React from \"react\";\r\nimport { OutputMessageModel } from \"../../Models/OutputMessageModel\";\r\nimport { TestModel } from \"../../Models/TestModel\";\r\nimport { CustomTest } from \"./CustomTest/CustomTest\";\r\nimport { Props } from \"./Props\";\r\nimport { State } from \"./State\";\r\nimport { TestDisplay } from \"./TestDisplay/TestDisplay\";\r\n\r\nexport class LevelDisplay extends React.Component<Props, State> {\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.testStarted = this.testStarted.bind(this);\r\n        this.state = { ActualOutputs: [] };\r\n    }\r\n    private testStarted(test: TestModel, index: number) {\r\n        this.props.PlayTest(test.inputs).then((outputs: OutputMessageModel[]) => {\r\n            const actualOutputs = this.state.ActualOutputs;\r\n            actualOutputs[index] = outputs;\r\n            this.setState({ ActualOutputs: actualOutputs });\r\n        }).catch(() => {\r\n            this.setState({ ActualOutputs: [] });\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        const tests = this.props.Level.Tests.map((t, index) => <TestDisplay Test={t} OnPlay={(test: TestModel) => this.testStarted(test, index)} key={index} ActualOutputs={this.state.ActualOutputs[index]} />);\r\n        const style: React.CSSProperties = { padding: 10 };\r\n\r\n        return (\r\n            <div style={style}>\r\n                <b>{this.props.Level.Name}</b>\r\n                <br />\r\n                <i>{this.props.Level.Description}</i>\r\n                {this.props.Level.Tests.length === 0 && <CustomTest PlayTest={this.props.PlayTest} AllowedInputColors={this.props.AllowedInputs} MultipleInputs={this.props.MultipleInputsAllowed} />}\r\n                {tests}\r\n            </div>\r\n        );\r\n    }\r\n}","import { Props } from \"./Props\";\r\nimport React from \"react\";\r\n\r\nexport const LevelPreview: React.FC<Props> = (props) => {\r\n    const OnClick = () => props.LevelClicked(props.Level);\r\n    return (<div onClick={OnClick}>\r\n        <label title={props.Level.Description}>{props.Level.Name}</label>\r\n    </div>)\r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { LevelModel } from \"../../Models/LevelModel\";\r\n\r\nexport const AppendLength: LevelModel = {\r\n    AllowedMachines: [1, 5, 6, 7, 8, 9, 10, 11, 12],\r\n    Description: \"The machine should append the length of the input string to the string\",\r\n    Name: \"AppendLength\",\r\n    Tests: [\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"four\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"four4\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"aabccd\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"aabccd6\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"1\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"11\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"0\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"This is hard\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"This is hard12\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"This might even be harder\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"This might even be harder25\" }]\r\n        }\r\n    ]\r\n};","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { LevelModel } from \"../../Models/LevelModel\";\r\n\r\nexport const GetLength: LevelModel = {\r\n    AllowedMachines: [1, 5, 6, 7, 8, 9, 10, 11, 12],\r\n    Description: \"The machine should return the length of the input string\",\r\n    Name: \"GetLength\",\r\n    Tests: [\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"four\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"4\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"aabccd\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"6\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"1\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"1\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"0\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"This is hard\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"12\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"This might even be harder\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"25\" }]\r\n        }\r\n    ]\r\n};","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { LevelModel } from \"../../Models/LevelModel\";\r\n\r\nexport const GetType: LevelModel = {\r\n    AllowedMachines: [1, 5, 6, 7, 8, 9, 10, 11, 12],\r\n    Description: \"The machine should exit green is the first character is a number, exit red if it is a letter and exit blue otherwise\",\r\n    Name: \"GetType\",\r\n    Tests: [\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"42\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"42\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"this starts with a letter\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Red, Content: \"this starts with a letter\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \",#@%!\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Blue, Content: \",#@%!\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Blue, Content: \"\" }]\r\n        }\r\n    ]\r\n};","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { LevelModel } from \"../../Models/LevelModel\";\r\n\r\nexport const IsEmpty: LevelModel = {\r\n    AllowedMachines: [1, 5, 6, 7, 8, 9, 10],\r\n    Description: \"The machine should exit green if the message is empty, otherwise exit red\",\r\n    Name: \"IsEmpty\",\r\n    Tests: [\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"abc\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Red, Content: \"abc\" }]\r\n        }\r\n    ]\r\n};","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { LevelModel } from \"../../Models/LevelModel\";\r\n\r\nexport const KeepNumbers: LevelModel = {\r\n    AllowedMachines: [1, 5, 6, 7, 8, 9, 10, 11, 12],\r\n    Description: \"The machine should keep all numbers in the input string, and remove all other characters\",\r\n    Name: \"KeepNumbers\",\r\n    Tests: [\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"42\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"42\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"fortytwo\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"1 and 1 is\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"11\" }]\r\n        }\r\n    ]\r\n};","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { LevelModel } from \"../../Models/LevelModel\";\r\n\r\nexport const PlusOne: LevelModel = {\r\n    AllowedMachines: [1, 5, 6, 7, 8, 9, 10, 11, 12],\r\n    Description: \"The machine should increase the input number by 1. Input only contains digits\",\r\n    Name: \"PlusOne\",\r\n    Tests: [\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"4\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"5\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"0\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"1\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"42\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"43\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"9\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"10\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"39\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"40\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"23999999\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"24000000\"}]\r\n        }\r\n    ]\r\n};","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { LevelModel } from \"../../Models/LevelModel\";\r\n\r\nexport const RemoveAllRepeats: LevelModel = {\r\n    AllowedMachines: [1, 5, 6, 7, 8, 9, 10],\r\n    Description: \"The machine should remove all repeating characters from the input string\",\r\n    Name: \"RemoveAllRepeats\",\r\n    Tests: [\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"aabc\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abc\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"aaaabccc\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abc\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"a\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"a\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"hhhhhhhhhiiiii wwwworllllldddddddd\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"hi world\" }]\r\n        }\r\n    ]\r\n};","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { LevelModel } from \"../../Models/LevelModel\";\r\n\r\nexport const RotateBackwards: LevelModel = {\r\n    AllowedMachines: [1, 5, 6, 7, 8, 9, 10, 11, 12],\r\n    Description: \"The machine should put the last character in front of the string\",\r\n    Name: \"RotateBackwards\",\r\n    Tests: [\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"abc\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"cab\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"otater\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"rotate\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"a\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"a\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }]\r\n        },\r\n        {\r\n            inputs: [{ Channel: ChannelColorEnum.Green, Content: \"ello world!H\" }],\r\n            outputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"Hello world!\" }]\r\n        }\r\n    ]\r\n};","import { LevelModel } from \"../Models/LevelModel\";\r\nimport { AppendLength } from \"./Levels/AppendLength\";\r\nimport { GetLength } from \"./Levels/GetLength\";\r\nimport { GetType } from \"./Levels/GetType\";\r\nimport { IsEmpty } from \"./Levels/IsEmpty\";\r\nimport { KeepNumbers } from \"./Levels/KeepNumbers\";\r\nimport { PlusOne } from \"./Levels/PlusOne\";\r\nimport { RemoveAllRepeats } from \"./Levels/RemoveAllRepeats\";\r\nimport { RotateBackwards } from \"./Levels/RotateBackwards\";\r\nimport { Sandbox } from \"./Levels/Sandbox\";\r\n\r\nexport class LevelStore {\r\n    private static levelStore: LevelStore;\r\n    private levels: LevelModel[];\r\n\r\n    private constructor() {\r\n        this.levels = [];\r\n        this.init();\r\n    }\r\n\r\n    public static GetStore(): LevelStore {\r\n        if (LevelStore.levelStore === undefined) {\r\n            LevelStore.levelStore = new LevelStore();\r\n        }\r\n\r\n        return LevelStore.levelStore;\r\n    }\r\n\r\n    private init(): void {\r\n        this.levels.push(Sandbox);\r\n        this.levels.push(IsEmpty);\r\n        this.levels.push(RemoveAllRepeats);\r\n        this.levels.push(GetType);\r\n        this.levels.push(KeepNumbers);\r\n        this.levels.push(GetLength);\r\n        this.levels.push(AppendLength);\r\n        this.levels.push(RotateBackwards);\r\n        this.levels.push(PlusOne);\r\n    }\r\n\r\n    public GetAllLevels(): LevelModel[] {\r\n        return this.levels;\r\n    }\r\n}","import { Props } from \"./Props\";\r\nimport React from \"react\";\r\nimport { LevelPreview } from \"./LevelPreview/LevelPreview\";\r\nimport { LevelStore } from \"../../Levels/LevelStore\";\r\n\r\nconst LevelList: React.FC<Props> = (props) => {\r\n    const levelStore = LevelStore.GetStore();\r\n\r\n    const levels = levelStore.GetAllLevels().map((l, index) => <LevelPreview Level={l} LevelClicked={props.OnLevelClicked} key={index}/>)\r\n\r\n    return (\r\n        <div>\r\n            <b>Challenges:</b>\r\n            {levels}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LevelList;\r\n","import React from \"react\";\r\nimport { ChannelModel } from \"../../../Models/ChannelMapModel\";\r\nimport { DirectionEnum } from \"../../../Models/DirectionEnum\";\r\nimport { Constants } from \"../../Constants\";\r\nimport { Channel } from \"../../Grid/Cell/MachineInstance/Channel/Channel\";\r\nimport { Machine } from \"../../Grid/Cell/MachineInstance/Machine/Machine\";\r\nimport { Props } from \"./Props\";\r\n\r\nexport const MachineDisplay: React.FC<Props> = (props) => {\r\n    const channels: ChannelModel[] = [];\r\n    let direction: DirectionEnum.Up = DirectionEnum.Up;\r\n    for (const color of props.machineType.OutputChannels) {\r\n        channels.push({ Channel: color, Direction: direction });\r\n        direction++;\r\n    }\r\n\r\n    const channelComponents = channels.map((c, index) => <Channel key={index} ChannelMap={c} />);\r\n    const absoluteStyle: React.CSSProperties = {\r\n        position: \"absolute\",\r\n\r\n        left: Constants.CellSize / 3\r\n    };\r\n    const labelStyle: React.CSSProperties = {\r\n        position: \"absolute\"\r\n    };\r\n\r\n    const cellSize: React.CSSProperties = {height: Constants.CellSize, width: Constants.CellSize, position: \"relative\"};\r\n    return (\r\n        <div style={cellSize}>\r\n            <div style={absoluteStyle}>\r\n                <Machine Machine={props.machineType} IsDefault={props.IsDefault}/>\r\n            </div>\r\n            <div style={absoluteStyle}>\r\n                {channelComponents}\r\n            </div>\r\n            <label style={labelStyle}>{props.machineType.Name}</label>\r\n        </div>);\r\n};\r\n","import React from \"react\";\r\nimport { useDrag } from \"react-dnd\";\r\nimport { ChannelModel } from \"../../../Models/ChannelMapModel\";\r\nimport { DirectionEnum } from \"../../../Models/DirectionEnum\";\r\nimport { DragItemTypes } from \"../../DragItemTypes\";\r\nimport { MachineDisplay } from \"../MachineDisplay/MachineDisplay\";\r\nimport { Props } from \"./Props\";\r\n\r\nconst StoredMachine: React.FC<Props> = (props) => {\r\n    const [, drag] = useDrag({\r\n        item: { type: DragItemTypes.NewMachine, id: props.machine.Id },\r\n        collect: (monitor) => ({\r\n            isDragging: !!monitor.isDragging(),\r\n        }),\r\n    });\r\n\r\n    const machineType = props.machine.GetType();\r\n    const channels: ChannelModel[] = [];\r\n    let direction: DirectionEnum.Up = DirectionEnum.Up;\r\n    for (const color of machineType.OutputChannels) {\r\n        channels.push({ Channel: color, Direction: direction });\r\n        direction++;\r\n    }\r\n\r\n    return (\r\n        <div ref={drag} title={machineType.Description}>\r\n            <MachineDisplay machineType={machineType} IsDefault={props.machine.Id.Type === \"Default\"}/>\r\n        </div>);\r\n};\r\n\r\nexport default StoredMachine;","import React from \"react\";\r\nimport { Constants } from \"../Constants\";\r\nimport { Props } from \"./Props\";\r\nimport StoredMachine from \"./StoredMachine/StoredMachine\";\r\n\r\nexport const MachineCollection: React.FC<Props> = (props) => {\r\n\r\n    const relativeStyle: React.CSSProperties = {\r\n        position: \"relative\",\r\n        height: Constants.CellSize,\r\n        width: Constants.CellSize\r\n    };\r\n\r\n    const storedMachines = props.allowedMachines.map((m, index) => <div style={relativeStyle} key={index}><StoredMachine machine={m} /></div>);\r\n\r\n    return (\r\n        <div style={{ display: \"flex\", flexFlow: \"column wrap\", height: Constants.CellSize * 8}}>\r\n            {storedMachines}\r\n        </div>\r\n    );\r\n};","import React from \"react\";\r\nimport { MachineDisplay } from \"../MachineCollection/MachineDisplay/MachineDisplay\";\r\nimport { Props } from \"./Props\";\r\nimport { State } from \"./State\";\r\nimport { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { IMachineType } from \"../../MachineStore/IMachineType\";\r\n\r\nexport class MachineMenu extends React.Component<Props, State>{\r\n    /**\r\n     *\r\n     */\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.onSaveClicked = this.onSaveClicked.bind(this);\r\n        this.nameChanged = this.nameChanged.bind(this);\r\n        this.descriptionChanged = this.descriptionChanged.bind(this);\r\n        this.colorChanged = this.colorChanged.bind(this);\r\n        this.borderColorChanged = this.borderColorChanged.bind(this);\r\n        this.confirm = this.confirm.bind(this);\r\n\r\n        this.state = {\r\n            Saving: false,\r\n            Name: \"\",\r\n            Description: \"\",\r\n            Color: \"Yellow\",\r\n            BorderColor: \"Blue\"\r\n        };\r\n    }\r\n\r\n    private onSaveClicked(): void {\r\n        this.setState({ Saving: !this.state.Saving });\r\n    }\r\n\r\n    private nameChanged(event: React.ChangeEvent<HTMLInputElement>): void {\r\n        this.setState({\r\n            Name: event.target.value\r\n        });\r\n    }\r\n\r\n    private descriptionChanged(event: React.ChangeEvent<HTMLInputElement>): void {\r\n        this.setState({\r\n            Description: event.target.value\r\n        });\r\n    }\r\n\r\n    private colorChanged(event: React.ChangeEvent<HTMLInputElement>): void {\r\n        this.setState({\r\n            Color: event.target.value\r\n        });\r\n    }\r\n\r\n    private borderColorChanged(event: React.ChangeEvent<HTMLInputElement>): void {\r\n        this.setState({\r\n            BorderColor: event.target.value\r\n        });\r\n    }\r\n\r\n    private confirm(): void {\r\n\r\n        const type = this.getMachineType();\r\n        this.props.SaveCustomMachine(type);\r\n        this.setState({ Saving: false });\r\n    }\r\n\r\n    private getMachineType(): IMachineType {\r\n        const colors: ChannelColorEnum[] = [];\r\n        if (this.props.ExitCells.some((ec) => ec.Direction === DirectionEnum.Up)) {\r\n            colors.push(ChannelColorEnum.Green);\r\n        }\r\n        if (this.props.ExitCells.some((ec) => ec.Direction === DirectionEnum.Down)) {\r\n            colors.push(ChannelColorEnum.Red);\r\n        }\r\n        if (this.props.ExitCells.some((ec) => ec.Direction === DirectionEnum.Right)) {\r\n            colors.push(ChannelColorEnum.Blue);\r\n        }\r\n        if (this.props.ExitCells.some((ec) => ec.Direction === DirectionEnum.Left)) {\r\n            colors.push(ChannelColorEnum.Yellow);\r\n        }\r\n\r\n        return {\r\n            Name: this.state.Name,\r\n            Description: this.state.Description,\r\n            Color: this.state.Color,\r\n            BorderColor: this.state.BorderColor,\r\n            OutputChannels: colors,\r\n            InputChannels: []\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        let type: IMachineType | undefined;\r\n        if (this.state.Saving) {\r\n            type = this.getMachineType();\r\n        }\r\n        return (\r\n            <div>\r\n                <button onClick={this.onSaveClicked}>{this.state.Saving ? \"Cancel\" : \"Save Machine\"}</button>\r\n                {this.state.Saving && <div>\r\n                    <label>Name</label>\r\n                    <input onChange={this.nameChanged} value={this.state.Name}></input>\r\n                    <label>Description</label>\r\n                    <input onChange={this.descriptionChanged} value={this.state.Description}></input>\r\n                    <label>Color</label>\r\n                    <input onChange={this.colorChanged} value={this.state.Color}></input>\r\n                    <label>BorderColor</label>\r\n                    <input onChange={this.borderColorChanged} value={this.state.BorderColor}></input>\r\n                    <MachineDisplay machineType={type!} IsDefault={false} />\r\n                    <button onClick={this.confirm}>Confirm</button>\r\n                </div>}\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport { Props } from \"./Props\";\r\nimport { State } from \"./State\";\r\n\r\nexport class MenuItem extends React.Component<Props, State> {\r\n    /**\r\n     *\r\n     */\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.showItem = this.showItem.bind(this);\r\n        this.state = { Showing: false };\r\n    }\r\n\r\n    private showItem() {\r\n        this.setState({ Showing: !this.state.Showing });\r\n    }\r\n\r\n    public render() {\r\n        const style: React.CSSProperties = { borderLeft: \"solid 0.5px\", marginLeft: 10, padding: 10 };\r\n        return (\r\n            <div style={{ marginLeft: 10 }}>\r\n                <button onClick={this.showItem}>{this.state.Showing ? \"Hide \" + this.props.ItemName : \"Show \" + this.props.ItemName}</button>\r\n                {this.state.Showing &&\r\n                    <div style={style}>\r\n                        {this.props.children}\r\n                    </div>}\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport { GridSetupModel } from \"../../../Models/GridSetupModel\";\r\nimport NumberInput from \"../../NumberInput/NumberInput\";\r\nimport { Props } from \"./Props\";\r\n\r\nexport const GridSizeSetting: React.FC<Props> = (props) => {\r\n    const columnsChanged = (value: number) => {\r\n        const newGridSetup: GridSetupModel = {\r\n            NumberOfColumns: value,\r\n            NumberOfRows: props.Setup.NumberOfRows,\r\n            MachineInstances: props.Setup.MachineInstances\r\n        };\r\n\r\n        props.OnSetupChanged(newGridSetup);\r\n    };\r\n\r\n    const rowsChanged = (value: number) => {\r\n        const newGridSetup: GridSetupModel = {\r\n            NumberOfColumns: props.Setup.NumberOfColumns,\r\n            NumberOfRows: value,\r\n            MachineInstances: props.Setup.MachineInstances\r\n        };\r\n\r\n        props.OnSetupChanged(newGridSetup);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <label>Rows:</label>\r\n            <NumberInput value={props.Setup.NumberOfRows} valueChanged={rowsChanged} />\r\n            <label>Columns:</label>\r\n            <NumberInput value={props.Setup.NumberOfColumns} valueChanged={columnsChanged} />\r\n        </div>\r\n    );\r\n};","import React from \"react\";\r\nimport { GameDataModel } from \"../../../Models/GameDataModel\";\r\nimport { Props } from \"./Props\";\r\nimport { State } from \"./State\";\r\n\r\nexport class SaveMenu extends React.Component<Props, State> {\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.ShowSetupString = this.ShowSetupString.bind(this);\r\n        this.LoadSetup = this.LoadSetup.bind(this);\r\n        this.SetupStringChanged = this.SetupStringChanged.bind(this);\r\n\r\n        this.state = { SetupString: \"\", NewSetupString: \"\" };\r\n    }\r\n    public render() {\r\n        const verticalFlex: React.CSSProperties = { display: \"flex\", flexFlow: \"column wrap\" };\r\n        const margin: React.CSSProperties = { display: \"flex\", flexDirection: \"column\" };\r\n        return (\r\n            <div style={verticalFlex}>\r\n                <div style={margin}>\r\n                    <button title={\"Show setup string, copy it so you can later restore your setup\"} onClick={this.ShowSetupString}>Show setup string</button>\r\n                    {this.props.ShowSetup && <input value={this.state.SetupString} readOnly={true}/>}\r\n                </div>\r\n                <div style={margin}>\r\n                    <label>Load Setup</label>\r\n                    <input value={this.state.NewSetupString} onChange={this.SetupStringChanged} />\r\n                    {this.state.NewSetupString !== \"\" && <button title={\"Load Setup, after having pasted a setup above, click to load this setup\"} onClick={this.LoadSetup}>Load setup</button>}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private SetupStringChanged(event: React.ChangeEvent<HTMLInputElement>): void {\r\n        this.setState({ NewSetupString: event.target.value });\r\n    }\r\n\r\n    private ShowSetupString(): void {\r\n        this.setState({ SetupString: JSON.stringify(this.props.Setup) });\r\n        this.props.OnShowingSetup();\r\n    }\r\n\r\n    private LoadSetup(): void {\r\n        const setupModel = JSON.parse(this.state.NewSetupString) as GameDataModel;\r\n        if (setupModel !== undefined) {\r\n            this.props.OnDataChanged(setupModel);\r\n            this.setState({ NewSetupString: \"\" });\r\n        }\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { GridSizeSetting } from \"./GridSizeSetting/GridSizeSetting\";\r\nimport { Props } from \"./Props\";\r\nimport { SaveMenu } from \"./SaveMenu/SaveMenu\";\r\n\r\nexport class Settings extends React.Component<Props> {\r\n\r\n    public render() {\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <SaveMenu Setup={this.props.Setup} OnDataChanged={this.props.OnDataChanged} OnShowingSetup={this.props.OnShowingSetup} ShowSetup={this.props.ShowSetup} />\r\n                    <GridSizeSetting Setup={this.props.Setup.ActiveSetup} OnSetupChanged={this.props.OnSetupChanged} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport { Computer } from \"../../Computing/Computer\";\r\nimport { LoadDefaultGameData } from \"../../Computing/Setup\";\r\nimport { Sandbox } from \"../../Levels/Levels/Sandbox\";\r\nimport { IMachineType } from \"../../MachineStore/IMachineType\";\r\nimport { MachineStore } from \"../../MachineStore/MachineStore\";\r\nimport { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { CustomMachineModel } from \"../../Models/CustomMachineModel\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { GameDataModel } from \"../../Models/GameDataModel\";\r\nimport { GridSetupModel } from \"../../Models/GridSetupModel\";\r\nimport { LevelModel } from \"../../Models/LevelModel\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { OutputMessageModel } from \"../../Models/OutputMessageModel\";\r\nimport { Dashboard } from \"../Dashboard/Dashboard\";\r\nimport { Grid } from \"../Grid/Grid\";\r\nimport { LevelDisplay } from \"../LevelDisplay/LevelDisplay\";\r\nimport LevelList from \"../LevelList/LevelList\";\r\nimport { MachineCollection } from \"../MachineCollection/MachineCollection\";\r\nimport { MachineMenu } from \"../MachineMenu/MachineMenu\";\r\nimport { MenuItem } from \"../MenuItem/MenuItem\";\r\nimport { Settings } from \"../Settings/Settings\";\r\nimport { State } from \"./State\";\r\n\r\nexport class Game extends React.Component<{}, State> {\r\n    private computer: Computer;\r\n    private inputs: MessageModel[] = [];\r\n    private outputs: OutputMessageModel[] = [];\r\n    private gameData: GameDataModel;\r\n    private cancelComputation: (() => void) | undefined = undefined;\r\n    private machineStore: MachineStore;\r\n    constructor(props: object) {\r\n        super(props);\r\n        this.inputChanged = this.inputChanged.bind(this);\r\n        this.startComputation = this.startComputation.bind(this);\r\n        this.CalculateNextMessages = this.CalculateNextMessages.bind(this);\r\n        this.GridSetupChanged = this.GridSetupChanged.bind(this);\r\n        this.NewGameDataLoaded = this.NewGameDataLoaded.bind(this);\r\n        this.StepTimeChanged = this.StepTimeChanged.bind(this);\r\n        this.OnShowingSetup = this.OnShowingSetup.bind(this);\r\n        this.stopComputation = this.stopComputation.bind(this);\r\n        this.handleKeyPress = this.handleKeyPress.bind(this);\r\n        this.LevelSelected = this.LevelSelected.bind(this);\r\n        this.PlayTest = this.PlayTest.bind(this);\r\n        this.SaveCustomMachine = this.SaveCustomMachine.bind(this);\r\n\r\n        this.gameData = LoadDefaultGameData();\r\n        const gridSetup = this.gameData.ActiveSetup;\r\n        this.computer = new Computer(gridSetup);\r\n        this.machineStore = MachineStore.GetStore();\r\n\r\n        this.state = {\r\n            Computing: false,\r\n            Messages: [],\r\n            GridSetup: gridSetup,\r\n            CustomInput: \"\",\r\n            StepTime: 6,\r\n            ShowingSetup: false,\r\n            SelectedLevel: Sandbox,\r\n            ExitCells: [{ Cell: { Column: 5, Row: 2 }, Direction: DirectionEnum.Right }],\r\n            Machines: this.machineStore.GetAllMachine(),\r\n            ShowAnimations: true\r\n        };\r\n    }\r\n\r\n    private inputChanged(e: React.ChangeEvent<HTMLInputElement>): void {\r\n        let text = e.target.value;\r\n        text = text.replace(\"*\", \"\");\r\n        text = text.replace(\"<\", \"\");\r\n        text = text.replace(\">\", \"\");\r\n\r\n        this.setState({ CustomInput: text });\r\n    }\r\n    private startComputation(): Promise<OutputMessageModel[]> {\r\n\r\n        return new Promise<OutputMessageModel[]>((resolve, reject) => {\r\n            this.stopComputation().then(() => {\r\n                this.outputs = [];\r\n                return this.handleNextInput(0).then(resolve).catch(reject);\r\n            });\r\n        });\r\n    }\r\n\r\n    private handleNextInput(inputNumber: number): Promise<OutputMessageModel[]> {\r\n\r\n        if (this.inputs.length <= inputNumber) {\r\n            this.setState({ Computing: false });\r\n            return new Promise<OutputMessageModel[]>((resolve) => {\r\n                resolve(this.outputs);\r\n                this.cancelComputation = undefined;\r\n            });\r\n\r\n        } else {\r\n            if (this.state.ShowAnimations) {\r\n                //  const messageModels: MessageLocationModel[] = this.state.Messages; messageModels.concat\r\n                const nextMessages = this.computer.StartComputation(this.inputs[inputNumber]);\r\n\r\n                this.setState({ Computing: true, Messages: nextMessages });\r\n                return this.SetDelay(this.CalculateNextMessages, inputNumber);\r\n            } else {\r\n                const outputMessages = this.computer.RunSetup(this.inputs[inputNumber]);\r\n                if (outputMessages.length > 0) {\r\n                    const outputs: OutputMessageModel[] = outputMessages.map((om) => ({ Content: om.Content, Channel: om.Channel, Order: inputNumber }));\r\n                    this.outputs = this.outputs.concat(outputs);\r\n                }\r\n\r\n                return this.handleNextInput(inputNumber + 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    private SetDelay<T>(callback: (args: any) => Promise<T>, args: any): Promise<T> {\r\n        return new Promise<T>((resolve, reject) => {\r\n            const clearHandle = window.setTimeout(() => callback(args).then(resolve).catch(reject), this.state.StepTime * 100);\r\n            this.cancelComputation = () => {\r\n                window.clearTimeout(clearHandle);\r\n                reject(\"Cancelled\");\r\n            };\r\n        });\r\n    }\r\n\r\n    private stopComputation(): Promise<void> {\r\n        return new Promise((resolve) => {\r\n            if (this.cancelComputation) {\r\n                this.cancelComputation();\r\n                this.cancelComputation = undefined;\r\n            }\r\n            this.setState({ Messages: [], Computing: false }, () => resolve());\r\n        });\r\n    }\r\n\r\n    private CalculateNextMessages(inputNumber: number): Promise<OutputMessageModel[]> {\r\n\r\n        const [nextMessages, outputMessages] = this.computer.GetNextMessages(this.state.Messages);\r\n        if (outputMessages.length > 0) {\r\n            const outputs: OutputMessageModel[] = outputMessages.map((om) => ({ Content: om.Content, Channel: om.Channel, Order: inputNumber }));\r\n            this.outputs = this.outputs.concat(outputs);\r\n        }\r\n\r\n        this.setState({ Messages: nextMessages });\r\n        if (nextMessages.length > 0) {\r\n            return this.SetDelay(this.CalculateNextMessages, inputNumber);\r\n        } else {\r\n            return this.handleNextInput(inputNumber + 1);\r\n        }\r\n    }\r\n\r\n    public componentDidMount(): void {\r\n        document.addEventListener(\"keyup\", (event) => this.handleKeyPress(event), false);\r\n    }\r\n\r\n    public componentWillUnmount() {\r\n        document.removeEventListener(\"keyup\", (event) => this.handleKeyPress(event), false);\r\n    }\r\n\r\n    private PlayTest(input: MessageModel[]): Promise<OutputMessageModel[]> {\r\n        this.inputs = input;\r\n        return this.startComputation();\r\n    }\r\n\r\n    private GridSetupChanged(newGridSetup: GridSetupModel): void {\r\n        this.gameData.ActiveSetup = newGridSetup;\r\n        this.computer.NewSetup(newGridSetup);\r\n        const exits = this.computer.CalculateExits();\r\n        this.setState({ GridSetup: newGridSetup, ShowingSetup: false, ExitCells: exits });\r\n    }\r\n\r\n    private NewGameDataLoaded(newData: GameDataModel): void {\r\n        this.gameData = newData;\r\n        this.machineStore.ReloadCustomMachines(newData.SavedMachines);\r\n        this.computer.NewSetup(newData.ActiveSetup);\r\n        const exits = this.computer.CalculateExits();\r\n        const machines = this.machineStore.GetAllMachine();\r\n        this.setState({ GridSetup: newData.ActiveSetup, ShowingSetup: false, ExitCells: exits, Machines: machines });\r\n    }\r\n\r\n    private SaveCustomMachine(machine: IMachineType): void {\r\n        const model: CustomMachineModel = {\r\n            MachineType: machine,\r\n            Setup: this.state.GridSetup\r\n        };\r\n        const modelWithId = this.machineStore.AddCustomMachine(model);\r\n        this.gameData.SavedMachines.push(modelWithId);\r\n        const machines = this.machineStore.GetAllMachine();\r\n        this.setState({ Machines: machines });\r\n    }\r\n\r\n    private StepTimeChanged(newStepTime: number): void {\r\n        this.setState({ StepTime: newStepTime });\r\n    }\r\n\r\n    private OnShowingSetup() {\r\n        this.setState({ ShowingSetup: true });\r\n    }\r\n\r\n    private LevelSelected(level: LevelModel) {\r\n        this.setState({ SelectedLevel: level });\r\n    }\r\n\r\n    private handleKeyPress(event: KeyboardEvent): void {\r\n        switch (event.key) {\r\n            case \"Enter\":\r\n                this.startComputation();\r\n                break;\r\n            case \" \":\r\n                this.stopComputation();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        const startMachines = this.computer.GetStartMachines();\r\n\r\n        const disallowedStartMachines = startMachines.map((m) => m.MachineId);\r\n        disallowedStartMachines.push({ Id: 1, Type: \"Default\" });\r\n        const allowedMachines = this.state.Machines.filter((m) => !disallowedStartMachines.some((mId) => mId.Id === m.Id.Id && mId.Type === m.Id.Type));\r\n        // const allowedInputColors = [ChannelColorEnum.Green, ChannelColorEnum.Red, ChannelColorEnum.Blue];\r\n        const allowedInputColors = [ChannelColorEnum.Green];\r\n\r\n        return (\r\n            <div style={{ display: \"flex\", flexFlow: \"column wrap\" }}>\r\n                <div>\r\n                    <h2 style={{ textAlign: \"center\" }}>LogicBoxes</h2>\r\n                </div>\r\n                <div style={{ display: \"flex\", flexFlow: \"row wrap\" }}>\r\n                    <div style={{ flex: \"1 1 200px\" }}>\r\n                        <MenuItem ItemName=\"Settings\">\r\n                            <Settings\r\n                                Setup={this.gameData}\r\n                                OnSetupChanged={this.GridSetupChanged}\r\n                                OnDataChanged={this.NewGameDataLoaded}\r\n                                ShowSetup={this.state.ShowingSetup}\r\n                                OnShowingSetup={this.OnShowingSetup} />\r\n                        </MenuItem>\r\n                        <MenuItem ItemName=\"Challenges\">\r\n                            <LevelList OnLevelClicked={this.LevelSelected} />\r\n                        </MenuItem>\r\n                        <LevelDisplay Level={this.state.SelectedLevel} PlayTest={this.PlayTest} MultipleInputsAllowed={false} AllowedInputs={allowedInputColors} />\r\n\r\n                    </div>\r\n                    <div style={{ display: \"flex\", flex: \"4 1 400px\", flexFlow: \"column\", alignItems: \"center\" }}>\r\n                        <div>\r\n                            <Grid\r\n                                GridSetup={this.state.GridSetup}\r\n                                Computing={this.state.Computing}\r\n                                Messages={this.state.Messages}\r\n                                OnChanged={this.GridSetupChanged}\r\n                                ExitCells={this.state.ExitCells} />\r\n                        </div>\r\n                        <div>\r\n                            <Dashboard StepTime={this.state.StepTime} OnStepTimeChanged={this.StepTimeChanged} ShowAnimations={this.state.ShowAnimations} OnShowAnimationsChanged={(show) => this.setState({ ShowAnimations: show })} />\r\n                        </div>\r\n                    </div>\r\n                    <div style={{ display: \"flex\", flexDirection: \"column\", flexWrap: \"wrap\", flex: \"1 1 200px\", marginLeft: 30}}>\r\n                        <MachineMenu SaveCustomMachine={this.SaveCustomMachine} InputChannels={[]} ExitCells={this.state.ExitCells} />\r\n                        <MachineCollection allowedMachines={allowedMachines} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import React from \"react\";\r\nimport { DndProvider } from \"react-dnd\";\r\nimport HTML5Backend from \"react-dnd-html5-backend\";\r\nimport { Game } from \"./Components/Game/Game\";\r\n\r\nconst App: React.FC = () => {\r\n\r\n  return (\r\n    <DndProvider backend={HTML5Backend}>\r\n      <Game />\r\n    </DndProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}