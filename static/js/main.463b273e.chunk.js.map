{"version":3,"sources":["Models/DirectionEnum.ts","Models/ChannelColorsEnum.ts","Computing/Setup.ts","Components/Constants.ts","Components/Machine/Machine.tsx","Components/Channel/Channel.tsx","Components/DragItemTypes.ts","MachineStore/DefaultMachines/MoveMachine.ts","MachineStore/DefaultMachines/StartMachine.ts","MachineStore/DefaultMachines/CopyMachine.ts","MachineStore/DefaultMachines/DeleteMachine.ts","MachineStore/DefaultMachines/RotateMachine.ts","MachineStore/DefaultMachines/CompareMachine.ts","MachineStore/DefaultMachines/AddStarMachine.ts","MachineStore/MachineStore.ts","Components/MachineInstance/MachineInstance.tsx","Components/Cell/Cell.tsx","Components/Grid/Grid.tsx","Components/StoredMachine/StoredMachine.tsx","Components/MachineStore/MachineStore.tsx","Computing/Computer.ts","Components/Settings/Settings.tsx","Components/Game/Game.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["DirectionEnum","ChannelColorEnum","Setup","GridSetup","this","LoadSetup","undefined","Error","NumberOfColumns","NumberOfRows","MachineInstances","Cell","Row","Column","MachineId","Id","Type","Channels","Direction","Right","Channel","Green","InputChannels","Constants","CellSize","Machine","machineSize","borderSize","machineStyle","height","width","backgroundColor","props","Color","borderStyle","borderColor","BorderColor","borderWidth","borderRadius","marginLeft","marginTop","style","React","Component","onClicked","bind","channelStyle","position","ChannelMap","border","pointerEvents","rotate","Down","Left","Up","rotation","transform","onClick","event","newDirection","OnChanged","DragItemTypes","MoveMachine","actor","Act","message","returnValue","push","Content","NumberOfOutputs","NumberOfInputs","Name","StartMachine","CopyMachine","content","length","DeleteMachine","slice","RotateMachine","CompareMachine","channel","Red","AddStarMachine","MachineStore","machines","init","id","machine","find","m","FindMachine","GetActor","GetType","machineStore","MachineInstance","useDrag","item","type","end","dropResult","monitor","didDrop","OnRemoved","collect","isDragging","drag","channels","map","c","index","key","channelMap","machineInstance","i","OnChannelChanged","machineType","GetStore","GetMachineType","ref","useDrop","accept","drop","OnMovedMachine","getItem","location","itemProps","OnNewMachine","float","marginRight","Message","OnMachineRemoved","Grid","store","ChannelChanged","MachineMoved","MachineAdded","MachineRemoved","rows","rowIndex","row","columnIndex","foundMachineInstance","foundMessage","Messages","newGridSetup","mi","findIndex","filter","Blue","Yellow","Math","max","StoredMachine","channelComponents","cm","absoluteStyle","Store","GetAllMachine","relativeStyle","storedMachines","disallowedMachines","some","Computer","setup","GetMachines","startMachines","Input","messageLocations","GetStartMachines","messageLocation","messages","nextMessages","messageCell","Move","nextContents","nextContent","cell","direction","Settings","StepTimeChanged","ShowSetupString","SetupStringChanged","state","SetupString","setupString","ShowSetup","display","flexWrap","flexDirection","justifyContent","alignItems","value","StepTime","title","onChange","setState","target","stringValue","numValue","Number","OnStepTimeChanged","JSON","stringify","OnShowingSetup","setupModel","parse","OnSetupChanged","Game","computer","runningComputation","inputChanged","startComputation","CalculateNextMessages","GridSetupChanged","stopComputation","handleKeyPress","gridSetup","LoadGridSetup","Computing","Output","ShowingSetup","e","StartComputation","setTimeout","clearTimeout","GetNextMessages","doneMessages","mm","newSetup","document","addEventListener","removeEventListener","disallowedStartMachines","gridSizeStyle","verticalFlex","className","NewSetup","newStepTime","App","backend","HTML5Backend","Boolean","window","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.463b273e.chunk.js","sourcesContent":["export enum DirectionEnum {\r\n    Up = \"UP\",\r\n    Down = \"DOWN\",\r\n    Left = \"LEFT\",\r\n    Right = \"RIGHT\",\r\n}","export enum ChannelColorEnum {\r\n    Green = \"green\",\r\n    Red = \"red\",\r\n    Blue = \"blue\",\r\n    Yellow = \"yellow\",\r\n}","import { GridSetupModel } from \"../Models/GridSetupModel\";\r\nimport { DirectionEnum } from \"../Models/DirectionEnum\";\r\nimport { ChannelColorEnum } from \"../Models/ChannelColorsEnum\";\r\n\r\nexport class Setup {\r\n\r\n    private GridSetup: GridSetupModel | undefined;\r\n    constructor() {\r\n        this.LoadSetup();\r\n    }\r\n\r\n    public LoadGridSetup(): GridSetupModel {\r\n        if (this.GridSetup === undefined) {\r\n            throw new Error(\"Setup not loaded\");\r\n        }\r\n\r\n        return this.GridSetup;\r\n    }\r\n\r\n    LoadSetup(): void {\r\n        this.GridSetup = {\r\n            NumberOfColumns: 6,\r\n            NumberOfRows: 5,\r\n            MachineInstances: [{\r\n                Cell: { Row: 2, Column: 0 },\r\n                MachineId: { Id: 1, Type: \"Default\" },\r\n                Channels: [{ Direction: DirectionEnum.Right, Channel: ChannelColorEnum.Green }],\r\n                InputChannels: [], Id: 1\r\n            }]\r\n        }\r\n    };\r\n\r\n\r\n}\r\n","export class Constants {\r\n    public static CellSize = 100;\r\n}","import React from \"react\";\r\nimport { Props } from \"./Props\";\r\nimport { Constants } from \"../Constants\";\r\n\r\nexport class Machine extends React.Component<Props>\r\n{\r\n    public render() {\r\n        const machineSize = Constants.CellSize / 5 * 3\r\n        const borderSize = machineSize/10;\r\n\r\n        const machineStyle: React.CSSProperties = {\r\n            // position: \"absolute\",\r\n            height: machineSize,\r\n            width: machineSize,\r\n            backgroundColor: this.props.Machine.Color,\r\n            borderStyle: \"solid\",\r\n            borderColor: this.props.Machine.BorderColor,\r\n            borderWidth: borderSize,\r\n            borderRadius: \"50%\",\r\n            marginLeft: ((Constants.CellSize - machineSize)/2 - borderSize),\r\n            marginTop: ((Constants.CellSize - machineSize)/2 - borderSize)\r\n        };\r\n\r\n        return (\r\n            <div style={machineStyle}>\r\n               \r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport { Props } from \"./Props\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { Constants } from \"../Constants\";\r\n\r\nexport class Channel extends React.Component<Props>{\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.onClicked = this.onClicked.bind(this);\r\n    }\r\n    public render() {\r\n\r\n        const width = 19;\r\n        const height = 4;\r\n        const border = 1\r\n        const channelStyle: React.CSSProperties = {\r\n            position: \"absolute\",\r\n            height: Constants.CellSize / 50 * height,\r\n            width: Constants.CellSize / 50 * width,\r\n            marginLeft: Constants.CellSize / 50 * (25 + (height + border) / 2),\r\n            marginTop: Constants.CellSize / 50 * (25 - (height + border) / 2),\r\n            backgroundColor: this.props.ChannelMap.Channel,\r\n            borderStyle: \"solid\",\r\n            borderWidth: border + \"px\",\r\n            pointerEvents: \"visible\"\r\n        }\r\n\r\n        let rotate: string = \"\";\r\n        switch (this.props.ChannelMap.Direction) {\r\n            case DirectionEnum.Down:\r\n                rotate = \"rotate(90deg)\";\r\n                break;\r\n            case DirectionEnum.Left:\r\n                rotate = \"rotate(180deg)\";\r\n                break;\r\n            case DirectionEnum.Up:\r\n                rotate = \"rotate(270deg)\";\r\n                break;\r\n            case DirectionEnum.Right:\r\n                rotate = \"rotate(0deg)\";\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        const rotation: React.CSSProperties = {\r\n            transform: rotate,\r\n            height: Constants.CellSize,\r\n            width: Constants.CellSize,\r\n            position: \"absolute\",\r\n            pointerEvents: \"none\"\r\n        }\r\n\r\n        return (\r\n            <div style={rotation}>\r\n                <div style={channelStyle} onClick={this.onClicked}></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public onClicked(event: React.MouseEvent<HTMLDivElement, MouseEvent>): void {\r\n        let newDirection: DirectionEnum = DirectionEnum.Left;\r\n        switch (this.props.ChannelMap.Direction) {\r\n            case DirectionEnum.Down:\r\n                newDirection = DirectionEnum.Left;\r\n                break;\r\n            case DirectionEnum.Left:\r\n                newDirection = DirectionEnum.Up;\r\n                break;\r\n            case DirectionEnum.Up:\r\n                newDirection = DirectionEnum.Right;\r\n                break;\r\n            case DirectionEnum.Right:\r\n                newDirection = DirectionEnum.Down;\r\n                break;\r\n        }\r\n       \r\n        this.props.OnChanged({ Direction: newDirection, Channel: this.props.ChannelMap.Channel });\r\n    }\r\n}","export const DragItemTypes = {\r\n    MachineInstance: \"MachineInstance\",\r\n    NewMachine: \"NewMachine\"\r\n  }","import { IMachine } from \"../IMachine\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MachineId } from \"../MachineId\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachineType } from \"../IMachineType\";\r\n\r\nexport class MoveMachine implements IMachine {\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            returnValue.push({ Content: message.Content, Channel: ChannelColorEnum.Green });\r\n            return returnValue;\r\n        }\r\n    }\r\n    GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    GetType(): IMachineType {\r\n        return {\r\n            Color: \"green\",\r\n            BorderColor: \"lightgreen\",\r\n            NumberOfOutputs: 1,\r\n            NumberOfInputs: 1,\r\n            Name: \"Move\"\r\n        }\r\n    }\r\n    public readonly Id: MachineId = { Id: 5, Type: \"Default\" };\r\n}","import { IMachine } from \"../IMachine\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MachineId } from \"../MachineId\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachineType } from \"../IMachineType\";\r\n\r\nexport class StartMachine implements IMachine {\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            returnValue.push({ Content: message.Content, Channel: ChannelColorEnum.Green });\r\n            return returnValue;\r\n        }\r\n    }\r\n    GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    GetType(): IMachineType {\r\n        return {\r\n            Color: \"white\",\r\n            BorderColor: \"red\",\r\n            NumberOfOutputs: 1,\r\n            NumberOfInputs: 1,\r\n            Name: \"Start\"\r\n        }\r\n    }\r\n    public readonly Id: MachineId = { Id: 1, Type: \"Default\" };    \r\n}","import { IMachine } from \"../IMachine\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { MachineId } from \"../MachineId\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\n\r\nexport class CopyMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            const content = message.Content.length > 0 ? message.Content[0] + message.Content : \"\";\r\n\r\n            returnValue.push({ Content: content, Channel: ChannelColorEnum.Green });\r\n            return returnValue;\r\n        }\r\n    }\r\n    GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    GetType(): IMachineType {\r\n        return {\r\n            BorderColor: \"green\",\r\n            Color: \"yellow\",\r\n            Name: \"Copy\",\r\n            NumberOfInputs: 1,\r\n            NumberOfOutputs: 1\r\n        }\r\n    }\r\n    Id: MachineId = {\r\n        Id: 6,\r\n        Type: \"Default\"\r\n    }\r\n}\r\n\r\n","import { IMachine } from \"../IMachine\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { MachineId } from \"../MachineId\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\n\r\nexport class DeleteMachine implements IMachine {\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            const content = message.Content.length > 0 ? message.Content.slice(1): \"\";\r\n\r\n            returnValue.push({ Content: content, Channel: ChannelColorEnum.Green });\r\n            return returnValue;\r\n        }\r\n    }\r\n    GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    GetType(): IMachineType {\r\n        return {\r\n            BorderColor: \"red\",\r\n            Color: \"red\",\r\n            Name: \"Delete\",\r\n            NumberOfInputs: 1,\r\n            NumberOfOutputs: 1\r\n        }\r\n    }\r\n    Id: MachineId = {\r\n        Id: 7,\r\n        Type: \"Default\"\r\n    }\r\n}\r\n\r\n","import { IMachine } from \"../IMachine\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { MachineId } from \"../MachineId\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\n\r\nexport class RotateMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            let content: string;\r\n            if ( message.Content.length > 1){\r\n                content = message.Content.slice(1) + message.Content.slice(0,1);\r\n            }\r\n            else{\r\n                content = message.Content;\r\n            }\r\n\r\n            returnValue.push({ Content: content, Channel: ChannelColorEnum.Green });\r\n            return returnValue;\r\n        }\r\n    }\r\n    GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    GetType(): IMachineType {\r\n        return {\r\n            BorderColor: \"blue\",\r\n            Color: \"cyan\",\r\n            Name: \"Rotate\",\r\n            NumberOfInputs: 1,\r\n            NumberOfOutputs: 1\r\n        }\r\n    }\r\n    Id: MachineId = {\r\n        Id: 8,\r\n        Type: \"Default\"\r\n    }\r\n}\r\n\r\n","import { IMachine } from \"../IMachine\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { MachineId } from \"../MachineId\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\n\r\nexport class CompareMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            const channel: ChannelColorEnum = message.Content.length > 1 && message.Content[0] === message.Content[1] ? ChannelColorEnum.Green : ChannelColorEnum.Red;\r\n\r\n            returnValue.push({ Content: message.Content, Channel: channel });\r\n            return returnValue;\r\n        }\r\n    }\r\n    GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    GetType(): IMachineType {\r\n        return {\r\n            BorderColor: \"red\",\r\n            Color: \"green\",\r\n            Name: \"Compare\",\r\n            NumberOfInputs: 1,\r\n            NumberOfOutputs: 2\r\n        }\r\n    }\r\n    Id: MachineId = {\r\n        Id: 9,\r\n        Type: \"Default\"\r\n    }\r\n}\r\n\r\n","import { IMachine } from \"../IMachine\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { MachineId } from \"../MachineId\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\n\r\nexport class AddStarMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            const content = \"*\" + message.Content;\r\n\r\n            returnValue.push({ Content: content, Channel: ChannelColorEnum.Green });\r\n            return returnValue;\r\n        }\r\n    }\r\n    GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    GetType(): IMachineType {\r\n        return {\r\n            BorderColor: \"blue\",\r\n            Color: \"grey\",\r\n            Name: \"Add *\",\r\n            NumberOfInputs: 1,\r\n            NumberOfOutputs: 1\r\n        }\r\n    }\r\n    Id: MachineId = {\r\n        Id: 10,\r\n        Type: \"Default\"\r\n    }\r\n}\r\n\r\n","import { MoveMachine } from \"./DefaultMachines/MoveMachine\";\r\nimport { IMachine } from \"./IMachine\";\r\nimport { StartMachine } from \"./DefaultMachines/StartMachine\";\r\nimport { MachineId } from \"./MachineId\";\r\nimport { IMachineType } from \"./IMachineType\";\r\nimport { IActor } from \"./IActor\";\r\nimport { CopyMachine } from \"./DefaultMachines/CopyMachine\";\r\nimport { DeleteMachine } from \"./DefaultMachines/DeleteMachine\";\r\nimport { RotateMachine } from \"./DefaultMachines/RotateMachine\";\r\nimport { CompareMachine } from \"./DefaultMachines/CompareMachine\";\r\nimport { AddStarMachine } from \"./DefaultMachines/AddStarMachine\";\r\n\r\nexport class MachineStore {\r\n    private static machineStore: MachineStore;\r\n    private machines: IMachine[];\r\n\r\n    private constructor() {\r\n        this.machines = [];\r\n        this.init();\r\n    }\r\n\r\n    public static GetStore(): MachineStore{\r\n        if (MachineStore.machineStore === undefined)        {\r\n            MachineStore.machineStore = new MachineStore();\r\n        }\r\n\r\n        return MachineStore.machineStore;\r\n    }\r\n\r\n    private init(): void {\r\n        this.machines = [];\r\n        this.machines.push(new StartMachine());\r\n        this.machines.push(new MoveMachine());\r\n        this.machines.push(new CopyMachine());\r\n        this.machines.push(new DeleteMachine());\r\n        this.machines.push(new RotateMachine());\r\n        this.machines.push(new CompareMachine());\r\n        this.machines.push(new AddStarMachine());\r\n\r\n    }\r\n\r\n    private FindMachine(id: MachineId): IMachine {\r\n        const machine = this.machines.find(m => m.Id.Id === id.Id && m.Id.Type === id.Type);\r\n        if (machine === undefined){\r\n            throw new Error(\"No machine found with id \" + id.Id + \" and type \" + id.Type);\r\n        }\r\n\r\n        return machine;\r\n    }\r\n\r\n    public GetActor(id: MachineId): IActor {\r\n        return this.FindMachine(id).GetActor();\r\n    }\r\n\r\n    public GetMachineType(id: MachineId): IMachineType {\r\n        return this.FindMachine(id).GetType();       \r\n    }\r\n\r\n    public GetAllMachine(): IMachine[] {\r\n        return this.machines;\r\n    }\r\n}","import React from \"react\";\r\nimport { Props } from \"./Props\";\r\nimport { Machine } from \"../Machine/Machine\";\r\nimport { Channel } from \"../Channel/Channel\";\r\nimport { ChannelModel } from \"../../Models/ChannelMapModel\";\r\nimport { MachineInstanceModel } from \"../../Models/MachineInstanceModel\";\r\nimport { useDrag } from \"react-dnd\";\r\nimport { DragItemTypes } from \"../DragItemTypes\";\r\nimport {MachineStore} from \"../../MachineStore/MachineStore\";\r\n\r\nconst MachineInstance: React.FC<Props> = (props) => {\r\n    const [, drag] = useDrag({\r\n        item: { type: DragItemTypes.MachineInstance, id: props.MachineInstance.Id },\r\n        end: (dropResult, monitor) => {\r\n            if (!monitor.didDrop()) {\r\n                props.OnRemoved(props.MachineInstance.Id);\r\n            }\r\n        },\r\n        collect: monitor => ({\r\n            isDragging: !!monitor.isDragging(),\r\n        }),\r\n    })\r\n\r\n    const OnChannelChanged = (channel: ChannelModel, index: Number) => {\r\n        const machineInstance: MachineInstanceModel = {\r\n            Cell: props.MachineInstance.Cell,\r\n            MachineId: props.MachineInstance.MachineId,\r\n            Channels: props.MachineInstance.Channels.map((c, i) => (i === index) ? channel : c),\r\n            InputChannels: props.MachineInstance.InputChannels,\r\n            Id: props.MachineInstance.Id\r\n        }\r\n\r\n        props.OnChanged(machineInstance);\r\n    }\r\n\r\n    const channels = props.MachineInstance.Channels.map((c, index) => <div key={index}><Channel OnChanged={(channelMap) => OnChannelChanged(channelMap, index)} ChannelMap={c} /></div>);\r\n    const absoluteStyle: React.CSSProperties = {\r\n        position: \"absolute\",\r\n    };\r\n\r\n    const machineType = MachineStore.GetStore().GetMachineType(props.MachineInstance.MachineId);\r\n    return (\r\n        <div ref={drag}>\r\n            <div style={absoluteStyle}>\r\n                <Machine Machine={machineType} />\r\n            </div>\r\n            {channels}\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default MachineInstance;\r\n\r\n","import React from \"react\";\r\nimport { Props } from \"./Props\";\r\nimport \"../../App.css\";\r\nimport MachineInstance from \"../MachineInstance/MachineInstance\";\r\nimport { Constants } from \"../Constants\";\r\nimport { useDrop } from \"react-dnd\";\r\nimport { DragItemTypes } from \"../DragItemTypes\";\r\nimport { MachineId } from \"../../MachineStore/MachineId\";\r\n\r\nconst Cell: React.FC<Props> = (props) => {\r\n\r\n    const [, drop] = useDrop({\r\n        accept: [DragItemTypes.MachineInstance, DragItemTypes.NewMachine],\r\n        drop: (item, monitor) => {\r\n            switch (item.type) {\r\n                case DragItemTypes.MachineInstance:\r\n                    props.OnMovedMachine(monitor.getItem().id, props.location);\r\n                    break;\r\n                case DragItemTypes.NewMachine: \r\n                    const itemProps = monitor.getItem() as {id: MachineId};                  \r\n                    props.OnNewMachine(itemProps.id, props.location);\r\n                    break;\r\n            }\r\n        },\r\n    })\r\n\r\n    const style: React.CSSProperties = {\r\n        height: Constants.CellSize,\r\n        width: Constants.CellSize,\r\n        border: \"1px solid #999\",\r\n        float: \"left\",\r\n        marginTop: -1,\r\n        marginRight: -1,\r\n        position: \"relative\"\r\n    }\r\n\r\n    return (\r\n        <div style={style} ref={drop}>\r\n            {props.message !== undefined ? props.message.Message : \"\"}\r\n            {props.machineInstance !== undefined ? <MachineInstance MachineInstance={props.machineInstance} OnChanged={props.OnChanged} OnRemoved={props.OnMachineRemoved}/> : \"\"}\r\n\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default Cell;","import React from 'react';\r\nimport '../../App.css';\r\nimport { GridProps } from './Props';\r\nimport Cell from '../Cell/Cell';\r\nimport { MachineInstanceModel } from '../../Models/MachineInstanceModel';\r\nimport { MessageLocationModel } from '../../Models/MessageLocationModel';\r\nimport { GridSetupModel } from '../../Models/GridSetupModel';\r\nimport { CellModel } from '../../Models/CellModel';\r\nimport { ChannelModel } from '../../Models/ChannelMapModel';\r\nimport { ChannelColorEnum } from '../../Models/ChannelColorsEnum';\r\nimport { DirectionEnum } from '../../Models/DirectionEnum';\r\nimport { MachineId } from '../../MachineStore/MachineId';\r\nimport { MachineStore } from '../../MachineStore/MachineStore';\r\n\r\nexport class Grid extends React.Component<GridProps>{\r\n\r\n    private store: MachineStore;\r\n    constructor(props: GridProps) {\r\n        super(props);\r\n        this.ChannelChanged = this.ChannelChanged.bind(this);\r\n        this.MachineMoved = this.MachineMoved.bind(this);\r\n        this.MachineAdded = this.MachineAdded.bind(this);\r\n        this.MachineRemoved = this.MachineRemoved.bind(this);\r\n        this.store = MachineStore.GetStore();\r\n    }\r\n\r\n    public render() {\r\n        var rows = [];\r\n        for (var rowIndex = 0; rowIndex < this.props.GridSetup.NumberOfRows; rowIndex++) {\r\n            var row = [];\r\n            for (var columnIndex = 0; columnIndex < this.props.GridSetup.NumberOfColumns; columnIndex++) {\r\n                let foundMachineInstance: MachineInstanceModel | undefined = undefined;\r\n                let foundMessage: MessageLocationModel | undefined = undefined;\r\n\r\n                for (const machineInstance of this.props.GridSetup.MachineInstances) {\r\n                    if (machineInstance.Cell.Column === columnIndex && machineInstance.Cell.Row === rowIndex) {\r\n                        foundMachineInstance = machineInstance;\r\n                    }\r\n                }\r\n\r\n                for (const message of this.props.Messages) {\r\n                    if (message.Cell!.Column === columnIndex && message.Cell!.Row === rowIndex) {\r\n                        foundMessage = message;\r\n                    }\r\n                }\r\n\r\n                row.push(<Cell \r\n                    key={columnIndex} \r\n                    machineInstance={foundMachineInstance} \r\n                    message={foundMessage} \r\n                    OnChanged={this.ChannelChanged} \r\n                    OnMovedMachine={this.MachineMoved} \r\n                    OnNewMachine={this.MachineAdded} \r\n                    OnMachineRemoved={this.MachineRemoved}\r\n                    location={{ Row: rowIndex, Column: columnIndex }} />);\r\n            }\r\n            rows.push(<div key={rowIndex}>{row}</div>);\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                {rows}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private ChannelChanged(machineInstance: MachineInstanceModel) {\r\n        const newGridSetup: GridSetupModel = {\r\n            NumberOfColumns: this.props.GridSetup.NumberOfColumns,\r\n            NumberOfRows: this.props.GridSetup.NumberOfRows,\r\n            MachineInstances: this.props.GridSetup.MachineInstances.map((mi) =>\r\n                (mi.Cell.Column === machineInstance.Cell.Column && mi.Cell.Row === machineInstance.Cell.Row) ?\r\n                    machineInstance\r\n                    :\r\n                    mi)\r\n        };\r\n\r\n        this.props.OnChanged(newGridSetup);\r\n    }\r\n\r\n    private MachineMoved(id: number, location: CellModel): void {\r\n        const index = this.props.GridSetup.MachineInstances.findIndex((mi) => mi.Id === id);\r\n        this.props.GridSetup.MachineInstances[index].Cell = location;\r\n        this.props.OnChanged(this.props.GridSetup);\r\n    }\r\n    private MachineRemoved(id: number): void {\r\n        this.props.GridSetup.MachineInstances = this.props.GridSetup.MachineInstances.filter((mi) => mi.Id !== id);\r\n        this.props.OnChanged(this.props.GridSetup);\r\n    }\r\n    private MachineAdded(id: MachineId,location: CellModel): void {\r\n        const machine = this.store.GetMachineType(id);\r\n        const channels: ChannelModel[] = [];\r\n        if (machine.NumberOfOutputs > 0) {\r\n            channels.push({ Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Up });\r\n        }\r\n        if (machine.NumberOfOutputs > 1) {\r\n            channels.push({ Channel: ChannelColorEnum.Red, Direction: DirectionEnum.Down });\r\n        }\r\n        if (machine.NumberOfOutputs > 2) {\r\n            channels.push({ Channel: ChannelColorEnum.Blue, Direction: DirectionEnum.Right });\r\n        }\r\n        if (machine.NumberOfOutputs > 3) {\r\n            channels.push({ Channel: ChannelColorEnum.Yellow, Direction: DirectionEnum.Left });\r\n        }\r\n\r\n        const maxId =  (this.props.GridSetup.MachineInstances.length===0)? 0 : Math.max(...this.props.GridSetup.MachineInstances.map(mi => mi.Id));\r\n        \r\n        const machineInstance: MachineInstanceModel = {\r\n            Cell: location,\r\n            MachineId: id,\r\n            Channels: channels,\r\n            InputChannels: [],\r\n            Id: maxId + 1\r\n        }\r\n        this.props.GridSetup.MachineInstances.push(machineInstance);\r\n        this.props.OnChanged(this.props.GridSetup);\r\n    }\r\n}\r\n\r\n\r\n","import React from \"react\";\r\nimport { Props } from \"./Props\";\r\nimport { Machine } from \"../Machine/Machine\";\r\nimport { useDrag } from \"react-dnd\";\r\nimport { DragItemTypes } from \"../DragItemTypes\";\r\nimport { ChannelModel } from \"../../Models/ChannelMapModel\";\r\nimport { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { Channel } from \"../Channel/Channel\";\r\n\r\nconst StoredMachine: React.FC<Props> = (props) => {\r\n    const [, drag] = useDrag({\r\n        item: { type: DragItemTypes.NewMachine, id: props.machine.Id },\r\n        collect: monitor => ({\r\n            isDragging: !!monitor.isDragging(),\r\n        }),\r\n    })\r\n\r\n    const machineType = props.machine.GetType();\r\n    const channels: ChannelModel[] = [];\r\n    if (machineType.NumberOfOutputs > 0) {\r\n        channels.push({ Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Up });\r\n    }\r\n    if (machineType.NumberOfOutputs > 1) {\r\n        channels.push({ Channel: ChannelColorEnum.Red, Direction: DirectionEnum.Down });\r\n    }\r\n    if (machineType.NumberOfOutputs > 2) {\r\n        channels.push({ Channel: ChannelColorEnum.Blue, Direction: DirectionEnum.Right });\r\n    }\r\n    if (machineType.NumberOfOutputs > 3) {\r\n        channels.push({ Channel: ChannelColorEnum.Yellow, Direction: DirectionEnum.Left });\r\n    }\r\n\r\n    const channelComponents = channels.map((c, index) => <Channel key={index} ChannelMap={c} OnChanged={(cm) => { }} />);\r\n    const absoluteStyle: React.CSSProperties = {\r\n        position: \"absolute\",\r\n    };\r\n    return (\r\n        <div ref={drag}>\r\n            <div style={absoluteStyle}>\r\n                <Machine Machine={props.machine.GetType()} />\r\n            </div>\r\n            <div style={absoluteStyle}>\r\n                {channelComponents}\r\n            </div>\r\n            <label>{machineType.Name}</label>\r\n        </div>)\r\n}\r\n\r\nexport default StoredMachine","import { Props } from \"./Props\";\r\nimport React from \"react\";\r\nimport StoredMachine from \"../StoredMachine/StoredMachine\";\r\nimport {MachineStore as Store} from \"../../MachineStore/MachineStore\";\r\nimport { Constants } from \"../Constants\";\r\n\r\nconst MachineStore: React.FC<Props> = (props) => {\r\n\r\n    const machines = Store.GetStore().GetAllMachine();\r\n    const relativeStyle: React.CSSProperties = {\r\n        position: \"relative\",\r\n        height: Constants.CellSize,\r\n        width: Constants.CellSize\r\n    };\r\n\r\n    const filteredMachines= machines.filter((m) => !props.disallowedMachines.some((mi) => mi.Id === m.Id.Id && mi.Type === m.Id.Type));\r\n    const storedMachines = filteredMachines.map((m, index) => <div style={relativeStyle} key={index}><StoredMachine machine={m} /></div>);\r\n\r\n    return (\r\n        <div>\r\n            {storedMachines}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MachineStore","import { GridSetupModel } from \"../Models/GridSetupModel\";\r\nimport { MachineInstanceModel } from \"../Models/MachineInstanceModel\";\r\nimport { MessageLocationModel } from \"../Models/MessageLocationModel\";\r\nimport { CellModel } from \"../Models/CellModel\";\r\nimport { ChannelColorEnum } from \"../Models/ChannelColorsEnum\";\r\nimport { MachineStore } from \"../MachineStore/MachineStore\";\r\nimport { IActor } from \"../MachineStore/IActor\";\r\nimport { DirectionEnum } from \"../Models/DirectionEnum\";\r\n\r\nexport class Computer {\r\n    private setup: GridSetupModel;\r\n    private machines: { id: number, actor: IActor }[] = [];\r\n    private store: MachineStore;\r\n\r\n    constructor(setup: GridSetupModel) {\r\n        this.setup = setup;\r\n        this.store = MachineStore.GetStore();\r\n        this.GetMachines()\r\n    }\r\n\r\n    public NewSetup(setup: GridSetupModel){\r\n        this.setup = setup;\r\n        this.GetMachines();\r\n    }\r\n\r\n    private GetMachines(): void {\r\n        this.machines = this.setup.MachineInstances.map(mi => { return { id: mi.Id, actor: this.store.GetActor(mi.MachineId) }; });\r\n    }\r\n\r\n    public GetStartMachines() {\r\n        const startMachines: MachineInstanceModel[] = [];\r\n        for (const machineInstance of this.setup.MachineInstances) {\r\n            if (machineInstance.MachineId.Id < 4 && machineInstance.MachineId.Type === \"Default\") {\r\n                startMachines.push(machineInstance);\r\n            }\r\n        }\r\n\r\n        return startMachines;\r\n    }\r\n\r\n    public StartComputation(Input: string): MessageLocationModel[] {\r\n        const messageLocations: MessageLocationModel[] = [];\r\n        for (const machineInstance of this.GetStartMachines()) {\r\n            const direction = machineInstance.Channels[0].Direction;\r\n            const messageLocation: MessageLocationModel = { Message: Input, Direction: direction, Cell: machineInstance.Cell };\r\n            messageLocations.push(messageLocation);\r\n        }\r\n\r\n        return messageLocations;\r\n    }\r\n\r\n    public GetNextMessages(messages: MessageLocationModel[]): MessageLocationModel[]{\r\n        const nextMessages: MessageLocationModel[] = [];\r\n        for (const message of messages) {\r\n            let machine: MachineInstanceModel | undefined;\r\n            let messageCell: CellModel | undefined = message.Cell;\r\n\r\n            while (machine === undefined) {\r\n                messageCell = this.Move(messageCell!, message.Direction);\r\n                if (messageCell === undefined){\r\n                    break;\r\n                }\r\n\r\n                machine = this.setup.MachineInstances.find((mi) => mi.Cell.Column === messageCell!.Column && mi.Cell.Row === messageCell!.Row);\r\n            }\r\n\r\n            if (messageCell === undefined) {\r\n                nextMessages.push({ Cell: messageCell, Direction: message.Direction, Message: message.Message })\r\n                break;\r\n            }\r\n\r\n            let channel = ChannelColorEnum.Green;\r\n\r\n            const actor = this.machines.find((m) => m.id === machine!.Id)!.actor;\r\n            const nextContents = actor.Act({ Content: message.Message, Channel: channel });\r\n            for (const nextContent of nextContents) {\r\n                const channelMap = machine!.Channels.find((cm) => cm.Channel === nextContent.Channel);\r\n                if (channelMap === undefined) {\r\n                    throw Error(\"Channelmap \" + nextContent.Channel + \"undefined\");\r\n                }\r\n\r\n                const messageLocation: MessageLocationModel = { Cell: machine!.Cell, Message: nextContent.Content, Direction: channelMap.Direction }\r\n                nextMessages.push(messageLocation);\r\n            }\r\n        }\r\n\r\n        return nextMessages;\r\n    }\r\n\r\n    private Move(cell: CellModel, direction: DirectionEnum): CellModel | undefined {\r\n        switch (direction) {\r\n            case DirectionEnum.Down:\r\n                if (cell.Row === this.setup.NumberOfRows - 1) {\r\n                    return;\r\n                }\r\n                return { Column: cell.Column, Row: cell.Row + 1 };\r\n            case DirectionEnum.Up:\r\n                if (cell.Row === 0) {\r\n                    return;\r\n                }\r\n                return { Column: cell.Column, Row: cell.Row - 1 };\r\n            case DirectionEnum.Right:\r\n                if (cell.Column === this.setup.NumberOfColumns - 1) {\r\n                    return;\r\n                }\r\n                return { Column: cell.Column + 1, Row: cell.Row };\r\n            case DirectionEnum.Left:\r\n                if (cell.Column === 0) {\r\n                    return;\r\n                }\r\n                return { Column: cell.Column - 1, Row: cell.Row };\r\n        }\r\n    }\r\n\r\n}","import React from \"react\";\r\nimport { Props } from \"./Props\";\r\nimport { State } from \"./State\";\r\nimport { GridSetupModel } from \"../../Models/GridSetupModel\";\r\n\r\nexport class Settings extends React.Component<Props, State>{\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.StepTimeChanged = this.StepTimeChanged.bind(this);\r\n        this.ShowSetupString = this.ShowSetupString.bind(this);\r\n        this.LoadSetup = this.LoadSetup.bind(this);\r\n        this.SetupStringChanged = this.SetupStringChanged.bind(this);\r\n\r\n        this.state = { SetupString: \"\" }\r\n    }\r\n    public render() {\r\n        const verticalFlex: React.CSSProperties = { display: \"flex\", flexWrap: \"wrap\", flexDirection: \"column\", justifyContent: \"center\", alignItems: \"center\" }\r\n        const setupString = this.props.ShowSetup ? this.state.SetupString : \"\";\r\n        return (\r\n            <div style={verticalFlex}>\r\n                <label>Step Time</label>\r\n                <input value={this.props.StepTime} title=\"Step time\" onChange={this.StepTimeChanged} />\r\n                <button title={\"Show setup string\"} onClick={this.ShowSetupString}>Show setup string</button>\r\n                <input value={setupString} onChange={this.SetupStringChanged} />\r\n                <button title={\"Load Setup\"} onClick={this.LoadSetup}>Load setup</button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    private SetupStringChanged(event: React.ChangeEvent<HTMLInputElement>): void {\r\n        this.setState({ SetupString: event.target.value });\r\n    }\r\n\r\n    private StepTimeChanged(event: React.ChangeEvent<HTMLInputElement>): void {\r\n        const stringValue = event.target.value;\r\n        const numValue = Number(stringValue);\r\n        this.props.OnStepTimeChanged(numValue);\r\n    }\r\n\r\n    private ShowSetupString(): void {\r\n        this.setState({ SetupString: JSON.stringify(this.props.Setup) });\r\n        this.props.OnShowingSetup();\r\n    }\r\n\r\n    private LoadSetup(): void {\r\n        const setupModel = JSON.parse(this.state.SetupString) as GridSetupModel;\r\n        if (setupModel !== undefined) {\r\n            this.props.OnSetupChanged(setupModel);\r\n        }\r\n    }\r\n}\r\n","import { Props } from \"./Props\";\r\nimport React from \"react\";\r\nimport { Setup } from \"../../Computing/Setup\";\r\nimport { Grid } from \"../Grid/Grid\";\r\nimport { State } from \"./State\";\r\nimport { MessageLocationModel } from \"../../Models/MessageLocationModel\";\r\nimport { Constants } from \"../Constants\";\r\nimport { GridSetupModel } from \"../../Models/GridSetupModel\";\r\nimport MachineStore from \"../MachineStore/MachineStore\";\r\nimport { Computer } from \"../../Computing/Computer\";\r\nimport { Settings } from \"../Settings/Settings\";\r\n\r\nexport class Game extends React.Component<Props, State>{\r\n    private computer: Computer;\r\n    private runningComputation: NodeJS.Timeout | undefined;\r\n    startMachines: any;\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.inputChanged = this.inputChanged.bind(this);\r\n        this.startComputation = this.startComputation.bind(this);\r\n        this.CalculateNextMessages = this.CalculateNextMessages.bind(this);\r\n        this.GridSetupChanged = this.GridSetupChanged.bind(this);\r\n        this.LoadSetup = this.LoadSetup.bind(this);\r\n        this.StepTimeChanged = this.StepTimeChanged.bind(this);\r\n        this.OnShowingSetup = this.OnShowingSetup.bind(this);\r\n        this.stopComputation = this.stopComputation.bind(this);\r\n        this.handleKeyPress = this.handleKeyPress.bind(this);\r\n\r\n\r\n        const setup = new Setup();\r\n        const gridSetup = setup.LoadGridSetup();\r\n        this.computer = new Computer(gridSetup);\r\n        this.state = { Computing: false, Messages: [], GridSetup: gridSetup, Input: \"\", Output: \"\", StepTime: 600, ShowingSetup: false };\r\n    }\r\n    private inputChanged(e: React.ChangeEvent<HTMLInputElement>): void {\r\n        this.setState({ Input: e.target.value });\r\n    }\r\n    private startComputation(): void {\r\n        this.stopComputation();\r\n        const messageLocations: MessageLocationModel[] = this.computer.StartComputation(this.state.Input);\r\n\r\n        this.setState({ Computing: true, Messages: messageLocations });\r\n        this.runningComputation = setTimeout(this.CalculateNextMessages, this.state.StepTime);\r\n    }\r\n\r\n    private stopComputation(): void {\r\n        if (this.runningComputation){\r\n            clearTimeout(this.runningComputation);\r\n            this.runningComputation = undefined;\r\n            this.setState({Messages: []});\r\n        }\r\n    }\r\n\r\n    private CalculateNextMessages(): void {\r\n        const messages = this.computer.GetNextMessages(this.state.Messages);\r\n\r\n        const doneMessages = messages.filter(mm => mm.Cell === undefined);\r\n        if (doneMessages.length > 0) {\r\n            this.setState({ Output: doneMessages[0].Message });\r\n        }\r\n\r\n        const nextMessages = messages.filter(mm => mm.Cell !== undefined);\r\n        this.setState({ Messages: nextMessages });\r\n        if (nextMessages.length > 0) {\r\n            this.runningComputation = setTimeout(this.CalculateNextMessages, this.state.StepTime);\r\n        } else {\r\n            this.setState({ Computing: false });\r\n        }\r\n    }\r\n\r\n    private LoadSetup(event: React.ChangeEvent<HTMLInputElement>): void {\r\n        const newValue = JSON.parse(event.target.value);\r\n        const newSetup = newValue as GridSetupModel;\r\n        if (newSetup !== undefined) {\r\n            this.GridSetupChanged(newSetup);\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        document.addEventListener(\"keydown\", (event) => this.handleKeyPress(event), false);\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        document.removeEventListener(\"keydown\", (event) => this.handleKeyPress(event), false);\r\n    }\r\n\r\n     public render() {\r\n        const startMachines = this.computer.GetStartMachines();\r\n\r\n        const disallowedStartMachines = startMachines.map((m) => m.MachineId);\r\n        const height = this.state.GridSetup.NumberOfRows * (Constants.CellSize + 2);\r\n        const width = this.state.GridSetup.NumberOfColumns * (Constants.CellSize + 2);\r\n        const gridSizeStyle: React.CSSProperties = { height: height, width: width };\r\n        const verticalFlex: React.CSSProperties = { display: \"flex\", flexWrap: \"wrap\", flexDirection: \"column\", justifyContent: \"center\", alignItems: \"center\" }\r\n        const horizontalFlex: React.CSSProperties = { display: \"flex\", flexWrap: \"wrap\", flexDirection: \"row\", justifyContent: \"space-between\" }\r\n\r\n        return (\r\n            <div style={verticalFlex}>\r\n                <h2>StringCalculator</h2>\r\n                <div style={horizontalFlex}>\r\n                    <div>\r\n                        <Settings\r\n                            Setup={this.state.GridSetup}\r\n                            OnSetupChanged={this.GridSetupChanged}\r\n                            StepTime={this.state.StepTime}\r\n                            OnStepTimeChanged={this.StepTimeChanged}\r\n                            ShowSetup={this.state.ShowingSetup}\r\n                            OnShowingSetup={this.OnShowingSetup} />\r\n                    </div>\r\n                    <div style={verticalFlex}>\r\n                        <div className=\"App\" style={gridSizeStyle}>\r\n                            <Grid\r\n                                GridSetup={this.state.GridSetup}\r\n                                Computing={this.state.Computing}\r\n                                Messages={this.state.Messages}\r\n                                OnChanged={this.GridSetupChanged} />\r\n                        </div>\r\n                        <div>\r\n                            <input\r\n                                value={this.state.Input}\r\n                                onChange={this.inputChanged} />\r\n                            <button onClick={this.startComputation} title={\"start\"}>Start</button>\r\n                        </div>\r\n                        <label>Output: {this.state.Output}</label>\r\n                    </div>\r\n                    <div>\r\n                        <MachineStore disallowedMachines={disallowedStartMachines} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n    private GridSetupChanged(newGridSetup: GridSetupModel): void {\r\n        this.computer.NewSetup(newGridSetup);\r\n        this.setState({ GridSetup: newGridSetup, ShowingSetup: false });\r\n    }\r\n\r\n    private StepTimeChanged(newStepTime: number): void {\r\n        this.setState({ StepTime: newStepTime });\r\n    }\r\n\r\n    private OnShowingSetup() {\r\n        this.setState({ ShowingSetup: true });\r\n    }\r\n\r\n    private handleKeyPress(event: KeyboardEvent): void {\r\n        switch (event.key) {\r\n            case \"Enter\":\r\n                this.startComputation();\r\n                break;\r\n            case \" \":\r\n                this.stopComputation();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport { Game } from './Components/Game/Game';\r\nimport { DndProvider } from 'react-dnd'\r\nimport HTML5Backend from 'react-dnd-html5-backend'\r\n\r\nconst App: React.FC = () => {\r\n  \r\n  return (\r\n    <DndProvider backend={HTML5Backend}><Game/></DndProvider>\r\n    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}