{"version":3,"sources":["Models/ChannelColorsEnum.ts","Redux/PlaySettings/Reducer.ts","Redux/PlaySettings/Actions.ts","Levels/Levels/AppendLength.ts","Levels/Levels/GetLength.ts","Levels/Levels/GetType.ts","Levels/Levels/IsEmpty.ts","Levels/Levels/KeepNumbers.ts","Levels/Levels/PlusOne.ts","Levels/Levels/RemoveAllRepeats.ts","Levels/Levels/RotateBackwards.ts","Levels/Levels/Sandbox.ts","Levels/Levels/ReverseLimited.ts","Levels/Levels/Reverse.ts","Levels/Levels/CopyAll.ts","Levels/LevelStore.ts","Redux/Level/Reducer.ts","Models/DirectionEnum.ts","Helper/NewChannelSet.ts","Redux/CustomMachines/GridSetup/Reducer.ts","Redux/CustomMachines/GridSetup/MachineInstances/Reducer.ts","MachineStore/MachineId.ts","Computing/MessageCleaner.ts","MachineStore/DefaultMachines/AddStarMachine.ts","MachineStore/DefaultMachines/AddZeroMachine.ts","MachineStore/DefaultMachines/CompareMachine.ts","MachineStore/DefaultMachines/CopyMachine.ts","MachineStore/DefaultMachines/DeleteMachine.ts","MachineStore/DefaultMachines/GreenStartMachine.ts","MachineStore/DefaultMachines/IncrementMachine.ts","MachineStore/DefaultMachines/MoveMachine.ts","MachineStore/DefaultMachines/RedStartMachine.ts","MachineStore/DefaultMachines/RotateMachine.ts","MachineStore/DefaultMachines/JoinActor.ts","MachineStore/DefaultMachines/JoinMachine.ts","MachineStore/DefaultMachines/SplitMachine.ts","MachineStore/MachineStore.ts","Redux/Level/Actions.ts","Redux/CustomMachines/GridSetup/Actions.ts","Computing/Computer.ts","Helper/ColorHelper.ts","Redux/CustomMachines/Reducer.ts","Models/MachineApi.ts","Redux/Store.ts","Components/NumberInput/NumberInput.tsx","Components/Dashboard/Dashboard.tsx","Redux/PlaySettings/ActionCreators.ts","Models/CellModel.ts","Components/Constants.ts","Components/DragItemTypes.ts","Components/MessageFormatter.ts","Components/Grid/Cell/MachineInstance/Channel/Channel.tsx","Components/Grid/Cell/MachineInstance/Machine/Machine.tsx","Components/Grid/Cell/MachineInstance/InputChannel/InputChannel.tsx","Components/Grid/Cell/MachineInstance/MachineInstance.tsx","Redux/CustomMachines/GridSetup/MachineInstances/Actions.ts","Components/Grid/Cell/Cell.tsx","Components/Grid/Grid.tsx","Models/OutputStatusEnum.ts","Components/LevelDisplay/TestDisplay/MessageDisplay/MessageDisplay.tsx","Components/LevelDisplay/TestDisplay/TestDisplay.tsx","Components/LevelDisplay/LevelDisplay.tsx","Components/LevelList/LevelPreview/LevelPreview.tsx","Components/LevelList/LevelList.tsx","Components/MachineCollection/StoredMachine/MachineDisplay/MachineDisplay.tsx","Redux/CustomMachines/Actions.ts","Components/MachineCollection/StoredMachine/StoredMachine.tsx","Components/MachineCollection/MachineCollection.tsx","Components/MachineMenu/EditMachineStyle/EditMachineStyle.tsx","Components/MachineMenu/MachineMenu.tsx","Components/MenuItem/MenuItem.tsx","Components/Settings/GridSizeSetting/GridSizeSetting.tsx","Components/Settings/Settings.tsx","Components/Game/Game.tsx","App.tsx","index.tsx"],"names":["ChannelColorEnum","PlaySettingsReducer","produce","draft","action","type","ShowAnimations","show","StepTime","stepTime","Computing","computing","AppendLength","AllowedMachines","Description","Name","Tests","inputs","Order","Channel","Green","Content","expectedOutputs","GetLength","GetType","Red","Blue","IsEmpty","KeepNumbers","PlusOne","RemoveAllRepeats","RotateBackwards","Sandbox","ReverseLimited","Reverse","CopyAll","LevelStore","levels","this","init","push","undefined","levelStore","DirectionEnum","initialState","LoadLevel","LevelReducer","name","newTest","actualOutputs","editable","id","Math","max","map","t","filter","testId","tests","test","outputs","slice","outputMessage","maxOrder","i","newInput","concat","newInputs","order","index","newOutputs","o","a","inputsUpdated","input","outputsUpdated","output","outputsRemoved","newArray","placeIndex","splice","UpdateTest","levelName","level","GetStore","GetAllLevels","find","l","length","GetNewChannelSet","api","outputChannels","inputChannels","direction","Up","OutputChannels","color","Direction","Status","InputChannels","GridSetupReducer","Setup","NumberOfColumns","columns","NumberOfRows","rows","Messages","messages","Style","Color","BorderColor","backgroundColor","description","MachineInstances","mi","Id","machineInstanceId","Channels","channelIndex","channel","machineInput","ic","maxId","machineInstance","Cell","cell","MachineId","machineId","newCell","machineFixed","c","MachineInstancesReducer","MachineIdAreEqual","first","second","Type","RestoreMessage","message","starNumber","seekString","seekLength","seekPosition","indexOf","indexStar","substring","AddStarMachine","actor","Act","returnValue","content","Promise","resolve","Api","DependingOn","DirectlyDependingOn","AddZeroMachine","CompareMachine","position","CopyMachine","DeleteMachine","GreenStartMachine","IncrementMachine","newMessage","char","String","fromCharCode","charCodeAt","MoveMachine","RedStartMachine","RotateMachine","JoinActor","greenInput","redInput","Error","returnMessage","JoinMachine","SplitMachine","MachineStore","machines","machine","m","FindMachine","GetActor","customMachine","AppState","CustomMachines","cm","CreateCustomActor","setup","starIndex","usedStars","lastIndex","numberPart","parseInt","some","u","CleanMessage","saveMessage","cleanedMessage","Computer","RunInput","then","mm","machineStore","ClearTestOutput","SetMessages","activeSetup","store","HandleNextMessages","bind","CalculateNextMessages","RunComputation","SetDelay","startMachines","Yellow","exitCells","cells","starts","GetStartMachines","s","cellModel","Move","Column","Row","StopComputation","dispatch","getState","Level","orderedOutputs","catch","reason","reject","results","messageLocations","GetStartMachine","messageLocation","PlaySettings","OrderNewCalculation","callback","args","timeout","clearHandle","window","setTimeout","cancelComputation","clearTimeout","nextMessages","outputMessages","stepCount","doneMessages","messageCell","inputChannel","cachedMachine","nextContents","nextContent","channelMap","doneMessage","Down","Right","Left","GetLighterColor","opacity","startsWith","enteredColor","toLowerCase","GetColorCode","red","blue","green","error","GetRandomColor","floor","random","idSeed","activeMachineId","deletedMachines","CustomMachinesReducer","newMachine","ExitCells","DependingOnDeleted","directlyDependentMachines","dp","dependentMachine","updatedMachines","dependentMachines","EnrichState","dependingDirectly","depending","activeMachine","d","machineType","depMachine","DetermineDependencies","computer","CalculateExits","exitColors","ec","newApi","machineInstances","newOutputChannel","matchingOutput","outputChannel","every","CheckMachineStatus","UpdateMachineStatusses","SetApi","autoReducer","combineReducers","AppStore","createStore","state","localStorage","setItem","JSON","stringify","storedState","getItem","parse","getInitialState","__REDUX_DEVTOOLS_EXTENSION__","GetActiveMachine","newActiveMachine","NumberInput","props","style","marginLeft","marginRight","onClick","valueChanged","value","Dashboard","connect","UpdateStepTime","UpdateShowAnimations","display","flexDirection","title","AreEqual","otherCell","Constants","CellSize","DragItemTypes","FormatMessage","formattedMessage","onClicked","cellSize","channelStyle","height","width","marginTop","ChannelMap","borderStyle","borderWidth","border","pointerEvents","rotate","rotation","transform","event","OnChanged","newDirection","React","Component","Machine","machineSize","borderSize","machineStyle","IsDefault","MachineStyle","borderColor","borderRadius","justifyContent","alignItems","InputChannel","borderStyleSide","borderStyleNone","borderBottom","borderLeft","borderTop","borderRight","pasiveMargin","closeMargin","farMargin","MachineInstance","ownProps","MachineInstanceProp","dm","MachineInstanceId","ChangeChannel","ChangeInputChannel","OnRemoved","FixMachine","useDrag","item","end","dropResult","monitor","didDrop","collect","isDragging","drag","channels","key","margin","boxSizing","GetMachineType","ref","cellId","exit","Exit","Message","OnNewMachine","OnMovedMachine","useDrop","accept","drop","itemProps","float","ExitThickness","marginBottom","GridInternal","rowIndex","Rows","row","columnIndex","Columns","OutputStatus","Grid","MessageDisplay","onChannelChanged","OnMessageChanged","target","flexFlow","Input","statusStyle","Fullfilled","Editable","NotFullfilled","NotMatched","Remove","AllowedInputColors","onChange","cc","TestDisplay","RemoveTest","RemoveInput","RemoveOutput","UpdateInput","UpdateOutput","AddInput","AddOutput","useState","setError","Test","NotChecked","actuals","j","expected","valid","indexActual","findIndex","padding","toString","flexGrow","alignSelf","LevelDisplayInternal","AddTest","LevelDisplay","LevelPreview","LevelList","MachineDisplay","MachineType","channelComponents","inputChannelComponents","absoluteStyle","AddNewMachine","StoredMachine","status","LoadCustomMachine","showMenu","changeShow","isDefault","stopPropagation","MachineCollection","GetAllMachines","allowedMachines","disallowedMachines","am","allowedCustomMachines","dis","storedMachines","EditMachineStyleInternal","SetName","SetDescription","SetColor","SetBorderColor","EditMachineStyle","MachineMenu","MenuItem","showItem","Showing","setState","ItemName","children","GridSizeSetting","SetRowNumber","SetColumnNumber","SettingsInternal","HasActiveMachine","Settings","GameInternal","handleKeyPress","ShowingSetup","document","addEventListener","removeEventListener","ClearMessages","allowedInputColors","textAlign","flex","MultipleInputsAllowed","AllowedInputs","flexWrap","Game","App","backend","HTML5Backend","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.106d052b.chunk.js","sourcesContent":["export enum ChannelColorEnum {\r\n    Green = \"green\",\r\n    Red = \"red\",\r\n    Blue = \"blue\",\r\n    Yellow = \"yellow\",\r\n}","import { UpdateShowAnimations, UpdateStepTime, SetComputing } from \"./Actions\";\r\nimport { PlaySettingsModel } from \"./PlaySettingsModel\";\r\nimport produce, { Draft } from \"immer\";\r\nimport { Actions } from \"../Actions\";\r\n\r\nconst initialState: PlaySettingsModel = {\r\n    ShowAnimations: true,\r\n    StepTime: 5,\r\n    Computing: false\r\n};\r\nexport const PlaySettingsReducer: (state: PlaySettingsModel | undefined, action: Actions) => PlaySettingsModel = produce((draft: Draft<PlaySettingsModel>, action: Actions) => {\r\n    switch (action.type) {\r\n        case UpdateShowAnimations:\r\n            draft.ShowAnimations = action.show;\r\n            break;\r\n        case UpdateStepTime:\r\n            draft.StepTime = action.stepTime;\r\n            break;\r\n        case SetComputing:\r\n            draft.Computing = action.computing;\r\n            break;\r\n    }\r\n\r\n    return;\r\n}, initialState);\r\n","export const UpdateStepTime = \"UpdateStepTime\";\r\ninterface UpdateStepTime {\r\n    type: typeof UpdateStepTime;\r\n    stepTime: number;\r\n}\r\n\r\nexport const UpdateShowAnimations = \"UpdateShowAnimations\";\r\ninterface UpdateShowAnimations {\r\n    type: typeof UpdateShowAnimations;\r\n    show: boolean;\r\n}\r\n\r\nexport const SetComputing = \"SetComputing\";\r\ninterface SetComputing {\r\n    type: typeof SetComputing;\r\n    computing: boolean;\r\n}\r\n\r\nexport type PlaySettingActionTypes = UpdateStepTime | UpdateShowAnimations|SetComputing;","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const AppendLength: LevelModel = {\r\n    AllowedMachines: [0, 5, 6, 7, 8, 9, 10, 11, 12],\r\n    Description: \"The machine should append the length of the input string to the string\",\r\n    Name: \"AppendLength\",\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"four\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"four4\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"aabccd\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"aabccd6\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"1\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"11\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"0\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"This is hard\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"This is hard12\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"This might even be harder\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"This might even be harder25\" }]\r\n        }\r\n    ]\r\n};","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const GetLength: LevelModel = {\r\n    AllowedMachines: [0, 5, 6, 7, 8, 9, 10, 11, 12],\r\n    Description: \"The machine should return the length of the input string\",\r\n    Name: \"GetLength\",\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"four\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"4\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"aabccd\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"6\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"1\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"1\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"0\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"This is hard\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"12\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"This might even be harder\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"25\" }]\r\n        }\r\n    ]\r\n};","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const GetType: LevelModel = {\r\n    AllowedMachines: [0, 5, 6, 7, 8, 9, 10, 11, 12],\r\n    Description: \"The machine should exit green is the first character is a number, exit red if it is a letter and exit blue otherwise\",\r\n    Name: \"GetType\",\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"42\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"42\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"this starts with a letter\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Red, Content: \"this starts with a letter\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \",#@%!\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Blue, Content: \",#@%!\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Blue, Content: \"\" }]\r\n        }\r\n    ]\r\n};","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const IsEmpty: LevelModel = {\r\n    AllowedMachines: [0, 5, 6, 7, 8, 9, 10],\r\n    Description: \"The machine should exit green if the message is empty, otherwise exit red\",\r\n    Name: \"IsEmpty\",\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abc\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Red, Content: \"abc\" }]\r\n        }\r\n    ]\r\n};","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const KeepNumbers: LevelModel = {\r\n    AllowedMachines: [0, 5, 6, 7, 8, 9, 10, 11, 12],\r\n    Description: \"The machine should keep all numbers in the input string, and remove all other characters\",\r\n    Name: \"KeepNumbers\",\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"42\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"42\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"fortytwo\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"1 and 1 is\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"11\" }]\r\n        }\r\n    ]\r\n};","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const PlusOne: LevelModel = {\r\n    AllowedMachines: [0, 5, 6, 7, 8, 9, 10, 11, 12],\r\n    Description: \"The machine should increase the input number by 1. Input only contains digits\",\r\n    Name: \"PlusOne\",\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"4\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"5\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"0\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"1\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"42\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"43\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"9\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"10\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"39\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"40\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"23999999\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"24000000\" }]\r\n        }\r\n    ]\r\n};","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const RemoveAllRepeats: LevelModel = {\r\n    AllowedMachines: [0, 5, 6, 7, 8, 9, 10],\r\n    Description: \"The machine should remove all repeating characters from the input string\",\r\n    Name: \"RemoveAllRepeats\",\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"aabc\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abc\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"aaaabccc\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abc\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"a\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"a\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"hhhhhhhhhiiiii wwwworllllldddddddd\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"hi world\" }]\r\n        }\r\n    ]\r\n};","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const RotateBackwards: LevelModel = {\r\n    AllowedMachines: [0, 5, 6, 7, 8, 9, 10, 11, 12],\r\n    Description: \"The machine should put the last character in front of the string\",\r\n    Name: \"RotateBackwards\",\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abc\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"cab\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"otater\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"rotate\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"a\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"a\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"ello world!H\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"Hello world!\" }]\r\n        }\r\n    ]\r\n};","import { LevelModel } from \"../LevelModel\";\r\n\r\nexport const Sandbox: LevelModel = {\r\n    AllowedMachines: [0, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],\r\n    Description: \"Sandbox level, no specific goals\",\r\n    Name: \"Sandbox\",\r\n    Tests: []\r\n};","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const ReverseLimited: LevelModel = {\r\n    AllowedMachines: [0, 5, 6, 7, 8, 9, 10, 11, 12],\r\n    Description: \"The machine should reverse the characters from the string. Input are only lowercase letters. With limited number of machines at your disposal, this is VERY HARD\",\r\n    Name: \"ReverseLimited\",\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abc\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"cba\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"a\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"a\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"esrever\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"reverse\" }]\r\n        }\r\n    ]\r\n};","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const Reverse: LevelModel = {\r\n    AllowedMachines: [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],\r\n    Description: \"The machine should reverse the characters from the string.\",\r\n    Name: \"Reverse\",\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abc\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"cba\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"a\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"a\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"desrever saw sihT\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"This was reversed\" }]\r\n        }\r\n    ]\r\n};","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const CopyAll: LevelModel = {\r\n    AllowedMachines: [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],\r\n    Description: \"The machine should exit the input both to green and red\",\r\n    Name: \"CopyAll\",\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" },\r\n            { Order: 0, Channel: ChannelColorEnum.Red, Content: \"\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"a\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"a\" },\r\n            { Order: 0, Channel: ChannelColorEnum.Red, Content: \"a\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abc\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abc\" },\r\n            { Order: 0, Channel: ChannelColorEnum.Red, Content: \"abc\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"aabcc\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"aabcc\" },\r\n            { Order: 0, Channel: ChannelColorEnum.Red, Content: \"aabcc\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"Copied\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"Copied\" },\r\n            { Order: 0, Channel: ChannelColorEnum.Red, Content: \"Copied\" }]\r\n        }\r\n    ]\r\n};","import { LevelModel } from \"./LevelModel\";\r\nimport { AppendLength } from \"./Levels/AppendLength\";\r\nimport { GetLength } from \"./Levels/GetLength\";\r\nimport { GetType } from \"./Levels/GetType\";\r\nimport { IsEmpty } from \"./Levels/IsEmpty\";\r\nimport { KeepNumbers } from \"./Levels/KeepNumbers\";\r\nimport { PlusOne } from \"./Levels/PlusOne\";\r\nimport { RemoveAllRepeats } from \"./Levels/RemoveAllRepeats\";\r\nimport { RotateBackwards } from \"./Levels/RotateBackwards\";\r\nimport { Sandbox } from \"./Levels/Sandbox\";\r\nimport { ReverseLimited } from \"./Levels/ReverseLimited\";\r\nimport { Reverse } from \"./Levels/Reverse\";\r\nimport { CopyAll } from \"./Levels/CopyAll\";\r\n\r\nexport class LevelStore {\r\n    private static levelStore: LevelStore;\r\n    private levels: LevelModel[];\r\n\r\n    private constructor() {\r\n        this.levels = [];\r\n        this.init();\r\n    }\r\n\r\n    public static GetStore(): LevelStore {\r\n        if (LevelStore.levelStore === undefined) {\r\n            LevelStore.levelStore = new LevelStore();\r\n        }\r\n\r\n        return LevelStore.levelStore;\r\n    }\r\n\r\n    private init(): void {\r\n        this.levels.push(IsEmpty);\r\n        this.levels.push(RemoveAllRepeats);\r\n        this.levels.push(GetType);\r\n        this.levels.push(KeepNumbers);\r\n        this.levels.push(GetLength);\r\n        this.levels.push(AppendLength);\r\n        this.levels.push(RotateBackwards);\r\n        this.levels.push(PlusOne);\r\n        this.levels.push(ReverseLimited);\r\n        this.levels.push(Reverse);\r\n        this.levels.push(CopyAll);\r\n        this.levels.push(Sandbox);\r\n    }\r\n\r\n    public GetAllLevels(): LevelModel[] {\r\n        return this.levels;\r\n    }\r\n}","import { LevelStore } from \"../../Levels/LevelStore\";\r\nimport { LevelActionTypes } from \"./Actions\";\r\nimport { LevelStateModel } from \"./LevelStateModel\";\r\nimport { TestStateModel } from \"./TestStateModel\";\r\nimport { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { OrderedMessageModel } from \"../../Models/OrderedMessageModel\";\r\nimport produce, { Draft } from \"immer\";\r\nimport { Actions } from \"../Actions\";\r\n\r\nconst initialState = LoadLevel(\"IsEmpty\");\r\n\r\nexport const LevelReducer: (state: LevelStateModel | undefined, action: Actions) => LevelStateModel = produce((draft: Draft<LevelStateModel>, action: Actions) => {\r\n    switch (action.type) {\r\n        case \"LoadLevelActionType\":\r\n            return LoadLevel(action.name);\r\n        case \"AddTestActionType\":\r\n            const newTest: TestStateModel = {\r\n                actualOutputs: [],\r\n                expectedOutputs: [],\r\n                inputs: [{ Channel: ChannelColorEnum.Green, Content: \"\", Order: 0 }],\r\n                editable: true,\r\n                id: Math.max(...draft.Tests.map((t) => t.id), -1) + 1\r\n            };\r\n            draft.Tests.push(newTest);\r\n            return;\r\n        case \"RemoveTestActionType\":\r\n            draft.Tests = draft.Tests.filter((t) => t.id !== action.testId);\r\n            return;\r\n        case \"ReportOutputActionType\":\r\n        case \"ClearTestOutputActionType\":\r\n        case \"AddInputActionType\":\r\n        case \"RemoveInputActionType\":\r\n        case \"UpdateInputActionType\":\r\n        case \"UpdateOutputActionType\":\r\n        case \"RemoveOutputActionType\":\r\n        case \"AddOutputActionType\":\r\n            const tests = draft.Tests.map((t) => {\r\n                if (t.id === action.testId) {\r\n                    return UpdateTest(t, action);\r\n                } else {\r\n                    return t;\r\n                }\r\n            });\r\n            draft.Tests = tests;\r\n            return;\r\n        default:\r\n            return;\r\n    }\r\n}, initialState);\r\n\r\nfunction LoadLevel(levelName: string): LevelStateModel {\r\n    const levels = LevelStore.GetStore().GetAllLevels();\r\n    const level = levels.find((l) => l.Name === levelName)!;\r\n    const tests = level.Tests.length > 0 ? level.Tests.map((t, index) => ({ ...t, actualOutputs: [], id: index, editable: false })) :\r\n        [{ actualOutputs: [], inputs: [{ Channel: ChannelColorEnum.Green, Content: \"\", Order: 0 }], expectedOutputs: [], id: 0, editable: true }];\r\n    const returnValue: LevelStateModel = {\r\n        AllowedMachines: level.AllowedMachines,\r\n        Description: level.Description,\r\n        Name: level.Name,\r\n        Tests: tests\r\n    };\r\n    return returnValue;\r\n}\r\n\r\nfunction UpdateTest(test: TestStateModel, action: LevelActionTypes): TestStateModel {\r\n    switch (action.type) {\r\n        case \"ReportOutputActionType\":\r\n            const outputs = test.actualOutputs.slice();\r\n            outputs.push(action.outputMessage);\r\n            return { ...test, actualOutputs: outputs };\r\n        case \"ClearTestOutputActionType\":\r\n            return { ...test, actualOutputs: [] };\r\n        case \"AddInputActionType\":\r\n            const maxOrder = Math.max(...test.inputs.map((i) => i.Order), -1) + 1;\r\n            const newInput: OrderedMessageModel = {\r\n                Channel: ChannelColorEnum.Green, Content: \"\", Order: maxOrder\r\n            };\r\n            return { ...test, inputs: test.inputs.concat(newInput) };\r\n        case \"RemoveInputActionType\":\r\n            const filteredInputs = test.inputs.filter((i) => i.Order !== action.order);\r\n            const newInputs = filteredInputs.map((i, index) => ({ ...i, order: index }));\r\n\r\n            const filteredOutputs = test.expectedOutputs.filter((i) => i.Order !== action.order);\r\n            const newOutputs = filteredOutputs.map((o) => ({ ...o, Order: o.Order > action.order ? o.Order - 1 : o.Order }));\r\n            return { ...test, inputs: newInputs, expectedOutputs: newOutputs, actualOutputs: test.actualOutputs.filter((a) => a.Order < action.order) };\r\n        case \"UpdateInputActionType\":\r\n            const inputsUpdated = test.inputs.map((i) => i.Order === action.input.Order ? action.input : i);\r\n\r\n            return { ...test, inputs: inputsUpdated, actualOutputs: test.actualOutputs.filter((a) => a.Order < action.input.Order) };\r\n        case \"UpdateOutputActionType\":\r\n            const outputsUpdated = test.expectedOutputs.filter((i) => i.Order === action.output.Order).map((i, index) => index === action.index ? action.output : i);\r\n            return { ...test, expectedOutputs: outputsUpdated };\r\n        case \"RemoveOutputActionType\":\r\n            const outputsRemoved = test.expectedOutputs.filter((i) => i.Order === action.order).filter((i, index) => index !== action.index);\r\n            return { ...test, expectedOutputs: outputsRemoved };\r\n        case \"AddOutputActionType\":\r\n            const newArray = test.expectedOutputs.slice();\r\n            let placeIndex = 0;\r\n            for (const output of newArray) {\r\n                if (output.Order > action.order) {\r\n                    break;\r\n                }\r\n                placeIndex++;\r\n            }\r\n            newArray.splice(placeIndex, 0, { Order: action.order, Content: \"\", Channel: ChannelColorEnum.Green });\r\n\r\n            return { ...test, expectedOutputs: newArray };\r\n        default:\r\n            return test;\r\n    }\r\n}\r\n","export enum DirectionEnum {\r\n    Up,\r\n    Down,\r\n    Left,\r\n    Right,\r\n}","import { MachineApi } from \"../Models/MachineApi\";\r\nimport { ChannelModel } from \"../Models/ChannelMapModel\";\r\nimport { DirectionEnum } from \"../Models/DirectionEnum\";\r\n\r\nexport function GetNewChannelSet(api: MachineApi): {inputChannels: ChannelModel[], outputChannels: ChannelModel[]}{\r\n    const outputChannels: ChannelModel[] = [];\r\n    const inputChannels: ChannelModel[] = [];\r\n\r\n    let direction: DirectionEnum = DirectionEnum.Up;\r\n    for (const color of api.OutputChannels) {\r\n        outputChannels.push({ Channel: color, Direction: direction, Status: \"Valid\" });\r\n        direction++;\r\n    }\r\n\r\n    if (api.InputChannels.length > 1) {\r\n        direction = 0;\r\n        for (const color of api.InputChannels) {\r\n            inputChannels.push({ Channel: color, Direction: direction, Status: \"Valid\" });\r\n            direction++;\r\n        }\r\n\r\n        for (; direction < 4; direction++) {\r\n            inputChannels.push({ Channel: api.InputChannels[0], Direction: direction, Status: \"Valid\" });\r\n        }\r\n    }\r\n\r\n    return {inputChannels, outputChannels};\r\n}","\r\nimport { MachineInstancesReducer } from \"./MachineInstances/Reducer\";\r\nimport { CustomMachineModel } from \"./CustomMachineModel\";\r\nimport { Draft } from \"immer\";\r\nimport { Actions } from \"../../Actions\";\r\n\r\nexport function GridSetupReducer(draft: Draft<CustomMachineModel>, action: Actions): CustomMachineModel {\r\n    // let returnValue: CustomMachineModel;\r\n\r\n    if (draft === undefined) {\r\n        return draft;\r\n    }\r\n    switch (action.type) {\r\n        case \"SetColumnNumberActionType\":\r\n            draft.Setup.NumberOfColumns = action.columns;\r\n            return draft;\r\n        case \"SetRowNumberActionType\":\r\n            draft.Setup.NumberOfRows = action.rows;\r\n            return draft;\r\n        case \"SetMessagesActionType\":\r\n            draft.Messages = action.messages;\r\n            return draft;\r\n        case \"SetColorActionType\":\r\n            draft.Style.Color = action.color;\r\n            return draft;\r\n        case \"SetBorderColorActionType\":\r\n            draft.Style.BorderColor = action.backgroundColor;\r\n            return draft;\r\n        case \"SetNameActionType\":\r\n            draft.Style.Name = action.name;\r\n            return draft;\r\n        case \"SetDescriptionActionType\":\r\n            draft.Style.Description = action.description;\r\n            return draft;\r\n        default:\r\n            draft.Setup.MachineInstances = MachineInstancesReducer(draft.Setup.MachineInstances, action);\r\n            return draft;\r\n    }\r\n}","import { MachineInstanceModel } from \"../../../../Models/MachineInstanceModel\";\r\nimport { Draft } from \"immer\";\r\nimport { Actions } from \"../../../Actions\";\r\nimport { GetNewChannelSet } from \"../../../../Helper/NewChannelSet\";\r\n\r\nexport function MachineInstancesReducer(draft: Draft<MachineInstanceModel[]>, action: Actions): MachineInstanceModel[] {\r\n\r\n    switch (action.type) {\r\n        case \"ChannelChangedActionType\":\r\n            const machine = draft.find((mi) => mi.Id === action.machineInstanceId)!;\r\n            machine.Channels[action.channelIndex] = action.channel;\r\n            return draft;\r\n        case \"InputChannelChangedActionType\":\r\n            const machineInput = draft.find((mi) => mi.Id === action.machineInstanceId)!;\r\n            const channelModel = machineInput.InputChannels.find((ic) => ic.Direction === action.channel.Direction)!;\r\n            channelModel.Direction = machineInput.InputChannels[action.channelIndex].Direction;\r\n            machineInput.InputChannels[action.channelIndex] = action.channel;\r\n            return draft;\r\n        case \"MachineRemovedActionType\":\r\n            return draft.filter((mi) => mi.Id !== action.machineInstanceId);\r\n        case \"MachineAddedActionType\":\r\n\r\n            const { outputChannels, inputChannels } = GetNewChannelSet(action.api);\r\n\r\n            const maxId = (draft.length === 0) ? 0 : Math.max(...draft.map((mi) => mi.Id));\r\n            const machineInstance: MachineInstanceModel = {\r\n                Cell: action.cell,\r\n                MachineId: action.machineId,\r\n                Channels: outputChannels,\r\n                InputChannels: inputChannels,\r\n                Id: maxId + 1,\r\n                Status: \"Valid\"\r\n            };\r\n\r\n            draft.push(machineInstance);\r\n            return draft;\r\n        case \"MachineMovedActionType\":\r\n            const machineMoved = draft.find((mi) => mi.Id === action.machineInstanceId)!;\r\n            machineMoved.Cell = action.newCell;\r\n            return draft;\r\n        case \"FixMachineActionType\":\r\n            const machineFixed = draft.find((mi) => mi.Id === action.machineInstanceId)!;\r\n            if (machineFixed.Status === \"Deleted\") {\r\n                return draft.filter((mi) => mi.Id !== action.machineInstanceId);\r\n            } else if (machineFixed.Status === \"ChannelsInvalid\") {\r\n                machineFixed.Channels = machineFixed.Channels.filter((c) => c.Status !== \"ShouldNotExist\").map((c) => c.Status === \"ShouldExist\" ? { ...c, Status: \"Valid\" } : c);\r\n                machineFixed.Status = \"Valid\";\r\n            }\r\n            return draft;\r\n        default:\r\n            return draft;\r\n    }\r\n}","export interface MachineId {\r\n    readonly Id: number;\r\n    readonly Type: \"Custom\" | \"Default\";\r\n}\r\n\r\nexport function MachineIdAreEqual(first: MachineId, second: MachineId): boolean{\r\n    return (first.Id === second.Id && first.Type === second.Type);\r\n}","export const CleanMessage: (message: string) => [string, number] = (message: string) => {\r\n    let starIndex = message.indexOf(\"*\");\r\n    if (starIndex !== -1) {\r\n        const usedStars: number[] = [];\r\n        let seekPosition = 0;\r\n        while (true) {\r\n            seekPosition = message.indexOf(\"<\", seekPosition);\r\n            if (seekPosition === -1) {\r\n                break;\r\n            }\r\n\r\n            const lastIndex = message.indexOf(\">\", seekPosition);\r\n            const numberPart = message.substring(seekPosition + 1, lastIndex);\r\n            usedStars.push(parseInt(numberPart, 10));\r\n            seekPosition = lastIndex;\r\n        }\r\n\r\n        let starNumber = 0;\r\n\r\n        // eslint-disable-next-line\r\n        while (usedStars.some((u) => (u === starNumber))) {\r\n            starNumber++;\r\n        }\r\n\r\n        let returnMessage = message;\r\n        do {\r\n            returnMessage = returnMessage.substring(0, starIndex) + \"<\" + starNumber + \">\" + returnMessage.substring(starIndex + 1);\r\n            starIndex = returnMessage.indexOf(\"*\");\r\n        } while (starIndex !== -1);\r\n\r\n        return [returnMessage, starNumber];\r\n    }\r\n\r\n    return [message, -1];\r\n};\r\n\r\nexport const RestoreMessage = (message: string, starNumber: number) => {\r\n    if (starNumber !== -1) {\r\n        const seekString = \"<\" + starNumber + \">\";\r\n        const seekLength = seekString.length;\r\n        // message = message.replace(seekString, \"*\");\r\n        let seekPosition = 0;\r\n        let index = message.indexOf(seekString);\r\n        let indexStar = message.indexOf(\"*\");\r\n\r\n        while (index !== -1 || indexStar !== -1) {\r\n            if (index !== -1 && (indexStar === -1 || index < indexStar)) {\r\n                message = message.substring(0, index) + \"*\" + message.substring(index + seekLength);\r\n                seekPosition = index + 1;\r\n            } else {\r\n                message = message.substring(0, indexStar) + seekString + message.substring(indexStar + 1);\r\n                seekPosition = indexStar + seekLength;\r\n            }\r\n\r\n            index = message.indexOf(seekString, seekPosition);\r\n            indexStar = message.indexOf(\"*\", seekPosition);\r\n        }\r\n    }\r\n    return message;\r\n};","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { MachineId } from \"../MachineId\";\r\n\r\nexport class AddStarMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            const content = \"*\" + message.Content;\r\n\r\n            returnValue.push({ Content: content, Channel: ChannelColorEnum.Green });\r\n            return Promise.resolve(returnValue);\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Style: {\r\n                BorderColor: \"blue\",\r\n                Color: \"grey\",\r\n                Name: \"Add *\",\r\n                Description: \"Puts a star in front of the string. There is guaranteed not to be a star in the input\"\r\n            },\r\n            Api: {\r\n                InputChannels: [ChannelColorEnum.Green],\r\n                OutputChannels: [ChannelColorEnum.Green],\r\n            },\r\n            DependingOn: [],\r\n            DirectlyDependingOn: []\r\n        };\r\n    }\r\n    public Id: MachineId = {\r\n        Id: 10,\r\n        Type: \"Default\"\r\n    };\r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { MachineId } from \"../MachineId\";\r\n\r\nexport class AddZeroMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            const content = \"0\" + message.Content;\r\n\r\n            returnValue.push({ Content: content, Channel: ChannelColorEnum.Green });\r\n            return Promise.resolve(returnValue);\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Style: {\r\n                BorderColor: \"yellow\",\r\n                Color: \"darkorange\",\r\n                Name: \"Add 0\",\r\n                Description: \"Puts a zero in front of the string\"\r\n            },\r\n            Api: {\r\n                InputChannels: [ChannelColorEnum.Green],\r\n                OutputChannels: [ChannelColorEnum.Green],\r\n            },\r\n            DependingOn: [],\r\n            DirectlyDependingOn: []\r\n        };\r\n    }\r\n    public Id: MachineId = {\r\n        Id: 11,\r\n        Type: \"Default\"\r\n    };\r\n}\r\n","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { MachineId } from \"../MachineId\";\r\n\r\nexport class CompareMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            let channel: ChannelColorEnum = ChannelColorEnum.Green;\r\n            if (message.Content.length < 2) {\r\n                channel = ChannelColorEnum.Red;\r\n            } else {\r\n                if (message.Content[0] !== \"<\") {\r\n                    if (message.Content[0] !== message.Content[1]) {\r\n                        channel = ChannelColorEnum.Red;\r\n                    }\r\n                } else {\r\n                    const position = message.Content.indexOf(\">\");\r\n                    const starNumber = message.Content.substring(0, position + 1);\r\n                    if (message.Content.length < starNumber.length * 2) {\r\n                        channel = ChannelColorEnum.Red;\r\n                    } else {\r\n                        const secondPart = message.Content.substring(position + 1, position + starNumber.length + 1);\r\n                        if (secondPart !== starNumber) {\r\n                            channel = ChannelColorEnum.Red;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            returnValue.push({ Content: message.Content, Channel: channel });\r\n            return Promise.resolve(returnValue);\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Style: {BorderColor: \"red\",\r\n            Color: \"green\",\r\n            Name: \"Compare\",\r\n            Description: \"Compares the first two characters in the string. If they are the same, exits green. If they are different exits red\"},\r\n            Api: {\r\n                InputChannels: [ChannelColorEnum.Green],\r\n                OutputChannels: [ChannelColorEnum.Green, ChannelColorEnum.Red],\r\n            },\r\n            DependingOn: [],\r\n            DirectlyDependingOn: []\r\n        };\r\n    }\r\n    public Id: MachineId = {\r\n        Id: 9,\r\n        Type: \"Default\"\r\n    };\r\n}\r\n","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { MachineId } from \"../MachineId\";\r\n\r\nexport class CopyMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            let content: string;\r\n            if (message.Content.length < 1) {\r\n                content = \"\";\r\n            } else {\r\n                if (message.Content[0] !== \"<\") {\r\n                    content = message.Content[0] + message.Content;\r\n                } else {\r\n                    const index = message.Content.indexOf(\">\");\r\n                    content = message.Content.substring(0, index + 1) + message.Content;\r\n                }\r\n            }\r\n\r\n            returnValue.push({ Content: content, Channel: ChannelColorEnum.Green });\r\n            return Promise.resolve(returnValue);\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Style: {\r\n                BorderColor: \"green\",\r\n                Color: \"yellow\",\r\n                Name: \"Copy\",\r\n                Description: \"Copies the first character of the string and puts it in front of the string\"\r\n            },\r\n            Api: {\r\n                InputChannels: [ChannelColorEnum.Green],\r\n                OutputChannels: [ChannelColorEnum.Green],\r\n            },\r\n            DependingOn: [],\r\n            DirectlyDependingOn: []\r\n        };\r\n    }\r\n    public Id: MachineId = {\r\n        Id: 6,\r\n        Type: \"Default\"\r\n    };\r\n}\r\n","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { MachineId } from \"../MachineId\";\r\n\r\nexport class DeleteMachine implements IMachine {\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            let content: string;\r\n            if (message.Content.length < 1) {\r\n                content = \"\";\r\n            } else {\r\n                if (message.Content[0] !== \"<\") {\r\n                    content = message.Content.substring(1);\r\n                } else {\r\n                    const index = message.Content.indexOf(\">\");\r\n                    content = message.Content.substring(index + 1);\r\n                }\r\n            }\r\n\r\n            returnValue.push({ Content: content, Channel: ChannelColorEnum.Green });\r\n            return Promise.resolve(returnValue);\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Style: {\r\n                BorderColor: \"red\",\r\n                Color: \"red\",\r\n                Name: \"Delete\",\r\n                Description: \"Deletes the first character of the string\"\r\n            },\r\n            Api: {\r\n                InputChannels: [ChannelColorEnum.Green],\r\n                OutputChannels: [ChannelColorEnum.Green],\r\n            },\r\n            DependingOn: [],\r\n            DirectlyDependingOn: []\r\n        };\r\n    }\r\n    public Id: MachineId = {\r\n        Id: 7,\r\n        Type: \"Default\"\r\n    };\r\n}\r\n","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { MachineId } from \"../MachineId\";\r\n\r\nexport class GreenStartMachine implements IMachine {\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            returnValue.push({ Content: message.Content, Channel: ChannelColorEnum.Green });\r\n            return Promise.resolve(returnValue);\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Style: {\r\n                Color: \"white\",\r\n                BorderColor: \"green\",\r\n                Name: \"Start\",\r\n                Description: \"Starting point of the computation. Acts as a move machine for all other purposes\"\r\n            },\r\n            Api: {\r\n                InputChannels: [ChannelColorEnum.Green],\r\n                OutputChannels: [ChannelColorEnum.Green],\r\n            },\r\n            DependingOn: [],\r\n            DirectlyDependingOn: []\r\n        };\r\n    }\r\n    public readonly Id: MachineId = { Id: 0, Type: \"Default\" };\r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { MachineId } from \"../MachineId\";\r\n\r\nexport class IncrementMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            let newMessage = \"\";\r\n            if (message.Content.length > 0) {\r\n                const char = message.Content[0];\r\n\r\n                if ((char >= \"0\" && char <= \"8\") || (char >= \"a\" && char < \"z\") || (char >= \"A\" && char < \"Z\")) {\r\n                    newMessage = String.fromCharCode(char.charCodeAt(0) + 1) + message.Content.slice(1);\r\n                } else if (char === \"9\") {\r\n                    newMessage = \"0\" + message.Content.slice(1);\r\n                } else if (char === \"z\") {\r\n                    newMessage = \"a\" + message.Content.slice(1);\r\n                } else if (char === \"Z\") {\r\n                    newMessage = \"A\" + message.Content.slice(1);\r\n                } else {\r\n                    newMessage = message.Content;\r\n                }\r\n            }\r\n\r\n            returnValue.push({ Content: newMessage, Channel: ChannelColorEnum.Green });\r\n            return Promise.resolve(returnValue);\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Style: {\r\n                BorderColor: \"DodgerBlue\",\r\n                Color: \"MediumVioletRed\",\r\n                Name: \"Increment\",\r\n                Description: \"Increases a number in front of the string by 1, makes as letter the next letter in the alphabet. 9 becomes 0, z becomes a. All other starting characters are not changed\"\r\n            },\r\n            Api: {\r\n                InputChannels: [ChannelColorEnum.Green],\r\n                OutputChannels: [ChannelColorEnum.Green],\r\n            },\r\n            DependingOn: [],\r\n            DirectlyDependingOn: []\r\n        };\r\n    }\r\n    public Id: MachineId = {\r\n        Id: 12,\r\n        Type: \"Default\"\r\n    };\r\n}\r\n","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { MachineId } from \"../MachineId\";\r\n\r\nexport class MoveMachine implements IMachine {\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            returnValue.push({ Content: message.Content, Channel: ChannelColorEnum.Green });\r\n            return Promise.resolve(returnValue);\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Style: {\r\n                Color: \"green\",\r\n                BorderColor: \"lightgreen\",\r\n                Name: \"Move\",\r\n                Description: \"Does nothing with the string, only used to get the message to the right place\"\r\n            },\r\n            Api: {\r\n                InputChannels: [ChannelColorEnum.Green],\r\n                OutputChannels: [ChannelColorEnum.Green],\r\n            },\r\n            DependingOn: [],\r\n            DirectlyDependingOn: []\r\n        };\r\n    }\r\n    public readonly Id: MachineId = { Id: 5, Type: \"Default\" };\r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { MachineId } from \"../MachineId\";\r\n\r\nexport class RedStartMachine implements IMachine {\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            returnValue.push({ Content: message.Content, Channel: ChannelColorEnum.Green });\r\n            return Promise.resolve(returnValue);\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Style: {\r\n                Color: \"white\",\r\n                BorderColor: \"red\",\r\n                Name: \"Start\",\r\n                Description: \"Starting point of the computation. Acts as a move machine for all other purposes\"\r\n            },\r\n            Api: {\r\n                InputChannels: [ChannelColorEnum.Green],\r\n                OutputChannels: [ChannelColorEnum.Green],\r\n            },\r\n            DependingOn: [],\r\n            DirectlyDependingOn: []\r\n        };\r\n    }\r\n    public readonly Id: MachineId = { Id: 1, Type: \"Default\" };\r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { MachineId } from \"../MachineId\";\r\n\r\nexport class RotateMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            let content: string;\r\n            if (message.Content.length < 2) {\r\n                content = message.Content;\r\n            } else {\r\n                if (message.Content[0] !== \"<\") {\r\n                    content = message.Content.substring(1) + message.Content.substring(0, 1);\r\n                } else {\r\n                    const index = message.Content.indexOf(\">\");\r\n                    content = message.Content.substring(index + 1) + message.Content.substring(0, index + 1);\r\n                }\r\n            }\r\n\r\n            returnValue.push({ Content: content, Channel: ChannelColorEnum.Green });\r\n            return Promise.resolve(returnValue);\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Style: {\r\n                BorderColor: \"blue\",\r\n                Color: \"cyan\",\r\n                Name: \"Rotate\",\r\n                Description: \"Removes the first character of the string, and adds it to the end of the string\"\r\n            },\r\n            Api: {\r\n                InputChannels: [ChannelColorEnum.Green],\r\n                OutputChannels: [ChannelColorEnum.Green],\r\n            },\r\n            DependingOn: [],\r\n            DirectlyDependingOn: []\r\n        };\r\n    }\r\n    public Id: MachineId = {\r\n        Id: 8,\r\n        Type: \"Default\"\r\n    };\r\n}\r\n","import { IActor } from \"../IActor\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\n\r\nexport class JoinActor implements IActor {\r\n    private greenInput: string | undefined;\r\n    private redInput: string | undefined;\r\n    public Act(message: MessageModel): Promise<MessageModel[]> {\r\n        switch (message.Channel) {\r\n            case ChannelColorEnum.Green:\r\n                this.greenInput = message.Content;\r\n                break;\r\n            case ChannelColorEnum.Red:\r\n                this.redInput = message.Content;\r\n                break;\r\n            default:\r\n                throw Error(\"Machine does not have inputchannel \" + message.Channel);\r\n        }\r\n\r\n        if (this.greenInput === undefined || this.redInput === undefined) {\r\n            return Promise.resolve([]);\r\n        }\r\n        const returnMessage = this.greenInput.concat(this.redInput);\r\n        this.greenInput = undefined;\r\n        this.redInput = undefined;\r\n        const returnValue: MessageModel[] = [{ Channel: ChannelColorEnum.Green, Content: returnMessage }];\r\n\r\n        return Promise.resolve(returnValue);\r\n    }\r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { MachineId } from \"../MachineId\";\r\nimport { JoinActor } from \"./JoinActor\";\r\n\r\nexport class JoinMachine implements IMachine {\r\n    public GetActor(): IActor {\r\n        return new JoinActor();\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Style: {\r\n                BorderColor: \"Orange\",\r\n                Color: \"Grey\",\r\n                Name: \"Join\",\r\n                Description: \"Exits with the input from the green channel before the red channel\",\r\n            },\r\n            Api: {\r\n                InputChannels: [ChannelColorEnum.Green, ChannelColorEnum.Red],\r\n                OutputChannels: [ChannelColorEnum.Green]\r\n            },\r\n            DependingOn: [],\r\n            DirectlyDependingOn: []\r\n        };\r\n    }\r\n    public Id: MachineId = {\r\n        Id: 14,\r\n        Type: \"Default\"\r\n    };\r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { MachineId } from \"../MachineId\";\r\n\r\nexport class SplitMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n\r\n            returnValue.push({ Content: message.Content.slice(0, 1), Channel: ChannelColorEnum.Green });\r\n            returnValue.push({ Content: message.Content.slice(1), Channel: ChannelColorEnum.Red });\r\n\r\n            return Promise.resolve(returnValue);\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Style: {\r\n                BorderColor: \"Orange\",\r\n                Color: \"Black\",\r\n                Name: \"Split\",\r\n\r\n                Description: \"The first character exits green, the other characters exit red\",\r\n            },\r\n            Api: {\r\n                InputChannels: [ChannelColorEnum.Green],\r\n                OutputChannels: [ChannelColorEnum.Green, ChannelColorEnum.Red],\r\n\r\n            },\r\n            DependingOn: [],\r\n            DirectlyDependingOn: []\r\n        };\r\n    }\r\n    public Id: MachineId = {\r\n        Id: 13,\r\n        Type: \"Default\"\r\n    };\r\n}\r\n","import { Computer } from \"../Computing/Computer\";\r\nimport { CleanMessage, RestoreMessage } from \"../Computing/MessageCleaner\";\r\nimport { MessageModel } from \"../Models/MessageModel\";\r\nimport { GridSetupModel } from \"../Redux/CustomMachines/GridSetup/GridModel\";\r\nimport { AddStarMachine } from \"./DefaultMachines/AddStarMachine\";\r\nimport { AddZeroMachine } from \"./DefaultMachines/AddZeroMachine\";\r\nimport { CompareMachine } from \"./DefaultMachines/CompareMachine\";\r\nimport { CopyMachine } from \"./DefaultMachines/CopyMachine\";\r\nimport { DeleteMachine } from \"./DefaultMachines/DeleteMachine\";\r\nimport { GreenStartMachine } from \"./DefaultMachines/GreenStartMachine\";\r\nimport { IncrementMachine } from \"./DefaultMachines/IncrementMachine\";\r\nimport { MoveMachine } from \"./DefaultMachines/MoveMachine\";\r\nimport { RedStartMachine } from \"./DefaultMachines/RedStartMachine\";\r\nimport { RotateMachine } from \"./DefaultMachines/RotateMachine\";\r\nimport { IActor } from \"./IActor\";\r\nimport { IMachine } from \"./IMachine\";\r\nimport { IMachineType } from \"./IMachineType\";\r\nimport { MachineId } from \"./MachineId\";\r\nimport { AppState } from \"../Redux/Store\";\r\nimport { JoinMachine } from \"./DefaultMachines/JoinMachine\";\r\nimport { SplitMachine } from \"./DefaultMachines/SplitMachine\";\r\n\r\nexport class MachineStore {\r\n    private static machineStore: MachineStore;\r\n    private machines: IMachine[];\r\n\r\n    private constructor() {\r\n        this.machines = [];\r\n        this.init();\r\n    }\r\n\r\n    public static GetStore(): MachineStore {\r\n        if (MachineStore.machineStore === undefined) {\r\n            MachineStore.machineStore = new MachineStore();\r\n        }\r\n\r\n        return MachineStore.machineStore;\r\n    }\r\n\r\n    private init(): void {\r\n        this.machines = [];\r\n        this.machines.push(new GreenStartMachine());\r\n        this.machines.push(new RedStartMachine());\r\n        this.machines.push(new MoveMachine());\r\n        this.machines.push(new CopyMachine());\r\n        this.machines.push(new DeleteMachine());\r\n        this.machines.push(new RotateMachine());\r\n        this.machines.push(new CompareMachine());\r\n        this.machines.push(new AddStarMachine());\r\n        this.machines.push(new AddZeroMachine());\r\n        this.machines.push(new IncrementMachine());\r\n        this.machines.push(new SplitMachine());\r\n        this.machines.push(new JoinMachine());\r\n    }\r\n\r\n    private FindMachine(id: MachineId): IMachine {\r\n        const machine = this.machines.find((m) => m.Id.Id === id.Id && m.Id.Type === id.Type);\r\n        if (machine === undefined) {\r\n            throw new Error(\"No default machine found with id \" + id.Id);\r\n        }\r\n\r\n        return machine;\r\n    }\r\n\r\n    public GetActor(id: MachineId): IActor {\r\n        if (id.Type === \"Default\") {\r\n            return this.FindMachine(id).GetActor();\r\n        } else {\r\n            const customMachine = AppState().CustomMachines.machines.find((cm) => cm.Id === id.Id);\r\n            if (customMachine === undefined) {\r\n                throw new Error(\"No custom machine found with id \" + id.Id);\r\n            }\r\n            return this.CreateCustomActor(customMachine.Setup);\r\n        }\r\n    }\r\n\r\n    public GetMachineType(id: MachineId): IMachineType {\r\n        if (id.Type === \"Default\") {\r\n            return this.FindMachine(id).GetType();\r\n        } else {\r\n            const customMachine = AppState().CustomMachines.machines.find((cm) => cm.Id === id.Id);\r\n            if (customMachine === undefined) {\r\n                throw new Error(\"No custom machine found with id \" + id.Id);\r\n            }\r\n            return customMachine;\r\n        }\r\n    }\r\n\r\n    public GetAllMachines(): MachineId[] {\r\n        const machines: MachineId[] = this.machines.map((m) => m.Id);\r\n        return machines;\r\n    }\r\n\r\n    private CreateCustomActor(setup: GridSetupModel): IActor {\r\n\r\n        return {\r\n            Act: (message) => {\r\n                const [saveMessage, starNumber] = CleanMessage(message.Content);\r\n                const cleanedMessage: MessageModel = { Content: saveMessage, Channel: message.Channel };\r\n                const computer = new Computer(setup, false);\r\n                const computedMessages = computer.RunInput(cleanedMessage);\r\n                const returnValue: Promise<MessageModel[]> = computedMessages.then((messages) => messages.map((mm) => ({ Channel: mm.Channel, Content: RestoreMessage(mm.Content, starNumber) })));\r\n                return returnValue;\r\n            }\r\n        };\r\n    }\r\n}","import { OrderedMessageModel } from \"../../Models/OrderedMessageModel\";\r\n\r\nexport const LoadLevelActionType = \"LoadLevelActionType\";\r\ninterface LoadLevelActionType {\r\n    type: typeof LoadLevelActionType;\r\n    name: string;\r\n}\r\n\r\nexport function LoadLevel(name: string): LevelActionTypes {\r\n    return {\r\n        type: \"LoadLevelActionType\",\r\n        name\r\n    };\r\n}\r\n\r\nexport const ReportOutputActionType = \"ReportOutputActionType\";\r\ninterface ReportOutputActionType {\r\n    type: typeof ReportOutputActionType;\r\n    outputMessage: OrderedMessageModel;\r\n    testId: number;\r\n}\r\n\r\nexport function ReportOutput(outputMessage: OrderedMessageModel, testId: number): LevelActionTypes {\r\n    return {\r\n        type: \"ReportOutputActionType\",\r\n        outputMessage,\r\n        testId\r\n    };\r\n}\r\nexport const ClearTestOutputActionType = \"ClearTestOutputActionType\";\r\ninterface ClearTestOutputActionType {\r\n    type: typeof ClearTestOutputActionType;\r\n    testId: number;\r\n}\r\n\r\nexport function ClearTestOutput(testId: number): LevelActionTypes {\r\n    return {\r\n        type: \"ClearTestOutputActionType\",\r\n        testId\r\n    };\r\n}\r\nexport const AddTestActionType = \"AddTestActionType\";\r\ninterface AddTestActionType {\r\n    type: typeof AddTestActionType;\r\n}\r\n\r\nexport function AddTest(): LevelActionTypes {\r\n    return {\r\n        type: \"AddTestActionType\",\r\n    };\r\n}\r\n\r\nexport const RemoveTestActionType = \"RemoveTestActionType\";\r\ninterface RemoveTestActionType {\r\n    type: typeof RemoveTestActionType;\r\n    testId: number;\r\n}\r\n\r\nexport function RemoveTest(testId: number): LevelActionTypes {\r\n    return {\r\n        type: \"RemoveTestActionType\",\r\n        testId\r\n    };\r\n}\r\n\r\nexport const UpdateInputActionType = \"UpdateInputActionType\";\r\ninterface UpdateInputActionType {\r\n    type: typeof UpdateInputActionType;\r\n    testId: number;\r\n    input: OrderedMessageModel;\r\n}\r\n\r\nexport function UpdateInput(input: OrderedMessageModel, testId: number): LevelActionTypes {\r\n    return {\r\n        type: \"UpdateInputActionType\",\r\n        input,\r\n        testId\r\n    };\r\n}\r\n\r\nexport const AddInputActionType = \"AddInputActionType\";\r\ninterface AddInputActionType {\r\n    type: typeof AddInputActionType;\r\n    testId: number;\r\n}\r\n\r\nexport function AddInput(testId: number): LevelActionTypes {\r\n    return {\r\n        type: \"AddInputActionType\",\r\n        testId\r\n    };\r\n}\r\n\r\nexport const RemoveInputActionType = \"RemoveInputActionType\";\r\ninterface RemoveInputActionType {\r\n    type: typeof RemoveInputActionType;\r\n    testId: number;\r\n    order: number;\r\n}\r\n\r\nexport function RemoveInput(testId: number, order: number): LevelActionTypes {\r\n    return {\r\n        type: \"RemoveInputActionType\",\r\n        testId,\r\n        order\r\n    };\r\n}\r\n\r\nexport const UpdateOutputActionType = \"UpdateOutputActionType\";\r\ninterface UpdateOutputActionType {\r\n    type: typeof UpdateOutputActionType;\r\n    testId: number;\r\n    output: OrderedMessageModel;\r\n    index: number;\r\n}\r\n\r\nexport function UpdateOutput(output: OrderedMessageModel, testId: number, index: number): LevelActionTypes {\r\n    return {\r\n        type: \"UpdateOutputActionType\",\r\n        output,\r\n        testId,\r\n        index\r\n    };\r\n}\r\n\r\nexport const RemoveOutputActionType = \"RemoveOutputActionType\";\r\ninterface RemoveOutputActionType {\r\n    type: typeof RemoveOutputActionType;\r\n    testId: number;\r\n    order: number;\r\n    index: number;\r\n\r\n}\r\n\r\nexport function RemoveOutput(testId: number, order: number, index: number): LevelActionTypes {\r\n    return {\r\n        type: \"RemoveOutputActionType\",\r\n        testId,\r\n        order,\r\n        index\r\n    };\r\n}\r\nexport const AddOutputActionType = \"AddOutputActionType\";\r\ninterface AddOutputActionType {\r\n    type: typeof AddOutputActionType;\r\n    testId: number;\r\n    order: number;\r\n}\r\n\r\nexport function AddOutput(testId: number, order: number): LevelActionTypes {\r\n    return {\r\n        type: \"AddOutputActionType\",\r\n        testId,\r\n        order\r\n    };\r\n}\r\nexport type LevelActionTypes = LoadLevelActionType\r\n    | ReportOutputActionType\r\n    | ClearTestOutputActionType\r\n    | AddTestActionType\r\n    | RemoveTestActionType\r\n    | UpdateInputActionType\r\n    | AddInputActionType\r\n    | RemoveInputActionType\r\n    | UpdateOutputActionType\r\n    | RemoveOutputActionType\r\n    | AddOutputActionType;","import { MessageLocationModel } from \"../../../Models/MessageLocationModel\";\r\nimport { MachineInstanceActionTypes } from \"./MachineInstances/Actions\";\r\n\r\ninterface SetRowNumberActionType {\r\n    type: \"SetRowNumberActionType\";\r\n    rows: number;\r\n}\r\n\r\nexport function SetRowNumber(rows: number): GridSetupActionTypes {\r\n    return {\r\n        type: \"SetRowNumberActionType\",\r\n        rows\r\n    };\r\n}\r\n\r\ninterface SetColumnNumberActionType {\r\n    type: \"SetColumnNumberActionType\";\r\n    columns: number;\r\n}\r\n\r\nexport function SetColumnNumber(columns: number): GridSetupActionTypes {\r\n    return {\r\n        type: \"SetColumnNumberActionType\",\r\n        columns\r\n    };\r\n}\r\n\r\ninterface SetMessagesActionType {\r\n    type: \"SetMessagesActionType\";\r\n    messages: MessageLocationModel[];\r\n}\r\n\r\nexport function SetMessages(messages: MessageLocationModel[]): GridSetupActionTypes {\r\n    return {\r\n        type: \"SetMessagesActionType\",\r\n        messages\r\n    };\r\n}\r\n\r\nexport function ClearMessages(): GridSetupActionTypes {\r\n    return {\r\n        type: \"SetMessagesActionType\",\r\n        messages: []\r\n    };\r\n}\r\n\r\ninterface SetColorActionType {\r\n    type: \"SetColorActionType\";\r\n    color: string;\r\n}\r\n\r\nexport function SetColor(color: string): GridSetupActionTypes {\r\n    return {\r\n        type: \"SetColorActionType\",\r\n        color\r\n    };\r\n}\r\n\r\ninterface SetBorderColorActionType {\r\n    type: \"SetBorderColorActionType\";\r\n    backgroundColor: string;\r\n}\r\n\r\nexport function SetBorderColor(backgroundColor: string): GridSetupActionTypes {\r\n    return {\r\n        type: \"SetBorderColorActionType\",\r\n        backgroundColor\r\n    };\r\n}\r\ninterface SetDescriptionActionType {\r\n    type: \"SetDescriptionActionType\";\r\n    description: string;\r\n}\r\n\r\nexport function SetDescription(description: string): GridSetupActionTypes {\r\n    return {\r\n        type: \"SetDescriptionActionType\",\r\n        description\r\n    };\r\n}\r\n\r\ninterface SetNameActionType {\r\n    type: \"SetNameActionType\";\r\n    name: string;\r\n}\r\n\r\nexport function SetName(name: string): GridSetupActionTypes {\r\n    return {\r\n        type: \"SetNameActionType\",\r\n        name\r\n    };\r\n}\r\n\r\nexport type GridSetupActionTypes =\r\n    SetRowNumberActionType\r\n    | SetColumnNumberActionType\r\n    | SetMessagesActionType\r\n    | SetColorActionType\r\n    | SetBorderColorActionType\r\n    | SetNameActionType\r\n    | SetDescriptionActionType\r\n    | MachineInstanceActionTypes;","import { IActor } from \"../MachineStore/IActor\";\r\nimport { MachineStore } from \"../MachineStore/MachineStore\";\r\nimport { CellModel } from \"../Models/CellModel\";\r\nimport { ChannelColorEnum } from \"../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../Models/DirectionEnum\";\r\nimport { ExitCellModel } from \"../Models/ExitCellModel\";\r\nimport { MachineInstanceModel } from \"../Models/MachineInstanceModel\";\r\nimport { MessageLocationModel } from \"../Models/MessageLocationModel\";\r\nimport { MessageModel } from \"../Models/MessageModel\";\r\nimport { GridSetupModel } from \"../Redux/CustomMachines/GridSetup/GridModel\";\r\nimport { OrderedMessageModel } from \"../Models/OrderedMessageModel\";\r\nimport { ClearTestOutput, ReportOutput } from \"../Redux/Level/Actions\";\r\nimport { SetMessages } from \"../Redux/CustomMachines/GridSetup/Actions\";\r\nimport { IStore } from \"../Redux/IStore\";\r\n\r\nexport class Computer {\r\n    private setup: GridSetupModel;\r\n    private machines: Array<{ id: number, actor: IActor }> = [];\r\n    private store: MachineStore;\r\n    private outputs: MessageModel[] = [];\r\n    private static cancelComputation: (() => void) | undefined = undefined;\r\n    private static stepCount: number;\r\n    private activeSetup: boolean;\r\n\r\n    constructor(setup: GridSetupModel, activeSetup: boolean) {\r\n        this.setup = setup;\r\n        this.activeSetup = activeSetup;\r\n        this.store = MachineStore.GetStore();\r\n        this.HandleNextMessages = this.HandleNextMessages.bind(this);\r\n        this.CalculateNextMessages = this.CalculateNextMessages.bind(this);\r\n        this.RunInput = this.RunInput.bind(this);\r\n        this.RunComputation = this.RunComputation.bind(this);\r\n        this.SetDelay = this.SetDelay.bind(this);\r\n    }\r\n\r\n    public NewSetup(setup: GridSetupModel) {\r\n        this.setup = setup;\r\n    }\r\n\r\n    public GetStartMachines(): MachineInstanceModel[] {\r\n        const startMachines: MachineInstanceModel[] = [];\r\n        for (const machineInstance of this.setup.MachineInstances) {\r\n            if (machineInstance.MachineId.Id < 4 && machineInstance.MachineId.Type === \"Default\") {\r\n                startMachines.push(machineInstance);\r\n            }\r\n        }\r\n\r\n        return startMachines;\r\n    }\r\n\r\n    public GetStartMachine(color: ChannelColorEnum): MachineInstanceModel | undefined {\r\n\r\n        let id: number = 0;\r\n        switch (color) {\r\n            case ChannelColorEnum.Green:\r\n                id = 0;\r\n                break;\r\n            case ChannelColorEnum.Red:\r\n                id = 1;\r\n                break;\r\n            case ChannelColorEnum.Blue:\r\n                id = 2;\r\n                break;\r\n            case ChannelColorEnum.Yellow:\r\n                id = 3;\r\n                break;\r\n        }\r\n\r\n        return this.setup.MachineInstances.find((mi) => mi.MachineId.Id === id && mi.MachineId.Type === \"Default\");\r\n    }\r\n\r\n    public CalculateExits(): ExitCellModel[] {\r\n        const exitCells: ExitCellModel[] = [];\r\n        let cells: ExitCellModel[] = [];\r\n        const starts = this.GetStartMachines();\r\n        cells = cells.concat(starts.map((s) => ({ Cell: s.Cell, Direction: s.Channels[0].Direction })));\r\n        for (let i = 0; i < cells.length; i++) {\r\n            let cell: CellModel = cells[i].Cell;\r\n            let machine: MachineInstanceModel | undefined;\r\n            let cellModel: CellModel | undefined;\r\n            while (machine === undefined) {\r\n                cellModel = this.Move(cell, cells[i].Direction);\r\n                if (cellModel === undefined) {\r\n                    break;\r\n                }\r\n\r\n                cell = cellModel;\r\n                // eslint-disable-next-line\r\n                machine = this.setup.MachineInstances.find((mi) => mi.Cell.Column === cell!.Column && mi.Cell.Row === cell!.Row);\r\n            }\r\n\r\n            if (cellModel === undefined) {\r\n                exitCells.push({ Direction: cells[i].Direction, Cell: cell });\r\n                continue;\r\n            }\r\n\r\n            if (!cells.some((c) => c.Cell.Column === cell.Column && c.Cell.Row === cell.Row)) {\r\n                cells = cells.concat(machine!.Channels.filter((c) => c.Status !== \"ShouldExist\").map((c) => ({ Cell: cell, Direction: c.Direction })));\r\n\r\n            }\r\n        }\r\n        return exitCells;\r\n    }\r\n\r\n    public async RunComputation(testId: number, store: IStore): Promise<OrderedMessageModel[]> {\r\n        Computer.StopComputation();\r\n        this.machines = [];\r\n        store.dispatch(ClearTestOutput(testId));\r\n        const test = store.getState().Level.Tests.find((t) => t.id === testId);\r\n        if (test === undefined) {\r\n            return Promise.resolve([]);\r\n        } else {\r\n            let orderedOutputs: OrderedMessageModel[] = [];\r\n\r\n            for (const input of test.inputs) {\r\n                const results = await this.RunInput(input, store, testId, input.Order).catch((reason) => Promise.reject(reason));\r\n                orderedOutputs = orderedOutputs.concat(results.map((mm) => ({ Content: mm.Content, Channel: mm.Channel, Order: input.Order })));\r\n            }\r\n\r\n            return Promise.resolve(orderedOutputs);\r\n        }\r\n    }\r\n    public static StopComputation(): void {\r\n        if (Computer.cancelComputation) {\r\n            Computer.cancelComputation();\r\n            Computer.cancelComputation = undefined;\r\n        }\r\n\r\n        Computer.stepCount = 0;\r\n    }\r\n\r\n    public RunInput(input: MessageModel, store?: IStore, testId?: number, order?: number): Promise<MessageModel[]> {\r\n        const messageLocations: MessageLocationModel[] = [];\r\n        const machineInstance = this.GetStartMachine(input.Channel);\r\n        if (machineInstance !== undefined) {\r\n            const direction = machineInstance.Channels[0].Direction;\r\n            const messageLocation: MessageLocationModel = { Content: input.Content, Direction: direction, Cell: machineInstance.Cell };\r\n            messageLocations.push(messageLocation);\r\n        }\r\n\r\n        if (store !== undefined && this.activeSetup && store.getState().PlaySettings.ShowAnimations) {\r\n            store.dispatch(SetMessages(messageLocations));\r\n        }\r\n\r\n        return this.OrderNewCalculation({ messageLocations, store, testId, order });\r\n    }\r\n\r\n    private SetDelay<U, T>(callback: (args: U) => Promise<T>, args: U, timeout: number): Promise<T> {\r\n        return new Promise<T>((resolve, reject) => {\r\n            const clearHandle = window.setTimeout(() => callback(args).then(resolve).catch(reject), timeout);\r\n            Computer.cancelComputation = () => {\r\n                window.clearTimeout(clearHandle);\r\n                reject(\"Computation cancelled\");\r\n            };\r\n        });\r\n    }\r\n\r\n    private async HandleNextMessages(args: { messageLocations: MessageLocationModel[], store?: IStore, testId?: number, order?: number }): Promise<MessageModel[]> {\r\n\r\n        const [nextMessages, outputMessages] = await this.CalculateNextMessages(args.messageLocations);\r\n        if (outputMessages.length > 0) {\r\n            this.outputs = this.outputs.concat(outputMessages);\r\n        }\r\n\r\n        if (args.store !== undefined) {\r\n            for (const message of outputMessages) {\r\n                args.store.dispatch(ReportOutput({ Channel: message.Channel, Content: message.Content, Order: args.order! }, args.testId!));\r\n            }\r\n        }\r\n\r\n        if (args.store !== undefined && this.activeSetup && args.store.getState().PlaySettings.ShowAnimations) {\r\n            args.store.dispatch(SetMessages(nextMessages));\r\n        }\r\n\r\n        if (nextMessages.length > 0) {\r\n            return this.OrderNewCalculation({ ...args, messageLocations: nextMessages });\r\n        } else {\r\n            return Promise.resolve(this.outputs);\r\n        }\r\n    }\r\n\r\n    private OrderNewCalculation(args: { messageLocations: MessageLocationModel[], store?: IStore, testId?: number, order?: number }): Promise<MessageModel[]> {\r\n        Computer.stepCount++;\r\n        if (this.activeSetup || Computer.stepCount % 100000 === 0) {\r\n            const timeout = args.store !== undefined && args.store.getState().PlaySettings.ShowAnimations ? args.store.getState().PlaySettings.StepTime * 100 : 0;\r\n\r\n            return this.SetDelay(this.HandleNextMessages, args, timeout);\r\n        } else {\r\n            return this.HandleNextMessages(args);\r\n        }\r\n    }\r\n\r\n    private async CalculateNextMessages(messages: MessageLocationModel[]): Promise<[MessageLocationModel[], MessageModel[]]> {\r\n        const doneMessages: MessageLocationModel[] = [];\r\n        const nextMessages: MessageLocationModel[] = [];\r\n        for (const message of messages) {\r\n            let machine: MachineInstanceModel | undefined;\r\n            let messageCell: CellModel | undefined = message.Cell;\r\n\r\n            while (machine === undefined) {\r\n                messageCell = this.Move(messageCell!, message.Direction);\r\n                if (messageCell === undefined) {\r\n                    break;\r\n                }\r\n\r\n                // eslint-disable-next-line\r\n                machine = this.setup.MachineInstances.find((mi) => mi.Cell.Column === messageCell!.Column && mi.Cell.Row === messageCell!.Row);\r\n            }\r\n\r\n            if (messageCell === undefined) {\r\n                doneMessages.push({ Cell: undefined, Direction: message.Direction, Content: message.Content });\r\n                continue;\r\n            }\r\n\r\n            if (machine!.Status !== \"Valid\") {\r\n                return Promise.reject(\"Encountered invalid machine, check your machines\");\r\n            }\r\n\r\n            let channel = ChannelColorEnum.Green;\r\n            const inputChannel = machine!.InputChannels.find((ic) => ic.Direction === message.Direction);\r\n            if (inputChannel !== undefined) {\r\n                channel = inputChannel.Channel;\r\n            }\r\n\r\n            let cachedMachine = this.machines.find((m) => m.id === machine!.Id);\r\n            if (cachedMachine === undefined) {\r\n                const machineInstance = this.setup.MachineInstances.find((mi) => mi.Id === machine!.Id)!;\r\n                cachedMachine = { id: machineInstance.Id, actor: this.store.GetActor(machineInstance.MachineId) };\r\n                this.machines.push(cachedMachine);\r\n            }\r\n            const actor = cachedMachine.actor;\r\n            const nextContents = await actor.Act({ Content: message.Content, Channel: channel });\r\n            for (const nextContent of nextContents) {\r\n                const channelMap = machine!.Channels.find((cm) => cm.Channel === nextContent.Channel);\r\n                if (channelMap === undefined) {\r\n                    throw Error(\"Channelmap \" + nextContent.Channel + \"undefined\");\r\n                }\r\n\r\n                const messageLocation: MessageLocationModel = { Cell: machine!.Cell, Content: nextContent.Content, Direction: channelMap.Direction };\r\n                nextMessages.push(messageLocation);\r\n            }\r\n        }\r\n\r\n        const outputs: MessageModel[] = [];\r\n        for (const doneMessage of doneMessages) {\r\n            switch (doneMessage.Direction) {\r\n                case DirectionEnum.Up:\r\n                    outputs.push({ Content: doneMessage.Content, Channel: ChannelColorEnum.Green });\r\n                    break;\r\n                case DirectionEnum.Down:\r\n                    outputs.push({ Content: doneMessage.Content, Channel: ChannelColorEnum.Red });\r\n                    break;\r\n                case DirectionEnum.Right:\r\n                    outputs.push({ Content: doneMessage.Content, Channel: ChannelColorEnum.Blue });\r\n                    break;\r\n                case DirectionEnum.Left:\r\n                    outputs.push({ Content: doneMessage.Content, Channel: ChannelColorEnum.Yellow });\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return [nextMessages, outputs];\r\n    }\r\n\r\n    private Move(cell: CellModel, direction: DirectionEnum): CellModel | undefined {\r\n        switch (direction) {\r\n            case DirectionEnum.Down:\r\n                if (cell.Row === this.setup.NumberOfRows - 1) {\r\n                    return;\r\n                }\r\n                return { Column: cell.Column, Row: cell.Row + 1 };\r\n            case DirectionEnum.Up:\r\n                if (cell.Row === 0) {\r\n                    return;\r\n                }\r\n                return { Column: cell.Column, Row: cell.Row - 1 };\r\n            case DirectionEnum.Right:\r\n                if (cell.Column === this.setup.NumberOfColumns - 1) {\r\n                    return;\r\n                }\r\n                return { Column: cell.Column + 1, Row: cell.Row };\r\n            case DirectionEnum.Left:\r\n                if (cell.Column === 0) {\r\n                    return;\r\n                }\r\n                return { Column: cell.Column - 1, Row: cell.Row };\r\n        }\r\n    }\r\n}","export function GetColorCode(enteredColor: string): string {\r\n    let color = \"#FFFFFF\";\r\n    const lowerEnteredColor = enteredColor.toLowerCase();\r\n    switch (lowerEnteredColor) {\r\n        case \"aliceblue\": color = \"#F0F8FF\"; break;\r\n        case \"antiquewhite\": color = \"#FAEBD7\"; break;\r\n        case \"aqua\": color = \"#00FFFF\"; break;\r\n        case \"aquamarine\": color = \"#7FFFD4\"; break;\r\n        case \"azure\": color = \"#F0FFFF\"; break;\r\n        case \"beige\": color = \"#F5F5DC\"; break;\r\n        case \"bisque\": color = \"#FFE4C4\"; break;\r\n        case \"black\": color = \"#000000\"; break;\r\n        case \"blanchedalmond\": color = \"#FFEBCD\"; break;\r\n        case \"blue\": color = \"#0000FF\"; break;\r\n        case \"blueviolet\": color = \"#8A2BE2\"; break;\r\n        case \"brown\": color = \"#A52A2A\"; break;\r\n        case \"burlywood\": color = \"#DEB887\"; break;\r\n        case \"cadetblue\": color = \"#5F9EA0\"; break;\r\n        case \"chartreuse\": color = \"#7FFF00\"; break;\r\n        case \"chocolate\": color = \"#D2691E\"; break;\r\n        case \"coral\": color = \"#FF7F50\"; break;\r\n        case \"cornflowerblue\": color = \"#6495ED\"; break;\r\n        case \"cornsilk\": color = \"#FFF8DC\"; break;\r\n        case \"crimson\": color = \"#DC143C\"; break;\r\n        case \"cyan\": color = \"#00FFFF\"; break;\r\n        case \"darkblue\": color = \"#00008B\"; break;\r\n        case \"darkcyan\": color = \"#008B8B\"; break;\r\n        case \"darkgoldenrod\": color = \"#B8860B\"; break;\r\n        case \"darkgray\": color = \"#A9A9A9\"; break;\r\n        case \"darkgrey\": color = \"#A9A9A9\"; break;\r\n        case \"darkgreen\": color = \"#006400\"; break;\r\n        case \"darkkhaki\": color = \"#BDB76B\"; break;\r\n        case \"darkmagenta\": color = \"#8B008B\"; break;\r\n        case \"darkolivegreen\": color = \"#556B2F\"; break;\r\n        case \"darkorange\": color = \"#FF8C00\"; break;\r\n        case \"darkorchid\": color = \"#9932CC\"; break;\r\n        case \"darkred\": color = \"#8B0000\"; break;\r\n        case \"darksalmon\": color = \"#E9967A\"; break;\r\n        case \"darkseagreen\": color = \"#8FBC8F\"; break;\r\n        case \"darkslateblue\": color = \"#483D8B\"; break;\r\n        case \"darkslategray\": color = \"#2F4F4F\"; break;\r\n        case \"darkslategrey\": color = \"#2F4F4F\"; break;\r\n        case \"darkturquoise\": color = \"#00CED1\"; break;\r\n        case \"darkviolet\": color = \"#9400D3\"; break;\r\n        case \"deeppink\": color = \"#FF1493\"; break;\r\n        case \"deepskyblue\": color = \"#00BFFF\"; break;\r\n        case \"dimgray\": color = \"#696969\"; break;\r\n        case \"dimgrey\": color = \"#696969\"; break;\r\n        case \"dodgerblue\": color = \"#1E90FF\"; break;\r\n        case \"firebrick\": color = \"#B22222\"; break;\r\n        case \"floralwhite\": color = \"#FFFAF0\"; break;\r\n        case \"forestgreen\": color = \"#228B22\"; break;\r\n        case \"fuchsia\": color = \"#FF00FF\"; break;\r\n        case \"gainsboro\": color = \"#DCDCDC\"; break;\r\n        case \"ghostwhite\": color = \"#F8F8FF\"; break;\r\n        case \"gold\": color = \"#FFD700\"; break;\r\n        case \"goldenrod\": color = \"#DAA520\"; break;\r\n        case \"gray\": color = \"#808080\"; break;\r\n        case \"grey\": color = \"#808080\"; break;\r\n        case \"green\": color = \"#008000\"; break;\r\n        case \"greenyellow\": color = \"#ADFF2F\"; break;\r\n        case \"honeydew\": color = \"#F0FFF0\"; break;\r\n        case \"hotpink\": color = \"#FF69B4\"; break;\r\n        case \"indianred \": color = \"#CD5C5C\"; break;\r\n        case \"indigo \": color = \"#4B0082\"; break;\r\n        case \"ivory\": color = \"#FFFFF0\"; break;\r\n        case \"khaki\": color = \"#F0E68C\"; break;\r\n        case \"lavender\": color = \"#E6E6FA\"; break;\r\n        case \"lavenderblush\": color = \"#FFF0F5\"; break;\r\n        case \"lawngreen\": color = \"#7CFC00\"; break;\r\n        case \"lemonchiffon\": color = \"#FFFACD\"; break;\r\n        case \"lightblue\": color = \"#ADD8E6\"; break;\r\n        case \"lightcoral\": color = \"#F08080\"; break;\r\n        case \"lightcyan\": color = \"#E0FFFF\"; break;\r\n        case \"lightgoldenrodyellow\": color = \"#FAFAD2\"; break;\r\n        case \"lightgray\": color = \"#D3D3D3\"; break;\r\n        case \"lightgrey\": color = \"#D3D3D3\"; break;\r\n        case \"lightgreen\": color = \"#90EE90\"; break;\r\n        case \"lightpink\": color = \"#FFB6C1\"; break;\r\n        case \"lightsalmon\": color = \"#FFA07A\"; break;\r\n        case \"lightseagreen\": color = \"#20B2AA\"; break;\r\n        case \"lightskyblue\": color = \"#87CEFA\"; break;\r\n        case \"lightslategray\": color = \"#778899\"; break;\r\n        case \"lightslategrey\": color = \"#778899\"; break;\r\n        case \"lightsteelblue\": color = \"#B0C4DE\"; break;\r\n        case \"lightyellow\": color = \"#FFFFE0\"; break;\r\n        case \"lime\": color = \"#00FF00\"; break;\r\n        case \"limegreen\": color = \"#32CD32\"; break;\r\n        case \"linen\": color = \"#FAF0E6\"; break;\r\n        case \"magenta\": color = \"#FF00FF\"; break;\r\n        case \"maroon\": color = \"#800000\"; break;\r\n        case \"mediumaquamarine\": color = \"#66CDAA\"; break;\r\n        case \"mediumblue\": color = \"#0000CD\"; break;\r\n        case \"mediumorchid\": color = \"#BA55D3\"; break;\r\n        case \"mediumpurple\": color = \"#9370DB\"; break;\r\n        case \"mediumseagreen\": color = \"#3CB371\"; break;\r\n        case \"mediumslateblue\": color = \"#7B68EE\"; break;\r\n        case \"mediumspringgreen\": color = \"#00FA9A\"; break;\r\n        case \"mediumturquoise\": color = \"#48D1CC\"; break;\r\n        case \"mediumvioletred\": color = \"#C71585\"; break;\r\n        case \"midnightblue\": color = \"#191970\"; break;\r\n        case \"mintcream\": color = \"#F5FFFA\"; break;\r\n        case \"mistyrose\": color = \"#FFE4E1\"; break;\r\n        case \"moccasin\": color = \"#FFE4B5\"; break;\r\n        case \"navajowhite\": color = \"#FFDEAD\"; break;\r\n        case \"navy\": color = \"#000080\"; break;\r\n        case \"oldlace\": color = \"#FDF5E6\"; break;\r\n        case \"olive\": color = \"#808000\"; break;\r\n        case \"olivedrab\": color = \"#6B8E23\"; break;\r\n        case \"orange\": color = \"#FFA500\"; break;\r\n        case \"orangered\": color = \"#FF4500\"; break;\r\n        case \"orchid\": color = \"#DA70D6\"; break;\r\n        case \"palegoldenrod\": color = \"#EEE8AA\"; break;\r\n        case \"palegreen\": color = \"#98FB98\"; break;\r\n        case \"paleturquoise\": color = \"#AFEEEE\"; break;\r\n        case \"palevioletred\": color = \"#DB7093\"; break;\r\n        case \"papayawhip\": color = \"#FFEFD5\"; break;\r\n        case \"peachpuff\": color = \"#FFDAB9\"; break;\r\n        case \"peru\": color = \"#CD853F\"; break;\r\n        case \"pink\": color = \"#FFC0CB\"; break;\r\n        case \"plum\": color = \"#DDA0DD\"; break;\r\n        case \"powderblue\": color = \"#B0E0E6\"; break;\r\n        case \"purple\": color = \"#800080\"; break;\r\n        case \"rebeccapurple\": color = \"#663399\"; break;\r\n        case \"red\": color = \"#FF0000\"; break;\r\n        case \"rosybrown\": color = \"#BC8F8F\"; break;\r\n        case \"royalblue\": color = \"#4169E1\"; break;\r\n        case \"saddlebrown\": color = \"#8B4513\"; break;\r\n        case \"salmon\": color = \"#FA8072\"; break;\r\n        case \"sandybrown\": color = \"#F4A460\"; break;\r\n        case \"seagreen\": color = \"#2E8B57\"; break;\r\n        case \"seashell\": color = \"#FFF5EE\"; break;\r\n        case \"sienna\": color = \"#A0522D\"; break;\r\n        case \"silver\": color = \"#C0C0C0\"; break;\r\n        case \"skyblue\": color = \"#87CEEB\"; break;\r\n        case \"slateblue\": color = \"#6A5ACD\"; break;\r\n        case \"slategray\": color = \"#708090\"; break;\r\n        case \"slategrey\": color = \"#708090\"; break;\r\n        case \"snow\": color = \"#FFFAFA\"; break;\r\n        case \"springgreen\": color = \"#00FF7F\"; break;\r\n        case \"steelblue\": color = \"#4682B4\"; break;\r\n        case \"tan\": color = \"#D2B48C\"; break;\r\n        case \"teal\": color = \"#008080\"; break;\r\n        case \"thistle\": color = \"#D8BFD8\"; break;\r\n        case \"tomato\": color = \"#FF6347\"; break;\r\n        case \"turquoise\": color = \"#40E0D0\"; break;\r\n        case \"violet\": color = \"#EE82EE\"; break;\r\n        case \"wheat\": color = \"#F5DEB3\"; break;\r\n        case \"white\": color = \"#FFFFFF\"; break;\r\n        case \"whitesmoke\": color = \"#F5F5F5\"; break;\r\n        case \"yellow\": color = \"#FFFF00\"; break;\r\n        case \"yellowgreen\": color = \"#9ACD32\"; break;\r\n    }\r\n\r\n    return color;\r\n}\r\n\r\nexport function GetLighterColor(color: string, opacity: number): string {\r\n    if (!color.startsWith(\"#\")) {\r\n        color = GetColorCode(color);\r\n    }\r\n\r\n    try {\r\n        const red = parseInt(color.substring(1, 3), 16);\r\n        const blue = parseInt(color.substring(5, 7), 16);\r\n        const green = parseInt(color.substring(3, 5), 16);\r\n        return `rgba(${red},${green},${blue},${opacity})`;\r\n    } catch (error) {\r\n        return \"white\";\r\n    }\r\n}\r\n\r\nexport function GetRandomColor(): string {\r\n    const randNumber = Math.floor(Math.random() * 148);\r\n    switch (randNumber) {\r\n        case 0: return \"AliceBlue\";\r\n        case 1: return \"AntiqueWhite\";\r\n        case 2: return \"Aqua\";\r\n        case 3: return \"Aquamarine\";\r\n        case 4: return \"Azure\";\r\n        case 5: return \"Beige\";\r\n        case 6: return \"Bisque\";\r\n        case 7: return \"Black\";\r\n        case 8: return \"BlanchedAlmond\";\r\n        case 9: return \"Blue\";\r\n        case 10: return \"BlueViolet\";\r\n        case 11: return \"Brown\";\r\n        case 12: return \"BurlyWood\";\r\n        case 13: return \"CadetBlue\";\r\n        case 14: return \"Chartreuse\";\r\n        case 15: return \"Chocolate\";\r\n        case 16: return \"Coral\";\r\n        case 17: return \"CornflowerBlue\";\r\n        case 18: return \"Cornsilk\";\r\n        case 19: return \"Crimson\";\r\n        case 20: return \"Cyan\";\r\n        case 21: return \"DarkBlue\";\r\n        case 22: return \"DarkCyan\";\r\n        case 23: return \"DarkGoldenRod\";\r\n        case 24: return \"DarkGray\";\r\n        case 25: return \"DarkGrey\";\r\n        case 26: return \"DarkGreen\";\r\n        case 27: return \"DarkKhaki\";\r\n        case 28: return \"DarkMagenta\";\r\n        case 29: return \"DarkOliveGreen\";\r\n        case 30: return \"DarkOrange\";\r\n        case 31: return \"DarkOrchid\";\r\n        case 32: return \"DarkRed\";\r\n        case 33: return \"DarkSalmon\";\r\n        case 34: return \"DarkSeaGreen\";\r\n        case 35: return \"DarkSlateBlue\";\r\n        case 36: return \"DarkSlateGray\";\r\n        case 37: return \"DarkSlateGrey\";\r\n        case 38: return \"DarkTurquoise\";\r\n        case 39: return \"DarkViolet\";\r\n        case 40: return \"DeepPink\";\r\n        case 41: return \"DeepSkyBlue\";\r\n        case 42: return \"DimGray\";\r\n        case 43: return \"DimGrey\";\r\n        case 44: return \"DodgerBlue\";\r\n        case 45: return \"FireBrick\";\r\n        case 46: return \"FloralWhite\";\r\n        case 47: return \"ForestGreen\";\r\n        case 48: return \"Fuchsia\";\r\n        case 49: return \"Gainsboro\";\r\n        case 50: return \"GhostWhite\";\r\n        case 51: return \"Gold\";\r\n        case 52: return \"GoldenRod\";\r\n        case 53: return \"Gray\";\r\n        case 54: return \"Grey\";\r\n        case 55: return \"Green\";\r\n        case 56: return \"GreenYellow\";\r\n        case 57: return \"HoneyDew\";\r\n        case 58: return \"HotPink\";\r\n        case 59: return \"IndianRed \";\r\n        case 60: return \"Indigo \";\r\n        case 61: return \"Ivory\";\r\n        case 62: return \"Khaki\";\r\n        case 63: return \"Lavender\";\r\n        case 64: return \"LavenderBlush\";\r\n        case 65: return \"LawnGreen\";\r\n        case 66: return \"LemonChiffon\";\r\n        case 67: return \"LightBlue\";\r\n        case 68: return \"LightCoral\";\r\n        case 69: return \"LightCyan\";\r\n        case 70: return \"LightGoldenRodYellow\";\r\n        case 71: return \"LightGray\";\r\n        case 72: return \"LightGrey\";\r\n        case 73: return \"LightGreen\";\r\n        case 74: return \"LightPink\";\r\n        case 75: return \"LightSalmon\";\r\n        case 76: return \"LightSeaGreen\";\r\n        case 77: return \"LightSkyBlue\";\r\n        case 78: return \"LightSlateGray\";\r\n        case 79: return \"LightSlateGrey\";\r\n        case 80: return \"LightSteelBlue\";\r\n        case 81: return \"LightYellow\";\r\n        case 82: return \"Lime\";\r\n        case 83: return \"LimeGreen\";\r\n        case 84: return \"Linen\";\r\n        case 85: return \"Magenta\";\r\n        case 86: return \"Maroon\";\r\n        case 87: return \"MediumAquaMarine\";\r\n        case 88: return \"MediumBlue\";\r\n        case 89: return \"MediumOrchid\";\r\n        case 90: return \"MediumPurple\";\r\n        case 91: return \"MediumSeaGreen\";\r\n        case 92: return \"MediumSlateBlue\";\r\n        case 93: return \"MediumSpringGreen\";\r\n        case 94: return \"MediumTurquoise\";\r\n        case 95: return \"MediumVioletRed\";\r\n        case 96: return \"MidnightBlue\";\r\n        case 97: return \"MintCream\";\r\n        case 98: return \"MistyRose\";\r\n        case 99: return \"Moccasin\";\r\n        case 100: return \"NavajoWhite\";\r\n        case 101: return \"Navy\";\r\n        case 102: return \"OldLace\";\r\n        case 103: return \"Olive\";\r\n        case 104: return \"OliveDrab\";\r\n        case 105: return \"Orange\";\r\n        case 106: return \"OrangeRed\";\r\n        case 107: return \"Orchid\";\r\n        case 108: return \"PaleGoldenRod\";\r\n        case 109: return \"PaleGreen\";\r\n        case 110: return \"PaleTurquoise\";\r\n        case 111: return \"PaleVioletRed\";\r\n        case 112: return \"PapayaWhip\";\r\n        case 113: return \"PeachPuff\";\r\n        case 114: return \"Peru\";\r\n        case 115: return \"Pink\";\r\n        case 116: return \"Plum\";\r\n        case 117: return \"PowderBlue\";\r\n        case 118: return \"Purple\";\r\n        case 119: return \"RebeccaPurple\";\r\n        case 120: return \"Red\";\r\n        case 121: return \"RosyBrown\";\r\n        case 122: return \"RoyalBlue\";\r\n        case 123: return \"SaddleBrown\";\r\n        case 124: return \"Salmon\";\r\n        case 125: return \"SandyBrown\";\r\n        case 126: return \"SeaGreen\";\r\n        case 127: return \"SeaShell\";\r\n        case 128: return \"Sienna\";\r\n        case 129: return \"Silver\";\r\n        case 130: return \"SkyBlue\";\r\n        case 131: return \"SlateBlue\";\r\n        case 132: return \"SlateGray\";\r\n        case 133: return \"SlateGrey\";\r\n        case 134: return \"Snow\";\r\n        case 135: return \"SpringGreen\";\r\n        case 136: return \"SteelBlue\";\r\n        case 137: return \"Tan\";\r\n        case 138: return \"Teal\";\r\n        case 139: return \"Thistle\";\r\n        case 140: return \"Tomato\";\r\n        case 141: return \"Turquoise\";\r\n        case 142: return \"Violet\";\r\n        case 143: return \"Wheat\";\r\n        case 144: return \"White\";\r\n        case 145: return \"WhiteSmoke\";\r\n        case 146: return \"Yellow\";\r\n        case 147: return \"YellowGreen\";\r\n        default:\r\n            return \"White\";\r\n    }\r\n}","import { CustomMachinesListModel } from \"./CustomMachinesListModel\";\r\nimport { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { GridSetupReducer } from \"./GridSetup/Reducer\";\r\nimport { CustomMachineModel } from \"./GridSetup/CustomMachineModel\";\r\nimport { MachineApi, ApiAreEqual } from \"../../Models/MachineApi\";\r\nimport { MachineId, MachineIdAreEqual } from \"../../MachineStore/MachineId\";\r\nimport { MachineInstanceModel } from \"../../Models/MachineInstanceModel\";\r\nimport produce, { Draft } from \"immer\";\r\nimport { Computer } from \"../../Computing/Computer\";\r\nimport { GetRandomColor } from \"../../Helper/ColorHelper\";\r\nimport { Actions } from \"../Actions\";\r\n\r\nconst initialState: CustomMachinesListModel = {\r\n    machines: [],\r\n    idSeed: 0,\r\n    activeMachineId: undefined,\r\n    deletedMachines: []\r\n};\r\n\r\nexport const CustomMachinesReducer: (state: CustomMachinesListModel | undefined, action: Actions) => CustomMachinesListModel = produce((draft: Draft<CustomMachinesListModel>, action: Actions) => {\r\n    switch (action.type) {\r\n        case \"AddNewMachineActionType\":\r\n            draft.idSeed++;\r\n            const newMachine: CustomMachineModel = {\r\n                Id: draft.idSeed,\r\n                DirectlyDependingOn: [],\r\n                Style: {\r\n                    BorderColor: GetRandomColor(),\r\n                    Color: GetRandomColor(),\r\n                    Name: \"NewMachine\",\r\n                    Description: \"Enter your description here\"\r\n\r\n                },\r\n                Api: {\r\n                    InputChannels: [ChannelColorEnum.Green],\r\n                    OutputChannels: []\r\n                },\r\n                Setup: {\r\n                    NumberOfRows: 5,\r\n                    NumberOfColumns: 6,\r\n                    MachineInstances: [{\r\n                        MachineId: { Id: 0, Type: \"Default\" },\r\n                        Channels: [{ Direction: DirectionEnum.Right, Channel: ChannelColorEnum.Green, Status: \"Valid\" }],\r\n                        InputChannels: [], Id: 1,\r\n                        Cell: { Row: 2, Column: 0 },\r\n                        Status: \"Valid\"\r\n                    }]\r\n\r\n                },\r\n                ExitCells: [{ Cell: { Row: 2, Column: 5 }, Direction: DirectionEnum.Right }],\r\n                Messages: [],\r\n                DependingOn: [{ Id: 0, Type: \"Default\" }],\r\n                DependingOnDeleted: [],\r\n                Status: \"Valid\"\r\n            };\r\n            draft.machines.push(newMachine);\r\n            draft.activeMachineId = draft.idSeed;\r\n            break;\r\n        case \"LoadCustomMachineActionType\":\r\n            const newActiveMachine = draft.machines.find((m) => m.Id === action.machineId);\r\n            if (newActiveMachine === undefined) {\r\n                throw Error(\"Loading an unknown machine, with id \" + action.machineId);\r\n            }\r\n            draft.activeMachineId = action.machineId;\r\n            return;\r\n        case \"DeleteMachineActionType\":\r\n            draft.deletedMachines.push(draft.machines.find((m) => m.Id === action.id)!);\r\n            draft.machines = draft.machines.filter((m) => m.Id !== action.id);\r\n            if (draft.activeMachineId === action.id) {\r\n                draft.activeMachineId = undefined;\r\n            }\r\n\r\n            const directlyDependentMachines = draft.machines.filter((m) => m.DirectlyDependingOn.some((dp) => dp === action.id));\r\n            for (const dependentMachine of directlyDependentMachines) {\r\n                const updatedMachines: MachineInstanceModel[] = dependentMachine.Setup.MachineInstances.map((mi) => MachineIdAreEqual(mi.MachineId, { Id: action.id, Type: \"Custom\" }) ? { ...mi, Status: \"Deleted\" } : mi);\r\n                dependentMachine.Setup.MachineInstances = updatedMachines;\r\n                dependentMachine.DirectlyDependingOn = dependentMachine.DirectlyDependingOn.filter((i) => i !== action.id);\r\n            }\r\n\r\n            const dependentMachines = draft.machines.filter((m) => m.DependingOn.some((dp) => dp.Id === action.id));\r\n            for (const dependentMachine of dependentMachines) {\r\n                dependentMachine.DependingOn = dependentMachine.DependingOn.filter((i) => !MachineIdAreEqual(i, { Id: action.id, Type: \"Custom\" }));\r\n                dependentMachine.DependingOnDeleted.push(action.id);\r\n            }\r\n\r\n            break;\r\n        case \"LoadLevelActionType\":\r\n            draft.activeMachineId = undefined;\r\n            return draft;\r\n        default:\r\n            if (draft.activeMachineId === undefined) {\r\n                return draft;\r\n            }\r\n\r\n            const activeMachine = draft.machines.find((m) => m.Id === draft.activeMachineId)!;\r\n            GridSetupReducer(activeMachine, action);\r\n            break;\r\n    }\r\n\r\n    switch (action.type) {\r\n        case \"AddNewMachineActionType\":\r\n        case \"ChannelChangedActionType\":\r\n        case \"DeleteMachineActionType\":\r\n        case \"FixMachineActionType\":\r\n        case \"MachineAddedActionType\":\r\n        case \"MachineMovedActionType\":\r\n        case \"MachineRemovedActionType\":\r\n        case \"SetColumnNumberActionType\":\r\n        case \"SetRowNumberActionType\":\r\n            if (draft.activeMachineId !== undefined) {\r\n                EnrichState(draft);\r\n            }\r\n            break;\r\n    }\r\n\r\n    return;\r\n}, initialState);\r\n\r\nconst EnrichState = (draft: CustomMachinesListModel) => {\r\n\r\n    DetermineDependencies(draft);\r\n    SetApi(draft);\r\n\r\n    return draft;\r\n};\r\n\r\nfunction DetermineDependencies(draft: Draft<CustomMachinesListModel>) {\r\n    const dependingDirectly: number[] = [];\r\n    const depending: MachineId[] = [];\r\n    const DependingOnDeleted: number[] = [];\r\n    const activeMachine = draft.machines.find((m) => m.Id === draft.activeMachineId)!;\r\n\r\n    for (const machine of activeMachine.Setup.MachineInstances) {\r\n        if (machine.Status === \"Deleted\") {\r\n            DependingOnDeleted.push(machine.MachineId.Id);\r\n            continue;\r\n        }\r\n        if (machine.MachineId.Type === \"Custom\") {\r\n            if (!dependingDirectly.some((d) => d === machine.MachineId.Id)) {\r\n                dependingDirectly.push(machine.MachineId.Id);\r\n            }\r\n        }\r\n        if (!depending.some((d) => d.Id === machine.MachineId.Id && d.Type === machine.MachineId.Type)) {\r\n            depending.push(machine.MachineId);\r\n            if (machine.MachineId.Type === \"Custom\") {\r\n                const machineType = draft.machines.find((m) => m.Id === machine.MachineId.Id)!;\r\n                for (const depMachine of machineType.DependingOn) {\r\n                    if (!depending.some((d) => d.Id === depMachine.Id && d.Type === depMachine.Type)) {\r\n                        depending.push(depMachine);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    activeMachine.DependingOn = depending;\r\n    activeMachine.DirectlyDependingOn = dependingDirectly;\r\n    return draft;\r\n}\r\n\r\nfunction SetApi(draft: Draft<CustomMachinesListModel>) {\r\n    const activeMachine = draft.machines.find((m) => m.Id === draft.activeMachineId)!;\r\n    const computer = new Computer(activeMachine.Setup, true);\r\n    activeMachine.ExitCells = computer.CalculateExits();\r\n\r\n    const exitColors = activeMachine.ExitCells.map((ec) => {\r\n        switch (ec.Direction) {\r\n            case DirectionEnum.Right:\r\n                return ChannelColorEnum.Blue;\r\n            case DirectionEnum.Up:\r\n                return ChannelColorEnum.Green;\r\n            case DirectionEnum.Down:\r\n                return ChannelColorEnum.Red;\r\n            case DirectionEnum.Left:\r\n                return ChannelColorEnum.Yellow;\r\n            default:\r\n                throw Error(\"Invalid value for direction\");\r\n        }\r\n    });\r\n\r\n    const outputs: ChannelColorEnum[] = [];\r\n    for (const color of exitColors) {\r\n        if (!outputs.some((o) => o === color)) {\r\n            outputs.push(color);\r\n        }\r\n    }\r\n    const startMachines = computer.GetStartMachines();\r\n    const inputs = startMachines.map((mi) => {\r\n        switch (mi.MachineId.Id) {\r\n            case 0:\r\n                return ChannelColorEnum.Green;\r\n            case 1:\r\n                return ChannelColorEnum.Red;\r\n            case 2:\r\n                return ChannelColorEnum.Blue;\r\n            case 3:\r\n                return ChannelColorEnum.Yellow;\r\n            default:\r\n                throw Error(\"Unknown startmachine \" + mi.MachineId.Id);\r\n        }\r\n    });\r\n    const newApi: MachineApi = { InputChannels: inputs, OutputChannels: outputs };\r\n    if (!ApiAreEqual(newApi, activeMachine.Api)) {\r\n        UpdateMachineStatusses(draft, newApi);\r\n    }\r\n    activeMachine.Api = newApi;\r\n    CheckMachineStatus(activeMachine);\r\n    return draft;\r\n}\r\n\r\nfunction CheckMachineStatus(draft: Draft<CustomMachineModel>) {\r\n    if (draft.Setup.MachineInstances.some((m) => m.Status !== \"Valid\")) {\r\n        draft.Status = \"Invalid\";\r\n    } else {\r\n        draft.Status = \"Valid\";\r\n    }\r\n}\r\n\r\nfunction UpdateMachineStatusses(draft: Draft<CustomMachinesListModel>, api: MachineApi) {\r\n    const activeMachineId = draft.activeMachineId!;\r\n    const dependentMachines = draft.machines.filter((m) => m.DirectlyDependingOn.some((dp) => dp === activeMachineId));\r\n    for (const dependentMachine of dependentMachines) {\r\n        const machineInstances = dependentMachine.Setup.MachineInstances.filter((mi) => MachineIdAreEqual(mi.MachineId, { Id: activeMachineId, Type: \"Custom\" }));\r\n        for (const machineInstance of machineInstances.filter((m) => m.Status !== \"Deleted\")) {\r\n            // for (const newInputChannel of api.InputChannels) {\r\n            //     if (!machineInstance.InputChannels.some((i) => i.Channel === newInputChannel)) {\r\n            //         machineInstance.InputChannels.push({ Channel: newInputChannel, Direction: DirectionEnum.Up, Status: \"ShouldExist\" });\r\n            //         machineInstanceValid = false;\r\n            //     }\r\n            // }\r\n            // for (const inputChannel of machineInstance.InputChannels) {\r\n            //     if (!api.InputChannels.some((i) => i === inputChannel.Channel)) {\r\n            //         inputChannel.Status = \"ShouldNotExist\";\r\n            //         machineInstanceValid = false;\r\n            //     }\r\n            // }\r\n\r\n            //              Exists\t\tDoes Not Exist\r\n            //            -------------------------------\r\n            // Valid\t |\tValid\t\tShould Not\r\n            // Should\t |\tShould\t\tDoes Not\r\n            // ShouldNot |\tValid\t\tShould Not\r\n            // DoesNot\t |\tShould\t\tDoes Not\r\n            for (const newOutputChannel of api.OutputChannels) {\r\n                const matchingOutput = machineInstance.Channels.find((i) => i.Channel === newOutputChannel);\r\n                if (matchingOutput === undefined) {\r\n                    machineInstance.Channels.push({ Channel: newOutputChannel, Direction: DirectionEnum.Up, Status: \"ShouldExist\" });\r\n                } else if (matchingOutput.Status === \"ShouldNotExist\") {\r\n                    matchingOutput.Status = \"Valid\";\r\n                }\r\n            }\r\n            for (let index = 0; index < machineInstance.Channels.length; index++) {\r\n                const outputChannel = machineInstance.Channels[index];\r\n                if (!api.OutputChannels.some((i) => i === outputChannel.Channel)) {\r\n                    if (outputChannel.Status === \"Valid\") {\r\n                        outputChannel.Status = \"ShouldNotExist\";\r\n                    } else if (outputChannel.Status === \"ShouldExist\") {\r\n                        machineInstance.Channels.splice(index, 1);\r\n                        index--;\r\n                    }\r\n                }\r\n            }\r\n\r\n            machineInstance.Status = machineInstance.Channels.every((c) => c.Status === \"Valid\") ? \"Valid\" : \"ChannelsInvalid\";\r\n        }\r\n\r\n        CheckMachineStatus(dependentMachine);\r\n    }\r\n}","import { ChannelColorEnum } from \"./ChannelColorsEnum\";\r\n\r\nexport interface MachineApi {\r\n    readonly OutputChannels: ChannelColorEnum[];\r\n    readonly InputChannels: ChannelColorEnum[];\r\n}\r\n\r\nexport function ApiAreEqual(first: MachineApi, second: MachineApi): boolean {\r\n    if (first.InputChannels.length !== second.InputChannels.length) {\r\n        return false;\r\n    }\r\n    if (first.OutputChannels.length !== second.OutputChannels.length) {\r\n        return false;\r\n    }\r\n    if (first.InputChannels.some((i) => !second.InputChannels.some((o) => i === o))) {\r\n        return false;\r\n    }\r\n    if (first.OutputChannels.some((i) => !second.OutputChannels.some((o) => i === o))) {\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}","import { combineReducers, createStore } from \"redux\";\r\nimport { PlaySettingsReducer } from \"./PlaySettings/Reducer\";\r\nimport { LevelReducer } from \"./Level/Reducer\";\r\nimport { CustomMachinesReducer } from \"./CustomMachines/Reducer\";\r\nimport { CustomMachineModel } from \"./CustomMachines/GridSetup/CustomMachineModel\";\r\nimport { CustomMachinesActionTypes } from \"./CustomMachines/Actions\";\r\nimport { GridSetupActionTypes } from \"./CustomMachines/GridSetup/Actions\";\r\nimport { MachineInstanceActionTypes } from \"./CustomMachines/GridSetup/MachineInstances/Actions\";\r\nimport { LevelActionTypes } from \"./Level/Actions\";\r\nimport { PlaySettingActionTypes } from \"./PlaySettings/Actions\";\r\n\r\nconst autoReducer = combineReducers({\r\n    PlaySettings: PlaySettingsReducer,\r\n    CustomMachines: CustomMachinesReducer,\r\n    Level: LevelReducer\r\n});\r\n\r\nexport type AppState = ReturnType<typeof autoReducer>;\r\n\r\nfunction rootReducer(state: AppState | undefined, action: CustomMachinesActionTypes | GridSetupActionTypes | MachineInstanceActionTypes | LevelActionTypes | PlaySettingActionTypes): AppState {\r\n    const returnValue = autoReducer(state, action);\r\n    window.localStorage.setItem(\"State\", JSON.stringify(returnValue));\r\n    return returnValue;\r\n}\r\n\r\nfunction getInitialState() {\r\n    const storedState = window.localStorage.getItem(\"State\");\r\n    if (storedState === null || storedState === \"\") {\r\n        return undefined;\r\n    } else {\r\n        return JSON.parse(storedState);\r\n    }\r\n}\r\n\r\nexport const AppStore = createStore(rootReducer, getInitialState(), (window as any).__REDUX_DEVTOOLS_EXTENSION__ && (window as any).__REDUX_DEVTOOLS_EXTENSION__());\r\nexport const AppState = () => {\r\n    return AppStore.getState();\r\n};\r\n\r\nexport function GetActiveMachine(state: AppState): CustomMachineModel | undefined {\r\n    if (state.CustomMachines.activeMachineId === undefined) {\r\n        return undefined;\r\n    }\r\n    const newActiveMachine = state.CustomMachines.machines.find((m) => m.Id === state.CustomMachines.activeMachineId);\r\n    if (newActiveMachine === undefined) {\r\n        throw Error(\"Getting an unknown machine, with id \" + state.CustomMachines.activeMachineId);\r\n    }\r\n    return newActiveMachine;\r\n}","import React from \"react\";\r\nimport { Props } from \"./Props\";\r\n\r\nconst NumberInput: React.FC<Props> = (props) => {\r\n    const IncreaseValue: () => void = () => {\r\n        props.valueChanged(props.value + 1);\r\n    };\r\n    const DecreaseValue: () => void = () => {\r\n        props.valueChanged(props.value - 1);\r\n    };\r\n\r\n    const style: React.CSSProperties = { marginLeft: 5, marginRight: 5 };\r\n\r\n    return (<div>\r\n        <button style={style} onClick={DecreaseValue}>-</button>\r\n        <label >{props.value}</label>\r\n        <button style={style} onClick={IncreaseValue}>+</button>\r\n    </div>);\r\n};\r\n\r\nexport default NumberInput;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { UpdateShowAnimations, UpdateStepTime } from \"../../Redux/PlaySettings/ActionCreators\";\r\nimport { AppState } from \"../../Redux/Store\";\r\nimport NumberInput from \"../NumberInput/NumberInput\";\r\nimport { Props } from \"./Props\";\r\n\r\nconst DashboardInternal: React.FC<Props> = (props) => {\r\n\r\n    const onClicked = () => {\r\n        props.UpdateShowAnimations(!props.ShowAnimations);\r\n    };\r\n    return (\r\n        <div style={{ display: \"flex\" }}>\r\n            <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                <label title=\"Show animations, will calculate as fast as possible when turned of\">Show animations</label>\r\n                <button onClick={onClicked}>{props.ShowAnimations ? \"On\" : \"Off\"}</button>\r\n            </div>\r\n            {props.ShowAnimations &&\r\n                <div>\r\n                    <label title=\"Step time in tenths of seconds, lower for faster animations\">Step Time</label>\r\n                    <NumberInput value={props.StepTime} valueChanged={props.UpdateStepTime} />\r\n                </div>}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {\r\n        ShowAnimations: state.PlaySettings.ShowAnimations,\r\n        StepTime: state.PlaySettings.StepTime\r\n    };\r\n};\r\n\r\nexport const Dashboard = connect(\r\n    mapStateToProps,\r\n    {\r\n        UpdateStepTime, UpdateShowAnimations\r\n    }\r\n)(DashboardInternal);","import { PlaySettingActionTypes } from \"./Actions\";\r\n\r\nexport function UpdateStepTime(stepTime: number): PlaySettingActionTypes {\r\n    return {\r\n        type: \"UpdateStepTime\",\r\n        stepTime\r\n    };\r\n}\r\n\r\nexport function UpdateShowAnimations(show: boolean): PlaySettingActionTypes {\r\n    return {\r\n        type: \"UpdateShowAnimations\",\r\n        show\r\n    };\r\n}\r\n\r\nexport function StopComputing(): PlaySettingActionTypes{\r\n    return {\r\n        type: \"SetComputing\",\r\n        computing: false\r\n    };\r\n}\r\n\r\nexport function StartComputing(): PlaySettingActionTypes{\r\n    return {\r\n        type: \"SetComputing\",\r\n        computing: true\r\n    };\r\n}","export interface CellModel {\r\n    readonly Row: number;\r\n    readonly Column: number;\r\n}\r\n\r\nexport function AreEqual(cell: CellModel, otherCell: CellModel): boolean {\r\n    return cell.Column === otherCell.Column && cell.Row === otherCell.Row;\r\n}","export class Constants {\r\n    public static CellSize = 100;\r\n}","export const DragItemTypes = {\r\n  MachineInstance: \"MachineInstance\",\r\n  NewMachine: \"NewMachine\"\r\n};","export const FormatMessage = (content: string): string => {\r\n    let formattedMessage: string | undefined;\r\n\r\n    if (content === \"\") {\r\n        formattedMessage = \"<Empty>\";\r\n    } else {\r\n        formattedMessage = content;\r\n        let seekPosition = 0;\r\n\r\n        while (true) {\r\n            seekPosition = formattedMessage.indexOf(\"<\", seekPosition);\r\n            if (seekPosition === -1) {\r\n                break;\r\n            }\r\n\r\n            const lastIndex = formattedMessage.indexOf(\">\", seekPosition);\r\n            formattedMessage = formattedMessage.substring(0, seekPosition) + \"?\" + formattedMessage.substring(lastIndex + 1);\r\n        }\r\n    }\r\n    return formattedMessage;\r\n};\r\n","import React from \"react\";\r\nimport { DirectionEnum } from \"../../../../../Models/DirectionEnum\";\r\nimport { Constants } from \"../../../../Constants\";\r\nimport { Props } from \"./Props\";\r\n\r\nexport class Channel extends React.Component<Props> {\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.onClicked = this.onClicked.bind(this);\r\n    }\r\n    public render() {\r\n\r\n        const cellSize = Constants.CellSize - 2;\r\n        const width = 19;\r\n        const height = 4;\r\n        const border = 0.04;\r\n        const channelStyle: React.CSSProperties = {\r\n            position: \"absolute\",\r\n            height: cellSize / 50 * height,\r\n            width: cellSize / 50 * width,\r\n            marginLeft: cellSize / 50 * (25 + (height + border) / 2),\r\n            marginTop: cellSize / 50 * (25 - (height + border) / 2),\r\n            backgroundColor: this.props.ChannelMap.Channel,\r\n            borderStyle: \"solid\",\r\n            borderWidth: border + \"px\",\r\n            pointerEvents: \"visible\"\r\n        };\r\n\r\n        switch (this.props.ChannelMap.Status) {\r\n            case \"ShouldExist\":\r\n                channelStyle.opacity = 0.5;\r\n                channelStyle.backgroundColor = \"white\";\r\n                break;\r\n            case \"ShouldNotExist\":\r\n                channelStyle.opacity = 0.4;\r\n                break;\r\n        }\r\n\r\n        let rotate: string = \"\";\r\n        switch (this.props.ChannelMap.Direction) {\r\n            case DirectionEnum.Down:\r\n                rotate = \"rotate(90deg)\";\r\n                break;\r\n            case DirectionEnum.Left:\r\n                rotate = \"rotate(180deg)\";\r\n                break;\r\n            case DirectionEnum.Up:\r\n                rotate = \"rotate(270deg)\";\r\n                break;\r\n            case DirectionEnum.Right:\r\n                rotate = \"rotate(0deg)\";\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        const rotation: React.CSSProperties = {\r\n            transform: rotate,\r\n            height: cellSize,\r\n            width: cellSize,\r\n            position: \"absolute\",\r\n            pointerEvents: \"none\"\r\n        };\r\n\r\n        return (\r\n            <div style={rotation}>\r\n                <div style={channelStyle} onClick={this.onClicked}></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public onClicked(event: React.MouseEvent<HTMLDivElement, MouseEvent>): void {\r\n        if (this.props.OnChanged !== undefined) {\r\n            let newDirection: DirectionEnum = DirectionEnum.Left;\r\n            switch (this.props.ChannelMap.Direction) {\r\n                case DirectionEnum.Down:\r\n                    newDirection = DirectionEnum.Left;\r\n                    break;\r\n                case DirectionEnum.Left:\r\n                    newDirection = DirectionEnum.Up;\r\n                    break;\r\n                case DirectionEnum.Up:\r\n                    newDirection = DirectionEnum.Right;\r\n                    break;\r\n                case DirectionEnum.Right:\r\n                    newDirection = DirectionEnum.Down;\r\n                    break;\r\n            }\r\n\r\n            this.props.OnChanged({ Direction: newDirection, Channel: this.props.ChannelMap.Channel, Status: this.props.ChannelMap.Status });\r\n        }\r\n    }\r\n}","import React from \"react\";\r\nimport { Constants } from \"../../../../Constants\";\r\nimport { Props } from \"./Props\";\r\n\r\nexport class Machine extends React.Component<Props> {\r\n    public render() {\r\n        const machineSize = Constants.CellSize / 5 * 3;\r\n        const borderSize = machineSize / 10;\r\n\r\n        const machineStyle: React.CSSProperties = {\r\n            height: this.props.IsDefault ? machineSize : machineSize * 0.9,\r\n            width: this.props.IsDefault ? machineSize : machineSize * 0.9,\r\n            backgroundColor: this.props.MachineStyle.Color,\r\n            borderStyle: \"solid\",\r\n            borderColor: this.props.MachineStyle.BorderColor,\r\n            borderWidth: borderSize,\r\n            borderRadius: this.props.IsDefault ? \"50%\" : \"0%\",\r\n        };\r\n\r\n        return (\r\n            <div style={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\", height: Constants.CellSize - 2, width: Constants.CellSize - 2, pointerEvents: \"none\" }}>\r\n                <div style={machineStyle} />\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport { DirectionEnum } from \"../../../../../Models/DirectionEnum\";\r\nimport { Constants } from \"../../../../Constants\";\r\nimport { Props } from \"./Props\";\r\n\r\nexport class InputChannel extends React.Component<Props> {\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.onClicked = this.onClicked.bind(this);\r\n    }\r\n    public render() {\r\n\r\n        const cellSize = Constants.CellSize - 2;\r\n        const marginFactor = 0.05;\r\n        const height = 0.1;\r\n        const border = 0.2;\r\n        const channelStyle: React.CSSProperties = {\r\n            position: \"absolute\",\r\n            backgroundColor: \"rgba(0,0,0,0)\",\r\n            pointerEvents: \"visible\",\r\n        };\r\n\r\n        switch (this.props.ChannelMap.Status) {\r\n            case \"ShouldExist\":\r\n                channelStyle.opacity = 0.5;\r\n                channelStyle.backgroundColor = \"white\";\r\n                break;\r\n            case \"ShouldNotExist\":\r\n                channelStyle.opacity = 0.4;\r\n                break;\r\n        }\r\n\r\n        const borderStyle = \"solid \" + border * cellSize + \"px \" + this.props.ChannelMap.Channel;\r\n        const borderStyleSide = \"solid \" + border * cellSize  + \"px rgba(0,0,0,0)\";\r\n        const borderStyleNone = \"solid 0px rgba(0,0,0,0)\";\r\n        channelStyle.borderBottom = borderStyleNone;\r\n        channelStyle.borderLeft = borderStyleNone;\r\n        channelStyle.borderTop = borderStyleNone;\r\n        channelStyle.borderRight = borderStyleNone;\r\n\r\n        const pasiveMargin = cellSize * (((1 - height) / 2) - border);\r\n        const closeMargin = cellSize * (marginFactor);\r\n        const farMargin = cellSize * (1 - border - marginFactor);\r\n\r\n        switch (this.props.ChannelMap.Direction) {\r\n            case DirectionEnum.Up:\r\n                channelStyle.borderBottom = borderStyle;\r\n                channelStyle.borderLeft = borderStyleSide;\r\n                channelStyle.borderTop = borderStyleNone;\r\n                channelStyle.borderRight = borderStyleSide;\r\n                channelStyle.marginLeft = pasiveMargin;\r\n                channelStyle.marginTop = farMargin;\r\n                channelStyle.height = 0;\r\n                channelStyle.width = cellSize * height;\r\n                break;\r\n            case DirectionEnum.Right:\r\n                channelStyle.borderBottom = borderStyleSide;\r\n                channelStyle.borderLeft = borderStyle;\r\n                channelStyle.borderTop = borderStyleSide;\r\n                channelStyle.borderRight = borderStyleNone;\r\n                channelStyle.marginLeft = closeMargin;\r\n                channelStyle.marginTop = pasiveMargin;\r\n                channelStyle.height = cellSize * height;\r\n                channelStyle.width = 0;\r\n                break;\r\n            case DirectionEnum.Down:\r\n                channelStyle.borderBottom = borderStyleNone;\r\n                channelStyle.borderLeft = borderStyleSide;\r\n                channelStyle.borderTop = borderStyle;\r\n                channelStyle.borderRight = borderStyleSide;\r\n                channelStyle.marginLeft = pasiveMargin;\r\n                channelStyle.marginTop = closeMargin;\r\n                channelStyle.height = 0;\r\n                channelStyle.width = cellSize * height;\r\n                break;\r\n            case DirectionEnum.Left:\r\n                channelStyle.borderBottom = borderStyleSide;\r\n                channelStyle.borderLeft = borderStyleNone;\r\n                channelStyle.borderTop = borderStyleSide;\r\n                channelStyle.borderRight = borderStyle;\r\n                channelStyle.marginLeft = farMargin;\r\n                channelStyle.marginTop = pasiveMargin;\r\n                channelStyle.height = cellSize * height;\r\n                channelStyle.width = 0;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        return (\r\n            <div style={channelStyle} onClick={this.onClicked}>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public onClicked(event: React.MouseEvent<HTMLDivElement, MouseEvent>): void {\r\n        if (this.props.OnChanged !== undefined) {\r\n            let newDirection: DirectionEnum = DirectionEnum.Left;\r\n            switch (this.props.ChannelMap.Direction) {\r\n                case DirectionEnum.Down:\r\n                    newDirection = DirectionEnum.Left;\r\n                    break;\r\n                case DirectionEnum.Left:\r\n                    newDirection = DirectionEnum.Up;\r\n                    break;\r\n                case DirectionEnum.Up:\r\n                    newDirection = DirectionEnum.Right;\r\n                    break;\r\n                case DirectionEnum.Right:\r\n                    newDirection = DirectionEnum.Down;\r\n                    break;\r\n            }\r\n\r\n            this.props.OnChanged({ Direction: newDirection, Channel: this.props.ChannelMap.Channel, Status: this.props.ChannelMap.Status });\r\n        }\r\n    }\r\n}","import React, { Dispatch } from \"react\";\r\nimport { useDrag } from \"react-dnd\";\r\nimport { connect } from \"react-redux\";\r\nimport { MachineStore } from \"../../../../MachineStore/MachineStore\";\r\nimport { ChannelModel } from \"../../../../Models/ChannelMapModel\";\r\nimport { ChangeChannel, MachineInstanceActionTypes, RemoveMachine, FixMachine, ChangeInputChannel } from \"../../../../Redux/CustomMachines/GridSetup/MachineInstances/Actions\";\r\nimport { AppState, GetActiveMachine } from \"../../../../Redux/Store\";\r\nimport { Constants } from \"../../../Constants\";\r\nimport { DragItemTypes } from \"../../../DragItemTypes\";\r\nimport { Channel } from \"./Channel/Channel\";\r\nimport { Machine } from \"./Machine/Machine\";\r\nimport { Props } from \"./Props\";\r\nimport { InputChannel } from \"./InputChannel/InputChannel\";\r\n\r\nconst MachineInstanceInternal: React.FC<Props> = (props) => {\r\n    const [, drag] = useDrag({\r\n        item: { type: DragItemTypes.MachineInstance, id: props.MachineInstanceId },\r\n        end: (dropResult, monitor) => {\r\n            if (!monitor.didDrop()) {\r\n                props.OnRemoved();\r\n            }\r\n        },\r\n        collect: (monitor) => ({\r\n            isDragging: !!monitor.isDragging(),\r\n        }),\r\n    });\r\n\r\n    const OnClick = () => {\r\n        if (props.MachineInstance.Status !== \"Valid\") {\r\n            props.FixMachine();\r\n        }\r\n    };\r\n\r\n\r\n    const channels = props.MachineInstance.Channels.map((c, index) => <div key={index}><Channel OnChanged={(channelMap) => props.ChangeChannel(index, channelMap)} ChannelMap={c} /></div>);\r\n    let inputChannels: JSX.Element[] = [];\r\n    if (props.MachineInstance.InputChannels.length > 1) {\r\n        inputChannels = props.MachineInstance.InputChannels.map((c, index) => <div key={index}><InputChannel OnChanged={(channelMap) => props.ChangeInputChannel(index, channelMap)} ChannelMap={c} IsDefault={props.MachineInstance.MachineId.Type === \"Default\"} /></div>);\r\n    }\r\n    const absoluteStyle: React.CSSProperties = {\r\n        position: \"absolute\",\r\n        pointerEvents: \"none\"\r\n    };\r\n\r\n    const machineSize: React.CSSProperties = { height: Constants.CellSize - 2, width: Constants.CellSize - 2, margin: 1 };\r\n\r\n    switch (props.MachineInstance.Status) {\r\n        case \"Deleted\":\r\n            machineSize.borderBottom = Constants.CellSize / 18 + \"px dotted red\";\r\n            machineSize.boxSizing = \"border-box\";\r\n            machineSize.opacity = 0.4;\r\n            break;\r\n        case \"ChannelsInvalid\":\r\n            machineSize.borderBottom = Constants.CellSize / 18 + \"px dotted orange\";\r\n            machineSize.boxSizing = \"border-box\";\r\n            break;\r\n    }\r\n\r\n    const machineStyle = props.MachineStyle ?? MachineStore.GetStore().GetMachineType(props.MachineInstance.MachineId).Style;\r\n\r\n    return (\r\n        <div ref={drag} style={machineSize} onClick={OnClick}>\r\n            {inputChannels}\r\n            <div style={absoluteStyle}>\r\n                <Machine MachineStyle={machineStyle} IsDefault={props.MachineInstance.MachineId.Type === \"Default\"} />\r\n            </div>\r\n            {channels}\r\n        </div >\r\n\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: AppState, ownProps: { machineInstanceId: number }) => {\r\n    const activeMachine = GetActiveMachine(state);\r\n\r\n    const MachineInstanceProp = activeMachine!.Setup.MachineInstances.find((mi) => mi.Id === ownProps.machineInstanceId)!;\r\n    const machineType = MachineInstanceProp.MachineId.Type === \"Default\" ? undefined\r\n        : MachineInstanceProp.Status === \"Deleted\" ? state.CustomMachines.deletedMachines.find((dm) => dm.Id === MachineInstanceProp.MachineId.Id)!.Style\r\n            : state.CustomMachines.machines.find((m) => m.Id === MachineInstanceProp.MachineId.Id)!.Style;\r\n\r\n    return {\r\n        MachineInstance: MachineInstanceProp,\r\n        MachineInstanceId: ownProps.machineInstanceId,\r\n        MachineStyle: machineType\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<MachineInstanceActionTypes>, ownProps: { machineInstanceId: number }) => {\r\n    return {\r\n        ChangeChannel: (index: number, channel: ChannelModel) => dispatch(ChangeChannel(ownProps.machineInstanceId, index, channel)),\r\n        ChangeInputChannel: (index: number, channel: ChannelModel) => dispatch(ChangeInputChannel(ownProps.machineInstanceId, index, channel)),\r\n        OnRemoved: () => dispatch(RemoveMachine(ownProps.machineInstanceId)),\r\n        FixMachine: () => dispatch(FixMachine(ownProps.machineInstanceId))\r\n    };\r\n};\r\n\r\nexport const MachineInstance = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(MachineInstanceInternal);\r\n","import { MachineId } from \"../../../../MachineStore/MachineId\";\r\nimport { CellModel } from \"../../../../Models/CellModel\";\r\nimport { ChannelModel } from \"../../../../Models/ChannelMapModel\";\r\nimport { MachineApi } from \"../../../../Models/MachineApi\";\r\n\r\ninterface ChannelChangedActionType {\r\n    type: \"ChannelChangedActionType\";\r\n    machineInstanceId: number;\r\n    channelIndex: number;\r\n    channel: ChannelModel;\r\n}\r\n\r\nexport function ChangeChannel(machineInstanceId: number, channelIndex: number, channel: ChannelModel): MachineInstanceActionTypes {\r\n    return {\r\n        type: \"ChannelChangedActionType\",\r\n        machineInstanceId,\r\n        channelIndex,\r\n        channel\r\n    };\r\n}\r\n\r\ninterface InputChannelChangedActionType {\r\n    type: \"InputChannelChangedActionType\";\r\n    machineInstanceId: number;\r\n    channelIndex: number;\r\n    channel: ChannelModel;\r\n}\r\n\r\nexport function ChangeInputChannel(machineInstanceId: number, channelIndex: number, channel: ChannelModel): MachineInstanceActionTypes {\r\n    return {\r\n        type: \"InputChannelChangedActionType\",\r\n        machineInstanceId,\r\n        channelIndex,\r\n        channel\r\n    };\r\n}\r\n\r\ninterface MachineRemovedActionType {\r\n    type: \"MachineRemovedActionType\";\r\n    machineInstanceId: number;\r\n}\r\n\r\nexport function RemoveMachine(machineInstanceId: number): MachineInstanceActionTypes {\r\n    return {\r\n        type: \"MachineRemovedActionType\",\r\n        machineInstanceId\r\n    };\r\n}\r\n\r\ninterface MachineAddedActionType {\r\n    type: \"MachineAddedActionType\";\r\n    machineId: MachineId;\r\n    cell: CellModel;\r\n    api: MachineApi;\r\n}\r\n\r\nexport function AddMachine(machineId: MachineId, api: MachineApi, cellId: CellModel): MachineInstanceActionTypes {\r\n    return {\r\n        type: \"MachineAddedActionType\",\r\n        machineId,\r\n        cell: cellId,\r\n        api\r\n    };\r\n}\r\n\r\ninterface MachineMovedActionType {\r\n    type: \"MachineMovedActionType\";\r\n    machineInstanceId: number;\r\n    newCell: CellModel;\r\n}\r\n\r\nexport function MoveMachine(machineInstanceId: number, newCell: CellModel): MachineInstanceActionTypes {\r\n    return {\r\n        type: \"MachineMovedActionType\",\r\n        machineInstanceId,\r\n        newCell\r\n    };\r\n}\r\n\r\ninterface FixMachineActionType {\r\n    type: \"FixMachineActionType\";\r\n    machineInstanceId: number;\r\n}\r\n\r\nexport function FixMachine(machineInstanceId: number): MachineInstanceActionTypes {\r\n    return {\r\n        type: \"FixMachineActionType\",\r\n        machineInstanceId,\r\n    };\r\n}\r\n\r\nexport type MachineInstanceActionTypes = ChannelChangedActionType |\r\n    MachineRemovedActionType |\r\n    MachineAddedActionType |\r\n    MachineMovedActionType |\r\n    FixMachineActionType |\r\n    InputChannelChangedActionType;\r\n","import React from \"react\";\r\nimport { useDrop } from \"react-dnd\";\r\nimport { connect } from \"react-redux\";\r\nimport { MachineId } from \"../../../MachineStore/MachineId\";\r\nimport { AreEqual, CellModel } from \"../../../Models/CellModel\";\r\nimport { DirectionEnum } from \"../../../Models/DirectionEnum\";\r\nimport { AddMachine, MoveMachine } from \"../../../Redux/CustomMachines/GridSetup/MachineInstances/Actions\";\r\nimport { AppState, GetActiveMachine } from \"../../../Redux/Store\";\r\nimport { Constants } from \"../../Constants\";\r\nimport { DragItemTypes } from \"../../DragItemTypes\";\r\nimport { FormatMessage } from \"../../MessageFormatter\";\r\nimport { MachineInstance } from \"./MachineInstance/MachineInstance\";\r\nimport { Props } from \"./Props\";\r\nimport { MachineStore } from \"../../../MachineStore/MachineStore\";\r\n\r\nconst CellInternal: React.FC<Props> = (props) => {\r\n\r\n    const [, drop] = useDrop({\r\n        accept: [DragItemTypes.MachineInstance, DragItemTypes.NewMachine],\r\n        drop: (item, monitor) => {\r\n            switch (item.type) {\r\n                case DragItemTypes.MachineInstance:\r\n                    props.OnMovedMachine(monitor.getItem().id, props.cellId);\r\n                    break;\r\n                case DragItemTypes.NewMachine:\r\n                    const itemProps = monitor.getItem() as { id: MachineId };\r\n                    const machineType = MachineStore.GetStore().GetMachineType(itemProps.id);\r\n                    props.OnNewMachine(itemProps.id, machineType.Api, props.cellId);\r\n                    break;\r\n            }\r\n        },\r\n    });\r\n\r\n    const style: React.CSSProperties = {\r\n        height: Constants.CellSize,\r\n        width: Constants.CellSize,\r\n        border: \"1px solid black\",\r\n        float: \"left\",\r\n        marginTop: -1,\r\n        marginLeft: -1,\r\n        position: \"relative\"\r\n    };\r\n\r\n    const ExitThickness = Constants.CellSize / 100 * 20;\r\n\r\n    if (props.Exit !== undefined) {\r\n        switch (props.Exit) {\r\n            case DirectionEnum.Up:\r\n                style.borderRight = \"1px solid black\";\r\n                style.borderBottom = \"1px solid black\";\r\n                style.borderLeft = \"1px solid black\";\r\n                style.borderTop = ExitThickness + \"px solid green\";\r\n                style.marginTop = -ExitThickness;\r\n\r\n                break;\r\n            case DirectionEnum.Down:\r\n                style.borderRight = \"1px solid black\";\r\n                style.borderTop = \"1px solid black\";\r\n                style.borderLeft = \"1px solid black\";\r\n                style.borderBottom = ExitThickness + \"px solid red\";\r\n                style.marginBottom = -ExitThickness + 1;\r\n                break;\r\n            case DirectionEnum.Right:\r\n                style.borderTop = \"1px solid black\";\r\n                style.borderBottom = \"1px solid black\";\r\n                style.borderLeft = \"1px solid black\";\r\n                style.borderRight = ExitThickness + \"px solid blue\";\r\n                style.marginRight = -ExitThickness + 1;\r\n                break;\r\n            case DirectionEnum.Left:\r\n                style.borderRight = \"1px solid black\";\r\n                style.borderBottom = \"1px solid black\";\r\n                style.borderTop = \"1px solid black\";\r\n                style.borderLeft = ExitThickness + \"px solid yellow\";\r\n                style.marginLeft = -ExitThickness;\r\n\r\n                break;\r\n        }\r\n    } else {\r\n        style.borderRight = \"1px solid black\";\r\n        style.borderBottom = \"1px solid black\";\r\n        style.borderLeft = \"1px solid black\";\r\n        style.borderTop = \"1px solid black\";\r\n    }\r\n\r\n    let formattedMessage: string | undefined;\r\n    if (props.Message !== undefined) {\r\n        formattedMessage = FormatMessage(props.Message);\r\n    }\r\n\r\n    return (\r\n        <div style={style} ref={drop}>\r\n            {formattedMessage !== undefined && formattedMessage}\r\n            {props.MachineInstanceId !== undefined ? <MachineInstance machineInstanceId={props.MachineInstanceId} /> : \"\"}\r\n\r\n        </div >\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: AppState, ownProps: { cellId: CellModel }) => {\r\n    const activeMachine = GetActiveMachine(state);\r\n\r\n    const machineInstance = activeMachine!.Setup.MachineInstances.find((mi) => AreEqual(mi.Cell, ownProps.cellId));\r\n    const exit = activeMachine!.ExitCells.find((ec) => AreEqual(ec.Cell, ownProps.cellId));\r\n    const message = activeMachine!.Messages.find((m) => AreEqual(m.Cell!, ownProps.cellId));\r\n\r\n    return {\r\n        Exit: exit === undefined ? undefined : exit.Direction,\r\n        Message: message === undefined ? undefined : message.Content,\r\n        MachineInstanceId: machineInstance === undefined ? undefined : machineInstance.Id\r\n    };\r\n};\r\n\r\nexport const Cell = connect(\r\n    mapStateToProps,\r\n    {\r\n        OnNewMachine: AddMachine,\r\n        OnMovedMachine: MoveMachine\r\n    }\r\n\r\n)(CellInternal);","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { AppState, GetActiveMachine } from \"../../Redux/Store\";\r\nimport { Cell } from \"./Cell/Cell\";\r\n\r\nimport { Constants } from \"../Constants\";\r\nimport { Props } from \"./Props\";\r\nimport { GetLighterColor } from \"../../Helper/ColorHelper\";\r\n\r\nclass GridInternal extends React.Component<Props> {\r\n\r\n    public render() {\r\n        const rows = [];\r\n        for (let rowIndex = 0; rowIndex < this.props.Rows; rowIndex++) {\r\n            const row = [];\r\n            for (let columnIndex = 0; columnIndex < this.props.Columns; columnIndex++) {\r\n\r\n                row.push(<Cell key={columnIndex} cellId={{ Row: rowIndex, Column: columnIndex }} />);\r\n            }\r\n            rows.push(<div key={rowIndex} style={{ display: \"flex\", flexDirection: \"row\", opacity: 1 }}>{row}</div>);\r\n        }\r\n\r\n        return (\r\n            <div style={{borderColor: GetLighterColor(this.props.Style.BorderColor, 0.4), borderWidth: Constants.CellSize * 0.2, borderStyle: \"solid\", marginBottom: 0 }}>\r\n                <div style={{ display: \"flex\", flexDirection: \"column\", backgroundColor: GetLighterColor(this.props.Style.Color, 0.3)}}>\r\n                    {rows}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state: AppState): Props {\r\n    const activeMachine = GetActiveMachine(state);\r\n\r\n    return {\r\n        Rows: activeMachine!.Setup.NumberOfRows,\r\n        Columns: activeMachine!.Setup.NumberOfColumns,\r\n        Style: activeMachine!.Style\r\n    };\r\n}\r\n\r\nexport const Grid = connect(\r\n    mapStateToProps,\r\n    {}\r\n)(GridInternal);","export enum OutputStatus {\r\n    NotChecked,\r\n    NotFullfilled,\r\n    Fullfilled,\r\n    NotMatched\r\n}","import React from \"react\";\r\nimport { FormatMessage } from \"../../../MessageFormatter\";\r\nimport { Props } from \"./Props\";\r\nimport { OutputStatus } from \"../../../../Models/OutputStatusEnum\";\r\nimport { ChannelColorEnum } from \"../../../../Models/ChannelColorsEnum\";\r\n\r\nexport const MessageDisplay: React.FC<Props> = (props) => {\r\n    const onContentChanged: ((event: React.ChangeEvent<HTMLInputElement>) => void) = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (props.OnMessageChanged !== undefined) {\r\n            props.OnMessageChanged({ Content: event.target.value, Channel: props.Message.Channel });\r\n        }\r\n    };\r\n    const onChannelChanged = (event: React.ChangeEvent<HTMLSelectElement>) => {\r\n        if (props.OnMessageChanged !== undefined) {\r\n            props.OnMessageChanged({ Content: props.Message.Content, Channel: event.target.value as ChannelColorEnum });\r\n        }\r\n    };\r\n\r\n    const style: React.CSSProperties = { display: \"flex\", flexFlow: \"row\", justifyContent: props.Input ? \"flex-start\" : \"flex-end\", marginBottom: 1 };\r\n    const statusStyle: React.CSSProperties = { display: \"flex\", flexFlow: \"row\" };\r\n    switch (props.Status) {\r\n        case OutputStatus.Fullfilled:\r\n            statusStyle.backgroundColor = \"#d9ffb3\";\r\n            if (props.Editable) {\r\n                statusStyle.borderRight = \"solid green\";\r\n                statusStyle.borderBottom = \"solid green\";\r\n            }\r\n            break;\r\n        case OutputStatus.NotFullfilled:\r\n            statusStyle.backgroundColor = \"#ffb3b3\";\r\n            break;\r\n        case OutputStatus.NotMatched:\r\n            statusStyle.border = \"solid red\";\r\n            statusStyle.backgroundColor = \"#ffb3b3\";\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n    return (<div style={style}>\r\n        <div style={statusStyle}>\r\n            {props.Input && props.Editable && <button onClick={props.Remove}>-</button>}\r\n            {props.Input && (props.Editable && props.AllowedInputColors.length > 1 ? <select value={props.Message.Channel} style={{ backgroundColor: props.Message.Channel }} onChange={onChannelChanged}>\r\n                {props.AllowedInputColors.map((cc, index) => <option value={cc} key={index} style={{ backgroundColor: cc }}></option>)}\r\n            </select> : <div style={{ backgroundColor: props.Message.Channel, width: 10 }} />)}\r\n            {props.Editable ?\r\n                <input value={props.Message.Content} onChange={onContentChanged}></input>\r\n                :\r\n                <label>{FormatMessage(props.Message.Content)}</label>}\r\n            {!props.Input && (props.Editable && props.AllowedInputColors.length > 1 ? <select value={props.Message.Channel} style={{ backgroundColor: props.Message.Channel }} onChange={onChannelChanged}>\r\n                {props.AllowedInputColors.map((cc, index) => <option value={cc} key={index} style={{ backgroundColor: cc }}></option>)}\r\n            </select> : <div style={{ backgroundColor: props.Message.Channel, width: 10 }} />)}\r\n            {!props.Input && props.Editable && <button onClick={props.Remove}>-</button>}\r\n\r\n        </div>\r\n    </div>);\r\n};","import React, { useState } from \"react\";\r\nimport { OrderedMessageModel } from \"../../../Models/OrderedMessageModel\";\r\nimport { OutputStatus } from \"../../../Models/OutputStatusEnum\";\r\nimport { MessageDisplay } from \"./MessageDisplay/MessageDisplay\";\r\nimport { Props } from \"./Props\";\r\nimport { AppStore, AppState, GetActiveMachine } from \"../../../Redux/Store\";\r\nimport { RemoveTest, RemoveInput, RemoveOutput, UpdateInput, UpdateOutput, AddOutput, AddInput } from \"../../../Redux/Level/Actions\";\r\nimport { connect } from \"react-redux\";\r\nimport { ChannelColorEnum } from \"../../../Models/ChannelColorsEnum\";\r\nimport { Computer } from \"../../../Computing/Computer\";\r\n\r\nconst TestDisplayInternal: React.FC<Props> = (props) => {\r\n\r\n    const [error, setError] = useState<string | undefined>(undefined);\r\n    const OnClick = () => {\r\n        setError(undefined);\r\n        const activeMachine = GetActiveMachine(AppState());\r\n\r\n        if (activeMachine !== undefined) {\r\n            const computer = new Computer(activeMachine.Setup, true);\r\n            computer.RunComputation(props.Test.id, AppStore).catch((reason) => {\r\n                setError(reason.toString());\r\n            });\r\n        }\r\n    };\r\n\r\n    const inputs = props.Test.inputs;\r\n    const outputs = props.Test.expectedOutputs;\r\n    let messages: JSX.Element[] = [];\r\n    let index = 0;\r\n\r\n    for (let i = 0; i < inputs.length; i++) {\r\n        messages.push(\r\n            <div key={index++} style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\" }}>\r\n                <MessageDisplay Message={inputs[i]} Input={true} Status={OutputStatus.NotChecked} Editable={props.Test.editable} AllowedInputColors={[ChannelColorEnum.Green, ChannelColorEnum.Blue, ChannelColorEnum.Red, ChannelColorEnum.Yellow]} Remove={() => props.RemoveInput(props.Test.id, i)} OnMessageChanged={(message) => props.UpdateInput({ ...message, Order: i }, props.Test.id)} />\r\n                {props.Test.editable && <button onClick={() => props.AddOutput(props.Test.id, i)}>+</button>}\r\n            </div>\r\n        );\r\n        const expectedOutputs = outputs.filter((o) => o.Order === i);\r\n        let actuals: OrderedMessageModel[] | undefined;\r\n\r\n        actuals = props.Test.actualOutputs.filter((o) => o.Order === i);\r\n\r\n        for (let j = 0; j < expectedOutputs.length; j++) {\r\n            const expected = expectedOutputs[j];\r\n            let valid = OutputStatus.NotChecked;\r\n            if (actuals !== undefined) {\r\n                const indexActual = (actuals.findIndex((o) => o.Channel === expected.Channel && o.Content === expected.Content));\r\n                if (indexActual > -1) {\r\n                    valid = OutputStatus.Fullfilled;\r\n                    actuals.splice(indexActual, 1);\r\n                } else {\r\n                    valid = OutputStatus.NotFullfilled;\r\n                }\r\n            }\r\n\r\n            /* eslint-disable */\r\n            messages = messages.concat(<MessageDisplay Message={expectedOutputs[j]} Input={false} key={index++} Status={valid} Editable={props.Test.editable} AllowedInputColors={[ChannelColorEnum.Green, ChannelColorEnum.Blue, ChannelColorEnum.Red, ChannelColorEnum.Yellow]} Remove={() => props.RemoveOutput(props.Test.id, i, j)} OnMessageChanged={(message) => props.UpdateOutput({ ...message, Order: i }, props.Test.id, j)} />);\r\n        }\r\n\r\n        messages = messages.concat(actuals.map((o) => <MessageDisplay Message={o} Input={false} key={index++} Status={OutputStatus.NotMatched} AllowedInputColors={[ChannelColorEnum.Green]} Editable={false} />));\r\n    }\r\n    /* eslint-enable */\r\n\r\n    const style: React.CSSProperties = { display: \"flex\", flexDirection: \"row\", padding: 0, borderBottom: \"solid 0.5px\", margin: 5 };\r\n    const verticalStyle: React.CSSProperties = { display: \"flex\", flexDirection: \"column\", flexGrow: 1 };\r\n\r\n    return (\r\n        <div style={style}>\r\n            {props.Test.editable && <button onClick={() => props.RemoveTest(props.Test.id)}>-</button>}\r\n            <button onClick={OnClick}>Play</button>\r\n            <div style={verticalStyle}>\r\n                {error !== undefined && <div style={{ backgroundColor: \"red\", color: \"white\" }}>\r\n                    <label>{error}</label>\r\n                </div>}\r\n                {messages}\r\n                {props.Test.editable && <button style={{ alignSelf: \"start\" }} onClick={() => props.AddInput(props.Test.id)}>+</button>}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const TestDisplay = connect(\r\n    undefined,\r\n    { RemoveTest, RemoveInput, RemoveOutput, UpdateInput, UpdateOutput, AddInput, AddOutput }\r\n)(TestDisplayInternal);","import React from \"react\";\r\nimport { Props } from \"./Props\";\r\nimport { State } from \"./State\";\r\nimport { TestDisplay } from \"./TestDisplay/TestDisplay\";\r\nimport { AppState } from \"../../Redux/Store\";\r\nimport { connect } from \"react-redux\";\r\nimport { AddTest } from \"../../Redux/Level/Actions\";\r\n\r\nclass LevelDisplayInternal extends React.Component<Props, State> {\r\n\r\n    public render() {\r\n        const tests = this.props.Level.Tests.map((t, index) => <TestDisplay Test={t} key={index} />);\r\n        const style: React.CSSProperties = { padding: 10 };\r\n\r\n        return (\r\n            <div style={style}>\r\n                <div>\r\n                    <b>{this.props.Level.Name}</b>\r\n                    <br />\r\n                    <i>{this.props.Level.Description}</i>\r\n                </div>\r\n                {tests}\r\n                <button onClick={this.props.AddTest}>Add custom test</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {\r\n        Level: state.Level\r\n    };\r\n};\r\n\r\nexport const LevelDisplay = connect(\r\n    mapStateToProps,\r\n    { AddTest }\r\n)(LevelDisplayInternal);","import { Props } from \"./Props\";\r\nimport React from \"react\";\r\nimport { LoadLevel } from \"../../../Redux/Level/Actions\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst LevelPreviewInternal: React.FC<Props> = (props) => {\r\n    const OnClick = () => props.LoadLevel(props.Level.Name);\r\n    return (<div onClick={OnClick}>\r\n        <label title={props.Level.Description}>{props.Level.Name}</label>\r\n    </div>);\r\n};\r\n\r\nexport const LevelPreview = connect(\r\n    undefined,\r\n    { LoadLevel }\r\n)(LevelPreviewInternal);","import React from \"react\";\r\nimport { LevelPreview } from \"./LevelPreview/LevelPreview\";\r\nimport { LevelStore } from \"../../Levels/LevelStore\";\r\n\r\nconst LevelList: React.FC<{}> = () => {\r\n    const levelStore = LevelStore.GetStore();\r\n\r\n    const levels = levelStore.GetAllLevels().map((l, index) => <LevelPreview Level={l} key={index}/>);\r\n\r\n    return (\r\n        <div>\r\n            <b>Challenges:</b>\r\n            {levels}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LevelList;\r\n","import React from \"react\";\r\nimport { Constants } from \"../../../Constants\";\r\nimport { Channel } from \"../../../Grid/Cell/MachineInstance/Channel/Channel\";\r\nimport { Machine } from \"../../../Grid/Cell/MachineInstance/Machine/Machine\";\r\nimport { Props } from \"./Props\";\r\nimport { GetNewChannelSet } from \"../../../../Helper/NewChannelSet\";\r\nimport { InputChannel } from \"../../../Grid/Cell/MachineInstance/InputChannel/InputChannel\";\r\n\r\nexport const MachineDisplay: React.FC<Props> = (props) => {\r\n\r\n    const {inputChannels, outputChannels} = GetNewChannelSet(props.MachineType.Api);\r\n\r\n    const channelComponents = outputChannels.map((c, index) => <Channel key={index} ChannelMap={c} />);\r\n    const inputChannelComponents = inputChannels.map((c, index) => <div key={index}><InputChannel ChannelMap={c} IsDefault={props.IsDefault} /></div>);\r\n\r\n    const absoluteStyle: React.CSSProperties = {\r\n        position: \"absolute\",\r\n    };\r\n\r\n    const cellSize: React.CSSProperties = { height: Constants.CellSize, width: Constants.CellSize };\r\n    return (\r\n        <div >\r\n            <label>{props.MachineType.Style.Name}</label>\r\n            <div style={cellSize}>\r\n                {inputChannelComponents}\r\n                <div style={absoluteStyle}>\r\n                    <Machine MachineStyle={props.MachineType.Style} IsDefault={props.IsDefault} />\r\n                </div>\r\n                <div style={absoluteStyle}>\r\n                    {channelComponents}\r\n                </div>\r\n            </div>\r\n        </div>);\r\n};\r\n","import { GridSetupActionTypes } from \"./GridSetup/Actions\";\r\n\r\ninterface AddNewMachineActionType {\r\n    type: \"AddNewMachineActionType\";\r\n}\r\n\r\nexport function AddNewMachine(): CustomMachinesActionTypes {\r\n    return {\r\n        type: \"AddNewMachineActionType\",\r\n    };\r\n}\r\n\r\ninterface DeleteMachineActionType {\r\n    type: \"DeleteMachineActionType\";\r\n    id: number;\r\n}\r\n\r\nexport function DeleteMachine(id: number): CustomMachinesActionTypes {\r\n    return {\r\n        type: \"DeleteMachineActionType\",\r\n        id\r\n    };\r\n}\r\n\r\ninterface LoadCustomMachineActionType {\r\n    type: \"LoadCustomMachineActionType\";\r\n    machineId: number;\r\n}\r\n\r\nexport function LoadCustomMachine(machineId: number): CustomMachinesActionTypes {\r\n    return {\r\n        type: \"LoadCustomMachineActionType\",\r\n        machineId\r\n    };\r\n}\r\n\r\nexport type CustomMachinesActionTypes = AddNewMachineActionType | LoadCustomMachineActionType | DeleteMachineActionType | GridSetupActionTypes ;\r\n","import React, { useState } from \"react\";\r\nimport { useDrag } from \"react-dnd\";\r\nimport { DragItemTypes } from \"../../DragItemTypes\";\r\nimport { MachineDisplay } from \"./MachineDisplay/MachineDisplay\";\r\nimport { Props } from \"./Props\";\r\nimport { MachineStore } from \"../../../MachineStore/MachineStore\";\r\nimport { LoadCustomMachine, DeleteMachine } from \"../../../Redux/CustomMachines/Actions\";\r\nimport { connect } from \"react-redux\";\r\nimport { AppState } from \"../../../Redux/Store\";\r\nimport { MachineId } from \"../../../MachineStore/MachineId\";\r\nimport { Constants } from \"../../Constants\";\r\n\r\nconst StoredMachineInternal: React.FC<Props> = (props) => {\r\n    const [, drag] = useDrag({\r\n        item: { type: DragItemTypes.NewMachine, id: props.machine },\r\n        collect: (monitor) => ({\r\n            isDragging: !!monitor.isDragging(),\r\n        }),\r\n    });\r\n    const [showMenu, changeShow] = useState(false);\r\n\r\n    const machineType = MachineStore.GetStore().GetMachineType(props.machine);\r\n\r\n    const isDefault = props.machine.Type === \"Default\";\r\n    const machineStyle: React.CSSProperties = props.status === \"Invalid\" ? { borderBottom: Constants.CellSize / 18 + \"px dotted orange\", boxSizing: \"border-box\" } : {};\r\n\r\n    return (\r\n        <div ref={drag} title={machineType.Style.Description} onClick={() => changeShow(!showMenu)}>\r\n            <div style={machineStyle}>\r\n                <MachineDisplay MachineType={machineType} IsDefault={isDefault} />\r\n            </div>\r\n            {!isDefault && showMenu && <div style={{ display: \"flex\" }}>\r\n                <button onClick={(event) => props.LoadCustomMachine(props.machine.Id)}>Edit</button>\r\n                <button onClick={(event) => {\r\n                    event.stopPropagation();\r\n                    props.DeleteMachine(props.machine.Id);\r\n                }}>Delete</button>\r\n            </div>}\r\n        </div>);\r\n};\r\n\r\nconst mapStateToProps = (state: AppState, ownProps: { machine: MachineId }) => {\r\n    return {\r\n        status: ownProps.machine.Type === \"Default\" ? \"Valid\" : state.CustomMachines.machines.find((m) => m.Id === ownProps.machine.Id)!.Status\r\n    };\r\n};\r\n\r\nexport const StoredMachine = connect(\r\n    mapStateToProps,\r\n    {\r\n        LoadCustomMachine, DeleteMachine\r\n    }\r\n)(StoredMachineInternal);","import React from \"react\";\r\nimport { Constants } from \"../Constants\";\r\nimport { Props } from \"./Props\";\r\nimport { StoredMachine } from \"./StoredMachine/StoredMachine\";\r\nimport { AddNewMachine } from \"../../Redux/CustomMachines/Actions\";\r\nimport { connect } from \"react-redux\";\r\nimport { AppState, GetActiveMachine } from \"../../Redux/Store\";\r\nimport { MachineStore } from \"../../MachineStore/MachineStore\";\r\nimport { MachineId } from \"../../MachineStore/MachineId\";\r\n\r\nconst MachineCollectionInternal: React.FC<Props> = (props) => {\r\n\r\n    const storedMachines = props.allowedMachines.map((m, index) => <div key={index}><StoredMachine machine={m} /></div>);\r\n\r\n    return (\r\n        <div style={{ display: \"flex\", flexFlow: \"column\" }}>\r\n            <button onClick={props.AddNewMachine}>Create new machine</button>\r\n            <div style={{ display: \"flex\", flexFlow: \"column wrap\", height: Constants.CellSize * 8 }}>\r\n                {storedMachines}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    const store = MachineStore.GetStore();\r\n    const machines = store.GetAllMachines();\r\n    let allowedMachines: MachineId[] = [];\r\n    const disallowedMachines: MachineId[] = [];\r\n\r\n    for (const machine of machines) {\r\n        if (state.Level.AllowedMachines.some((am) => machine.Id === am)) {\r\n            allowedMachines.push(machine);\r\n        } else {\r\n            disallowedMachines.push(machine);\r\n        }\r\n    }\r\n\r\n    const activeMachine = GetActiveMachine(state);\r\n    if (activeMachine !== undefined) {\r\n        const startMachines = activeMachine.Setup.MachineInstances.filter((m) => m.MachineId.Id < 5 && m.MachineId.Type === \"Default\");\r\n        allowedMachines = allowedMachines.filter((m) => !startMachines.some((s) => s.MachineId.Id === m.Id && s.MachineId.Type === m.Type));\r\n    }\r\n\r\n    const allowedCustomMachines: MachineId[] = state.CustomMachines.machines.filter((customMachine) => !customMachine.DependingOn.some((dm) => dm.Type === \"Default\" && disallowedMachines.some((dis) => dis.Id === dm.Id))).map((cm) => ({ Id: cm.Id, Type: \"Custom\" }));\r\n    allowedMachines = allowedMachines.concat(allowedCustomMachines);\r\n\r\n    return {\r\n        allowedMachines\r\n    };\r\n};\r\n\r\nexport const MachineCollection = connect(\r\n    mapStateToProps,\r\n    { AddNewMachine }\r\n)(MachineCollectionInternal);","import React from \"react\";\r\nimport { Props } from \"./Props\";\r\nimport { AppState, GetActiveMachine } from \"../../../Redux/Store\";\r\nimport { SetName, SetDescription, SetColor, SetBorderColor } from \"../../../Redux/CustomMachines/GridSetup/Actions\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass EditMachineStyleInternal extends React.Component<Props> {\r\n    public render() {\r\n        return (\r\n            <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n\r\n                <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                    <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\" }}>\r\n                        <label>Name</label>\r\n                        <input onChange={(event) => this.props.SetName(event.target.value)} value={this.props.MachineStyle.Name}></input>\r\n                    </div>\r\n                    <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\" }}>\r\n\r\n                        <label>Description</label>\r\n                        <input onChange={(event) => this.props.SetDescription(event.target.value)} value={this.props.MachineStyle.Description}></input>\r\n                    </div>\r\n                </div>\r\n                <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n\r\n                    <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\" }}>\r\n\r\n                        <label>Color</label>\r\n                        <input onChange={(event) => this.props.SetColor(event.target.value)} value={this.props.MachineStyle.Color}></input>\r\n                    </div>\r\n                    <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\" }}>\r\n                        <label>BorderColor</label>\r\n                        <input onChange={(event) => this.props.SetBorderColor(event.target.value)} value={this.props.MachineStyle.BorderColor}></input>\r\n                    </div>\r\n                </div>\r\n\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    const activeMachine = GetActiveMachine(state);\r\n\r\n    return { MachineStyle: activeMachine!.Style };\r\n};\r\n\r\nexport const EditMachineStyle = connect(\r\n    mapStateToProps,\r\n    { SetName, SetDescription, SetColor, SetBorderColor }\r\n)(EditMachineStyleInternal);","import React from \"react\";\r\nimport { MachineDisplay } from \"../MachineCollection/StoredMachine/MachineDisplay/MachineDisplay\";\r\nimport { EditMachineStyle } from \"./EditMachineStyle/EditMachineStyle\";\r\nimport { Props } from \"./Props\";\r\nimport { connect } from \"react-redux\";\r\nimport { AppState, GetActiveMachine } from \"../../Redux/Store\";\r\n\r\nconst MachineMenuInternal: React.FC<Props> = (props) => {\r\n\r\n    return (\r\n        <div >\r\n            {props.MachineType !== undefined &&\r\n                <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n                    <MachineDisplay MachineType={props.MachineType} IsDefault={false} />\r\n                    <EditMachineStyle />\r\n                </div>}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    const activeMachine = GetActiveMachine(state);\r\n\r\n    return ({\r\n        MachineType: activeMachine!\r\n    });\r\n};\r\n\r\nexport const MachineMenu = connect(\r\n    mapStateToProps, {}\r\n)(MachineMenuInternal);\r\n","import React from \"react\";\r\nimport { Props } from \"./Props\";\r\nimport { State } from \"./State\";\r\n\r\nexport class MenuItem extends React.Component<Props, State> {\r\n    /**\r\n     *\r\n     */\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.showItem = this.showItem.bind(this);\r\n        this.state = { Showing: false };\r\n    }\r\n\r\n    private showItem() {\r\n        this.setState({ Showing: !this.state.Showing });\r\n    }\r\n\r\n    public render() {\r\n        const style: React.CSSProperties = { borderLeft: \"solid 0.5px\", marginLeft: 10, padding: 10 };\r\n        return (\r\n            <div style={{ marginLeft: 10 }}>\r\n                <button onClick={this.showItem}>{this.state.Showing ? \"Hide \" + this.props.ItemName : \"Show \" + this.props.ItemName}</button>\r\n                {this.state.Showing &&\r\n                    <div style={style}>\r\n                        {this.props.children}\r\n                    </div>}\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { SetColumnNumber, SetRowNumber } from \"../../../Redux/CustomMachines/GridSetup/Actions\";\r\nimport { AppState, GetActiveMachine } from \"../../../Redux/Store\";\r\nimport NumberInput from \"../../NumberInput/NumberInput\";\r\nimport { Props } from \"./Props\";\r\n\r\nconst GridSizeSettingInternal: React.FC<Props> = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <label>Rows:</label>\r\n            <NumberInput value={props.Rows} valueChanged={props.SetRowNumber} />\r\n            <label>Columns:</label>\r\n            <NumberInput value={props.Columns} valueChanged={props.SetColumnNumber} />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    const activeMachine = GetActiveMachine(state);\r\n    return {\r\n        Rows: activeMachine!.Setup.NumberOfRows,\r\n        Columns: activeMachine!.Setup.NumberOfColumns\r\n    };\r\n};\r\n\r\nexport const GridSizeSetting = connect(\r\n    mapStateToProps,\r\n    {\r\n        SetRowNumber, SetColumnNumber\r\n    }\r\n)(GridSizeSettingInternal);","import React from \"react\";\r\nimport { GridSizeSetting } from \"./GridSizeSetting/GridSizeSetting\";\r\nimport { Props } from \"./Props\";\r\nimport { AppState } from \"../../Redux/Store\";\r\nimport { connect } from \"react-redux\";\r\n\r\nexport class SettingsInternal extends React.Component<Props> {\r\n\r\n    public render() {\r\n        return (\r\n            <div>\r\n                <div>\r\n                    {/* <SaveMenu Setup={this.props.Setup} OnDataChanged={this.props.OnDataChanged} OnShowingSetup={this.props.OnShowingSetup} ShowSetup={this.props.ShowSetup} /> */}\r\n                    {this.props.HasActiveMachine && <GridSizeSetting />}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {\r\n        HasActiveMachine: state.CustomMachines.activeMachineId !== undefined\r\n    };\r\n};\r\n\r\nexport const Settings = connect(\r\n    mapStateToProps,\r\n    {\r\n    }\r\n)(SettingsInternal);","import React from \"react\";\r\nimport { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { AppState } from \"../../Redux/Store\";\r\nimport { Dashboard } from \"../Dashboard/Dashboard\";\r\nimport { Grid } from \"../Grid/Grid\";\r\nimport { LevelDisplay } from \"../LevelDisplay/LevelDisplay\";\r\nimport LevelList from \"../LevelList/LevelList\";\r\nimport { MachineCollection } from \"../MachineCollection/MachineCollection\";\r\nimport { MachineMenu } from \"../MachineMenu/MachineMenu\";\r\nimport { MenuItem } from \"../MenuItem/MenuItem\";\r\nimport { Settings } from \"../Settings/Settings\";\r\nimport { State } from \"./State\";\r\nimport { Computer } from \"../../Computing/Computer\";\r\nimport { AddNewMachine } from \"../../Redux/CustomMachines/Actions\";\r\nimport { connect } from \"react-redux\";\r\nimport { Props } from \"./Props\";\r\nimport { ClearMessages } from \"../../Redux/CustomMachines/GridSetup/Actions\";\r\n\r\nclass GameInternal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.handleKeyPress = this.handleKeyPress.bind(this);\r\n\r\n        this.state = {\r\n            Computing: false,\r\n            ShowingSetup: false,\r\n        };\r\n    }\r\n\r\n    public componentDidMount(): void {\r\n        document.addEventListener(\"keyup\", (event) => this.handleKeyPress(event), false);\r\n    }\r\n\r\n    public componentWillUnmount() {\r\n        document.removeEventListener(\"keyup\", (event) => this.handleKeyPress(event), false);\r\n    }\r\n\r\n    private handleKeyPress(event: KeyboardEvent): void {\r\n        switch (event.key) {\r\n            case \" \":\r\n                Computer.StopComputation();\r\n                this.props.ClearMessages();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    public render() {\r\n\r\n        const allowedInputColors = [ChannelColorEnum.Green];\r\n\r\n        return (\r\n            <div style={{ display: \"flex\", flexFlow: \"column wrap\" }}>\r\n                <div>\r\n                    <h2 style={{ textAlign: \"center\" }}>LogicBoxes</h2>\r\n                </div>\r\n                <div style={{ display: \"flex\", flexFlow: \"row wrap\" }}>\r\n                    <div style={{ flex: \"1 1 200px\" }}>\r\n                        <MenuItem ItemName=\"Settings\">\r\n                            <Settings />\r\n                        </MenuItem>\r\n                        <MenuItem ItemName=\"Challenges\">\r\n                            <LevelList />\r\n                        </MenuItem>\r\n                        <LevelDisplay MultipleInputsAllowed={false} AllowedInputs={allowedInputColors} />\r\n\r\n                    </div>\r\n                    {AppState().CustomMachines.activeMachineId === undefined ?\r\n                        <div style={{ display: \"flex\", flex: \"4 1 400px\", flexFlow: \"column\", alignItems: \"center\" }}>\r\n                            <button title={\"Add new machine\"} onClick={this.props.AddNewMachine}>Create new machine</button>\r\n                        </div>\r\n                        :\r\n                        <div style={{ display: \"flex\", flex: \"4 1 400px\", flexFlow: \"column\", alignItems: \"center\" }}>\r\n\r\n                            <MachineMenu />\r\n                            <div style={{ marginTop: 10 }}>\r\n                                <Grid />\r\n                            </div>\r\n                            <div>\r\n                                <Dashboard />\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                    <div style={{ display: \"flex\", flexDirection: \"column\", flexWrap: \"wrap\", flex: \"1 1 200px\", marginLeft: 30 }}>\r\n                        <MachineCollection />\r\n                    </div>\r\n                </div>\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {\r\n        HasActiveMachine: state.CustomMachines.activeMachineId !== undefined\r\n    };\r\n};\r\nexport const Game = connect(\r\n    mapStateToProps,\r\n    { AddNewMachine, ClearMessages }\r\n)(GameInternal);","import React from \"react\";\r\nimport { DndProvider } from \"react-dnd\";\r\nimport HTML5Backend from \"react-dnd-html5-backend\";\r\nimport { Game } from \"./Components/Game/Game\";\r\n\r\nconst App: React.FC = () => {\r\n\r\n  return (\r\n    <DndProvider backend={HTML5Backend}>\r\n      <Game />\r\n    </DndProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\nimport { AppStore } from \"./Redux/Store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={AppStore}>\r\n        <App />\r\n    </Provider>\r\n    , document.getElementById(\"root\"));\r\n"],"sourceRoot":""}