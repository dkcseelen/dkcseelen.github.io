{"version":3,"sources":["Models/ChannelColorsEnum.ts","Components/NumberInput/NumberInput.tsx","Helper/StoreHelper.ts","Redux/GameDataReducer/Actions.ts","Computing/MessageCleaner.ts","MachineStore/DefaultMachines/AddStarMachine.ts","MachineStore/DefaultMachines/AddZeroMachine.ts","MachineStore/DefaultMachines/CompareMachine.ts","MachineStore/DefaultMachines/CopyMachine.ts","MachineStore/DefaultMachines/DeleteMachine.ts","MachineStore/DefaultMachines/GreenStartMachine.ts","MachineStore/DefaultMachines/IncrementMachine.ts","MachineStore/DefaultMachines/MoveMachine.ts","MachineStore/DefaultMachines/RedStartMachine.ts","MachineStore/DefaultMachines/RotateMachine.ts","MachineStore/IMachine.ts","Models/DirectionEnum.ts","Levels/Levels/AppendLength.ts","Redux/GameDataReducer/PlayerReducer/LevelData.ts","Levels/Levels/GetLength.ts","Levels/Levels/GetType.ts","Levels/Levels/IsEmpty.ts","Levels/Levels/KeepNumbers.ts","Levels/Levels/PlusOne.ts","Levels/Levels/RemoveRepeats.ts","Levels/Levels/RotateBackwards.ts","Levels/Levels/Sandbox.ts","Levels/Levels/ReverseLimited.ts","Levels/Levels/Reverse.ts","Levels/Levels/CopyAll.ts","Levels/Levels/Decrement.ts","Levels/Levels/IncrementAll.ts","Levels/Levels/IncrementIncreasing.ts","Levels/Levels/JoinAll.ts","Levels/Levels/MakeTwins.ts","Levels/Levels/RemoveIfDuplicate.ts","Levels/Levels/RemoveUntilRepeat.ts","Levels/Levels/Trigger.ts","Levels/LevelStore.ts","Redux/GameDataReducer/Level/Reducer.ts","Helper/NewChannelSet.ts","Models/CellModel.ts","Components/Grid/Cell/MachineInstance/MachineDrawer/DrawConstants.ts","Helper/AngleHelper.ts","Helper/ColorHelper.ts","Helper/ArrayHelper.ts","Components/Constants.ts","Redux/GameDataReducer/PlayerReducer/GridSetup/GridSetupReducer.ts","Redux/GameDataReducer/PlayerReducer/GridSetup/MachineInstances/MachineInstancesReducer.ts","Helper/SetupHelper.ts","Redux/GameDataReducer/PlayerReducer/CustomMachinesHelper.ts","Redux/GameDataReducer/PlayerReducer/TypeProvider.ts","Helper/Guid.ts","Redux/GameDataReducer/PlayerReducer/PlayerReducer.ts","Models/MachineApi.ts","Redux/GameDataReducer/GameReducer.ts","Redux/Store.ts","MachineStore/DefaultMachines/JoinActor.ts","MachineStore/DefaultMachines/JoinMachine.ts","MachineStore/DefaultMachines/SplitMachine.ts","MachineStore/DefaultMachines/BlueStartMachine.ts","MachineStore/DefaultMachines/YellowStartMachine.ts","MachineStore/MachineStore.ts","Redux/GameDataReducer/Level/Actions.ts","Redux/GameDataReducer/PlayerReducer/GridSetup/Actions.ts","Computing/Computer.ts","Components/Dashboard/Dashboard.tsx","Redux/GameDataReducer/PlayerReducer/GridSetup/MachineInstances/Actions.ts","Components/DragItemTypes.ts","Components/MessageFormatter.ts","Components/Grid/Cell/MachineInstance/ChannelClickArea/ChannelClickArea.tsx","Components/Grid/Cell/MachineInstance/ChannelClickArea/ChannelGroup.tsx","Components/Grid/Cell/MachineInstance/MachineDrawer/MachineDrawer.ts","Components/Grid/Cell/MachineInstance/MachineDrawer/MachineCircleDrawer.ts","Components/Grid/Cell/MachineInstance/MachineDrawer/MachineSquareDrawer.ts","Components/Grid/Cell/MachineInstance/MachineDrawer/MachineCanvasHolder.tsx","Components/Grid/Cell/MachineInstance/InputChannelClickArea/InputChannelClickArea.tsx","Components/Grid/Cell/MachineInstance/MachineInstance.tsx","Components/Grid/Cell/Cell.tsx","Components/Grid/Grid.tsx","Models/OutputStatusEnum.ts","Components/LevelDisplay/TestDisplay/MessageDisplay/MessageDisplay.tsx","Components/LevelDisplay/TestDisplay/TestDisplay.tsx","Components/LevelDisplay/LevelDisplay.tsx","Components/MachineCollection/StoredMachine/MachineDisplay/MachineDisplay.tsx","Redux/GameDataReducer/PlayerReducer/Actions.ts","Components/MachineCollection/StoredMachine/StoredMachine.tsx","Components/MachineCollection/MachineCollection.tsx","Helper/ClickHelper.ts","Components/Game/GameMenu/ChangeSizeComponent.tsx","Components/Game/GameMenu/EditMachine/EditMachine.tsx","Components/Game/GameMenu/GameMenu.tsx","Components/MachineCollection/DraggedMachine/DraggedMachine.tsx","Components/Grid/MovingElement.tsx","Components/Game/Game.tsx","Components/StartMenu/Dialog/Dialog.tsx","Components/StartMenu/StartMenu.tsx","Components/LevelSelectsScreen/LevelPreview/LevelPreview.tsx","Components/LevelSelectsScreen/LevelSelectScreen.tsx","App.tsx","index.tsx"],"names":["ChannelColorEnum","NumberInput","props","style","marginLeft","marginRight","onClick","valueChanged","value","GetActivePlayer","state","players","find","p","id","activePlayerId","GetActiveMachine","player","machines","m","Id","activeMachineId","SwitchScreen","screen","type","RestoreMessage","message","starNumber","seekString","seekLength","length","seekPosition","index","indexOf","indexStar","substring","AddStarMachine","actor","Act","returnValue","content","Content","push","Channel","Green","Promise","resolve","this","Style","BorderColor","Color","Name","Description","Api","InputChannels","OutputChannels","DependingOn","DirectlyDependingOn","AddZeroMachine","CompareMachine","channel","Red","position","CopyMachine","DeleteMachine","GreenStartMachine","IncrementMachine","newMessage","char","String","fromCharCode","charCodeAt","slice","MoveMachine","RedStartMachine","RotateMachine","IsDefaultMachine","IsStartMachine","DirectionEnum","LevelState","AppendLength","AllowedMachines","LevelDescription","MachineDescription","Direction","Right","Status","Tests","inputs","Order","expectedOutputs","Cell","Row","Column","GetLength","Up","GetType","Blue","Down","IsEmpty","UseMachineColor","KeepNumbers","PlusOne","RemoveRepeats","RotateBackwards","Sandbox","ReverseLimited","Reverse","CopyAll","Decrement","IncrementAll","IncrementIncreasing","JoinAll","MakeTwins","RemoveIfDuplicate","RemoveUntilRepeat","Trigger","LevelStore","levels","init","level","l","undefined","Error","levelStore","LevelReducer","draft","action","levelId","GetStore","GetLevel","tests","map","t","actualOutputs","editable","allowedMachines","description","name","LoadLevel","newTest","Math","max","filter","testId","test","outputs","outputMessage","maxOrder","i","newInput","concat","newInputs","order","newOutputs","o","inputsUpdated","input","UpdateTest","forEach","GetNewChannelSet","api","includeInput","outputChannels","inputChannels","direction","color","GetDirectedChannelSet","hasMultipleInputs","inputChannelModels","c","orderedOutputChannels","group","AreEqual","cell","otherCell","DrawConstants","cellSize","aperture","armLength","armAngle","PI","circleRadius","borderWidth","halfSquareSize","shadeOffset","outputSplit","outputLength","outputRadius","outputWidth","outputStartLength","center","apertureAngle","defiatingAngle","protrudingArm","asin","cos","GetAngleFromMonitor","monitor","offsetX","offsetY","xyCoord","xyCoordInit","AppStore","getState","atan2","y","x","GetAngleFromOffsets","getClientOffset","getInitialSourceClientOffset","GetAngleFromDirection","Left","CheckColorString","Option","toLowerCase","GetColorModel","startsWith","colors","split","red","Number","green","blue","enteredColor","GetColorCode","parseInt","GetOpaqueColor","opacity","model","error","GetLighterColor","amount","GetGrayScaleColor","average","GetRandomColor","floor","random","Minimum","array","valueSelector","minimum","Infinity","minimumElement","element","Maximum","maximum","maximumElement","Constants","GridSetupReducer","typeProvider","borderColor","machineFixed","Setup","MachineInstances","mi","machineInstanceId","MachineId","DependingOnDeleted","machine","channelIndex","findIndex","relevantChannels","angle","newChannelArray","inserted","baseAngle","draggedSplit","sin","machineInput","ic","some","maxId","machineInstance","machineId","newCell","GetMachineType","iac","MachineInstancesReducer","setup","deltaRow","deltaColumn","minimumColumn","minimumRow","maximumColumn","maximumRow","excessColumns","MinimumColumns","min","excessRows","MinimumRows","NumberOfColumns","NumberOfRows","ResizeGrid","Move","GetStartMachines","startMachines","UpdateMachineStatus","newOutputChannel","matchingOutput","outputChannel","inputChannel","CellSize","MenuBackGround","TypeProvider","customMachines","MachineStore","customMachine","cm","CreateGuid","Int32Array","window","crypto","getRandomValues","text","s","toString","CreateNewMachine","ExitCells","EnrichState","dependingDirectly","depending","activeMachine","d","machineType","depMachine","DetermineDependencies","exitCells","cells","starts","cellModel","existingChannel","CalculateExits","exitColors","ec","Yellow","newApi","first","second","dependentMachines","dp","dependentMachine","CheckMachineStatus","UpdateStatusDependentMachines","SetApi","GameReducer","produce","messages","movingOutput","levelData","ld","LastUsedMachineId","State","NoMachineLinked","activeLevel","showAnimations","show","stepTime","newMachine","levelModel","InProgress","usedInLevel","directlyDependentMachines","updatedMachines","deletedMachines","dm","PlayerReducer","activePlayer","CheckValidMachinesUsed","isCompleted","every","j","expected","Completed","NonValidMachineUsed","CheckLevelCompleted","gameData","mu","am","createStore","localStorage","setItem","JSON","stringify","getItem","removeItem","parse","getInitialState","__REDUX_DEVTOOLS_EXTENSION__","AppState","JoinActor","greenInput","redInput","returnMessage","JoinMachine","SplitMachine","firstCharacterLength","BlueStartMachine","YellowStartMachine","FindMachine","GetActor","CreateCustomActor","computer","Computer","starIndex","usedStars","lastIndex","numberPart","u","CleanMessage","saveMessage","cleanedMessage","RunInput","then","mm","machineStore","ClearTestOutput","SetMessages","activeSetup","store","HandleNextMessages","bind","CalculateNextMessages","RunComputation","SetDelay","StopComputation","dispatch","orderedOutputs","catch","reason","reject","results","e","messageLocations","GetStartMachine","messageLocation","OrderNewCalculation","callback","args","timeout","clearHandle","setTimeout","cancelComputation","clearTimeout","nextMessages","outputMessages","stepCount","doneMessages","messageCell","cachedMachine","nextContents","nextContent","channelMap","doneMessage","Dashboard","connect","ShowAnimations","StepTime","UpdateStepTime","UpdateShowAnimations","display","justifyContent","width","height","paddingRight","title","flexDirection","ChangeChannel","DragItemTypes","FormatMessage","formattedMessage","ChannelClickArea","useDrag","item","MachineInstanceId","OffsetX","OffsetY","begin","OnClick","end","dropResult","didDrop","outputItem","adjustedAngle","collect","isDragging","drag","preview","channelStyle","widthFactor","marginFactor","heightFactor","pointerEvents","useEffect","getEmptyImage","captureDraggingState","ref","newDirection","ChannelGroup","ChannelModels","heightOffset","margin","baseOffsetX","baseOffsetY","deltaX","deltaY","channelSetStyle","marginTop","rotate","tempBaseOffsetX","rotation","transform","key","OnChanged","MachineDrawer","ctx","innerColor","draggedOutput","draggedDirection","backgroundColor","drawConstants","MachineStyle","sort","MovingOutput","BackgroundColor","DrawBody","DrawInputGradient","outputGroup","DrawOutputGroup","DraggedOutputDrawer","DrawNoInputOutline","startIndex","endIndex","DrawInputOutline","shadowColor","shadowOffsetX","shadowOffsetY","isShade","ClearShadowStyle","filteredOutputs","increasedSplit","draggedIsDrawn","DrawOutputChannel","output","DrawDraggedOutput","offset","firstX","firstY","endX","endY","beginPath","moveTo","gradient","createRadialGradient","addColorStop","arcTo","lineTo","strokeStyle","lineWidth","stroke","mainAngle","outputOffset","differenceAngle","MachineCircleDrawer","arc","fillStyle","fill","startDirection","endDirection","localcenter","startDirectionAngle","startAngle","startInnerX","startInnerY","startOuterX","startOuterY","endDirectionAngle","endAngle","endInnerX","endInnerY","endOuterX","endOuterY","SetShadowStyle","directionAngle","endOuterAngle","startOuterAngle","grd","MachineSquareDrawer","closeSide","farSide","innerClose","innerFar","armProtrudingClose","armProtrudingFar","armWidthClose","armWidthFar","rect","currentDirection","createLinearGradient","MachineCanvasHolder","canvasRef","useRef","current","getContext","clearRect","IsDefault","DrawMachine","InputChannelClickArea","onClicked","event","React","Component","MachineInstance","ownProps","background","MachineInstanceProp","machineStyle","ChangeOwnChannel","ChangeInputChannel","OnRemoved","FixMachine","getDifferenceFromInitialOffset","pow","onInputChannelClick","currentIndex","newChannel","machineSize","borderBottom","boxSizing","machineMargin","oc","cellId","exit","Exit","Message","OnNewMachine","OnMovedMachine","useDrop","accept","drop","itemProps","smallHeigth","smallWidth","border","float","ExitThickness","borderRight","borderLeft","borderTop","marginBottom","OutputStatus","Grid","Rows","Columns","rows","rowIndex","row","columnIndex","borderStyle","MessageDisplay","flexFlow","Input","statusStyle","Fullfilled","Editable","NotFullfilled","NotMatched","Remove","AllowedInputColors","onChange","OnMessageChanged","target","cc","TestDisplay","RemoveTest","RemoveInput","UpdateInput","AddInput","useState","setError","Test","NotChecked","actuals","valid","indexActual","splice","flexGrow","alignSelf","LevelDisplayInternal","Level","AddTest","LevelDisplay","size","MachineDisplay","MachineType","AddNewMachine","StoredMachine","status","LoadCustomMachine","showMenu","changeShow","isDefault","stopPropagation","MachineCollection","GetAllMachines","disallowedMachines","allowedStartMachines","usedStartMachines","nextStartMachine","allowedCustomMachines","dis","storedMachines","overflow","StopPropagation","ChangeSizeComponent","ChangeCellSize","setSize","channels","padding","newSize","currentTarget","className","Close","EditMachine","SetName","SetDescription","SetColor","SetBorderColor","setColor","setBorderColor","dialogBorderColor","colorChanged","borderChanged","cols","GameMenu","hasActiveMachine","dialog","setdialog","alignItems","DraggedMachine","MovingElement","calculatedHeight","calculatedWidth","WindowWidth","leftStart","setLeftStart","WindowHeight","topStart","setTopStart","finalOffset","setFinalOffset","result","offSet","useDragLayer","getItemType","left","top","children","Game","HasActiveMachine","MachineName","ClearMessages","SetMovingOutput","menu","setMenu","innerHeight","setHeight","innerWidth","setWidth","document","addEventListener","handleKeyPress","handleResize","removeEventListener","dragPreviewElement","draggedOutputAngle","allowedInputColors","textAlign","MultipleInputsAllowed","AllowedInputs","Dialog","setName","onKeyUp","close","StartMenu","continueLevel","data","playerName","ChangePlayerName","LevelPreview","Data","showLabel","setShowLabel","onMouseOver","onMouseOut","fontFamily","LevelSelectScreen","levelModels","setLevelModels","GetAllLevels","models","maxColumn","completedLevels","lm","completedLevel","nextLevel","cl","App","backend","HTML5Backend","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.8816cc29.chunk.js","sourcesContent":["export enum ChannelColorEnum {\n    Green = \"green\",\n    Red = \"red\",\n    Blue = \"blue\",\n    Yellow = \"#fff020\",\n}","import React from \"react\";\nimport { Props } from \"./Props\";\n\nconst NumberInput: React.FC<Props> = (props) => {\n    const IncreaseValue: () => void = () => {\n        props.valueChanged(props.value + 1);\n    };\n    const DecreaseValue: () => void = () => {\n        props.valueChanged(props.value - 1);\n    };\n\n    const style: React.CSSProperties = { marginLeft: 5, marginRight: 5 };\n\n    return (<div>\n        <button style={style} onClick={DecreaseValue}>-</button>\n        <label >{props.value}</label>\n        <button style={style} onClick={IncreaseValue}>+</button>\n    </div>);\n};\n\nexport default NumberInput;","import { GameData } from \"../Redux/GameDataReducer/GameModel\";\r\nimport { PlayerModel } from \"../Redux/GameDataReducer/PlayerReducer/PlayerModel\";\r\nimport { CustomMachineModel } from \"../Redux/GameDataReducer/PlayerReducer/GridSetup/CustomMachineModel\";\r\n\r\nexport function GetActivePlayer(state: GameData): PlayerModel {\r\n    return state.players.find((p) => p.id === state.activePlayerId)!;\r\n}\r\n\r\nexport function GetActiveMachine(state: GameData): CustomMachineModel | undefined {\r\n    const player = GetActivePlayer(state);\r\n\r\n    const newActiveMachine = player.machines.find((m) => m.Id === player.activeMachineId);\r\n\r\n    return newActiveMachine;\r\n}","import { MovingOutputChannel } from \"../../Components/DragItemTypes\";\r\nimport { ScreenType } from \"./GameModel\";\r\n\r\ninterface SwitchScreen {\r\n    type: \"SwitchScreen\";\r\n    screen: ScreenType;\r\n}\r\n\r\nexport function SwitchScreen(screen: ScreenType): ActionTypes {\r\n    return {\r\n        type: \"SwitchScreen\",\r\n        screen\r\n    };\r\n}\r\n\r\ninterface ChangePlayerName {\r\n    type: \"ChangePlayerName\";\r\n    name: string;\r\n}\r\n\r\nexport function ChangePlayerName(name: string): ActionTypes {\r\n    return {\r\n        type: \"ChangePlayerName\",\r\n        name\r\n    };\r\n}\r\n\r\ninterface UpdateStepTime {\r\n    type: \"UpdateStepTime\";\r\n    stepTime: number;\r\n}\r\n\r\nexport function UpdateStepTime(stepTime: number): ActionTypes {\r\n    return {\r\n        type: \"UpdateStepTime\",\r\n        stepTime\r\n    };\r\n}\r\n\r\ninterface UpdateShowAnimations {\r\n    type: \"UpdateShowAnimations\";\r\n    show: boolean;\r\n}\r\n\r\nexport function UpdateShowAnimations(show: boolean): ActionTypes {\r\n    return {\r\n        type: \"UpdateShowAnimations\",\r\n        show\r\n    };\r\n}\r\ninterface SetMovingOutput {\r\n    type: \"SetMovingOutput\";\r\n    outputChannel: MovingOutputChannel | undefined;\r\n}\r\n\r\nexport function SetMovingOutput(outputChannel: MovingOutputChannel | undefined): ActionTypes {\r\n    return {\r\n        type: \"SetMovingOutput\",\r\n        outputChannel\r\n    };\r\n}\r\nexport type ActionTypes = UpdateStepTime | UpdateShowAnimations | SwitchScreen\r\n| ChangePlayerName | SetMovingOutput;","export const CleanMessage: (message: string) => [string, number] = (message: string) => {\n    let starIndex = message.indexOf(\"*\");\n    if (starIndex !== -1) {\n        const usedStars: number[] = [];\n        let seekPosition = 0;\n        while (true) {\n            seekPosition = message.indexOf(\"<\", seekPosition);\n            if (seekPosition === -1) {\n                break;\n            }\n\n            const lastIndex = message.indexOf(\">\", seekPosition);\n            const numberPart = message.substring(seekPosition + 1, lastIndex);\n            usedStars.push(parseInt(numberPart, 10));\n            seekPosition = lastIndex;\n        }\n\n        let starNumber = 0;\n\n        // eslint-disable-next-line\n        while (usedStars.some((u) => (u === starNumber))) {\n            starNumber++;\n        }\n\n        let returnMessage = message;\n        do {\n            returnMessage = returnMessage.substring(0, starIndex) + \"<\" + starNumber + \">\" + returnMessage.substring(starIndex + 1);\n            starIndex = returnMessage.indexOf(\"*\");\n        } while (starIndex !== -1);\n\n        return [returnMessage, starNumber];\n    }\n\n    return [message, -1];\n};\n\nexport const RestoreMessage = (message: string, starNumber: number) => {\n    if (starNumber !== -1) {\n        const seekString = \"<\" + starNumber + \">\";\n        const seekLength = seekString.length;\n        // message = message.replace(seekString, \"*\");\n        let seekPosition = 0;\n        let index = message.indexOf(seekString);\n        let indexStar = message.indexOf(\"*\");\n\n        while (index !== -1 || indexStar !== -1) {\n            if (index !== -1 && (indexStar === -1 || index < indexStar)) {\n                message = message.substring(0, index) + \"*\" + message.substring(index + seekLength);\n                seekPosition = index + 1;\n            } else {\n                message = message.substring(0, indexStar) + seekString + message.substring(indexStar + 1);\n                seekPosition = indexStar + seekLength;\n            }\n\n            index = message.indexOf(seekString, seekPosition);\n            indexStar = message.indexOf(\"*\", seekPosition);\n        }\n    }\n    return message;\n};","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\n\r\nexport class AddStarMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            const content = \"*\" + message.Content;\r\n\r\n            returnValue.push({ Content: content, Channel: ChannelColorEnum.Green });\r\n            return Promise.resolve(returnValue);\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Style: {\r\n                BorderColor: \"blue\",\r\n                Color: \"grey\",\r\n                Name: \"Add *\",\r\n                Description: \"Puts a star in front of the string. There is guaranteed not to be a star in the input\"\r\n            },\r\n            Api: {\r\n                InputChannels: [ChannelColorEnum.Green],\r\n                OutputChannels: [ChannelColorEnum.Green],\r\n            },\r\n            DependingOn: [],\r\n            DirectlyDependingOn: []\r\n        };\r\n    }\r\n    public id = \"10\";\r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\n\r\nexport class AddZeroMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            const content = \"0\" + message.Content;\r\n\r\n            returnValue.push({ Content: content, Channel: ChannelColorEnum.Green });\r\n            return Promise.resolve(returnValue);\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Style: {\r\n                BorderColor: \"#fff020\",\r\n                Color: \"darkorange\",\r\n                Name: \"Add 0\",\r\n                Description: \"Puts a zero in front of the string\"\r\n            },\r\n            Api: {\r\n                InputChannels: [ChannelColorEnum.Green],\r\n                OutputChannels: [ChannelColorEnum.Green],\r\n            },\r\n            DependingOn: [],\r\n            DirectlyDependingOn: []\r\n        };\r\n    }\r\n    public id = \"11\";\r\n}\r\n","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\n\r\nexport class CompareMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            let channel: ChannelColorEnum = ChannelColorEnum.Green;\r\n            if (message.Content.length < 2) {\r\n                channel = ChannelColorEnum.Red;\r\n            } else {\r\n                if (message.Content[0] !== \"<\") {\r\n                    if (message.Content[0] !== message.Content[1]) {\r\n                        channel = ChannelColorEnum.Red;\r\n                    }\r\n                } else {\r\n                    const position = message.Content.indexOf(\">\");\r\n                    const starNumber = message.Content.substring(0, position + 1);\r\n                    if (message.Content.length < starNumber.length * 2) {\r\n                        channel = ChannelColorEnum.Red;\r\n                    } else {\r\n                        const secondPart = message.Content.substring(position + 1, position + starNumber.length + 1);\r\n                        if (secondPart !== starNumber) {\r\n                            channel = ChannelColorEnum.Red;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            returnValue.push({ Content: message.Content, Channel: channel });\r\n            return Promise.resolve(returnValue);\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Style: {BorderColor: \"red\",\r\n            Color: \"green\",\r\n            Name: \"Compare\",\r\n            Description: \"Compares the first two characters in the string. If they are the same, exits green. If they are different exits red\"},\r\n            Api: {\r\n                InputChannels: [ChannelColorEnum.Green],\r\n                OutputChannels: [ChannelColorEnum.Green, ChannelColorEnum.Red],\r\n            },\r\n            DependingOn: [],\r\n            DirectlyDependingOn: []\r\n        };\r\n    }\r\n    public id = \"9\";\r\n}\r\n","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\n\r\nexport class CopyMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            let content: string;\r\n            if (message.Content.length < 1) {\r\n                content = \"\";\r\n            } else {\r\n                if (message.Content[0] !== \"<\") {\r\n                    content = message.Content[0] + message.Content;\r\n                } else {\r\n                    const index = message.Content.indexOf(\">\");\r\n                    content = message.Content.substring(0, index + 1) + message.Content;\r\n                }\r\n            }\r\n\r\n            returnValue.push({ Content: content, Channel: ChannelColorEnum.Green });\r\n            return Promise.resolve(returnValue);\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Style: {\r\n                BorderColor: \"green\",\r\n                Color: \"yellow\",\r\n                Name: \"Copy\",\r\n                Description: \"Copies the first character of the string and puts it in front of the string\"\r\n            },\r\n            Api: {\r\n                InputChannels: [ChannelColorEnum.Green],\r\n                OutputChannels: [ChannelColorEnum.Green],\r\n            },\r\n            DependingOn: [],\r\n            DirectlyDependingOn: []\r\n        };\r\n    }\r\n    public id = \"6\";\r\n}\r\n","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\n\r\nexport class DeleteMachine implements IMachine {\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            let content: string;\r\n            if (message.Content.length < 1) {\r\n                content = \"\";\r\n            } else {\r\n                if (message.Content[0] !== \"<\") {\r\n                    content = message.Content.substring(1);\r\n                } else {\r\n                    const index = message.Content.indexOf(\">\");\r\n                    content = message.Content.substring(index + 1);\r\n                }\r\n            }\r\n\r\n            returnValue.push({ Content: content, Channel: ChannelColorEnum.Green });\r\n            return Promise.resolve(returnValue);\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Style: {\r\n                BorderColor: \"firebrick\",\r\n                Color: \"red\",\r\n                Name: \"Delete\",\r\n                Description: \"Deletes the first character of the string\"\r\n            },\r\n            Api: {\r\n                InputChannels: [ChannelColorEnum.Green],\r\n                OutputChannels: [ChannelColorEnum.Green],\r\n            },\r\n            DependingOn: [],\r\n            DirectlyDependingOn: []\r\n        };\r\n    }\r\n    public id = \"7\";\r\n}\r\n","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\n\r\nexport class GreenStartMachine implements IMachine {\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            returnValue.push({ Content: message.Content, Channel: ChannelColorEnum.Green });\r\n            return Promise.resolve(returnValue);\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Style: {\r\n                Color: \"white\",\r\n                BorderColor: \"green\",\r\n                Name: \"Start\",\r\n                Description: \"Starting point of the computation. Acts as a move machine for all other purposes\"\r\n            },\r\n            Api: {\r\n                InputChannels: [ChannelColorEnum.Green],\r\n                OutputChannels: [ChannelColorEnum.Green],\r\n            },\r\n            DependingOn: [],\r\n            DirectlyDependingOn: []\r\n        };\r\n    }\r\n    public readonly id = \"0\";\r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\n\r\nexport class IncrementMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            let newMessage = \"\";\r\n            if (message.Content.length > 0) {\r\n                const char = message.Content[0];\r\n\r\n                if ((char >= \"0\" && char <= \"8\") || (char >= \"a\" && char < \"z\") || (char >= \"A\" && char < \"Z\")) {\r\n                    newMessage = String.fromCharCode(char.charCodeAt(0) + 1) + message.Content.slice(1);\r\n                } else if (char === \"9\") {\r\n                    newMessage = \"0\" + message.Content.slice(1);\r\n                } else if (char === \"z\") {\r\n                    newMessage = \"a\" + message.Content.slice(1);\r\n                } else if (char === \"Z\") {\r\n                    newMessage = \"A\" + message.Content.slice(1);\r\n                } else {\r\n                    newMessage = message.Content;\r\n                }\r\n            }\r\n\r\n            returnValue.push({ Content: newMessage, Channel: ChannelColorEnum.Green });\r\n            return Promise.resolve(returnValue);\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Style: {\r\n                BorderColor: \"DodgerBlue\",\r\n                Color: \"MediumVioletRed\",\r\n                Name: \"Increment\",\r\n                Description: \"Increases a number in front of the string by 1, makes as letter the next letter in the alphabet. 9 becomes 0, z becomes a. All other starting characters are not changed\"\r\n            },\r\n            Api: {\r\n                InputChannels: [ChannelColorEnum.Green],\r\n                OutputChannels: [ChannelColorEnum.Green],\r\n            },\r\n            DependingOn: [],\r\n            DirectlyDependingOn: []\r\n        };\r\n    }\r\n    public id = \"12\";\r\n}\r\n","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\n\r\nexport class MoveMachine implements IMachine {\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            returnValue.push({ Content: message.Content, Channel: ChannelColorEnum.Green });\r\n            return Promise.resolve(returnValue);\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Style: {\r\n                Color: \"green\",\r\n                BorderColor: \"lightgreen\",\r\n                Name: \"Move\",\r\n                Description: \"Does nothing with the string, only used to get the message to the right place\"\r\n            },\r\n            Api: {\r\n                InputChannels: [ChannelColorEnum.Green],\r\n                OutputChannels: [ChannelColorEnum.Green],\r\n            },\r\n            DependingOn: [],\r\n            DirectlyDependingOn: []\r\n        };\r\n    }\r\n    public readonly id = \"5\";\r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\n\r\nexport class RedStartMachine implements IMachine {\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            returnValue.push({ Content: message.Content, Channel: ChannelColorEnum.Green });\r\n            return Promise.resolve(returnValue);\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Style: {\r\n                Color: \"white\",\r\n                BorderColor: \"red\",\r\n                Name: \"Start\",\r\n                Description: \"Starting point of the computation. Acts as a move machine for all other purposes\"\r\n            },\r\n            Api: {\r\n                InputChannels: [ChannelColorEnum.Green],\r\n                OutputChannels: [ChannelColorEnum.Green],\r\n            },\r\n            DependingOn: [],\r\n            DirectlyDependingOn: []\r\n        };\r\n    }\r\n    public readonly id= \"1\";\r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\n\r\nexport class RotateMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            let content: string;\r\n            if (message.Content.length < 2) {\r\n                content = message.Content;\r\n            } else {\r\n                if (message.Content[0] !== \"<\") {\r\n                    content = message.Content.substring(1) + message.Content.substring(0, 1);\r\n                } else {\r\n                    const index = message.Content.indexOf(\">\");\r\n                    content = message.Content.substring(index + 1) + message.Content.substring(0, index + 1);\r\n                }\r\n            }\r\n\r\n            returnValue.push({ Content: content, Channel: ChannelColorEnum.Green });\r\n            return Promise.resolve(returnValue);\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Style: {\r\n                BorderColor: \"blue\",\r\n                Color: \"cyan\",\r\n                Name: \"Rotate\",\r\n                Description: \"Removes the first character of the string, and adds it to the end of the string\"\r\n            },\r\n            Api: {\r\n                InputChannels: [ChannelColorEnum.Green],\r\n                OutputChannels: [ChannelColorEnum.Green],\r\n            },\r\n            DependingOn: [],\r\n            DirectlyDependingOn: []\r\n        };\r\n    }\r\n    public id = \"8\";\r\n}\r\n","import { IActor } from \"./IActor\";\r\nimport { IMachineType } from \"./IMachineType\";\r\n\r\nexport interface IMachine {\r\n    GetActor(): IActor;\r\n    GetType(): IMachineType;\r\n    id: string;\r\n}\r\n\r\nexport function IsDefaultMachine(id: string): boolean {\r\n    return id.length < 6;\r\n}\r\n\r\nexport function IsStartMachine(id: string): boolean {\r\n    return id === \"0\" || id === \"1\" || id === \"2\" || id === \"3\";\r\n}","export enum DirectionEnum {\n    Up,\n    Right,\n    Down,\n    Left\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const AppendLength: LevelModel = {\r\n    AllowedMachines: [\"0\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"],\r\n    LevelDescription: \"The machine should append the length of the input string to the string\",\r\n    MachineDescription: \"Appends the length of the input string to the string\",\r\n    Name: \"AppendLength\",\r\n    Id: \"13\",\r\n    Style: {\r\n        Color: \"Green\",\r\n        BorderColor: \"Blue\",\r\n    },\r\n    InputChannels: [],\r\n    OutputChannels: [\r\n        { Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Right, Status: \"Exists\" },\r\n    ],\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"four\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"four4\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"aabccd\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"aabccd6\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"1\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"11\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"0\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"This is hard\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"This is hard12\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"This might even be harder\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"This might even be harder25\" }]\r\n        }\r\n    ],\r\n    Cell: {\r\n        Row: 1,\r\n        Column: 7\r\n    }\r\n};","export interface LevelData {\r\n    readonly Id: string;\r\n    readonly State: LevelState;\r\n    readonly LastUsedMachineId: string | undefined;\r\n}\r\n\r\nexport enum LevelState {\r\n    NoMachineLinked,\r\n    InProgress,\r\n    NonValidMachineUsed,\r\n    Completed\r\n}\r\n\r\n","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const GetLength: LevelModel = {\r\n    AllowedMachines: [\"0\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"],\r\n    LevelDescription: \"The machine should return the length of the input string\",\r\n    MachineDescription: \"Returns the length of the input string\",\r\n    Name: \"GetLength\",\r\n    Id: \"15\",\r\n    Style: {\r\n        Color: \"Green\",\r\n        BorderColor: \"Blue\",\r\n    },\r\n    InputChannels: [],\r\n    OutputChannels: [\r\n        { Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Up, Status: \"Exists\" },\r\n    ],\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"four\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"4\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"aabccd\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"6\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"1\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"1\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"0\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"This is hard\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"12\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"This might even be harder\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"25\" }]\r\n        }\r\n    ],\r\n    Cell: {\r\n        Row: 2,\r\n        Column: 7\r\n    }\r\n};","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const GetType: LevelModel = {\r\n    AllowedMachines: [\"0\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"],\r\n    LevelDescription: \"The machine should exit green if the first character is a number, exit red if it is a letter and exit blue otherwise\",\r\n    MachineDescription: \"Exits green if the first character is a number, exits red if it is a letter and exits blue otherwise\",\r\n    Name: \"GetType\",\r\n    Id: \"16\",\r\n    Style: {\r\n        Color: \"Green\",\r\n        BorderColor: \"Blue\",\r\n    },\r\n    InputChannels: [],\r\n    OutputChannels: [{ Channel: ChannelColorEnum.Blue, Direction: DirectionEnum.Down, Status: \"Exists\" },\r\n    { Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Right, Status: \"Exists\" }\r\n    ],\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"42\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"42\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"this starts with a letter\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Red, Content: \"this starts with a letter\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \",#@%!\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Blue, Content: \",#@%!\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Blue, Content: \"\" }]\r\n        }\r\n    ],\r\n    Cell: {\r\n        Row: 2,\r\n        Column: 3\r\n    }\r\n};","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const IsEmpty: LevelModel = {\r\n    AllowedMachines: [\"0\", \"5\", \"6\", \"7\", \"9\"],\r\n    LevelDescription: \"The machine should exit green if the message is empty, otherwise exit red\",\r\n    MachineDescription: \"Exits green if the message is empty, otherwise exits red\",\r\n    Name: \"IsEmpty\",\r\n    Id: \"1\",\r\n    Style: {\r\n        Color: \"OrangeRed\",\r\n        BorderColor: \"ForestGreen\",\r\n    },\r\n    InputChannels: [ { Direction: DirectionEnum.Right, Channel: ChannelColorEnum.Green, Status: \"Exists\" , UseMachineColor: true }],\r\n    OutputChannels: [\r\n        { Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Down, Status: \"Exists\" },\r\n    ],\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abc\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Red, Content: \"abc\" }]\r\n        }\r\n    ],\r\n    Cell: {\r\n        Row: 0,\r\n        Column: 0\r\n    }\r\n};","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const KeepNumbers: LevelModel = {\r\n    AllowedMachines: [\"0\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"],\r\n    LevelDescription: \"The machine should keep all numbers in the input string, and remove all other characters\",\r\n    MachineDescription: \"Keeps all numbers in the input string, and removes all other characters\",\r\n\r\n    Name: \"KeepNumbers\",\r\n    Id: \"6\",\r\n    Style: {\r\n        Color: \"Green\",\r\n        BorderColor: \"Blue\",\r\n    },\r\n    InputChannels: [],\r\n    OutputChannels: [\r\n        { Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Down, Status: \"Exists\" },\r\n    ],\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"42\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"42\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"fortytwo\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"1 and 1 is\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"11\" }]\r\n        }\r\n    ],\r\n    Cell: {\r\n        Row: 3,\r\n        Column: 3\r\n    }\r\n};","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const PlusOne: LevelModel = {\r\n    AllowedMachines: [\"0\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"],\r\n    LevelDescription: \"The machine should increase the leading input number by 1\",\r\n    MachineDescription: \"Increase the input number by 1\",\r\n\r\n    Name: \"PlusOne\",\r\n    Id: \"7\",\r\n    Style: {\r\n        Color: \"Green\",\r\n        BorderColor: \"Blue\",\r\n    },\r\n    InputChannels: [],\r\n    OutputChannels: [\r\n        { Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Right, Status: \"Exists\" },\r\n    ],\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"4\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"5\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"0 and some noise 2\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"1 and some noise 2\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"42\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"43\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"9\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"10\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"39\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"40\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"23999999 9\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"24000000 9\" }]\r\n        }\r\n    ],\r\n    Cell: {\r\n        Row: 2,\r\n        Column: 6\r\n    }\r\n};","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const RemoveRepeats: LevelModel = {\r\n    AllowedMachines: [\"0\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"],\r\n    LevelDescription: \"The machine should remove all repeating characters from the input string\",\r\n    MachineDescription: \"Removes all repeating characters from the input string\",\r\n\r\n    Name: \"RemoveRepeats\",\r\n    Id: \"8\",\r\n    Style: {\r\n        Color: \"Green\",\r\n        BorderColor: \"Blue\",\r\n    },\r\n    InputChannels: [],\r\n    OutputChannels: [\r\n        { Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Right, Status: \"Exists\" },\r\n    ],\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"aabc\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abc\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"aaaabccc\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abc\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"a\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"a\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"hhhhhhhhhiiiii wwwworllllldddddddd\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"hi world\" }]\r\n        }\r\n    ],\r\n    Cell: {\r\n        Row: 1,\r\n        Column: 1\r\n    }\r\n};","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const RotateBackwards: LevelModel = {\r\n    AllowedMachines: [\"0\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"],\r\n    LevelDescription: \"The machine should put the last character in front of the string\",\r\n    MachineDescription: \"Rotates the last character to the front of the string\",\r\n\r\n    Name: \"RotateBackwards\",\r\n    Id: \"11\",\r\n    Style: {\r\n        Color: \"Green\",\r\n        BorderColor: \"Blue\",\r\n    },\r\n    InputChannels: [],\r\n    OutputChannels: [\r\n        { Channel: ChannelColorEnum.Red, Direction: DirectionEnum.Right, Status: \"Exists\" },\r\n        { Channel: ChannelColorEnum.Blue, Direction: DirectionEnum.Up, Status: \"Exists\" },\r\n        { Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Down, Status: \"Exists\" },\r\n    ],\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abc\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"cab\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"otater\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"rotate\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"a\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"a\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"ello world!H\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"Hello world!\" }]\r\n        }\r\n    ],\r\n    Cell: {\r\n        Row: 2,\r\n        Column: 5\r\n    }\r\n};","import { LevelModel } from \"../LevelModel\";\r\n\r\nexport const Sandbox: LevelModel = {\r\n    AllowedMachines: [\"0\", \"1\", \"2\", \"3\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\"],\r\n    LevelDescription: \"Sandbox level, no specific goals\",\r\n    MachineDescription: \"\",\r\n    Name: \"Sandbox\",\r\n    Id: \"12\",\r\n    Style: {\r\n        Color: \"Green\",\r\n        BorderColor: \"Blue\",\r\n    },\r\n    InputChannels: [],\r\n    OutputChannels: [],\r\n    Tests: [],\r\n    Cell: {\r\n        Row: -1,\r\n        Column: -1\r\n    }\r\n};","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const ReverseLimited: LevelModel = {\r\n    AllowedMachines: [\"0\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"],\r\n    LevelDescription: \"The machine should reverse the characters from the string. Input are only lowercase letters. With limited number of machines at your disposal, this is VERY HARD\",\r\n    MachineDescription: \"Reverses the characters from the string. Input can only consist of lowercase letters\",\r\n\r\n    Name: \"ReverseLimited\",\r\n    Id: \"10\",\r\n    Style: {\r\n        Color: \"Green\",\r\n        BorderColor: \"Blue\",\r\n    },\r\n    InputChannels: [],\r\n    OutputChannels: [\r\n        { Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Right, Status: \"Exists\" },\r\n    ],\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abc\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"cba\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"a\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"a\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"esrever\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"reverse\" }]\r\n        }\r\n    ],\r\n    Cell: {\r\n        Row: 1,\r\n        Column: 9\r\n    }\r\n};","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const Reverse: LevelModel = {\r\n    AllowedMachines: [\"0\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"12\", \"13\", \"14\"],\r\n    LevelDescription: \"The machine should reverse the characters from the input string\",\r\n    MachineDescription: \"Reverses the characters from the input string\",\r\n\r\n    Name: \"Reverse\",\r\n    Id: \"9\",\r\n    Style: {\r\n        Color: \"Green\",\r\n        BorderColor: \"Blue\",\r\n    },\r\n    InputChannels: [],\r\n    OutputChannels: [{ Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Right, Status: \"Exists\" },\r\n    ],\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abc\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"cba\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"a\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"a\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"desrever saw sihT\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"This was reversed\" }]\r\n        }\r\n    ],\r\n    Cell: {\r\n        Row: 4,\r\n        Column: 6\r\n    }\r\n};","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const CopyAll: LevelModel = {\r\n    AllowedMachines: [\"0\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\"],\r\n    LevelDescription: \"The machine should exit the input both to green and red\",\r\n    MachineDescription: \"Exits the input both to green and red\",\r\n    Name: \"CopyAll\",\r\n    Id: \"14\",\r\n    Style: {\r\n        Color: \"Green\",\r\n        BorderColor: \"Blue\",\r\n    },\r\n    InputChannels: [],\r\n    OutputChannels: [{ Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Down, Status: \"Exists\" },\r\n    ],\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" },\r\n            { Order: 0, Channel: ChannelColorEnum.Red, Content: \"\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"a\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"a\" },\r\n            { Order: 0, Channel: ChannelColorEnum.Red, Content: \"a\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abc\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abc\" },\r\n            { Order: 0, Channel: ChannelColorEnum.Red, Content: \"abc\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"aabcc\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"aabcc\" },\r\n            { Order: 0, Channel: ChannelColorEnum.Red, Content: \"aabcc\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"Copied\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"Copied\" },\r\n            { Order: 0, Channel: ChannelColorEnum.Red, Content: \"Copied\" }]\r\n        }\r\n    ],\r\n    Cell: {\r\n        Row: 4,\r\n        Column: 8\r\n    }\r\n};","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const Decrement: LevelModel = {\r\n    AllowedMachines: [\"0\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"12\"],\r\n    LevelDescription: \"The machine should decrement the leading character, turning 0 into 9, a/A into z/Z\",\r\n    MachineDescription: \"Decrements the leading character\",\r\n\r\n    Name: \"Decrement\",\r\n    Id: \"20\",\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"bbc\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abc\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"4321\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"3321\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"0\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"9\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"AA\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"ZA\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"@bc\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"@bc\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"Iello world\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"Hello world\" }]\r\n        }\r\n    ],\r\n    Style: {\r\n        Color: \"Green\",\r\n        BorderColor: \"Blue\",\r\n    },\r\n    InputChannels: [],\r\n    OutputChannels: [{ Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Right, Status: \"Exists\" },\r\n    ],\r\n    Cell: {\r\n        Row: 2,\r\n        Column: 4\r\n    }\r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const IncrementAll: LevelModel = {\r\n    AllowedMachines: [\"0\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"12\"],\r\n    LevelDescription: \"The machine should increment all characters\",\r\n    MachineDescription: \"Increments all characters\",\r\n\r\n    Name: \"IncrementAll\",\r\n    Id: \"21\",\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abc\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"bcd\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"987\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"098\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"1+1=3\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"2+2=4\" }]\r\n        }\r\n    ],\r\n    Style: {\r\n        Color: \"Green\",\r\n        BorderColor: \"Blue\",\r\n    },\r\n    InputChannels: [],\r\n    OutputChannels: [{ Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Right, Status: \"Exists\" },\r\n    ],\r\n    Cell: {\r\n        Row: 2,\r\n        Column: 2\r\n    }\r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const IncrementIncreasing: LevelModel = {\r\n    AllowedMachines: [\"0\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"12\"],\r\n    LevelDescription: \"The machine should increment the first character 0 times, the second character once, the third twice etcetera. Characters that cannot be incremented do not count\",\r\n    MachineDescription: \"Increments the first character 0 times, the second character once, the third twice, etcetera. Characters that cannot be incremented do not count\",\r\n\r\n    Name: \"IncrementIncreasing\",\r\n    Id: \"22\",\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"aaa\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abc\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"5432109\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"5555555\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"1-A2@q\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"1-B4@t\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"hdjik rikdu!\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"hello world!\" }]\r\n        }\r\n    ],\r\n    Style: {\r\n        Color: \"Green\",\r\n        BorderColor: \"Blue\",\r\n    },\r\n    InputChannels: [],\r\n    OutputChannels: [{ Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Up, Status: \"Exists\" },\r\n    ],\r\n    Cell: {\r\n        Row: 1,\r\n        Column: 5\r\n    }\r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const JoinAll: LevelModel = {\r\n    AllowedMachines: [\"0\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"12\", \"13\", \"14\"],\r\n    LevelDescription: \"The machine should store the input from green, appending it to any previously stored message. On red input, it should exit the stored message appended with the input to green, clearing the stored message\",\r\n    MachineDescription: \"Stores input from green,appending it to any previously stored message. On red input it exits the stored message appended with the input to green\",\r\n\r\n    Name: \"JoinAll\",\r\n    Id: \"24\",\r\n    Tests: [\r\n        {\r\n            inputs: [\r\n                { Order: 0, Channel: ChannelColorEnum.Green, Content: \"a\" },\r\n                { Order: 1, Channel: ChannelColorEnum.Green, Content: \"b\" },\r\n                { Order: 2, Channel: ChannelColorEnum.Red, Content: \"c\" }\r\n            ],\r\n            expectedOutputs: [\r\n                { Order: 2, Channel: ChannelColorEnum.Green, Content: \"abc\" },\r\n            ]\r\n        },\r\n        {\r\n            inputs: [\r\n                { Order: 0, Channel: ChannelColorEnum.Green, Content: \"ab\" },\r\n                { Order: 1, Channel: ChannelColorEnum.Green, Content: \"cd\" },\r\n                { Order: 2, Channel: ChannelColorEnum.Red, Content: \"ef\" },\r\n                { Order: 3, Channel: ChannelColorEnum.Green, Content: \"AB\" },\r\n                { Order: 4, Channel: ChannelColorEnum.Green, Content: \"CD\" },\r\n                { Order: 5, Channel: ChannelColorEnum.Red, Content: \"EF\" },\r\n            ],\r\n            expectedOutputs: [\r\n                { Order: 2, Channel: ChannelColorEnum.Green, Content: \"abcdef\" },\r\n                { Order: 5, Channel: ChannelColorEnum.Green, Content: \"ABCDEF\" }\r\n            ]\r\n        },\r\n        {\r\n            inputs: [\r\n                { Order: 0, Channel: ChannelColorEnum.Red, Content: \"\" },\r\n                { Order: 1, Channel: ChannelColorEnum.Green, Content: \"\" },\r\n                { Order: 2, Channel: ChannelColorEnum.Red, Content: \"ab\" },\r\n                { Order: 3, Channel: ChannelColorEnum.Red, Content: \"\" },\r\n            ],\r\n            expectedOutputs: [\r\n                { Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" },\r\n                { Order: 2, Channel: ChannelColorEnum.Green, Content: \"ab\" },\r\n                { Order: 3, Channel: ChannelColorEnum.Green, Content: \"\" }\r\n            ]\r\n        },\r\n        {\r\n            inputs: [\r\n                { Order: 0, Channel: ChannelColorEnum.Green, Content: \"Ma\" },\r\n                { Order: 1, Channel: ChannelColorEnum.Green, Content: \"rco\" },\r\n                { Order: 2, Channel: ChannelColorEnum.Red, Content: \"?\" },\r\n                { Order: 3, Channel: ChannelColorEnum.Green, Content: \"Po\" },\r\n                { Order: 4, Channel: ChannelColorEnum.Green, Content: \"lo\" },\r\n                { Order: 5, Channel: ChannelColorEnum.Red, Content: \"!\" },\r\n            ],\r\n            expectedOutputs: [\r\n                { Order: 2, Channel: ChannelColorEnum.Green, Content: \"Marco?\" },\r\n                { Order: 5, Channel: ChannelColorEnum.Green, Content: \"Polo!\" }\r\n            ]\r\n        },\r\n    ],\r\n    Style: {\r\n        Color: \"Green\",\r\n        BorderColor: \"Blue\",\r\n    },\r\n    InputChannels: [],\r\n    OutputChannels: [{ Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Right, Status: \"Exists\" },\r\n    ],\r\n    Cell: {\r\n        Row: 4,\r\n        Column: 7\r\n    }\r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const MakeTwins: LevelModel = {\r\n    AllowedMachines: [\"0\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"],\r\n    LevelDescription: \"The machine should exit the string with each character repeated once\",\r\n    MachineDescription: \"Makes sure that each character is repeated once\",\r\n\r\n    Name: \"MakeTwins\",\r\n    Id: \"18\",\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abc\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"aabbcc\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"aaabcc\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"aabbcc\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"hello world\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"hheelloo  wwoorrlldd\" }]\r\n        }\r\n    ],\r\n    Style: {\r\n        Color: \"Green\",\r\n        BorderColor: \"Blue\",\r\n    },\r\n    InputChannels: [],\r\n    OutputChannels: [{ Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Down, Status: \"Exists\" },\r\n    ],\r\n    Cell: {\r\n        Row: 1,\r\n        Column: 2\r\n    }\r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const RemoveIfDuplicate: LevelModel = {\r\n    AllowedMachines: [\"0\", \"5\", \"6\", \"7\", \"9\"],\r\n    LevelDescription: \"If the first characters are duplicates, the machine should clear all the duplicates\",\r\n    MachineDescription: \"If the first characters are duplicates, clears those duplicates\",\r\n\r\n    Name: \"RemoveIfDuplicate\",\r\n    Id: \"17\",\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"aabc\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"bc\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abc\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abc\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"a\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"a\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"hhhhhhhhello world\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"ello world\" }]\r\n        }\r\n    ],\r\n    Style: {\r\n        Color: \"Green\",\r\n        BorderColor: \"Blue\",\r\n    },\r\n    InputChannels: [],\r\n    OutputChannels: [{ Channel: ChannelColorEnum.Blue, Direction: DirectionEnum.Down, Status: \"Exists\" },\r\n    { Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Right, Status: \"Exists\" }\r\n    ],\r\n    Cell: {\r\n        Row: 1,\r\n        Column: 0\r\n    }\r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const RemoveUntilRepeat: LevelModel = {\r\n    AllowedMachines: [\"0\", \"5\", \"6\", \"7\", \"9\"],\r\n    LevelDescription: \"The machine should delete all characters before the first repeated character\",\r\n    MachineDescription: \"Deletes all character before the first repeated character\",\r\n\r\n    Name: \"RemoveUntilRepeat\",\r\n    Id: \"19\",\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abbc\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"bbc\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abca\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"22\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"22\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"1\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"hello world\" }],\r\n            expectedOutputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"llo world\" }]\r\n        }\r\n    ],\r\n    Style: {\r\n        Color: \"Green\",\r\n        BorderColor: \"Blue\",\r\n    },\r\n    InputChannels: [],\r\n    OutputChannels: [{ Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Down, Status: \"Exists\" },\r\n    ],\r\n    Cell: {\r\n        Row: 2,\r\n        Column: 0\r\n    }\r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { LevelModel } from \"../LevelModel\";\r\n\r\nexport const Trigger: LevelModel = {\r\n    AllowedMachines: [\"0\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"12\", \"13\"],\r\n    LevelDescription: \"The machine should exit the input to green, and exit an empty message to red\",\r\n    MachineDescription: \"Exits the input to green, exits an empty message to red\",\r\n\r\n    Name: \"Trigger\",\r\n    Id: \"23\",\r\n    Tests: [\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"abc\" }],\r\n            expectedOutputs: [\r\n                { Order: 0, Channel: ChannelColorEnum.Green, Content: \"abc\" },\r\n                { Order: 0, Channel: ChannelColorEnum.Red, Content: \"\" }\r\n            ]\r\n        },\r\n        {\r\n            inputs: [{ Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" }],\r\n            expectedOutputs: [\r\n                { Order: 0, Channel: ChannelColorEnum.Green, Content: \"\" },\r\n                { Order: 0, Channel: ChannelColorEnum.Red, Content: \"\" }\r\n            ]\r\n        }\r\n    ],\r\n    Style: {\r\n        Color: \"Green\",\r\n        BorderColor: \"Blue\",\r\n    },\r\n    InputChannels: [],\r\n    OutputChannels: [{ Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Right, Status: \"Exists\" },\r\n    ],\r\n    Cell: {\r\n        Row: 4,\r\n        Column: 5\r\n    }\r\n}","import { LevelModel } from \"./LevelModel\";\nimport { AppendLength } from \"./Levels/AppendLength\";\nimport { GetLength } from \"./Levels/GetLength\";\nimport { GetType } from \"./Levels/GetType\";\nimport { IsEmpty } from \"./Levels/IsEmpty\";\nimport { KeepNumbers } from \"./Levels/KeepNumbers\";\nimport { PlusOne } from \"./Levels/PlusOne\";\nimport { RemoveRepeats } from \"./Levels/RemoveRepeats\";\nimport { RotateBackwards } from \"./Levels/RotateBackwards\";\nimport { Sandbox } from \"./Levels/Sandbox\";\nimport { ReverseLimited } from \"./Levels/ReverseLimited\";\nimport { Reverse } from \"./Levels/Reverse\";\nimport { CopyAll } from \"./Levels/CopyAll\";\nimport { Decrement } from \"./Levels/Decrement\";\nimport { IncrementAll } from \"./Levels/IncrementAll\";\nimport { IncrementIncreasing } from \"./Levels/IncrementIncreasing\";\nimport { JoinAll } from \"./Levels/JoinAll\";\nimport { MakeTwins } from \"./Levels/MakeTwins\";\nimport { RemoveIfDuplicate } from \"./Levels/RemoveIfDuplicate\";\nimport { RemoveUntilRepeat } from \"./Levels/RemoveUntilRepeat\";\nimport { Trigger } from \"./Levels/Trigger\";\n\n\nexport class LevelStore {\n    private static levelStore: LevelStore;\n    private levels: LevelModel[];\n\n    private constructor() {\n        this.levels = [];\n        this.init();\n    }\n\n    public static GetStore(): LevelStore {\n        if (LevelStore.levelStore === undefined) {\n            LevelStore.levelStore = new LevelStore();\n        }\n\n        return LevelStore.levelStore;\n    }\n\n    private init(): void {\n        this.levels.push(IsEmpty);\n        this.levels.push(RemoveRepeats);\n        this.levels.push(GetType);\n        this.levels.push(KeepNumbers);\n        this.levels.push(GetLength);\n        this.levels.push(AppendLength);\n        this.levels.push(RotateBackwards);\n        this.levels.push(PlusOne);\n        this.levels.push(ReverseLimited);\n        this.levels.push(Reverse);\n        this.levels.push(CopyAll);\n        this.levels.push(Sandbox);\n        this.levels.push(Decrement);\n        this.levels.push(IncrementAll);\n        this.levels.push(IncrementIncreasing);\n        this.levels.push(JoinAll);\n        this.levels.push(MakeTwins);\n        this.levels.push(RemoveIfDuplicate, RemoveUntilRepeat, Trigger)\n    }\n\n    public GetAllLevels(): LevelModel[] {\n        return this.levels;\n    }\n\n    public GetLevel(id: string): LevelModel {\n        const level = this.levels.find((l) => l.Id === id);\n        if (level === undefined) {\n            throw Error(`Unable to find level with id '${id}'`)\n        }\n\n        return level;\n    }\n}","import { LevelStore } from \"../../../Levels/LevelStore\";\r\nimport { LevelActionTypes } from \"./Actions\";\r\nimport { LevelStateModel } from \"./LevelStateModel\";\r\nimport { TestStateModel } from \"./TestStateModel\";\r\nimport { ChannelColorEnum } from \"../../../Models/ChannelColorsEnum\";\r\nimport { OrderedMessageModel } from \"../../../Models/OrderedMessageModel\";\r\nimport { Draft } from \"immer\";\r\nimport { Actions } from \"../../Actions\";\r\n\r\nexport function LevelReducer(draft: Draft<LevelStateModel> | undefined, action: Actions): LevelStateModel | undefined {\r\n    if (action.type === \"LoadLevelActionType\") {\r\n        return LoadLevel(action.id);\r\n    }\r\n\r\n    if (draft === undefined) {\r\n        return undefined;\r\n    }\r\n\r\n    switch (action.type) {\r\n        case \"AddTestActionType\":\r\n            const newTest: TestStateModel = {\r\n                actualOutputs: [],\r\n                expectedOutputs: [],\r\n                inputs: [{ Channel: ChannelColorEnum.Green, Content: \"\", Order: 0 }],\r\n                editable: true,\r\n                id: Math.max(...draft.tests.map((t) => t.id), -1) + 1\r\n            };\r\n            draft.tests.push(newTest);\r\n            break;\r\n        case \"RemoveTestActionType\":\r\n            draft.tests = draft.tests.filter((t) => t.id !== action.testId);\r\n            break;\r\n        case \"ReportOutputActionType\":\r\n        case \"ClearTestOutputActionType\":\r\n        case \"AddInputActionType\":\r\n        case \"RemoveInputActionType\":\r\n        case \"UpdateInputActionType\":\r\n                  const tests = draft.tests.map((t) => {\r\n                if (t.id === action.testId) {\r\n                    return UpdateTest(t, action);\r\n                } else {\r\n                    return t;\r\n                }\r\n            });\r\n            draft.tests = tests;\r\n            break;\r\n        case \"AddNewMachineActionType\":\r\n        case \"ChannelChangedActionType\":\r\n        case \"DeleteMachineActionType\":\r\n        case \"FixMachineActionType\":\r\n        case \"MachineAddedActionType\":\r\n        case \"MachineMovedActionType\":\r\n        case \"MachineRemovedActionType\":\r\n            draft.tests.forEach((t) => {\r\n                t.actualOutputs = undefined;\r\n            });\r\n            break;\r\n    }\r\n\r\n    return draft;\r\n};\r\n\r\nfunction LoadLevel(levelId: string): LevelStateModel {\r\n    const level = LevelStore.GetStore().GetLevel(levelId);\r\n    const tests = level.Tests.length > 0 ? level.Tests.map((t, index) => ({ ...t, actualOutputs: undefined, id: index, editable: false })) :\r\n        [{ actualOutputs: undefined, inputs: [{ Channel: ChannelColorEnum.Green, Content: \"\", Order: 0 }], expectedOutputs: [], id: 0, editable: true }];\r\n    const returnValue: LevelStateModel = {\r\n        allowedMachines: level.AllowedMachines,\r\n        description: level.LevelDescription,\r\n        name: level.Name,\r\n        id: level.Id,\r\n        tests\r\n    };\r\n    return returnValue;\r\n}\r\n\r\nfunction UpdateTest(test: Draft<TestStateModel>, action: LevelActionTypes): TestStateModel {\r\n    switch (action.type) {\r\n        case \"ReportOutputActionType\":\r\n            if (test.actualOutputs === undefined) {\r\n                test.actualOutputs = [];\r\n            }\r\n            const outputs = test.actualOutputs.slice();\r\n            outputs.push(action.outputMessage);\r\n            return { ...test, actualOutputs: outputs };\r\n        case \"ClearTestOutputActionType\":\r\n            return { ...test, actualOutputs: [] };\r\n        case \"AddInputActionType\":\r\n            const maxOrder = Math.max(...test.inputs.map((i) => i.Order), -1) + 1;\r\n            const newInput: OrderedMessageModel = {\r\n                Channel: ChannelColorEnum.Green, Content: \"\", Order: maxOrder\r\n            };\r\n            return { ...test, inputs: test.inputs.concat(newInput) };\r\n        case \"RemoveInputActionType\":\r\n\r\n            const filteredInputs = test.inputs.filter((i) => i.Order !== action.order);\r\n            const newInputs = filteredInputs.map((i, index) => ({ ...i, Order: index }));\r\n\r\n            const filteredOutputs = test.expectedOutputs.filter((i) => i.Order !== action.order);\r\n            const newOutputs = filteredOutputs.map((o) => ({ ...o, Order: o.Order > action.order ? o.Order - 1 : o.Order }));\r\n            return { ...test, inputs: newInputs, expectedOutputs: newOutputs, actualOutputs: undefined };\r\n        case \"UpdateInputActionType\":\r\n            const inputsUpdated = test.inputs.map((i) => i.Order === action.input.Order ? action.input : i);\r\n            return { ...test, inputs: inputsUpdated };\r\n        default:\r\n            return test;\r\n    }\r\n}\r\n","import { MachineApi } from \"../Models/MachineApi\";\nimport { ChannelModel } from \"../Models/ChannelModel\";\nimport { DirectionEnum } from \"../Models/DirectionEnum\";\nimport { InputChannelModel } from \"../Components/Grid/Cell/MachineInstance/MachineDrawer/InputChannelModel\";\n\nexport function GetNewChannelSet(api: MachineApi, includeInput: boolean): { inputChannels: ChannelModel[], outputChannels: ChannelModel[] } {\n    const outputChannels: ChannelModel[] = [];\n    const inputChannels: ChannelModel[] = [];\n\n    let direction: DirectionEnum = DirectionEnum.Up;\n    for (const color of api.OutputChannels) {\n        outputChannels.push({ Channel: color, Direction: direction, Status: \"Exists\" });\n        direction++;\n    }\n\n    if (includeInput && api.InputChannels.length > 1) {\n        direction = 0;\n        for (const color of api.InputChannels) {\n            inputChannels.push({ Channel: color, Direction: direction, Status: \"Exists\" });\n            direction++;\n        }\n    }\n\n    return { inputChannels, outputChannels };\n}\n\nexport function GetDirectedChannelSet(api: MachineApi): { inputChannels: InputChannelModel[], outputChannels: ChannelModel[][] }{\n    const { inputChannels, outputChannels } = GetNewChannelSet(api, true);\n\n    const hasMultipleInputs = inputChannels.length > 1;\n\n    const inputChannelModels: InputChannelModel[] = inputChannels.map((c) =>\n        ({\n            UseMachineColor: !hasMultipleInputs,\n            ...c\n        })\n    );\n\n    const orderedOutputChannels: ChannelModel[][] = [];\n    for (const channel of outputChannels) {\n        const group = orderedOutputChannels.find((o) => o[0].Direction === channel.Direction);\n        if (group === undefined) {\n            orderedOutputChannels.push([channel]);\n        } else {\n            group.push(channel);\n        }\n    }\n\n    return {inputChannels: inputChannelModels, outputChannels: orderedOutputChannels}\n}","export interface CellModel {\n    readonly Row: number;\n    readonly Column: number;\n}\n\nexport function AreEqual(cell: CellModel, otherCell: CellModel): boolean {\n    return cell.Column === otherCell.Column && cell.Row === otherCell.Row;\n}","const halfSquareRatio = 0.9;\nconst circleRadiusRatio = 0.28;\nexport const halfSquareFactor = halfSquareRatio * circleRadiusRatio;\nexport const outputSplitFactor = 0.12;\nexport const outputStartLengthFactor = 0.25;\n\nexport class DrawConstants {\n\n    constructor(cellSize: number) {\n        this.cellSize = cellSize;\n        this.aperture = 0.23 * cellSize;\n        this.armLength = 0.18 * cellSize;\n        this.circleRadius = circleRadiusRatio * cellSize;\n        this.borderWidth = 0.05 * cellSize;\n        this.halfSquareSize = halfSquareRatio * this.circleRadius;\n        this.shadeOffset = 0.008 * cellSize;\n        this.outputSplit = outputSplitFactor * cellSize;\n        this.outputLength = 0.38 * cellSize;\n        this.outputRadius = 0.15 * cellSize;\n        this.outputWidth = 0.06 * cellSize;\n        this.outputStartLength = outputStartLengthFactor * cellSize;\n        this.center = 0.5 * cellSize;\n        this.apertureAngle = Math.asin(this.aperture * 0.5 / this.circleRadius);\n        this.defiatingAngle = this.armAngle - this.apertureAngle;\n        this.protrudingArm = Math.cos(this.defiatingAngle) * this.armLength;\n    }\n\n    public cellSize: number;\n    public aperture: number;\n    public armLength: number;\n    public armAngle = Math.PI * 0.05;\n    public circleRadius: number;\n    public borderWidth: number;\n    public halfSquareSize: number;\n    public shadeOffset: number;\n    public outputSplit: number;\n    public outputLength: number;\n    public outputRadius: number;\n    public outputWidth: number;\n    public outputStartLength: number;\n    public center: number;\n    public apertureAngle: number;\n    public defiatingAngle: number;\n    public protrudingArm: number;\n}","import { DragSourceMonitor, DragLayerMonitor, DropTargetMonitor, XYCoord } from \"react-dnd\";\nimport { DirectionEnum } from \"../Models/DirectionEnum\";\nimport { AppStore } from \"../Redux/Store\";\nimport { GetActivePlayer } from \"./StoreHelper\";\n\nexport function GetAngleFromMonitor(monitor: DragSourceMonitor | DragLayerMonitor | DropTargetMonitor, offsetX: number, offsetY: number): number | undefined {\n    const xyCoord = monitor.getClientOffset();\n    const xyCoordInit = monitor.getInitialSourceClientOffset();\n    return GetAngleFromOffsets(offsetX, offsetY, xyCoord, xyCoordInit);\n}\n\nexport function GetAngleFromOffsets(offsetX: number, offsetY: number, xyCoord: XYCoord | null, xyCoordInit: XYCoord | null): number | undefined {\n    const center = GetActivePlayer(AppStore.getState()).cellSize / 2;\n    if (xyCoord !== null && xyCoordInit !== null) {\n        const angle = Math.atan2(xyCoord.y - xyCoordInit.y + offsetY - center, xyCoord.x - xyCoordInit.x + offsetX - center);\n        return angle;\n    }\n\n    return undefined;\n}\n\nexport function GetAngleFromDirection(direction: DirectionEnum): number {\n    switch (direction) {\n        case DirectionEnum.Up:\n            return Math.PI * 0.5;\n        case DirectionEnum.Right:\n            return Math.PI * 1;\n        case DirectionEnum.Down:\n            return Math.PI * 1.5;\n        case DirectionEnum.Left:\n            return Math.PI * 2;\n    }\n}","import { ColorModel } from \"./ColorModel\";\n\nfunction GetColorCode(enteredColor: string): string {\n    let color = \"#FFFFFF\";\n    const lowerEnteredColor = enteredColor.toLowerCase();\n    switch (lowerEnteredColor) {\n        case \"aliceblue\": color = \"#F0F8FF\"; break;\n        case \"antiquewhite\": color = \"#FAEBD7\"; break;\n        case \"aqua\": color = \"#00FFFF\"; break;\n        case \"aquamarine\": color = \"#7FFFD4\"; break;\n        case \"azure\": color = \"#F0FFFF\"; break;\n        case \"beige\": color = \"#F5F5DC\"; break;\n        case \"bisque\": color = \"#FFE4C4\"; break;\n        case \"black\": color = \"#000000\"; break;\n        case \"blanchedalmond\": color = \"#FFEBCD\"; break;\n        case \"blue\": color = \"#0000FF\"; break;\n        case \"blueviolet\": color = \"#8A2BE2\"; break;\n        case \"brown\": color = \"#A52A2A\"; break;\n        case \"burlywood\": color = \"#DEB887\"; break;\n        case \"cadetblue\": color = \"#5F9EA0\"; break;\n        case \"chartreuse\": color = \"#7FFF00\"; break;\n        case \"chocolate\": color = \"#D2691E\"; break;\n        case \"coral\": color = \"#FF7F50\"; break;\n        case \"cornflowerblue\": color = \"#6495ED\"; break;\n        case \"cornsilk\": color = \"#FFF8DC\"; break;\n        case \"crimson\": color = \"#DC143C\"; break;\n        case \"cyan\": color = \"#00FFFF\"; break;\n        case \"darkblue\": color = \"#00008B\"; break;\n        case \"darkcyan\": color = \"#008B8B\"; break;\n        case \"darkgoldenrod\": color = \"#B8860B\"; break;\n        case \"darkgray\": color = \"#A9A9A9\"; break;\n        case \"darkgrey\": color = \"#A9A9A9\"; break;\n        case \"darkgreen\": color = \"#006400\"; break;\n        case \"darkkhaki\": color = \"#BDB76B\"; break;\n        case \"darkmagenta\": color = \"#8B008B\"; break;\n        case \"darkolivegreen\": color = \"#556B2F\"; break;\n        case \"darkorange\": color = \"#FF8C00\"; break;\n        case \"darkorchid\": color = \"#9932CC\"; break;\n        case \"darkred\": color = \"#8B0000\"; break;\n        case \"darksalmon\": color = \"#E9967A\"; break;\n        case \"darkseagreen\": color = \"#8FBC8F\"; break;\n        case \"darkslateblue\": color = \"#483D8B\"; break;\n        case \"darkslategray\": color = \"#2F4F4F\"; break;\n        case \"darkslategrey\": color = \"#2F4F4F\"; break;\n        case \"darkturquoise\": color = \"#00CED1\"; break;\n        case \"darkviolet\": color = \"#9400D3\"; break;\n        case \"deeppink\": color = \"#FF1493\"; break;\n        case \"deepskyblue\": color = \"#00BFFF\"; break;\n        case \"dimgray\": color = \"#696969\"; break;\n        case \"dimgrey\": color = \"#696969\"; break;\n        case \"dodgerblue\": color = \"#1E90FF\"; break;\n        case \"firebrick\": color = \"#B22222\"; break;\n        case \"floralwhite\": color = \"#FFFAF0\"; break;\n        case \"forestgreen\": color = \"#228B22\"; break;\n        case \"fuchsia\": color = \"#FF00FF\"; break;\n        case \"gainsboro\": color = \"#DCDCDC\"; break;\n        case \"ghostwhite\": color = \"#F8F8FF\"; break;\n        case \"gold\": color = \"#FFD700\"; break;\n        case \"goldenrod\": color = \"#DAA520\"; break;\n        case \"gray\": color = \"#808080\"; break;\n        case \"grey\": color = \"#808080\"; break;\n        case \"green\": color = \"#008000\"; break;\n        case \"greenyellow\": color = \"#ADFF2F\"; break;\n        case \"honeydew\": color = \"#F0FFF0\"; break;\n        case \"hotpink\": color = \"#FF69B4\"; break;\n        case \"indianred\": color = \"#CD5C5C\"; break;\n        case \"indigo \": color = \"#4B0082\"; break;\n        case \"ivory\": color = \"#FFFFF0\"; break;\n        case \"khaki\": color = \"#F0E68C\"; break;\n        case \"lavender\": color = \"#E6E6FA\"; break;\n        case \"lavenderblush\": color = \"#FFF0F5\"; break;\n        case \"lawngreen\": color = \"#7CFC00\"; break;\n        case \"lemonchiffon\": color = \"#FFFACD\"; break;\n        case \"lightblue\": color = \"#ADD8E6\"; break;\n        case \"lightcoral\": color = \"#F08080\"; break;\n        case \"lightcyan\": color = \"#E0FFFF\"; break;\n        case \"lightgoldenrodyellow\": color = \"#FAFAD2\"; break;\n        case \"lightgray\": color = \"#D3D3D3\"; break;\n        case \"lightgrey\": color = \"#D3D3D3\"; break;\n        case \"lightgreen\": color = \"#90EE90\"; break;\n        case \"lightpink\": color = \"#FFB6C1\"; break;\n        case \"lightsalmon\": color = \"#FFA07A\"; break;\n        case \"lightseagreen\": color = \"#20B2AA\"; break;\n        case \"lightskyblue\": color = \"#87CEFA\"; break;\n        case \"lightslategray\": color = \"#778899\"; break;\n        case \"lightslategrey\": color = \"#778899\"; break;\n        case \"lightsteelblue\": color = \"#B0C4DE\"; break;\n        case \"lightyellow\": color = \"#FFFFE0\"; break;\n        case \"lime\": color = \"#00FF00\"; break;\n        case \"limegreen\": color = \"#32CD32\"; break;\n        case \"linen\": color = \"#FAF0E6\"; break;\n        case \"magenta\": color = \"#FF00FF\"; break;\n        case \"maroon\": color = \"#800000\"; break;\n        case \"mediumaquamarine\": color = \"#66CDAA\"; break;\n        case \"mediumblue\": color = \"#0000CD\"; break;\n        case \"mediumorchid\": color = \"#BA55D3\"; break;\n        case \"mediumpurple\": color = \"#9370DB\"; break;\n        case \"mediumseagreen\": color = \"#3CB371\"; break;\n        case \"mediumslateblue\": color = \"#7B68EE\"; break;\n        case \"mediumspringgreen\": color = \"#00FA9A\"; break;\n        case \"mediumturquoise\": color = \"#48D1CC\"; break;\n        case \"mediumvioletred\": color = \"#C71585\"; break;\n        case \"midnightblue\": color = \"#191970\"; break;\n        case \"mintcream\": color = \"#F5FFFA\"; break;\n        case \"mistyrose\": color = \"#FFE4E1\"; break;\n        case \"moccasin\": color = \"#FFE4B5\"; break;\n        case \"navajowhite\": color = \"#FFDEAD\"; break;\n        case \"navy\": color = \"#000080\"; break;\n        case \"oldlace\": color = \"#FDF5E6\"; break;\n        case \"olive\": color = \"#808000\"; break;\n        case \"olivedrab\": color = \"#6B8E23\"; break;\n        case \"orange\": color = \"#FFA500\"; break;\n        case \"orangered\": color = \"#FF4500\"; break;\n        case \"orchid\": color = \"#DA70D6\"; break;\n        case \"palegoldenrod\": color = \"#EEE8AA\"; break;\n        case \"palegreen\": color = \"#98FB98\"; break;\n        case \"paleturquoise\": color = \"#AFEEEE\"; break;\n        case \"palevioletred\": color = \"#DB7093\"; break;\n        case \"papayawhip\": color = \"#FFEFD5\"; break;\n        case \"peachpuff\": color = \"#FFDAB9\"; break;\n        case \"peru\": color = \"#CD853F\"; break;\n        case \"pink\": color = \"#FFC0CB\"; break;\n        case \"plum\": color = \"#DDA0DD\"; break;\n        case \"powderblue\": color = \"#B0E0E6\"; break;\n        case \"purple\": color = \"#800080\"; break;\n        case \"rebeccapurple\": color = \"#663399\"; break;\n        case \"red\": color = \"#FF0000\"; break;\n        case \"rosybrown\": color = \"#BC8F8F\"; break;\n        case \"royalblue\": color = \"#4169E1\"; break;\n        case \"saddlebrown\": color = \"#8B4513\"; break;\n        case \"salmon\": color = \"#FA8072\"; break;\n        case \"sandybrown\": color = \"#F4A460\"; break;\n        case \"seagreen\": color = \"#2E8B57\"; break;\n        case \"seashell\": color = \"#FFF5EE\"; break;\n        case \"sienna\": color = \"#A0522D\"; break;\n        case \"silver\": color = \"#C0C0C0\"; break;\n        case \"skyblue\": color = \"#87CEEB\"; break;\n        case \"slateblue\": color = \"#6A5ACD\"; break;\n        case \"slategray\": color = \"#708090\"; break;\n        case \"slategrey\": color = \"#708090\"; break;\n        case \"snow\": color = \"#FFFAFA\"; break;\n        case \"springgreen\": color = \"#00FF7F\"; break;\n        case \"steelblue\": color = \"#4682B4\"; break;\n        case \"tan\": color = \"#D2B48C\"; break;\n        case \"teal\": color = \"#008080\"; break;\n        case \"thistle\": color = \"#D8BFD8\"; break;\n        case \"tomato\": color = \"#FF6347\"; break;\n        case \"turquoise\": color = \"#40E0D0\"; break;\n        case \"violet\": color = \"#EE82EE\"; break;\n        case \"wheat\": color = \"#F5DEB3\"; break;\n        case \"white\": color = \"#FFFFFF\"; break;\n        case \"whitesmoke\": color = \"#F5F5F5\"; break;\n        case \"yellow\": color = \"#FFFF00\"; break;\n        case \"yellowgreen\": color = \"#9ACD32\"; break;\n    }\n\n    return color;\n}\n\nexport function CheckColorString(color: string): boolean {\n    if (color === \"\" || color === undefined || color === null) {\n        return false;\n    }\n\n    const style = new Option().style;\n    style.color = color;\n\n    return style.color === color.toLowerCase();\n}\n\nfunction GetColorModel(color: string): ColorModel {\n    if (color.startsWith(\"rgb(\")) {\n        const colorPart = color.split(\"(\")[1].split(\")\")[0];\n        const colors = colorPart.split(\",\");\n        return {\n            red: Number(colors[0]),\n            green: Number(colors[1]),\n            blue: Number(colors[2])\n        }\n    } else if (!color.startsWith(\"#\")) {\n        color = GetColorCode(color);\n    }\n\n    return {\n        red: parseInt(color.substring(1, 3), 16),\n        blue: parseInt(color.substring(5, 7), 16),\n        green: parseInt(color.substring(3, 5), 16)\n    }\n}\n\nexport function GetOpaqueColor(color: string, opacity: number): string {\n    try {\n        const model = GetColorModel(color);\n\n        return `rgba(${model.red},${model.green},${model.blue},${opacity})`;\n    } catch (error) {\n        return \"white\";\n    }\n}\n\nexport function GetLighterColor(color: string, amount: number): string {\n    try {\n        const model = GetColorModel(color);\n        const red = 256 - (256 - model.red) * amount;\n        const blue = 256 - (256 - model.blue) * amount;\n        const green = 256 - (256 - model.green) * amount;\n        return `rgb(${red},${green},${blue})`;\n    } catch (error) {\n        return \"white\";\n    }\n}\n\n\nexport function GetGrayScaleColor(color: string, amount: number): string {\n    const model = GetColorModel(color);\n\n    try {\n        const average = (model.red + model.green + model.blue) / 3\n        return `rgb(${average * amount + model.red * (1 - amount)},${average * amount + model.green * (1 - amount)},${average * amount + model.blue * (1 - amount)})`;\n    } catch (error) {\n        return \"white\";\n    }\n}\n\nexport function GetRandomColor(): string {\n    const randNumber = Math.floor(Math.random() * 148);\n    switch (randNumber) {\n        case 0: return \"AliceBlue\";\n        case 1: return \"AntiqueWhite\";\n        case 2: return \"Aqua\";\n        case 3: return \"Aquamarine\";\n        case 4: return \"Azure\";\n        case 5: return \"Beige\";\n        case 6: return \"Bisque\";\n        case 7: return \"Black\";\n        case 8: return \"BlanchedAlmond\";\n        case 9: return \"Blue\";\n        case 10: return \"BlueViolet\";\n        case 11: return \"Brown\";\n        case 12: return \"BurlyWood\";\n        case 13: return \"CadetBlue\";\n        case 14: return \"Chartreuse\";\n        case 15: return \"Chocolate\";\n        case 16: return \"Coral\";\n        case 17: return \"CornflowerBlue\";\n        case 18: return \"Cornsilk\";\n        case 19: return \"Crimson\";\n        case 20: return \"Cyan\";\n        case 21: return \"DarkBlue\";\n        case 22: return \"DarkCyan\";\n        case 23: return \"DarkGoldenRod\";\n        case 24: return \"DarkGray\";\n        case 25: return \"DarkGrey\";\n        case 26: return \"DarkGreen\";\n        case 27: return \"DarkKhaki\";\n        case 28: return \"DarkMagenta\";\n        case 29: return \"DarkOliveGreen\";\n        case 30: return \"DarkOrange\";\n        case 31: return \"DarkOrchid\";\n        case 32: return \"DarkRed\";\n        case 33: return \"DarkSalmon\";\n        case 34: return \"DarkSeaGreen\";\n        case 35: return \"DarkSlateBlue\";\n        case 36: return \"DarkSlateGray\";\n        case 37: return \"DarkSlateGrey\";\n        case 38: return \"DarkTurquoise\";\n        case 39: return \"DarkViolet\";\n        case 40: return \"DeepPink\";\n        case 41: return \"DeepSkyBlue\";\n        case 42: return \"DimGray\";\n        case 43: return \"DimGrey\";\n        case 44: return \"DodgerBlue\";\n        case 45: return \"FireBrick\";\n        case 46: return \"FloralWhite\";\n        case 47: return \"ForestGreen\";\n        case 48: return \"Fuchsia\";\n        case 49: return \"Gainsboro\";\n        case 50: return \"GhostWhite\";\n        case 51: return \"Gold\";\n        case 52: return \"GoldenRod\";\n        case 53: return \"Gray\";\n        case 54: return \"Grey\";\n        case 55: return \"Green\";\n        case 56: return \"GreenYellow\";\n        case 57: return \"HoneyDew\";\n        case 58: return \"HotPink\";\n        case 59: return \"IndianRed \";\n        case 60: return \"Indigo \";\n        case 61: return \"Ivory\";\n        case 62: return \"Khaki\";\n        case 63: return \"Lavender\";\n        case 64: return \"LavenderBlush\";\n        case 65: return \"LawnGreen\";\n        case 66: return \"LemonChiffon\";\n        case 67: return \"LightBlue\";\n        case 68: return \"LightCoral\";\n        case 69: return \"LightCyan\";\n        case 70: return \"LightGoldenRodYellow\";\n        case 71: return \"LightGray\";\n        case 72: return \"LightGrey\";\n        case 73: return \"LightGreen\";\n        case 74: return \"LightPink\";\n        case 75: return \"LightSalmon\";\n        case 76: return \"LightSeaGreen\";\n        case 77: return \"LightSkyBlue\";\n        case 78: return \"LightSlateGray\";\n        case 79: return \"LightSlateGrey\";\n        case 80: return \"LightSteelBlue\";\n        case 81: return \"LightYellow\";\n        case 82: return \"Lime\";\n        case 83: return \"LimeGreen\";\n        case 84: return \"Linen\";\n        case 85: return \"Magenta\";\n        case 86: return \"Maroon\";\n        case 87: return \"MediumAquaMarine\";\n        case 88: return \"MediumBlue\";\n        case 89: return \"MediumOrchid\";\n        case 90: return \"MediumPurple\";\n        case 91: return \"MediumSeaGreen\";\n        case 92: return \"MediumSlateBlue\";\n        case 93: return \"MediumSpringGreen\";\n        case 94: return \"MediumTurquoise\";\n        case 95: return \"MediumVioletRed\";\n        case 96: return \"MidnightBlue\";\n        case 97: return \"MintCream\";\n        case 98: return \"MistyRose\";\n        case 99: return \"Moccasin\";\n        case 100: return \"NavajoWhite\";\n        case 101: return \"Navy\";\n        case 102: return \"OldLace\";\n        case 103: return \"Olive\";\n        case 104: return \"OliveDrab\";\n        case 105: return \"Orange\";\n        case 106: return \"OrangeRed\";\n        case 107: return \"Orchid\";\n        case 108: return \"PaleGoldenRod\";\n        case 109: return \"PaleGreen\";\n        case 110: return \"PaleTurquoise\";\n        case 111: return \"PaleVioletRed\";\n        case 112: return \"PapayaWhip\";\n        case 113: return \"PeachPuff\";\n        case 114: return \"Peru\";\n        case 115: return \"Pink\";\n        case 116: return \"Plum\";\n        case 117: return \"PowderBlue\";\n        case 118: return \"Purple\";\n        case 119: return \"RebeccaPurple\";\n        case 120: return \"Red\";\n        case 121: return \"RosyBrown\";\n        case 122: return \"RoyalBlue\";\n        case 123: return \"SaddleBrown\";\n        case 124: return \"Salmon\";\n        case 125: return \"SandyBrown\";\n        case 126: return \"SeaGreen\";\n        case 127: return \"SeaShell\";\n        case 128: return \"Sienna\";\n        case 129: return \"Silver\";\n        case 130: return \"SkyBlue\";\n        case 131: return \"SlateBlue\";\n        case 132: return \"SlateGray\";\n        case 133: return \"SlateGrey\";\n        case 134: return \"Snow\";\n        case 135: return \"SpringGreen\";\n        case 136: return \"SteelBlue\";\n        case 137: return \"Tan\";\n        case 138: return \"Teal\";\n        case 139: return \"Thistle\";\n        case 140: return \"Tomato\";\n        case 141: return \"Turquoise\";\n        case 142: return \"Violet\";\n        case 143: return \"Wheat\";\n        case 144: return \"White\";\n        case 145: return \"WhiteSmoke\";\n        case 146: return \"Yellow\";\n        case 147: return \"YellowGreen\";\n        default:\n            return \"White\";\n    }\n}","export function Minimum<T>(array: T[], valueSelector: (element: T) => number): T | undefined {\r\n    let minimum = Infinity;\r\n    let minimumElement: T | undefined = undefined;\r\n    for (const element of array) {\r\n        const value = valueSelector(element);\r\n        if (value < minimum) {\r\n            minimumElement = element;\r\n            minimum = value;\r\n        }\r\n    }\r\n\r\n    return minimumElement;\r\n}\r\n\r\nexport function Maximum<T>(array: T[], valueSelector: (element: T) => number): T | undefined {\r\n    let maximum = -Infinity;\r\n    let maximumElement: T | undefined = undefined;\r\n    for (const element of array) {\r\n        const value = valueSelector(element);\r\n        if (value > maximum) {\r\n            maximumElement = element;\r\n            maximum = value;\r\n        }\r\n    }\r\n\r\n    return maximumElement;\r\n}","export class Constants {\n    public static CellSize = 100;\n    public static MinimumColumns = 6;\n    public static MinimumRows = 5;\n    public static MenuBackGround = \"rgba(255,255,255,0.86)\";\n}","\r\nimport { MachineInstancesReducer } from \"./MachineInstances/MachineInstancesReducer\";\r\nimport { CustomMachineModel } from \"./CustomMachineModel\";\r\nimport { Draft } from \"immer\";\r\nimport { Actions } from \"../../../Actions\";\r\nimport { TypeProvider } from \"../TypeProvider\";\r\nimport { CheckColorString } from \"../../../../Helper/ColorHelper\";\r\nimport { GridSetupModel } from \"./GridModel\";\r\nimport { Maximum, Minimum } from \"../../../../Helper/ArrayHelper\";\r\nimport { Constants } from \"../../../../Components/Constants\";\r\n\r\nexport function GridSetupReducer(draft: Draft<CustomMachineModel>, action: Actions, typeProvider: TypeProvider, cellSize: number): CustomMachineModel {\r\n    if (draft === undefined) {\r\n        return draft;\r\n    }\r\n    switch (action.type) {\r\n        case \"SetColorActionType\":\r\n            if (CheckColorString(action.color)) {\r\n                draft.Style.Color = action.color;\r\n            }\r\n            return draft;\r\n        case \"SetBorderColorActionType\":\r\n            if (CheckColorString(action.borderColor)) {\r\n                draft.Style.BorderColor = action.borderColor;\r\n            }\r\n            return draft;\r\n        case \"SetNameActionType\":\r\n            draft.Style.Name = action.name;\r\n            return draft;\r\n        case \"SetDescriptionActionType\":\r\n            draft.Style.Description = action.description;\r\n            return draft;\r\n        default:\r\n            switch (action.type) {\r\n                case \"FixMachineActionType\":\r\n                    const machineFixed = draft.Setup.MachineInstances.find((mi) => mi.Id === action.machineInstanceId)!;\r\n                    if (machineFixed.Status === \"Deleted\") {\r\n                        if (draft.Setup.MachineInstances.filter((m) => m.MachineId === machineFixed.MachineId).length <= 1) {\r\n                            draft.DependingOnDeleted = draft.DependingOnDeleted.filter((id) => id !== machineFixed.MachineId);\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n\r\n            draft.Setup.MachineInstances = MachineInstancesReducer(draft.Setup.MachineInstances, action, typeProvider, cellSize);\r\n\r\n            switch (action.type) {\r\n                case \"MachineAddedActionType\":\r\n                case \"MachineRemovedActionType\":\r\n                case \"MachineMovedActionType\":\r\n                    ResizeGrid(draft.Setup);\r\n            }\r\n\r\n            return draft;\r\n    }\r\n}\r\n\r\nfunction ResizeGrid(setup: Draft<GridSetupModel>) {\r\n    if (setup.MachineInstances.length > 0) {\r\n        let deltaRow = 0;\r\n        let deltaColumn = 0;\r\n        const minimumColumn = Minimum(setup.MachineInstances, (mi) => mi.Cell.Column)!.Cell.Column;\r\n        const minimumRow = Minimum(setup.MachineInstances, (mi) => mi.Cell.Row)!.Cell.Row;\r\n        let maximumColumn = Maximum(setup.MachineInstances, (mi) => mi.Cell.Column)!.Cell.Column;\r\n        let maximumRow = Maximum(setup.MachineInstances, (mi) => mi.Cell.Row)!.Cell.Row;\r\n\r\n        if (minimumColumn <= 0) {\r\n            deltaColumn = 1 - minimumColumn;\r\n            maximumColumn += deltaColumn;\r\n        } else {\r\n            let excessColumns = maximumColumn + 2 - Constants.MinimumColumns;\r\n            if (excessColumns > 0 && minimumColumn > 1) {\r\n                deltaColumn = -Math.min(excessColumns, minimumColumn - 1);\r\n                excessColumns += deltaColumn;\r\n                maximumColumn += deltaColumn;\r\n            }\r\n        }\r\n\r\n        if (minimumRow <= 0) {\r\n            deltaRow = 1 - minimumRow;\r\n            maximumRow += deltaRow;\r\n        } else {\r\n            let excessRows = maximumRow + 2 - Constants.MinimumRows;\r\n            if (excessRows > 0 && minimumRow > 1) {\r\n                deltaRow = -Math.min(excessRows, minimumRow - 1);\r\n                excessRows += deltaRow;\r\n                maximumRow += deltaRow;\r\n            }           \r\n        }\r\n\r\n\r\n        setup.MachineInstances.forEach((mi) => {\r\n            mi.Cell = {\r\n                Row: mi.Cell.Row + deltaRow,\r\n                Column: mi.Cell.Column + deltaColumn\r\n            }\r\n        });\r\n\r\n        setup.NumberOfColumns = Math.max(maximumColumn + 2, Constants.MinimumColumns);\r\n        setup.NumberOfRows = Math.max(maximumRow + 2, Constants.MinimumRows);\r\n    }\r\n}","import { MachineInstanceModel } from \"../../../../../Models/MachineInstanceModel\";\r\nimport { Draft } from \"immer\";\r\nimport { Actions } from \"../../../../Actions\";\r\nimport { GetNewChannelSet } from \"../../../../../Helper/NewChannelSet\";\r\nimport { AreEqual } from \"../../../../../Models/CellModel\";\r\nimport * as dc from \"../../../../../Components/Grid/Cell/MachineInstance/MachineDrawer/DrawConstants\";\r\nimport { GetAngleFromDirection } from \"../../../../../Helper/AngleHelper\";\r\nimport { DirectionEnum } from \"../../../../../Models/DirectionEnum\";\r\nimport { ITypeProvider } from \"../../../../../MachineStore/ITypeProvider\";\r\nimport { IsStartMachine } from \"../../../../../MachineStore/IMachine\";\r\n\r\nexport function MachineInstancesReducer(draft: Draft<MachineInstanceModel[]>, action: Actions, typeProvider: ITypeProvider, cellSize: number): MachineInstanceModel[] {\r\n    switch (action.type) {\r\n        case \"ChannelChangedActionType\":\r\n            const machine = draft.find((mi) => mi.Id === action.machineInstanceId)!;\r\n            const channelIndex = machine.OutputChannels.findIndex((c) => c.Channel === action.channel.Channel);\r\n            const relevantChannels = machine.OutputChannels.filter((c, index) => c.Direction === action.channel.Direction && c.Status !== \"DoesNotExist\" && index !== channelIndex);\r\n            if (relevantChannels.length > 0 && action.angle !== undefined) {\r\n                const newChannelArray = machine.OutputChannels.filter((c) => c.Direction !== action.channel.Direction && c.Status !== \"DoesNotExist\");\r\n                let split = -(relevantChannels.length - 1) / 2 * dc.outputSplitFactor * cellSize;\r\n\r\n                let inserted = false;\r\n                const baseAngle = GetAngleFromDirection(action.channel.Direction);\r\n                const draggedSplit = -Math.sin(action.angle - baseAngle) * dc.outputStartLengthFactor * cellSize;\r\n                for (let index = 0; index < relevantChannels.length; index++) {\r\n                    if (!inserted && draggedSplit < split) {\r\n                        inserted = true;\r\n                        newChannelArray.push(action.channel);\r\n                    }\r\n\r\n                    newChannelArray.push(relevantChannels[index]);\r\n                    split += dc.outputSplitFactor * cellSize;\r\n                }\r\n\r\n                if (!inserted) {\r\n                    newChannelArray.push(action.channel);\r\n                }\r\n\r\n                machine.OutputChannels = newChannelArray;\r\n\r\n            } else {\r\n                machine.OutputChannels[channelIndex] = action.channel;\r\n            }\r\n            return draft;\r\n        case \"InputChannelChangedActionType\":\r\n            const machineInput = draft.find((mi) => mi.Id === action.machineInstanceId)!;\r\n            const channelModel = machineInput.InputChannels.find((ic) => ic.Direction === action.channel.Direction)!;\r\n            channelModel.Direction = machineInput.InputChannels[action.channelIndex].Direction;\r\n            machineInput.InputChannels[action.channelIndex] = action.channel;\r\n            return draft;\r\n        case \"MachineRemovedActionType\":\r\n            const machineRemoved = draft.find((mi) => mi.Id === action.machineInstanceId)!;\r\n            if (IsStartMachine(machineRemoved.MachineId) && draft.filter((mi) => IsStartMachine(mi.MachineId)).length < 2) {\r\n                return draft;\r\n            } else {\r\n                return draft.filter((mi) => mi.Id !== action.machineInstanceId);\r\n            }\r\n        case \"MachineAddedActionType\":\r\n            if (draft.some((mi) => AreEqual(mi.Cell, action.cell))) {\r\n                return draft;\r\n            }\r\n\r\n            const { outputChannels, inputChannels } = GetNewChannelSet(action.api, false);\r\n\r\n            const maxId = (draft.length === 0) ? 0 : Math.max(...draft.map((mi) => mi.Id));\r\n            const machineInstance: MachineInstanceModel = {\r\n                Cell: action.cell,\r\n                MachineId: action.machineId,\r\n                OutputChannels: outputChannels,\r\n                InputChannels: inputChannels,\r\n                Id: maxId + 1,\r\n                Status: \"Valid\"\r\n            };\r\n\r\n            draft.push(machineInstance);\r\n            return draft;\r\n\r\n        case \"MachineMovedActionType\":\r\n            if (draft.some((m) => AreEqual(m.Cell, action.newCell))) {\r\n                return draft;\r\n            }\r\n            const machineMoved = draft.find((mi) => mi.Id === action.machineInstanceId)!;\r\n            machineMoved.Cell = action.newCell;\r\n            return draft;\r\n        case \"FixMachineActionType\":\r\n            const machineFixed = draft.find((mi) => mi.Id === action.machineInstanceId)!;\r\n            if (machineFixed.Status === \"Deleted\") {\r\n                return draft.filter((mi) => mi.Id !== action.machineInstanceId);\r\n            } else if (machineFixed.Status === \"ChannelsInvalid\") {\r\n                const api = typeProvider.GetMachineType(machineFixed.MachineId).Api;\r\n                machineFixed.OutputChannels = machineFixed.OutputChannels.filter((c) => api.OutputChannels.some((o) => o === c.Channel));\r\n                machineFixed.OutputChannels = machineFixed.OutputChannels.concat(api.OutputChannels.filter((o) => !machineFixed.OutputChannels.some((c) => c.Channel === o)).map((o) => ({ Channel: o, Direction: DirectionEnum.Up, Status: \"Exists\" })));\r\n\r\n                machineFixed.InputChannels = machineFixed.InputChannels.map((ic) => {\r\n                    if (ic.Status === \"Exists\" && !api.InputChannels.some((iac) => iac === ic.Channel)) {\r\n                        return { ...ic, Channel: api.InputChannels[0] };\r\n                    } else {\r\n                        return ic;\r\n                    }\r\n                });\r\n\r\n                machineFixed.Status = \"Valid\";\r\n            }\r\n            return draft;\r\n        default:\r\n            return draft;\r\n    }\r\n}","import { ExitCellModel } from \"../Models/ExitCellModel\";\r\nimport { CellModel } from \"../Models/CellModel\";\r\nimport { MachineInstanceModel } from \"../Models/MachineInstanceModel\";\r\nimport { DirectionEnum } from \"../Models/DirectionEnum\";\r\nimport { GridSetupModel } from \"../Redux/GameDataReducer/PlayerReducer/GridSetup/GridModel\";\r\nimport { Draft } from \"immer\";\r\nimport { ITypeProvider } from \"../MachineStore/ITypeProvider\";\r\nimport { IsStartMachine } from \"../MachineStore/IMachine\";\r\n\r\nexport function CalculateExits(setup: Draft<GridSetupModel>, typeProvider: ITypeProvider): ExitCellModel[] {\r\n    const exitCells: ExitCellModel[] = [];\r\n    let cells: ExitCellModel[] = [];\r\n    const starts = GetStartMachines(setup);\r\n    cells = cells.concat(starts.map((s) => ({ Cell: s.Cell, Direction: s.OutputChannels[0].Direction })));\r\n    for (let i = 0; i < cells.length; i++) {\r\n        let cell: CellModel = cells[i].Cell;\r\n        let machine: Draft<MachineInstanceModel> | undefined;\r\n        let cellModel: CellModel | undefined;\r\n        while (machine === undefined) {\r\n            cellModel = Move(setup, cell, cells[i].Direction);\r\n            if (cellModel === undefined) {\r\n                break;\r\n            }\r\n\r\n            cell = cellModel;\r\n            // eslint-disable-next-line\r\n            machine = setup.MachineInstances.find((mi) => mi.Cell.Column === cell!.Column && mi.Cell.Row === cell!.Row);\r\n        }\r\n\r\n        if (cellModel === undefined) {\r\n            exitCells.push({ Direction: cells[i].Direction, Cell: cell });\r\n            continue;\r\n        }\r\n\r\n        const api = typeProvider.GetMachineType(machine!.MachineId).Api;\r\n        // eslint-disable-next-line\r\n        const existingChannel = machine!.InputChannels.find((ic) => ic.Direction === cells[i].Direction);\r\n        if (existingChannel !== undefined) {\r\n            if (!api.InputChannels.some((ic) => ic === existingChannel.Channel)) {\r\n                existingChannel.Channel = api.InputChannels[0];\r\n            }\r\n            existingChannel.Status = \"Exists\";\r\n        } else {\r\n            machine!.InputChannels.push({\r\n                Channel: api.InputChannels[0],\r\n                Direction: cells[i].Direction,\r\n                Status: \"Exists\"\r\n            });\r\n        }\r\n\r\n        if (!cells.some((c) => c.Cell.Column === cell.Column && c.Cell.Row === cell.Row)) {\r\n            cells = cells.concat(machine!.OutputChannels.map((c) => ({ Cell: cell, Direction: c.Direction })));\r\n        }\r\n    }\r\n    return exitCells;\r\n}\r\n\r\nexport function Move(setup: {NumberOfRows: number, NumberOfColumns: number}, cell: CellModel, direction: DirectionEnum): CellModel | undefined {\r\n    switch (direction) {\r\n        case DirectionEnum.Down:\r\n            if (cell.Row >= setup.NumberOfRows - 1) {\r\n                return;\r\n            }\r\n            return { Column: cell.Column, Row: cell.Row + 1 };\r\n        case DirectionEnum.Up:\r\n            if (cell.Row <= 0) {\r\n                return;\r\n            }\r\n            return { Column: cell.Column, Row: cell.Row - 1 };\r\n        case DirectionEnum.Right:\r\n            if (cell.Column >= setup.NumberOfColumns - 1) {\r\n                return;\r\n            }\r\n            return { Column: cell.Column + 1, Row: cell.Row };\r\n        case DirectionEnum.Left:\r\n            if (cell.Column <= 0) {\r\n                return;\r\n            }\r\n            return { Column: cell.Column - 1, Row: cell.Row };\r\n    }\r\n}\r\n\r\nexport function GetStartMachines(setup: GridSetupModel): MachineInstanceModel[] {\r\n    const startMachines: MachineInstanceModel[] = [];\r\n    for (const machineInstance of setup.MachineInstances) {\r\n        if (IsStartMachine(machineInstance.MachineId)) {\r\n            startMachines.push(machineInstance);\r\n        }\r\n    }\r\n\r\n    return startMachines;\r\n}","import { MachineApi } from \"../../../Models/MachineApi\";\r\nimport { MachineInstanceModel } from \"../../../Models/MachineInstanceModel\";\r\nimport { Draft } from \"immer\";\r\n\r\nexport function UpdateMachineStatus(api: MachineApi, machineInstance: Draft<MachineInstanceModel>): void {\r\n    for (const newOutputChannel of api.OutputChannels) {\r\n        const matchingOutput = machineInstance.OutputChannels.find((i) => i.Channel === newOutputChannel);\r\n        if (matchingOutput === undefined || matchingOutput.Status === \"DoesNotExist\") {\r\n            machineInstance.Status = \"ChannelsInvalid\";\r\n            return;\r\n        }\r\n    }\r\n    for (const outputChannel of machineInstance.OutputChannels.filter((c) => c.Status === \"Exists\")) {\r\n        if (!api.OutputChannels.some((i) => i === outputChannel.Channel)) {\r\n            machineInstance.Status = \"ChannelsInvalid\";\r\n            return;\r\n        }\r\n    }\r\n    for (const inputChannel of machineInstance.InputChannels.filter((c) => c.Status === \"Exists\")) {\r\n        if (!api.InputChannels.some((i) => i === inputChannel.Channel)) {\r\n            machineInstance.Status = \"ChannelsInvalid\";\r\n            return;\r\n        }\r\n    }\r\n    machineInstance.Status = \"Valid\";\r\n}","import { ITypeProvider } from \"../../../MachineStore/ITypeProvider\";\r\nimport { IMachineType } from \"../../../MachineStore/IMachineType\";\r\nimport { CustomMachineModel } from \"./GridSetup/CustomMachineModel\";\r\nimport { MachineStore } from \"../../../MachineStore/MachineStore\";\r\nimport { IsDefaultMachine } from \"../../../MachineStore/IMachine\";\r\n\r\nexport class TypeProvider implements ITypeProvider {\r\n\r\n    private customMachines: CustomMachineModel[];\r\n    constructor(customMachines: CustomMachineModel[]) {\r\n        this.customMachines = customMachines;\r\n    }\r\n    public GetMachineType(machineId: string): IMachineType {\r\n        if (!IsDefaultMachine(machineId)){\r\n            const customMachine = this.customMachines.find((cm) =>  cm.Id === machineId);\r\n            if (customMachine === undefined){\r\n                throw Error(`CustomMachine not found, Id: '${machineId}'`);\r\n            }\r\n\r\n            return customMachine;\r\n        } else {\r\n            return MachineStore.GetStore().GetMachineType(machineId);\r\n        }\r\n    }\r\n\r\n}","export function CreateGuid(): string {\r\n    let array = new Int32Array(4);\r\n    array = window.crypto.getRandomValues(array);\r\n    let text = \"\";\r\n    array.forEach((s) => {text += s.toString(16)});\r\n\r\n    return text;\r\n}","import { ChannelColorEnum } from \"../../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../../Models/DirectionEnum\";\r\nimport { GridSetupReducer } from \"./GridSetup/GridSetupReducer\";\r\nimport { CustomMachineModel } from \"./GridSetup/CustomMachineModel\";\r\nimport { MachineApi, ApiAreEqual } from \"../../../Models/MachineApi\";\r\nimport { MachineInstanceModel } from \"../../../Models/MachineInstanceModel\";\r\nimport { Draft } from \"immer\";\r\nimport { GetRandomColor } from \"../../../Helper/ColorHelper\";\r\nimport { Actions } from \"../../Actions\";\r\nimport { CalculateExits, GetStartMachines } from \"../../../Helper/SetupHelper\";\r\nimport { UpdateMachineStatus } from \"./CustomMachinesHelper\";\r\nimport { TypeProvider } from \"./TypeProvider\";\r\nimport { PlayerModel } from \"./PlayerModel\";\r\nimport { CreateGuid } from \"../../../Helper/Guid\";\r\nimport { IsDefaultMachine } from \"../../../MachineStore/IMachine\";\r\nimport { LevelStore } from \"../../../Levels/LevelStore\";\r\nimport { LevelState } from \"./LevelData\";\r\nimport { Constants } from \"../../../Components/Constants\";\r\n\r\nexport function PlayerReducer(draft: Draft<PlayerModel>, action: Actions): PlayerModel {\r\n    switch (action.type) {\r\n        case \"LoadLevelActionType\":\r\n            {\r\n                const levelData = draft.levelData.find((ld) => ld.Id === action.id);\r\n                if (levelData !== undefined) {\r\n                    draft.activeMachineId = levelData.LastUsedMachineId;\r\n                } else {\r\n                    draft.levelData.push({ Id: action.id, State: LevelState.NoMachineLinked, LastUsedMachineId: undefined })\r\n                    draft.activeMachineId = undefined;\r\n                }\r\n                draft.activeLevel = action.id;\r\n                break;\r\n            }\r\n        case \"ChangePlayerName\":\r\n            draft.name = action.name;\r\n            break;\r\n        case \"UpdateShowAnimations\":\r\n            draft.showAnimations = action.show;\r\n            break;\r\n        case \"UpdateStepTime\":\r\n            draft.stepTime = action.stepTime;\r\n            break;\r\n        case \"AddNewMachineActionType\":\r\n            let newMachine: CustomMachineModel | undefined;\r\n\r\n            const levelData = draft.levelData.find((ld) => ld.Id === draft.activeLevel!);\r\n            if (levelData === undefined || levelData.LastUsedMachineId === undefined) {\r\n                const levelModel = LevelStore.GetStore().GetLevel(draft.activeLevel!);\r\n                newMachine = CreateNewMachine(levelModel.Name, levelModel.MachineDescription);\r\n            } else {\r\n                newMachine = CreateNewMachine(\"New machine\", \"\");\r\n            }\r\n\r\n            draft.machines.push(newMachine);\r\n            draft.activeMachineId = newMachine.Id;\r\n\r\n            if (levelData !== undefined) {\r\n                if (levelData.LastUsedMachineId === undefined) {\r\n                    levelData.LastUsedMachineId = newMachine.Id;\r\n                }\r\n\r\n                if (levelData.State === LevelState.NoMachineLinked) {\r\n                    levelData.State = LevelState.InProgress;\r\n                }\r\n            }\r\n\r\n            break;\r\n        case \"LoadCustomMachineActionType\":\r\n            const newActiveMachine = draft.machines.find((m) => m.Id === action.machineId);\r\n            if (newActiveMachine === undefined) {\r\n                throw Error(\"Loading an unknown machine, with id \" + action.machineId);\r\n            }\r\n            draft.activeMachineId = action.machineId;\r\n            break;\r\n        case \"ChangeCellSizeActionType\":\r\n            draft.cellSize = action.cellSize;\r\n            break;\r\n        case \"DeleteMachineActionType\":\r\n            if (draft.activeMachineId === action.machineId) {\r\n                draft.activeMachineId = undefined;\r\n            }\r\n\r\n            const usedInLevel = draft.levelData.find((ld) => ld.LastUsedMachineId === action.machineId);\r\n            if (usedInLevel !== undefined) {\r\n                usedInLevel.LastUsedMachineId = undefined;\r\n                usedInLevel.State = LevelState.NoMachineLinked;\r\n            }\r\n\r\n            const directlyDependentMachines = draft.machines.filter((m) => m.DirectlyDependingOn.some((dp) => dp === action.machineId));\r\n            for (const dependentMachine of directlyDependentMachines) {\r\n                const updatedMachines: MachineInstanceModel[] = dependentMachine.Setup.MachineInstances.map((mi) => mi.MachineId === action.machineId ? { ...mi, Status: \"Deleted\" } : mi);\r\n                dependentMachine.Setup.MachineInstances = updatedMachines;\r\n                dependentMachine.DirectlyDependingOn = dependentMachine.DirectlyDependingOn.filter((i) => i !== action.machineId);\r\n            }\r\n\r\n            if (directlyDependentMachines.length > 0) {\r\n                draft.deletedMachines.push(draft.machines.find((m) => m.Id === action.machineId)!);\r\n            }\r\n\r\n            const dependentMachines = draft.machines.filter((m) => m.DependingOn.some((dp) => dp === action.machineId));\r\n            for (const dependentMachine of dependentMachines) {\r\n                dependentMachine.DependingOn = dependentMachine.DependingOn.filter((i) => i !== action.machineId);\r\n                dependentMachine.DependingOnDeleted.push(action.machineId);\r\n            }\r\n\r\n            draft.machines = draft.machines.filter((m) => m.Id !== action.machineId);\r\n\r\n            draft.deletedMachines = draft.deletedMachines.filter((dm) =>\r\n                draft.machines.some((m) => m.DependingOnDeleted.some((dp) => dp === action.machineId))\r\n            )\r\n            break;\r\n        default:\r\n            if (draft.activeMachineId === undefined) {\r\n                return draft;\r\n            }\r\n\r\n            const activeMachine = draft.machines.find((m) => m.Id === draft.activeMachineId)!;\r\n\r\n            GridSetupReducer(activeMachine, action, new TypeProvider(draft.machines), draft.cellSize);\r\n            break;\r\n    }\r\n\r\n    switch (action.type) {\r\n        case \"AddNewMachineActionType\":\r\n        case \"ChannelChangedActionType\":\r\n        case \"DeleteMachineActionType\":\r\n        case \"FixMachineActionType\":\r\n        case \"MachineAddedActionType\":\r\n        case \"MachineMovedActionType\":\r\n        case \"MachineRemovedActionType\":\r\n            if (draft.activeMachineId !== undefined) {\r\n                EnrichState(draft);\r\n            }\r\n            break;\r\n    }\r\n\r\n    return draft;\r\n};\r\n\r\nfunction CreateNewMachine(name: string, description: string): CustomMachineModel {\r\n    return {\r\n        Id: CreateGuid(),\r\n        DirectlyDependingOn: [],\r\n        Style: {\r\n            BorderColor: GetRandomColor(),\r\n            Color: GetRandomColor(),\r\n            Name: name,\r\n            Description: description\r\n        },\r\n        Api: {\r\n            InputChannels: [ChannelColorEnum.Green],\r\n            OutputChannels: []\r\n        },\r\n        Setup: {\r\n            NumberOfRows: Constants.MinimumRows,\r\n            NumberOfColumns: Constants.MinimumColumns,\r\n            MachineInstances: [{\r\n                MachineId: \"0\",\r\n                OutputChannels: [{ Direction: DirectionEnum.Right, Channel: ChannelColorEnum.Green, Status: \"Exists\" }],\r\n                InputChannels: [], Id: 1,\r\n                Cell: { Row: 2, Column: 1 },\r\n                Status: \"Valid\"\r\n            }]\r\n        },\r\n        ExitCells: [{ Cell: { Row: 2, Column: Constants.MinimumColumns - 1 }, Direction: DirectionEnum.Right }],\r\n        DependingOn: [\"0\"],\r\n        DependingOnDeleted: [],\r\n        Status: \"Valid\"\r\n    };\r\n}\r\n\r\nexport function GetNewPlayer(name: string): PlayerModel {\r\n    return {\r\n        deletedMachines: [],\r\n        id: CreateGuid(),\r\n        levelData: [],\r\n        machines: [],\r\n        name,\r\n        showAnimations: true,\r\n        stepTime: 10,\r\n        activeMachineId: undefined,\r\n        activeLevel: undefined,\r\n        cellSize: Constants.CellSize\r\n    }\r\n}\r\n\r\nconst EnrichState = (draft: PlayerModel) => {\r\n\r\n    DetermineDependencies(draft);\r\n    SetApi(draft);\r\n\r\n    return draft;\r\n};\r\n\r\nfunction DetermineDependencies(draft: Draft<PlayerModel>) {\r\n    const dependingDirectly: string[] = [];\r\n    const depending: string[] = [];\r\n    const DependingOnDeleted: string[] = [];\r\n    const activeMachine = draft.machines.find((m) => m.Id === draft.activeMachineId)!;\r\n\r\n    for (const machine of activeMachine.Setup.MachineInstances) {\r\n        if (machine.Status === \"Deleted\") {\r\n            DependingOnDeleted.push(machine.MachineId);\r\n            continue;\r\n        }\r\n        if (!IsDefaultMachine(machine.MachineId)) {\r\n            if (!dependingDirectly.some((d) => d === machine.MachineId)) {\r\n                dependingDirectly.push(machine.MachineId);\r\n            }\r\n        }\r\n        if (!depending.some((d) => d === machine.MachineId)) {\r\n            depending.push(machine.MachineId);\r\n            if (!IsDefaultMachine(machine.MachineId)) {\r\n                const machineType = draft.machines.find((m) => m.Id === machine.MachineId)!;\r\n                for (const depMachine of machineType.DependingOn) {\r\n                    if (!depending.some((d) => d === depMachine)) {\r\n                        depending.push(depMachine);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    activeMachine.DependingOn = depending;\r\n    activeMachine.DirectlyDependingOn = dependingDirectly;\r\n    return draft;\r\n}\r\n\r\nfunction SetApi(draft: Draft<PlayerModel>) {\r\n    const activeMachine = draft.machines.find((m) => m.Id === draft.activeMachineId)!;\r\n\r\n    activeMachine.Setup.MachineInstances.forEach((mi) => {\r\n        mi.InputChannels.forEach((ic) => {\r\n            ic.Status = \"DoesNotExist\";\r\n        });\r\n    });\r\n\r\n    activeMachine.ExitCells = CalculateExits(activeMachine.Setup, new TypeProvider(draft.machines));\r\n\r\n    const exitColors = activeMachine.ExitCells.map((ec) => {\r\n        switch (ec.Direction) {\r\n            case DirectionEnum.Right:\r\n                return ChannelColorEnum.Green;\r\n            case DirectionEnum.Up:\r\n                return ChannelColorEnum.Blue;\r\n            case DirectionEnum.Down:\r\n                return ChannelColorEnum.Red;\r\n            case DirectionEnum.Left:\r\n                return ChannelColorEnum.Yellow;\r\n            default:\r\n                throw Error(\"Invalid value for direction\");\r\n        }\r\n    });\r\n\r\n    const outputs: ChannelColorEnum[] = [];\r\n    for (const color of exitColors) {\r\n        if (!outputs.some((o) => o === color)) {\r\n            outputs.push(color);\r\n        }\r\n    }\r\n    const startMachines = GetStartMachines(activeMachine.Setup);\r\n    const inputs = startMachines.map((mi) => {\r\n        switch (mi.MachineId) {\r\n            case \"0\":\r\n                return ChannelColorEnum.Green;\r\n            case \"1\":\r\n                return ChannelColorEnum.Red;\r\n            case \"2\":\r\n                return ChannelColorEnum.Blue;\r\n            case \"3\":\r\n                return ChannelColorEnum.Yellow;\r\n            default:\r\n                throw Error(\"Unknown startmachine \" + mi.MachineId);\r\n        }\r\n    });\r\n    const newApi: MachineApi = { InputChannels: inputs, OutputChannels: outputs };\r\n    if (!ApiAreEqual(newApi, activeMachine.Api)) {\r\n        UpdateStatusDependentMachines(draft, newApi);\r\n    }\r\n    activeMachine.Api = newApi;\r\n    CheckMachineStatus(activeMachine);\r\n    return draft;\r\n}\r\n\r\nfunction CheckMachineStatus(draft: Draft<CustomMachineModel>) {\r\n    if (draft.Setup.MachineInstances.some((m) => m.Status !== \"Valid\")) {\r\n        draft.Status = \"Invalid\";\r\n    } else {\r\n        draft.Status = \"Valid\";\r\n    }\r\n}\r\n\r\nfunction UpdateStatusDependentMachines(draft: Draft<PlayerModel>, api: MachineApi) {\r\n    const activeMachineId = draft.activeMachineId!;\r\n    const dependentMachines = draft.machines.filter((m) => m.DirectlyDependingOn.some((dp) => dp === activeMachineId));\r\n    for (const dependentMachine of dependentMachines) {\r\n        for (const machineInstance of dependentMachine.Setup.MachineInstances.filter((mi) => mi.Status !== \"Deleted\" && mi.MachineId === activeMachineId)) {\r\n            UpdateMachineStatus(api, machineInstance);\r\n        }\r\n\r\n        CheckMachineStatus(dependentMachine);\r\n    }\r\n}","import { ChannelColorEnum } from \"./ChannelColorsEnum\";\n\nexport interface MachineApi {\n    readonly OutputChannels: ChannelColorEnum[];\n    readonly InputChannels: ChannelColorEnum[];\n}\n\nexport function ApiAreEqual(first: MachineApi, second: MachineApi): boolean {\n    if (first.InputChannels.length !== second.InputChannels.length) {\n        return false;\n    }\n    if (first.OutputChannels.length !== second.OutputChannels.length) {\n        return false;\n    }\n    if (first.InputChannels.some((i) => !second.InputChannels.some((o) => i === o))) {\n        return false;\n    }\n    if (first.OutputChannels.some((i) => !second.OutputChannels.some((o) => i === o))) {\n        return false;\n    }\n\n    return true;\n}","import produce, { Draft } from \"immer\";\r\nimport { GetActiveMachine } from \"../../Helper/StoreHelper\";\r\nimport { IsDefaultMachine } from \"../../MachineStore/IMachine\";\r\nimport { Actions } from \"../Actions\";\r\nimport { GameData } from \"./GameModel\";\r\nimport { LevelReducer } from \"./Level/Reducer\";\r\nimport { LevelState } from \"./PlayerReducer/LevelData\";\r\nimport { PlayerReducer } from \"./PlayerReducer/PlayerReducer\";\r\n\r\nexport const GameReducer: (state: GameData, action: Actions) => GameData = produce((draft: Draft<GameData>, action: Actions) => {\r\n    switch (action.type) {\r\n        case \"SwitchScreen\":\r\n            draft.screen = action.screen;\r\n            break;\r\n        case \"SetMessagesActionType\":\r\n            draft.messages = action.messages;\r\n            break;\r\n        case \"SetMovingOutput\":\r\n            draft.movingOutput = action.outputChannel;\r\n            break;\r\n        default:\r\n            switch (action.type) {\r\n                case \"AddNewMachineActionType\":\r\n                    draft.messages = [];\r\n                    break;\r\n                case \"LoadLevelActionType\":\r\n                    draft.screen = \"playing\";\r\n                    break;\r\n                case \"ChannelChangedActionType\":\r\n                    if (action.channel.Status === \"Exists\") {\r\n                        draft.movingOutput = undefined;\r\n                    }\r\n            }\r\n\r\n            if (draft.activePlayerId === \"\") {\r\n                return;\r\n            }\r\n\r\n            const activePlayer = draft.players.find((p) => p.id === draft.activePlayerId)!;\r\n            PlayerReducer(activePlayer, action);\r\n            break;\r\n    }\r\n\r\n    draft.activeLevel = LevelReducer(draft.activeLevel, action);\r\n\r\n    switch (action.type) {\r\n        case \"ReportOutputActionType\":\r\n            CheckLevelCompleted(draft);\r\n            break;\r\n        case \"MachineRemovedActionType\":\r\n            const activePlayer = draft.players.find((p) => p.id === draft.activePlayerId)!;\r\n            const levelData = activePlayer.levelData.find((l) => l.Id === draft.activeLevel!.id)!;\r\n            if (levelData.State === LevelState.NonValidMachineUsed) {\r\n                if (CheckValidMachinesUsed(draft)) {\r\n                    levelData.State = LevelState.InProgress;\r\n                }\r\n            }\r\n            break;\r\n    }\r\n\r\n    return;\r\n});\r\n\r\nfunction CheckValidMachinesUsed(gameData: GameData): boolean {\r\n    return GetActiveMachine(gameData)?.DependingOn.filter((mu) => IsDefaultMachine(mu)).every((mu) => gameData.activeLevel!.allowedMachines.some((am) => am === mu)) !== false;\r\n}\r\n\r\nfunction CheckLevelCompleted(draft: Draft<GameData>) {\r\n    const activePlayer = draft.players.find((p) => p.id === draft.activePlayerId)!;\r\n    const levelData = activePlayer.levelData.find((l) => l.Id === draft.activeLevel!.id)!;\r\n\r\n    const onlyAllowedMachinesUsed = CheckValidMachinesUsed(draft);\r\n    if (!onlyAllowedMachinesUsed) {\r\n        levelData.State = LevelState.NonValidMachineUsed;\r\n    } else {\r\n        const isCompleted = draft.activeLevel!.tests.every((t) => {\r\n            if (t.actualOutputs?.length !== t.expectedOutputs.length) {\r\n                return false;\r\n            }\r\n\r\n            for (let j = 0; j < t.expectedOutputs.length; j++) {\r\n                const expected = t.expectedOutputs[j];\r\n                if (t.actualOutputs !== undefined) {\r\n                    const indexActual = (t.actualOutputs.findIndex((o) => o.Channel === expected.Channel && o.Content === expected.Content));\r\n                    if (indexActual === -1) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return true;\r\n        });\r\n        if (isCompleted) {\r\n            levelData.State = LevelState.Completed;\r\n        } else {\r\n            levelData.State = LevelState.InProgress;\r\n        }\r\n    }\r\n\r\n    levelData.LastUsedMachineId = activePlayer.activeMachineId;\r\n}\r\n","import { createStore } from \"redux\";\r\nimport { CustomMachinesActionTypes } from \"./GameDataReducer/PlayerReducer/Actions\";\r\nimport { GridSetupActionTypes } from \"./GameDataReducer/PlayerReducer/GridSetup/Actions\";\r\nimport { MachineInstanceActionTypes } from \"./GameDataReducer/PlayerReducer/GridSetup/MachineInstances/Actions\";\r\nimport { LevelActionTypes } from \"./GameDataReducer/Level/Actions\";\r\nimport { ActionTypes } from \"./GameDataReducer/Actions\";\r\nimport { GameReducer } from \"./GameDataReducer/GameReducer\";\r\nimport { GameData } from \"./GameDataReducer/GameModel\";\r\nimport { GetNewPlayer } from \"./GameDataReducer/PlayerReducer/PlayerReducer\";\r\nimport { TestState } from \"../TestState\";\r\nimport { Constants } from \"../Components/Constants\";\r\nimport { Draft } from \"immer\";\r\n\r\nfunction rootReducer(state: GameData | undefined, action: CustomMachinesActionTypes | GridSetupActionTypes | MachineInstanceActionTypes | LevelActionTypes | ActionTypes): GameData {\r\n    if (state === undefined) {\r\n        const player = GetNewPlayer(\"anonymous\");\r\n        return {\r\n            players: [player],\r\n            activePlayerId: player.id,\r\n            messages: [],\r\n            screen: \"startMenu\",\r\n            activeLevel: undefined,\r\n            movingOutput: undefined\r\n        };\r\n    }\r\n\r\n    const returnValue = GameReducer(state, action);\r\n    window.localStorage.setItem(\"Players\", JSON.stringify(returnValue.players));\r\n    window.localStorage.setItem(\"activePlayer\", returnValue.activePlayerId);\r\n\r\n    return returnValue;\r\n}\r\n\r\nfunction getInitialState(): GameData| undefined {\r\n\r\n    // return TestState as GameData;\r\n\r\n    const version = Number.parseInt(window.localStorage.getItem(\"Version\") ?? \"0\", 10);\r\n    if (version === 0) {\r\n        window.localStorage.removeItem(\"State\");\r\n        window.localStorage.setItem(\"Version\", \"1\");\r\n\r\n        return undefined;\r\n    }\r\n\r\n    const state: Draft<GameData> = {\r\n        players: JSON.parse(window.localStorage.getItem(\"Players\")!),\r\n        activePlayerId: window.localStorage.getItem(\"activePlayer\")!,\r\n        messages: [],\r\n        screen: \"startMenu\",\r\n        movingOutput: undefined,\r\n    };\r\n\r\n    if (state.players === null){\r\n        return undefined;\r\n    }\r\n    \r\n    state.players[0].cellSize = Constants.CellSize;\r\n    return state;\r\n}\r\n\r\nexport const AppStore = createStore(rootReducer, getInitialState(), (window as any).__REDUX_DEVTOOLS_EXTENSION__ && (window as any).__REDUX_DEVTOOLS_EXTENSION__());\r\nexport const AppState = () => {\r\n    return AppStore.getState();\r\n};","import { IActor } from \"../IActor\";\nimport { MessageModel } from \"../../Models/MessageModel\";\nimport { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\n\nexport class JoinActor implements IActor {\n    private greenInput: string | undefined;\n    private redInput: string | undefined;\n    public Act(message: MessageModel): Promise<MessageModel[]> {\n        switch (message.Channel) {\n            case ChannelColorEnum.Green:\n                this.greenInput = message.Content;\n                break;\n            case ChannelColorEnum.Red:\n                this.redInput = message.Content;\n                break;\n            default:\n                throw Error(\"Machine does not have inputchannel \" + message.Channel);\n        }\n\n        if (this.greenInput === undefined || this.redInput === undefined) {\n            return Promise.resolve([]);\n        }\n        const returnMessage = this.greenInput.concat(this.redInput);\n        this.greenInput = undefined;\n        this.redInput = undefined;\n        const returnValue: MessageModel[] = [{ Channel: ChannelColorEnum.Green, Content: returnMessage }];\n\n        return Promise.resolve(returnValue);\n    }\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { JoinActor } from \"./JoinActor\";\r\n\r\nexport class JoinMachine implements IMachine {\r\n    public GetActor(): IActor {\r\n        return new JoinActor();\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Style: {\r\n                BorderColor: \"Orange\",\r\n                Color: \"Grey\",\r\n                Name: \"Join\",\r\n                Description: \"Exits with the input from the green channel before the red channel\",\r\n            },\r\n            Api: {\r\n                InputChannels: [ChannelColorEnum.Green, ChannelColorEnum.Red],\r\n                OutputChannels: [ChannelColorEnum.Green]\r\n            },\r\n            DependingOn: [],\r\n            DirectlyDependingOn: []\r\n        };\r\n    }\r\n    public id = \"14\";\r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\n\r\nexport class SplitMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            const firstCharacterLength = message.Content[0] !== \"<\" ? 1 : message.Content.indexOf(\">\") + 1;         \r\n\r\n            returnValue.push({ Content: message.Content.slice(0, firstCharacterLength), Channel: ChannelColorEnum.Green });\r\n            returnValue.push({ Content: message.Content.slice(firstCharacterLength), Channel: ChannelColorEnum.Red });\r\n\r\n            return Promise.resolve(returnValue);\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Style: {\r\n                BorderColor: \"Orange\",\r\n                Color: \"Black\",\r\n                Name: \"Split\",\r\n\r\n                Description: \"The first character exits green, the other characters exit red\",\r\n            },\r\n            Api: {\r\n                InputChannels: [ChannelColorEnum.Green],\r\n                OutputChannels: [ChannelColorEnum.Green, ChannelColorEnum.Red],\r\n\r\n            },\r\n            DependingOn: [],\r\n            DirectlyDependingOn: []\r\n        };\r\n    }\r\n    public id =\"13\";\r\n}\r\n","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\n\r\nexport class BlueStartMachine implements IMachine {\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            returnValue.push({ Content: message.Content, Channel: ChannelColorEnum.Green });\r\n            return Promise.resolve(returnValue);\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Style: {\r\n                Color: \"white\",\r\n                BorderColor: \"blue\",\r\n                Name: \"Start\",\r\n                Description: \"Starting point of the computation. Acts as a move machine for all other purposes\"\r\n            },\r\n            Api: {\r\n                InputChannels: [ChannelColorEnum.Green],\r\n                OutputChannels: [ChannelColorEnum.Green],\r\n            },\r\n            DependingOn: [],\r\n            DirectlyDependingOn: []\r\n        };\r\n    }\r\n    public readonly id = \"2\";\r\n}","import { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachine } from \"../IMachine\";\r\nimport { IMachineType } from \"../IMachineType\";\r\n\r\nexport class YellowStartMachine implements IMachine {\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            returnValue.push({ Content: message.Content, Channel: ChannelColorEnum.Green });\r\n            return Promise.resolve(returnValue);\r\n        }\r\n    };\r\n    public GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    public GetType(): IMachineType {\r\n        return {\r\n            Style: {\r\n                Color: \"white\",\r\n                BorderColor: \"#fff020\",\r\n                Name: \"Start\",\r\n                Description: \"Starting point of the computation. Acts as a move machine for all other purposes\"\r\n            },\r\n            Api: {\r\n                InputChannels: [ChannelColorEnum.Green],\r\n                OutputChannels: [ChannelColorEnum.Green],\r\n            },\r\n            DependingOn: [],\r\n            DirectlyDependingOn: []\r\n        };\r\n    }\r\n    public readonly id = \"3\";\r\n}","import { Computer } from \"../Computing/Computer\";\r\nimport { CleanMessage, RestoreMessage } from \"../Computing/MessageCleaner\";\r\nimport { MessageModel } from \"../Models/MessageModel\";\r\nimport { GridSetupModel } from \"../Redux/GameDataReducer/PlayerReducer/GridSetup/GridModel\";\r\nimport { AddStarMachine } from \"./DefaultMachines/AddStarMachine\";\r\nimport { AddZeroMachine } from \"./DefaultMachines/AddZeroMachine\";\r\nimport { CompareMachine } from \"./DefaultMachines/CompareMachine\";\r\nimport { CopyMachine } from \"./DefaultMachines/CopyMachine\";\r\nimport { DeleteMachine } from \"./DefaultMachines/DeleteMachine\";\r\nimport { GreenStartMachine } from \"./DefaultMachines/GreenStartMachine\";\r\nimport { IncrementMachine } from \"./DefaultMachines/IncrementMachine\";\r\nimport { MoveMachine } from \"./DefaultMachines/MoveMachine\";\r\nimport { RedStartMachine } from \"./DefaultMachines/RedStartMachine\";\r\nimport { RotateMachine } from \"./DefaultMachines/RotateMachine\";\r\nimport { IActor } from \"./IActor\";\r\nimport { IMachine, IsDefaultMachine } from \"./IMachine\";\r\nimport { IMachineType } from \"./IMachineType\";\r\nimport { AppState } from \"../Redux/Store\";\r\nimport { JoinMachine } from \"./DefaultMachines/JoinMachine\";\r\nimport { SplitMachine } from \"./DefaultMachines/SplitMachine\";\r\nimport { BlueStartMachine } from \"./DefaultMachines/BlueStartMachine\";\r\nimport { YellowStartMachine } from \"./DefaultMachines/YellowStartMachine\";\r\nimport { ITypeProvider } from \"./ITypeProvider\";\r\nimport { GetActivePlayer } from \"../Helper/StoreHelper\";\r\n\r\nexport class MachineStore implements ITypeProvider {\r\n    private static machineStore: MachineStore;\r\n    private machines: IMachine[];\r\n\r\n    private constructor() {\r\n        this.machines = [];\r\n        this.init();\r\n    }\r\n\r\n    public static GetStore(): MachineStore {\r\n        if (MachineStore.machineStore === undefined) {\r\n            MachineStore.machineStore = new MachineStore();\r\n        }\r\n\r\n        return MachineStore.machineStore;\r\n    }\r\n\r\n    private init(): void {\r\n        this.machines = [];\r\n        this.machines.push(new GreenStartMachine());\r\n        this.machines.push(new RedStartMachine());\r\n        this.machines.push(new BlueStartMachine());\r\n        this.machines.push(new YellowStartMachine());\r\n        this.machines.push(new MoveMachine());\r\n        this.machines.push(new CopyMachine());\r\n        this.machines.push(new DeleteMachine());\r\n        this.machines.push(new RotateMachine());\r\n        this.machines.push(new CompareMachine());\r\n        this.machines.push(new AddStarMachine());\r\n        this.machines.push(new AddZeroMachine());\r\n        this.machines.push(new IncrementMachine());\r\n        this.machines.push(new SplitMachine());\r\n        this.machines.push(new JoinMachine());\r\n    }\r\n\r\n    private FindMachine(id: string): IMachine {\r\n        const machine = this.machines.find((m) => m.id === id);\r\n        if (machine === undefined) {\r\n            throw new Error(\"No default machine found with id \" + id);\r\n        }\r\n\r\n        return machine;\r\n    }\r\n\r\n    public GetActor(id: string): IActor {\r\n        if (IsDefaultMachine(id)) {\r\n            return this.FindMachine(id).GetActor();\r\n        } else {\r\n            const customMachine = GetActivePlayer(AppState())?.machines.find((cm) => cm.Id === id);\r\n            if (customMachine === undefined) {\r\n                throw new Error(\"No custom machine found with id \" + id);\r\n            }\r\n            return this.CreateCustomActor(customMachine.Setup);\r\n        }\r\n    }\r\n\r\n    public GetMachineType(id: string): IMachineType {\r\n        if (IsDefaultMachine(id)) {\r\n            return this.FindMachine(id).GetType();\r\n        } else {\r\n            const customMachine = GetActivePlayer(AppState())?.machines.find((cm) => cm.Id === id);\r\n            if (customMachine === undefined) {\r\n                throw new Error(\"No custom machine found with id \" + id);\r\n            }\r\n            return customMachine;\r\n        }\r\n    }\r\n\r\n    public GetAllMachines(): string[] {\r\n        const machines: string[] = this.machines.map((m) => m.id);\r\n        return machines;\r\n    }\r\n\r\n    private CreateCustomActor(setup: GridSetupModel): IActor {\r\n        const computer = new Computer(setup, false);\r\n        return {\r\n            Act: (message) => {\r\n                const [saveMessage, starNumber] = CleanMessage(message.Content);\r\n                const cleanedMessage: MessageModel = { Content: saveMessage, Channel: message.Channel };\r\n                const computedMessages = computer.RunInput(cleanedMessage);\r\n                const returnValue: Promise<MessageModel[]> = computedMessages.then((messages) => messages.map((mm) => ({ Channel: mm.Channel, Content: RestoreMessage(mm.Content, starNumber) })));\r\n                return returnValue;\r\n            }\r\n        };\r\n    }\r\n}","import { OrderedMessageModel } from \"../../../Models/OrderedMessageModel\";\r\n\r\nexport const LoadLevelActionType = \"LoadLevelActionType\";\r\ninterface LoadLevelActionType {\r\n    type: typeof LoadLevelActionType;\r\n    id: string;\r\n}\r\n\r\nexport function LoadLevel(id: string): LevelActionTypes {\r\n    return {\r\n        type: \"LoadLevelActionType\",\r\n        id\r\n    };\r\n}\r\n\r\nexport const ReportOutputActionType = \"ReportOutputActionType\";\r\ninterface ReportOutputActionType {\r\n    type: typeof ReportOutputActionType;\r\n    outputMessage: OrderedMessageModel;\r\n    testId: number;\r\n}\r\n\r\nexport function ReportOutput(outputMessage: OrderedMessageModel, testId: number): LevelActionTypes {\r\n    return {\r\n        type: \"ReportOutputActionType\",\r\n        outputMessage,\r\n        testId\r\n    };\r\n}\r\nexport const ClearTestOutputActionType = \"ClearTestOutputActionType\";\r\ninterface ClearTestOutputActionType {\r\n    type: typeof ClearTestOutputActionType;\r\n    testId: number;\r\n}\r\n\r\nexport function ClearTestOutput(testId: number): LevelActionTypes {\r\n    return {\r\n        type: \"ClearTestOutputActionType\",\r\n        testId\r\n    };\r\n}\r\nexport const AddTestActionType = \"AddTestActionType\";\r\ninterface AddTestActionType {\r\n    type: typeof AddTestActionType;\r\n}\r\n\r\nexport function AddTest(): LevelActionTypes {\r\n    return {\r\n        type: \"AddTestActionType\",\r\n    };\r\n}\r\n\r\nexport const RemoveTestActionType = \"RemoveTestActionType\";\r\ninterface RemoveTestActionType {\r\n    type: typeof RemoveTestActionType;\r\n    testId: number;\r\n}\r\n\r\nexport function RemoveTest(testId: number): LevelActionTypes {\r\n    return {\r\n        type: \"RemoveTestActionType\",\r\n        testId\r\n    };\r\n}\r\n\r\nexport const UpdateInputActionType = \"UpdateInputActionType\";\r\ninterface UpdateInputActionType {\r\n    type: typeof UpdateInputActionType;\r\n    testId: number;\r\n    input: OrderedMessageModel;\r\n}\r\n\r\nexport function UpdateInput(input: OrderedMessageModel, testId: number): LevelActionTypes {\r\n    return {\r\n        type: \"UpdateInputActionType\",\r\n        input,\r\n        testId\r\n    };\r\n}\r\n\r\nexport const AddInputActionType = \"AddInputActionType\";\r\ninterface AddInputActionType {\r\n    type: typeof AddInputActionType;\r\n    testId: number;\r\n}\r\n\r\nexport function AddInput(testId: number): LevelActionTypes {\r\n    return {\r\n        type: \"AddInputActionType\",\r\n        testId\r\n    };\r\n}\r\n\r\nexport const RemoveInputActionType = \"RemoveInputActionType\";\r\ninterface RemoveInputActionType {\r\n    type: typeof RemoveInputActionType;\r\n    testId: number;\r\n    order: number;\r\n}\r\n\r\nexport function RemoveInput(testId: number, order: number): LevelActionTypes {\r\n    return {\r\n        type: \"RemoveInputActionType\",\r\n        testId,\r\n        order\r\n    };\r\n}\r\n\r\nexport type LevelActionTypes = LoadLevelActionType\r\n    | ReportOutputActionType\r\n    | ClearTestOutputActionType\r\n    | AddTestActionType\r\n    | RemoveTestActionType\r\n    | UpdateInputActionType\r\n    | AddInputActionType\r\n    | RemoveInputActionType;\r\n\r\n ","import { MessageLocationModel } from \"../../../../Models/MessageLocationModel\";\r\nimport { MachineInstanceActionTypes } from \"./MachineInstances/Actions\";\r\ninterface SetMessagesActionType {\r\n    type: \"SetMessagesActionType\";\r\n    messages: MessageLocationModel[];\r\n}\r\n\r\nexport function SetMessages(messages: MessageLocationModel[]): GridSetupActionTypes {\r\n    return {\r\n        type: \"SetMessagesActionType\",\r\n        messages\r\n    };\r\n}\r\n\r\nexport function ClearMessages(): GridSetupActionTypes {\r\n    return {\r\n        type: \"SetMessagesActionType\",\r\n        messages: []\r\n    };\r\n}\r\n\r\ninterface SetColorActionType {\r\n    type: \"SetColorActionType\";\r\n    color: string;\r\n}\r\n\r\nexport function SetColor(color: string): GridSetupActionTypes {\r\n    return {\r\n        type: \"SetColorActionType\",\r\n        color\r\n    };\r\n}\r\n\r\ninterface SetBorderColorActionType {\r\n    type: \"SetBorderColorActionType\";\r\n    borderColor: string;\r\n}\r\n\r\nexport function SetBorderColor(borderColor: string): GridSetupActionTypes {\r\n    return {\r\n        type: \"SetBorderColorActionType\",\r\n        borderColor\r\n    };\r\n}\r\ninterface SetDescriptionActionType {\r\n    type: \"SetDescriptionActionType\";\r\n    description: string;\r\n}\r\n\r\nexport function SetDescription(description: string): GridSetupActionTypes {\r\n    return {\r\n        type: \"SetDescriptionActionType\",\r\n        description\r\n    };\r\n}\r\n\r\ninterface SetNameActionType {\r\n    type: \"SetNameActionType\";\r\n    name: string;\r\n}\r\n\r\nexport function SetName(name: string): GridSetupActionTypes {\r\n    return {\r\n        type: \"SetNameActionType\",\r\n        name\r\n    };\r\n}\r\n\r\nexport type GridSetupActionTypes =\r\n    | SetMessagesActionType\r\n    | SetColorActionType\r\n    | SetBorderColorActionType\r\n    | SetNameActionType\r\n    | SetDescriptionActionType\r\n    | MachineInstanceActionTypes;","import { IActor } from \"../MachineStore/IActor\";\r\nimport { MachineStore } from \"../MachineStore/MachineStore\";\r\nimport { CellModel } from \"../Models/CellModel\";\r\nimport { ChannelColorEnum } from \"../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../Models/DirectionEnum\";\r\nimport { Move } from \"../Helper/SetupHelper\";\r\nimport { MachineInstanceModel } from \"../Models/MachineInstanceModel\";\r\nimport { MessageLocationModel } from \"../Models/MessageLocationModel\";\r\nimport { MessageModel } from \"../Models/MessageModel\";\r\nimport { GridSetupModel } from \"../Redux/GameDataReducer/PlayerReducer/GridSetup/GridModel\";\r\nimport { OrderedMessageModel } from \"../Models/OrderedMessageModel\";\r\nimport { ClearTestOutput, ReportOutput } from \"../Redux/GameDataReducer/Level/Actions\";\r\nimport { SetMessages } from \"../Redux/GameDataReducer/PlayerReducer/GridSetup/Actions\";\r\nimport { IStore } from \"../Redux/IStore\";\r\nimport { GetActivePlayer } from \"../Helper/StoreHelper\";\r\n\r\nexport class Computer {\r\n    private setup: GridSetupModel;\r\n    private machines: Array<{ id: number, actor: IActor }> = [];\r\n    private store: MachineStore;\r\n    private outputs: MessageModel[] = [];\r\n    private static cancelComputation: (() => void) | undefined = undefined;\r\n    private static stepCount: number;\r\n    private activeSetup: boolean;\r\n\r\n    constructor(setup: GridSetupModel, activeSetup: boolean) {\r\n        this.setup = setup;\r\n        this.activeSetup = activeSetup;\r\n        this.store = MachineStore.GetStore();\r\n        this.HandleNextMessages = this.HandleNextMessages.bind(this);\r\n        this.CalculateNextMessages = this.CalculateNextMessages.bind(this);\r\n        this.RunInput = this.RunInput.bind(this);\r\n        this.RunComputation = this.RunComputation.bind(this);\r\n        this.SetDelay = this.SetDelay.bind(this);\r\n    }\r\n    public GetStartMachine(color: ChannelColorEnum): MachineInstanceModel | undefined {\r\n\r\n        let id: string = \"0\";\r\n        switch (color) {\r\n            case ChannelColorEnum.Green:\r\n                id = \"0\";\r\n                break;\r\n            case ChannelColorEnum.Red:\r\n                id = \"1\";\r\n                break;\r\n            case ChannelColorEnum.Blue:\r\n                id = \"2\";\r\n                break;\r\n            case ChannelColorEnum.Yellow:\r\n                id = \"3\";\r\n                break;\r\n        }\r\n\r\n        return this.setup.MachineInstances.find((mi) => mi.MachineId === id);\r\n    }\r\n\r\n    public async RunComputation(testId: number, store: IStore): Promise<OrderedMessageModel[]> {\r\n        Computer.StopComputation();\r\n        this.machines = [];\r\n        store.dispatch(ClearTestOutput(testId));\r\n        const test = store.getState().activeLevel!.tests.find((t) => t.id === testId);\r\n        if (test === undefined) {\r\n            return Promise.resolve([]);\r\n        } else {\r\n            let orderedOutputs: OrderedMessageModel[] = [];\r\n\r\n            for (const input of test.inputs) {\r\n                const results = await this.RunInput(input, store, testId, input.Order).catch((reason) => Promise.reject(reason));\r\n                orderedOutputs = orderedOutputs.concat(results.map((mm) => ({ Content: mm.Content, Channel: mm.Channel, Order: input.Order })));\r\n            }\r\n\r\n            return Promise.resolve(orderedOutputs);\r\n        }\r\n    }\r\n    \r\n    public static StopComputation(): void {\r\n        if (Computer.cancelComputation) {\r\n            Computer.cancelComputation();\r\n            Computer.cancelComputation = undefined;\r\n        }\r\n\r\n        Computer.stepCount = 0;\r\n    }\r\n\r\n    public RunInput(input: MessageModel, store?: IStore, testId?: number, order?: number): Promise<MessageModel[]> {\r\n        this.outputs = [];\r\n        const messageLocations: MessageLocationModel[] = [];\r\n        const machineInstance = this.GetStartMachine(input.Channel);\r\n        if (machineInstance !== undefined) {\r\n            const direction = machineInstance.OutputChannels[0].Direction;\r\n            const messageLocation: MessageLocationModel = { Content: input.Content, Direction: direction, Cell: machineInstance.Cell };\r\n            messageLocations.push(messageLocation);\r\n        }\r\n\r\n        if (store !== undefined && this.activeSetup && GetActivePlayer(store.getState())!.showAnimations) {\r\n            store.dispatch(SetMessages(messageLocations));\r\n        }\r\n\r\n        return this.OrderNewCalculation({ messageLocations, store, testId, order });\r\n    }\r\n\r\n    private SetDelay<U, T>(callback: (args: U) => Promise<T>, args: U, timeout: number): Promise<T> {\r\n        return new Promise<T>((resolve, reject) => {\r\n            const clearHandle = window.setTimeout(() => callback(args).then(resolve).catch(reject), timeout);\r\n            Computer.cancelComputation = () => {\r\n                window.clearTimeout(clearHandle);\r\n                reject(\"Computation cancelled\");\r\n            };\r\n        });\r\n    }\r\n\r\n    private async HandleNextMessages(args: { messageLocations: MessageLocationModel[], store?: IStore, testId?: number, order?: number }): Promise<MessageModel[]> {\r\n\r\n        const [nextMessages, outputMessages] = await this.CalculateNextMessages(args.messageLocations);\r\n        if (outputMessages.length > 0) {\r\n            this.outputs = this.outputs.concat(outputMessages);\r\n        }\r\n\r\n        if (args.store !== undefined) {\r\n            for (const message of outputMessages) {\r\n                args.store.dispatch(ReportOutput({ Channel: message.Channel, Content: message.Content, Order: args.order! }, args.testId!));\r\n            }\r\n        }\r\n\r\n        if (args.store !== undefined && this.activeSetup && GetActivePlayer(args.store.getState())!.showAnimations) {\r\n            args.store.dispatch(SetMessages(nextMessages));\r\n        }\r\n\r\n        if (nextMessages.length > 0) {\r\n            return this.OrderNewCalculation({ ...args, messageLocations: nextMessages });\r\n        } else {\r\n            return Promise.resolve(this.outputs);\r\n        }\r\n    }\r\n\r\n    private OrderNewCalculation(args: { messageLocations: MessageLocationModel[], store?: IStore, testId?: number, order?: number }): Promise<MessageModel[]> {\r\n        Computer.stepCount++;\r\n        const showAnimations = args.store === undefined || GetActivePlayer(args.store.getState())!.showAnimations;\r\n        if ((this.activeSetup && showAnimations) || Computer.stepCount % 100000 === 0) {\r\n            const timeout = args.store !== undefined && showAnimations ? GetActivePlayer(args.store.getState())!.stepTime * 100 : 0;\r\n\r\n            return this.SetDelay(this.HandleNextMessages, args, timeout);\r\n        } else {\r\n            return this.HandleNextMessages(args);\r\n        }\r\n    }\r\n\r\n    private async CalculateNextMessages(messages: MessageLocationModel[]): Promise<[MessageLocationModel[], MessageModel[]]> {\r\n        const doneMessages: MessageLocationModel[] = [];\r\n        const nextMessages: MessageLocationModel[] = [];\r\n        for (const message of messages) {\r\n            let machine: MachineInstanceModel | undefined;\r\n            let messageCell: CellModel | undefined = message.Cell;\r\n\r\n            while (machine === undefined) {\r\n                messageCell = Move(this.setup, messageCell!, message.Direction);\r\n                if (messageCell === undefined) {\r\n                    break;\r\n                }\r\n\r\n                // eslint-disable-next-line\r\n                machine = this.setup.MachineInstances.find((mi) => mi.Cell.Column === messageCell!.Column && mi.Cell.Row === messageCell!.Row);\r\n            }\r\n\r\n            if (messageCell === undefined) {\r\n                doneMessages.push({ Cell: undefined, Direction: message.Direction, Content: message.Content });\r\n                continue;\r\n            }\r\n\r\n            if (machine!.Status !== \"Valid\") {\r\n                return Promise.reject(\"Encountered invalid machine, check your machines\");\r\n            }\r\n\r\n            let channel = ChannelColorEnum.Green;\r\n            const inputChannel = machine!.InputChannels.find((ic) => ic.Direction === message.Direction);\r\n            if (inputChannel !== undefined) {\r\n                channel = inputChannel.Channel;\r\n            }\r\n\r\n            let cachedMachine = this.machines.find((m) => m.id === machine!.Id);\r\n            if (cachedMachine === undefined) {\r\n                const machineInstance = this.setup.MachineInstances.find((mi) => mi.Id === machine!.Id)!;\r\n                cachedMachine = { id: machineInstance.Id, actor: this.store.GetActor(machineInstance.MachineId) };\r\n                this.machines.push(cachedMachine);\r\n            }\r\n            const actor = cachedMachine.actor;\r\n            const nextContents = await actor.Act({ Content: message.Content, Channel: channel });\r\n            for (const nextContent of nextContents) {\r\n                const channelMap = machine!.OutputChannels.find((cm) => cm.Channel === nextContent.Channel);\r\n                if (channelMap === undefined) {\r\n                    throw Error(\"Channelmap \" + nextContent.Channel + \"undefined\");\r\n                }\r\n\r\n                const messageLocation: MessageLocationModel = { Cell: machine!.Cell, Content: nextContent.Content, Direction: channelMap.Direction };\r\n                nextMessages.push(messageLocation);\r\n            }\r\n        }\r\n\r\n        const outputs: MessageModel[] = [];\r\n        for (const doneMessage of doneMessages) {\r\n            switch (doneMessage.Direction) {\r\n                case DirectionEnum.Up:\r\n                    outputs.push({ Content: doneMessage.Content, Channel: ChannelColorEnum.Blue });\r\n                    break;\r\n                case DirectionEnum.Down:\r\n                    outputs.push({ Content: doneMessage.Content, Channel: ChannelColorEnum.Red });\r\n                    break;\r\n                case DirectionEnum.Right:\r\n                    outputs.push({ Content: doneMessage.Content, Channel: ChannelColorEnum.Green });\r\n                    break;\r\n                case DirectionEnum.Left:\r\n                    outputs.push({ Content: doneMessage.Content, Channel: ChannelColorEnum.Yellow });\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return [nextMessages, outputs];\r\n    }\r\n}","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport NumberInput from \"../NumberInput/NumberInput\";\r\nimport { Props } from \"./Props\";\r\nimport { GameData } from \"../../Redux/GameDataReducer/GameModel\";\r\nimport { GetActivePlayer } from \"../../Helper/StoreHelper\";\r\nimport { UpdateStepTime, UpdateShowAnimations } from \"../../Redux/GameDataReducer/Actions\";\r\nimport { Computer } from \"../../Computing/Computer\";\r\n\r\nconst DashboardInternal: React.FC<Props> = (props) => {\r\n\r\n    const onClicked = () => {\r\n        props.UpdateShowAnimations(!props.ShowAnimations);\r\n    };\r\n    return (\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\", width: \"100%\", height: \"100%\" }}>\r\n            <div style={{paddingRight: 30}}>\r\n                <button onClick={Computer.StopComputation} title=\"Stop the running computation\">Stop</button>\r\n            </div>\r\n            <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                <label title=\"Show animations, will calculate as fast as possible when turned of\">Animations</label>\r\n                {props.ShowAnimations && <label title=\"Step time in tenths of seconds, lower for faster animations\">Step Time</label>}\r\n            </div>\r\n\r\n            <div style={{ display: \"flex\", flexDirection: \"column\", width: 100 }}>\r\n                <button onClick={onClicked} style={{ marginLeft: 5, width: 63}}>{props.ShowAnimations ? \"On\" : \"Off\"}</button>\r\n                {props.ShowAnimations && <NumberInput value={props.StepTime} valueChanged={props.UpdateStepTime} />}\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: GameData) => {\r\n    return {\r\n        ShowAnimations: GetActivePlayer(state)!.showAnimations,\r\n        StepTime: GetActivePlayer(state)!.stepTime,\r\n    };\r\n};\r\n\r\nexport const Dashboard = connect(\r\n    mapStateToProps,\r\n    {\r\n        UpdateStepTime, UpdateShowAnimations\r\n    }\r\n)(DashboardInternal);","import { CellModel } from \"../../../../../Models/CellModel\";\r\nimport { ChannelModel } from \"../../../../../Models/ChannelModel\";\r\nimport { MachineApi } from \"../../../../../Models/MachineApi\";\r\n\r\ninterface ChannelChangedActionType {\r\n    type: \"ChannelChangedActionType\";\r\n    machineInstanceId: number;\r\n    channel: ChannelModel;\r\n    angle?: number;\r\n}\r\n\r\nexport function ChangeChannel(machineInstanceId: number, channel: ChannelModel, angle?: number): MachineInstanceActionTypes {\r\n    return {\r\n        type: \"ChannelChangedActionType\",\r\n        machineInstanceId,\r\n        channel,\r\n        angle\r\n    };\r\n}\r\n\r\ninterface InputChannelChangedActionType {\r\n    type: \"InputChannelChangedActionType\";\r\n    machineInstanceId: number;\r\n    channelIndex: number;\r\n    channel: ChannelModel;\r\n}\r\n\r\nexport function ChangeInputChannel(machineInstanceId: number, channelIndex: number, channel: ChannelModel): MachineInstanceActionTypes {\r\n    return {\r\n        type: \"InputChannelChangedActionType\",\r\n        machineInstanceId,\r\n        channelIndex,\r\n        channel\r\n    };\r\n}\r\n\r\ninterface MachineRemovedActionType {\r\n    type: \"MachineRemovedActionType\";\r\n    machineInstanceId: number;\r\n}\r\n\r\nexport function RemoveMachine(machineInstanceId: number): MachineInstanceActionTypes {\r\n    return {\r\n        type: \"MachineRemovedActionType\",\r\n        machineInstanceId\r\n    };\r\n}\r\n\r\ninterface MachineAddedActionType {\r\n    type: \"MachineAddedActionType\";\r\n    machineId: string;\r\n    cell: CellModel;\r\n    api: MachineApi;\r\n}\r\n\r\nexport function AddMachine(machineId: string, api: MachineApi, cellId: CellModel): MachineInstanceActionTypes {\r\n    return {\r\n        type: \"MachineAddedActionType\",\r\n        machineId,\r\n        cell: cellId,\r\n        api\r\n    };\r\n}\r\n\r\ninterface MachineMovedActionType {\r\n    type: \"MachineMovedActionType\";\r\n    machineInstanceId: number;\r\n    newCell: CellModel;\r\n}\r\n\r\nexport function MoveMachine(machineInstanceId: number, newCell: CellModel): MachineInstanceActionTypes {\r\n    return {\r\n        type: \"MachineMovedActionType\",\r\n        machineInstanceId,\r\n        newCell\r\n    };\r\n}\r\n\r\ninterface FixMachineActionType {\r\n    type: \"FixMachineActionType\";\r\n    machineInstanceId: number;\r\n}\r\n\r\nexport function FixMachine(machineInstanceId: number): MachineInstanceActionTypes {\r\n    return {\r\n        type: \"FixMachineActionType\",\r\n        machineInstanceId\r\n    };\r\n}\r\n\r\nexport type MachineInstanceActionTypes = ChannelChangedActionType |\r\n    MachineRemovedActionType |\r\n    MachineAddedActionType |\r\n    MachineMovedActionType |\r\n    FixMachineActionType |\r\n    InputChannelChangedActionType;\r\n","import { ChannelModel } from \"../Models/ChannelModel\";\n\nexport const DragItemTypes = {\n  MachineInstance: \"MachineInstance\",\n  NewMachine: \"NewMachine\",\n  OutputChannel: \"OutputChannel\",\n  Grid: \"Grid\"\n};\n\nexport interface DraggedOutputChannel {\n  type: typeof DragItemTypes.OutputChannel;\n  channel: ChannelModel;\n  machineInstanceId: number;\n  offsetX: number;\n  offsetY: number;\n}\n\nexport interface DraggedNewMachine {\n  type: typeof DragItemTypes.NewMachine;\n  id: string;\n}\n\nexport interface MovingOutputChannel extends DraggedOutputChannel {\n  angle: number;\n}","export const FormatMessage = (content: string): string => {\n    let formattedMessage: string | undefined;\n\n    if (content === \"\") {\n        formattedMessage = \"<Empty>\";\n    } else {\n        formattedMessage = content;\n        let seekPosition = 0;\n\n        while (true) {\n            seekPosition = formattedMessage.indexOf(\"<\", seekPosition);\n            if (seekPosition === -1) {\n                break;\n            }\n\n            const lastIndex = formattedMessage.indexOf(\">\", seekPosition);\n            formattedMessage = formattedMessage.substring(0, seekPosition) + \"?\" + formattedMessage.substring(lastIndex + 1);\n        }\n    }\n    return formattedMessage;\n};\n","import { ChannelModel } from \"../../../../../Models/ChannelModel\";\nimport React, { useEffect } from \"react\";\nimport { heightFactor, widthFactor, marginFactor } from \"./ChannelGroup\";\nimport { useDrag } from \"react-dnd\";\nimport { DragItemTypes, DraggedOutputChannel } from \"../../../../DragItemTypes\";\nimport { DirectionEnum } from \"../../../../../Models/DirectionEnum\";\nimport { getEmptyImage } from \"react-dnd-html5-backend\";\nimport { GetAngleFromMonitor } from \"../../../../../Helper/AngleHelper\";\n\nexport const ChannelClickArea: React.FC<{\n    Channel: ChannelModel,\n    MachineInstanceId: number,\n    OnClick: (channel: ChannelModel, angle?: number) => void,\n    OffsetX: number,\n    OffsetY: number,\n    CellSize: number\n}> = (props) => {\n\n    const [{ isDragging }, drag, preview] = useDrag<DraggedOutputChannel, unknown, { isDragging: boolean }>({\n        item: { type: DragItemTypes.OutputChannel, channel: props.Channel, machineInstanceId: props.MachineInstanceId, offsetX: props.OffsetX, offsetY: props.OffsetY},\n        begin: () => {\n            props.OnClick({ ...props.Channel, Status: \"DoesNotExist\" });\n        },\n        end: (dropResult, monitor) => {\n            if (!monitor.didDrop()) {\n                const outputItem = monitor.getItem() as DraggedOutputChannel;\n                const angle = GetAngleFromMonitor(monitor, props.OffsetX, props.OffsetY);\n                if (angle !== undefined) {\n                    const adjustedAngle = angle + Math.PI * 2.75;\n                    const direction = Math.floor(adjustedAngle / (Math.PI * 0.5)) % 4;\n                    props.OnClick({ Direction: direction, Channel: props.Channel.Channel, Status: outputItem.channel.Status }, angle);\n                }\n            }\n        },\n        collect: (monitor) => ({ isDragging: monitor.isDragging() })\n    });\n\n    const onClicked = () => {\n        const newDirection: DirectionEnum = props.Channel.Direction === 3 ? 0 : props.Channel.Direction + 1;\n        props.OnClick({ Direction: newDirection, Channel: props.Channel.Channel, Status: props.Channel.Status });\n    };\n\n    const channelStyle: React.CSSProperties = {\n        width: widthFactor * props.CellSize,\n        marginLeft: marginFactor * props.CellSize,\n        opacity: isDragging ? 0 : 1,\n        height: heightFactor*props.CellSize,\n        pointerEvents: \"all\"\n    };\n\n    useEffect(() => {\n        preview(getEmptyImage(), { captureDraggingState: true });\n    }, [preview]);\n\n    return <div ref={drag} style={channelStyle} onClick={onClicked}>\n    </div>;\n};\n","import React from \"react\";\nimport { DirectionEnum } from \"../../../../../Models/DirectionEnum\";\nimport { Props } from \"./Props\";\nimport { ChannelClickArea } from \"./ChannelClickArea\";\n\nexport const widthFactor = 0.07;\nexport const heightFactor = 0.31;\nexport const marginFactor = 0.05;\n\nexport const ChannelGroup: React.FC<Props> = (props) => {\n\n    if (props.ChannelModels.length === 0) {\n        return <></>;\n    }\n\n    const width = props.cellSize * widthFactor;\n    const height = props.cellSize * heightFactor;\n    const heightOffset = props.cellSize * 0.06;\n    const margin = props.cellSize * marginFactor;\n\n    let baseOffsetX = (props.cellSize - (props.ChannelModels.length * (width + margin) - margin)) / 2;\n    let baseOffsetY = props.cellSize / 2 - height - heightOffset;\n    let deltaX = width + margin;\n    let deltaY = 0;\n\n    const channelSetStyle: React.CSSProperties = {\n        position: \"absolute\",\n        marginLeft: baseOffsetX - margin,\n        marginTop: baseOffsetY,\n        display: \"flex\",\n        flexDirection: \"row\"\n    };\n\n    let rotate: string = \"\";\n\n    switch (props.ChannelModels[0].Direction) {\n        case DirectionEnum.Down:\n            rotate = \"rotate(180deg)\";\n            baseOffsetY = props.cellSize / 2 + heightOffset;\n            baseOffsetX = props.cellSize - baseOffsetX - width;\n            deltaX = -deltaX;\n            break;\n        case DirectionEnum.Left:\n            rotate = \"rotate(270deg)\";\n            const tempBaseOffsetX = baseOffsetY;\n            baseOffsetY = props.cellSize - baseOffsetX - width;\n            baseOffsetX = tempBaseOffsetX;\n            deltaY = -deltaX;\n            deltaX = 0;\n            break;\n        case DirectionEnum.Right:\n            rotate = \"rotate(90deg)\";\n            baseOffsetY = baseOffsetX;\n            baseOffsetX = props.cellSize / 2 + heightOffset;\n            deltaY = deltaX;\n            deltaX = 0;\n            break;\n    }\n\n    const rotation: React.CSSProperties = {\n        transform: rotate,\n        height: props.cellSize,\n        width: props.cellSize,\n        position: \"absolute\",\n        pointerEvents: \"none\"\n    };\n\n    return (\n        <div style={rotation}>\n            <div style={channelSetStyle}>\n                {props.ChannelModels.map((cm, index) => <ChannelClickArea key={index} Channel={cm} OnClick={props.OnChanged} MachineInstanceId={props.MachineInstanceId} OffsetX={baseOffsetX + deltaX * index} OffsetY={baseOffsetY + deltaY * index} CellSize={props.cellSize} />)}\n            </div>\n        </div>\n    );\n}\n","import { DrawModel } from \"./DrawModel\";\nimport { DirectionEnum } from \"../../../../../Models/DirectionEnum\";\nimport { InputChannelModel } from \"./InputChannelModel\";\nimport { ChannelModel } from \"../../../../../Models/ChannelModel\";\nimport { DraggedOutputModel } from \"./DraggedOutputModel\";\nimport { GetAngleFromDirection } from \"../../../../../Helper/AngleHelper\";\nimport { DrawConstants } from \"./DrawConstants\";\n\nexport abstract class MachineDrawer {\n    protected ctx: CanvasRenderingContext2D;\n    protected innerColor: string;\n    protected borderColor: string;\n    protected inputChannels: InputChannelModel[];\n    protected outputChannels: ChannelModel[][];\n    protected draggedOutput: DraggedOutputModel | undefined;\n    protected draggedDirection: DirectionEnum | undefined;\n    protected backgroundColor: string;\n    public drawConstants: DrawConstants;\n\n    constructor(ctx: CanvasRenderingContext2D, props: DrawModel) {\n        this.ctx = ctx;\n        this.innerColor = props.MachineStyle.Color;\n        this.borderColor = props.MachineStyle.BorderColor;\n        this.inputChannels = props.InputChannels.sort((ic, id) => ic.Direction > id.Direction ? 1 : -1);\n        this.outputChannels = props.OutputChannels;\n        this.draggedOutput = props.MovingOutput;\n        this.backgroundColor = props.BackgroundColor;\n        this.drawConstants = new DrawConstants(props.CellSize);\n        if (this.draggedOutput !== undefined) {\n            if (this.draggedOutput !== undefined) {\n                const adjustedAngle = this.draggedOutput.angle + Math.PI * 2.75;\n                this.draggedDirection = Math.floor(adjustedAngle / (Math.PI * 0.5)) % 4;\n            }\n        }\n    }\n\n    public DrawMachine() {\n\n        this.DrawBody();\n\n        for (const input of this.inputChannels) {\n            this.DrawInputGradient(input);\n        }\n\n        for (const outputGroup of this.outputChannels) {\n            this.DrawOutputGroup(outputGroup, true);\n        }\n\n        if (this.draggedOutput !== undefined) {\n            this.DraggedOutputDrawer(true);\n        }\n\n        if (this.inputChannels.length === 0) {\n            this.DrawNoInputOutline();\n        } else {\n            let startIndex = 0;\n            let endIndex = 0;\n            do {\n                endIndex = (endIndex + 1) % this.inputChannels.length;\n                this.DrawInputOutline(this.inputChannels[startIndex].Direction, this.inputChannels[endIndex].Direction);\n                startIndex++;\n            } while (startIndex < this.inputChannels.length);\n        }\n\n        for (const outputGroup of this.outputChannels) {\n            this.DrawOutputGroup(outputGroup, false);\n        }\n\n        if (this.draggedOutput !== undefined) {\n            this.DraggedOutputDrawer(false);\n        }\n    }\n    protected abstract DrawInputOutline(startDirection: DirectionEnum, endDirection: DirectionEnum): void;\n    protected abstract DrawBody(): void;\n    protected abstract DrawNoInputOutline(): void;\n    protected abstract DrawInputGradient(input: InputChannelModel): void;\n\n    protected SetShadowStyle() {\n        this.ctx.shadowColor = \"black\";\n        this.ctx.shadowOffsetX = this.drawConstants.shadeOffset;\n        this.ctx.shadowOffsetY = this.drawConstants.shadeOffset;\n    }\n\n    protected ClearShadowStyle() {\n        this.ctx.shadowColor = \"transparent\";\n        this.ctx.shadowOffsetX = 0;\n        this.ctx.shadowOffsetY = 0;\n    }\n    private DrawOutputGroup(outputs: ChannelModel[], isShade: boolean) {\n\n        this.ClearShadowStyle();\n\n        const baseAngle = GetAngleFromDirection(outputs[0].Direction) + Math.PI;\n        const filteredOutputs = outputs.filter((c) => c.Status !== \"DoesNotExist\");\n        let split = -(filteredOutputs.length - 1) / 2 * this.drawConstants.outputSplit;\n\n        if (this.draggedDirection === outputs[0].Direction) {\n            let increasedSplit = -(filteredOutputs.length) / 2 * this.drawConstants.outputSplit;\n            let draggedIsDrawn = false;\n            const draggedSplit = Math.sin(this.draggedOutput!.angle - baseAngle) * this.drawConstants.outputStartLength;\n            for (let index = 0; index < filteredOutputs.length; index++) {\n                if (!draggedIsDrawn && draggedSplit < split) {\n                    draggedIsDrawn = true;\n                    increasedSplit += this.drawConstants.outputSplit;\n                }\n\n                if (isShade) {\n                    this.DrawOutputChannel(\"black\", baseAngle, increasedSplit, this.drawConstants.shadeOffset * 2);\n                } else {\n                    this.DrawOutputChannel(\"black\", baseAngle, increasedSplit, this.drawConstants.shadeOffset);\n                    this.DrawOutputChannel(filteredOutputs[index].Channel, baseAngle, increasedSplit);\n                }\n\n                split += this.drawConstants.outputSplit;\n                increasedSplit += this.drawConstants.outputSplit;\n            }\n        } else {\n            for (const output of filteredOutputs) {\n                if (isShade) {\n                    this.DrawOutputChannel(\"black\", baseAngle, split, this.drawConstants.shadeOffset * 2);\n                } else {\n                    this.DrawOutputChannel(\"black\", baseAngle, split, this.drawConstants.shadeOffset);\n                    this.DrawOutputChannel(output.Channel, baseAngle, split);\n                }\n\n                split += this.drawConstants.outputSplit;\n            }\n        }\n    }\n\n    private DraggedOutputDrawer(isShade: boolean) {\n        this.ClearShadowStyle();\n        if (isShade) {\n            this.DrawDraggedOutput(\"black\", this.drawConstants.shadeOffset * 2);\n        } else {\n            this.DrawDraggedOutput(\"black\", this.drawConstants.shadeOffset);\n            this.DrawDraggedOutput(this.draggedOutput!.channel.Channel, 0);\n        }\n    }\n\n    private DrawDraggedOutput(color: string, offset: number) {\n        const adjustedAngle = this.draggedOutput!.angle! + Math.PI * 0.25;\n        const direction = Math.floor(adjustedAngle / (Math.PI * 0.5)) * Math.PI * 0.5;\n\n        const firstX = this.drawConstants.center + this.drawConstants.outputStartLength * Math.cos(this.draggedOutput!.angle!) + offset;\n        const firstY = this.drawConstants.center + this.drawConstants.outputStartLength * Math.sin(this.draggedOutput!.angle!) + offset;\n        const endX = firstX + (this.drawConstants.outputLength - this.drawConstants.outputStartLength) * Math.cos(direction);\n        const endY = firstY + (this.drawConstants.outputLength - this.drawConstants.outputStartLength) * Math.sin(direction);\n\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.drawConstants.center, this.drawConstants.center);\n\n        const gradient = this.ctx.createRadialGradient(this.drawConstants.center, this.drawConstants.center, 0, this.drawConstants.center, this.drawConstants.center, this.drawConstants.outputLength);\n        gradient.addColorStop(0, this.innerColor);\n        gradient.addColorStop(0.6, color);\n\n        this.ctx.arcTo(firstX, firstY, endX, endY, this.drawConstants.outputRadius);\n        this.ctx.lineTo(endX, endY);\n        this.ctx.strokeStyle = gradient;\n        this.ctx.lineWidth = this.drawConstants.outputWidth;\n\n        this.ctx.stroke();\n    }\n\n    private DrawOutputChannel(color: string, mainAngle: number, outputOffset: number, offset = 0) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.drawConstants.center, this.drawConstants.center);\n        const differenceAngle = Math.asin(outputOffset / this.drawConstants.outputStartLength);\n\n        const firstX = this.drawConstants.center + this.drawConstants.outputStartLength * Math.cos(mainAngle + differenceAngle) + offset;\n        const firstY = this.drawConstants.center + this.drawConstants.outputStartLength * Math.sin(mainAngle + differenceAngle) + offset;\n        const endX = firstX + (this.drawConstants.outputLength - this.drawConstants.outputStartLength) * Math.cos(mainAngle);\n        const endY = firstY + (this.drawConstants.outputLength - this.drawConstants.outputStartLength) * Math.sin(mainAngle);\n\n        const gradient = this.ctx.createRadialGradient(this.drawConstants.center, this.drawConstants.center, 0, this.drawConstants.center, this.drawConstants.center, this.drawConstants.outputLength)\n        gradient.addColorStop(0, this.innerColor);\n        gradient.addColorStop(0.6, color);\n\n        this.ctx.arcTo(firstX, firstY, endX, endY, this.drawConstants.outputRadius);\n        this.ctx.lineTo(endX, endY);\n        this.ctx.strokeStyle = gradient;\n        this.ctx.lineWidth = this.drawConstants.outputWidth;\n\n        this.ctx.stroke();\n    }\n}","import { DirectionEnum } from \"../../../../../Models/DirectionEnum\";\nimport { InputChannelModel } from \"./InputChannelModel\";\nimport { MachineDrawer } from \"./MachineDrawer\";\nimport { GetAngleFromDirection } from \"../../../../../Helper/AngleHelper\";\n\nexport class MachineCircleDrawer extends MachineDrawer {\n    protected DrawBody() {\n        this.ctx.beginPath();\n        this.ClearShadowStyle();\n        this.ctx.moveTo(this.drawConstants.center + this.drawConstants.circleRadius, this.drawConstants.center);\n        this.ctx.arc(this.drawConstants.center, this.drawConstants.center, this.drawConstants.circleRadius, 0, Math.PI * 2);\n        this.ctx.fillStyle = this.innerColor;\n        this.ctx.fill();\n    }\n    \n    protected DrawInputOutline(startDirection: DirectionEnum, endDirection: DirectionEnum): void {\n        const localcenter = this.drawConstants.center;\n        const startDirectionAngle = GetAngleFromDirection(startDirection);\n        const startAngle = startDirectionAngle + this.drawConstants.apertureAngle;\n\n        const startInnerX = localcenter + this.drawConstants.circleRadius * Math.cos(startAngle);\n        const startInnerY = localcenter + this.drawConstants.circleRadius * Math.sin(startAngle);\n        const startOuterX = startInnerX + this.drawConstants.armLength * Math.cos(startDirectionAngle + this.drawConstants.armAngle);\n        const startOuterY = startInnerY + this.drawConstants.armLength * Math.sin(startDirectionAngle + this.drawConstants.armAngle);\n\n        const endDirectionAngle = GetAngleFromDirection(endDirection);\n        const endAngle = endDirectionAngle - this.drawConstants.apertureAngle;\n        const endInnerX = localcenter + this.drawConstants.circleRadius * Math.cos(endAngle);\n        const endInnerY = localcenter + this.drawConstants.circleRadius * Math.sin(endAngle);\n\n        const endOuterX = endInnerX + this.drawConstants.armLength * Math.cos(endDirectionAngle - this.drawConstants.armAngle);\n        const endOuterY = endInnerY + this.drawConstants.armLength * Math.sin(endDirectionAngle - this.drawConstants.armAngle);\n\n        this.ctx.beginPath();\n        this.ctx.moveTo(startOuterX, startOuterY);\n        this.ctx.lineTo(startInnerX, startInnerY);\n        this.ctx.arc(localcenter, localcenter, this.drawConstants.circleRadius, startAngle, endAngle);\n        this.ctx.lineTo(endOuterX, endOuterY);\n\n        this.ctx.strokeStyle = this.borderColor;\n        this.ctx.lineWidth = this.drawConstants.borderWidth;\n        this.SetShadowStyle();\n        this.ctx.stroke();\n\n    }\n\n    protected DrawNoInputOutline(): void {\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.drawConstants.center + this.drawConstants.circleRadius, this.drawConstants.center);\n        this.ctx.arc(this.drawConstants.center, this.drawConstants.center, this.drawConstants.circleRadius, 0, Math.PI * 2);\n\n        this.ctx.strokeStyle = this.borderColor;\n        this.SetShadowStyle();\n        this.ctx.lineWidth = this.drawConstants.borderWidth;\n\n        this.ctx.stroke();\n    }\n    protected DrawInputGradient(input: InputChannelModel): void {\n\n        const directionAngle = GetAngleFromDirection(input.Direction);\n        const endAngle = directionAngle - this.drawConstants.apertureAngle;\n\n        const endInnerX = this.drawConstants.center + this.drawConstants.circleRadius * Math.cos(endAngle);\n        const endInnerY = this.drawConstants.center + this.drawConstants.circleRadius * Math.sin(endAngle);\n\n        const endOuterX = endInnerX + this.drawConstants.armLength * Math.cos(directionAngle - this.drawConstants.armAngle);\n        const endOuterY = endInnerY + this.drawConstants.armLength * Math.sin(directionAngle - this.drawConstants.armAngle);\n\n        const startAngle = directionAngle + this.drawConstants.apertureAngle;\n\n        const startInnerX = this.drawConstants.center + this.drawConstants.circleRadius * Math.cos(startAngle);\n        const startInnerY = this.drawConstants.center + this.drawConstants.circleRadius * Math.sin(startAngle);\n\n        const startOuterX = startInnerX + this.drawConstants.armLength * Math.cos(directionAngle + this.drawConstants.armAngle);\n        const startOuterY = startInnerY + this.drawConstants.armLength * Math.sin(directionAngle + this.drawConstants.armAngle);\n\n        this.ctx.beginPath();\n\n        this.ClearShadowStyle();\n        this.ctx.moveTo(endInnerX, endInnerY);\n        const endOuterAngle = Math.atan2(endOuterY - this.drawConstants.center, endOuterX - this.drawConstants.center);\n        const startOuterAngle = Math.atan2(startOuterY - this.drawConstants.center, startOuterX - this.drawConstants.center);\n\n        this.ctx.arc(this.drawConstants.center, this.drawConstants.center, this.drawConstants.circleRadius + this.drawConstants.protrudingArm, endOuterAngle, startOuterAngle);\n        this.ctx.arc(this.drawConstants.center, this.drawConstants.center, this.drawConstants.circleRadius - this.drawConstants.borderWidth * 0.5, startAngle, endAngle, true);\n\n        const grd = this.ctx.createRadialGradient(this.drawConstants.center, this.drawConstants.center, this.drawConstants.circleRadius, this.drawConstants.center, this.drawConstants.center, this.drawConstants.circleRadius + this.drawConstants.protrudingArm);\n\n        if (input.UseMachineColor) {\n            grd.addColorStop(0, this.innerColor);\n        } else {\n            grd.addColorStop(0, input.Channel);\n            grd.addColorStop(0.7, input.Channel);\n            grd.addColorStop(0.8, this.backgroundColor);\n        }\n        grd.addColorStop(1, this.backgroundColor);\n        this.ctx.fillStyle = grd;\n        this.ctx.fill();\n    }\n}","import { DirectionEnum } from \"../../../../../Models/DirectionEnum\";\nimport { DrawModel } from \"./DrawModel\";\nimport { InputChannelModel } from \"./InputChannelModel\";\nimport { MachineDrawer } from \"./MachineDrawer\";\n\n\n\nexport class MachineSquareDrawer extends MachineDrawer {\n    private closeSide: number;\n    private farSide : number;\n    private innerClose : number;\n    private innerFar : number;\n    private armProtrudingClose : number;\n    private armProtrudingFar: number;\n    private armWidthClose : number;\n    private armWidthFar: number;\n\n    constructor(ctx: CanvasRenderingContext2D, props: DrawModel) {\n        super(ctx, props);\n        this.closeSide = this.drawConstants.center - this.drawConstants.halfSquareSize;\n        this.farSide = this.drawConstants.center + this.drawConstants.halfSquareSize;\n        this.innerClose = this.drawConstants.center - 0.5 * this.drawConstants.aperture;\n        this.innerFar = this.drawConstants.center + 0.5 * this.drawConstants.aperture;\n        this.armProtrudingClose = this.closeSide - Math.cos(this.drawConstants.armAngle) * this.drawConstants.armLength;\n        this.armProtrudingFar = this.farSide + Math.cos(this.drawConstants.armAngle) * this.drawConstants.armLength;\n        this.armWidthClose = this.innerClose - Math.sin(this.drawConstants.armAngle) * this.drawConstants.armLength;\n        this.armWidthFar = this.innerFar + Math.sin(this.drawConstants.armAngle) * this.drawConstants.armLength;\n    }\n    protected DrawBody() {\n        this.ctx.beginPath();\n        this.ClearShadowStyle();\n        this.ctx.moveTo(this.drawConstants.center + this.drawConstants.circleRadius, this.drawConstants.center);\n        this.ctx.rect(this.drawConstants.center - this.drawConstants.halfSquareSize, this.drawConstants.center - this.drawConstants.halfSquareSize, this.drawConstants.halfSquareSize * 2, this.drawConstants.halfSquareSize * 2);\n        this.ctx.fillStyle = this.innerColor;\n        this.ctx.fill();\n        this.ctx.beginPath();\n    }\n    protected DrawInputOutline(startDirection: DirectionEnum, endDirection: DirectionEnum): void {\n        this.ctx.beginPath();\n        this.ctx.strokeStyle = this.borderColor;\n        this.SetShadowStyle();\n        this.ctx.lineWidth = this.drawConstants.borderWidth;\n\n        switch (startDirection) {\n            case DirectionEnum.Down:\n                this.ctx.moveTo(this.armWidthFar, this.armProtrudingClose);\n                this.ctx.lineTo(this.innerFar, this.closeSide);\n                break;\n            case DirectionEnum.Left:\n                this.ctx.moveTo(this.armProtrudingFar, this.armWidthFar);\n                this.ctx.lineTo(this.farSide, this.innerFar);\n                break;\n            case DirectionEnum.Up:\n                this.ctx.moveTo(this.armWidthClose, this.armProtrudingFar);\n                this.ctx.lineTo(this.innerClose, this.farSide);\n                break;\n            case DirectionEnum.Right:\n                this.ctx.moveTo(this.armProtrudingClose, this.armWidthClose);\n                this.ctx.lineTo(this.closeSide, this.innerClose);\n                break;\n            default:\n                throw Error(\"Unknown direction\");\n        }\n\n        let currentDirection = startDirection;\n\n        do {\n            switch (currentDirection) {\n                case DirectionEnum.Down:\n                    this.ctx.lineTo(this.farSide, this.closeSide);\n                    break;\n                case DirectionEnum.Left:\n                    this.ctx.lineTo(this.farSide, this.farSide);\n                    break;\n                case DirectionEnum.Up:\n                    this.ctx.lineTo(this.closeSide, this.farSide);\n                    break;\n                case DirectionEnum.Right:\n                    this.ctx.lineTo(this.closeSide, this.closeSide);\n                    break;\n                default:\n                    throw Error(\"Unknown direction\");\n            }\n\n            currentDirection = (currentDirection + 1) % 4;\n        } while (currentDirection !== endDirection);\n\n        switch (endDirection) {\n            case DirectionEnum.Down:\n                this.ctx.lineTo(this.innerClose, this.closeSide);\n                this.ctx.lineTo(this.armWidthClose, this.armProtrudingClose);\n                break;\n            case DirectionEnum.Left:\n                this.ctx.lineTo(this.farSide, this.innerClose);\n                this.ctx.lineTo(this.armProtrudingFar, this.armWidthClose);\n                break;\n            case DirectionEnum.Up:\n                this.ctx.lineTo(this.innerFar, this.farSide);\n                this.ctx.lineTo(this.armWidthFar, this.armProtrudingFar);\n                break;\n            case DirectionEnum.Right:\n                this.ctx.lineTo(this.closeSide, this.innerFar);\n                this.ctx.lineTo(this.armProtrudingClose, this.armWidthFar);\n                break;\n            default:\n                throw Error(\"Unknown direction\");\n        }\n\n        this.ctx.stroke();\n    }\n\n    protected DrawNoInputOutline(): void {\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.drawConstants.center + this.drawConstants.circleRadius, this.drawConstants.center);\n        this.ctx.rect(this.drawConstants.center - this.drawConstants.halfSquareSize, this.drawConstants.center - this.drawConstants.halfSquareSize, this.drawConstants.halfSquareSize * 2, this.drawConstants.halfSquareSize * 2);\n        this.ctx.strokeStyle = this.borderColor;\n        this.SetShadowStyle();\n        this.ctx.lineWidth = this.drawConstants.borderWidth;\n\n        this.ctx.stroke();\n    }\n    protected DrawInputGradient(input: InputChannelModel): void {\n        this.ctx.beginPath();\n        this.ClearShadowStyle();\n        let grd: CanvasGradient;\n        switch (input.Direction) {\n            case DirectionEnum.Down:\n                this.ctx.moveTo(this.innerClose, this.closeSide + 0.4 * this.drawConstants.borderWidth);\n                this.ctx.lineTo(this.armWidthClose, this.armProtrudingClose);\n                this.ctx.lineTo(this.armWidthFar, this.armProtrudingClose);\n                this.ctx.lineTo(this.innerFar, this.closeSide + 0.4 * this.drawConstants.borderWidth);\n                this.ctx.lineTo(this.innerClose, this.closeSide + 0.4 * this.drawConstants.borderWidth);\n                grd = this.ctx.createLinearGradient(this.drawConstants.center, this.closeSide + 0.4 * this.drawConstants.borderWidth, this.drawConstants.center, this.armProtrudingClose);\n                break;\n            case DirectionEnum.Left:\n                this.ctx.moveTo(this.farSide - 0.4 * this.drawConstants.borderWidth, this.innerClose);\n                this.ctx.lineTo(this.armProtrudingFar, this.armWidthClose);\n                this.ctx.lineTo(this.armProtrudingFar, this.armWidthFar);\n                this.ctx.lineTo(this.farSide - 0.4 * this.drawConstants.borderWidth, this.innerFar);\n                this.ctx.lineTo(this.farSide - 0.4 * this.drawConstants.borderWidth, this.innerClose);\n                grd = this.ctx.createLinearGradient(this.farSide - 0.4 * this.drawConstants.borderWidth, this.drawConstants.center, this.armProtrudingFar, this.drawConstants.center);\n                break;\n            case DirectionEnum.Up:\n                this.ctx.moveTo(this.innerFar, this.farSide - 0.4 * this.drawConstants.borderWidth);\n                this.ctx.lineTo(this.armWidthFar, this.armProtrudingFar);\n                this.ctx.lineTo(this.armWidthClose, this.armProtrudingFar);\n                this.ctx.lineTo(this.innerClose, this.farSide - 0.4 * this.drawConstants.borderWidth);\n                this.ctx.lineTo(this.innerFar, this.farSide - 0.4 * this.drawConstants.borderWidth);\n                grd = this.ctx.createLinearGradient(this.drawConstants.center, this.farSide - 0.4 * this.drawConstants.borderWidth, this.drawConstants.center, this.armProtrudingFar);\n                break;\n            case DirectionEnum.Right:\n                this.ctx.moveTo(this.closeSide + 0.4 * this.drawConstants.borderWidth, this.innerFar);\n                this.ctx.lineTo(this.armProtrudingClose, this.armWidthFar);\n                this.ctx.lineTo(this.armProtrudingClose, this.armWidthClose);\n                this.ctx.lineTo(this.closeSide + 0.4 * this.drawConstants.borderWidth, this.innerClose);\n                this.ctx.lineTo(this.closeSide + 0.4 * this.drawConstants.borderWidth, this.innerFar);\n                grd = this.ctx.createLinearGradient(this.closeSide + 0.4 * this.drawConstants.borderWidth, this.drawConstants.center, this.armProtrudingClose, this.drawConstants.center);\n                break;\n            default:\n                throw Error(\"Unknown direction\");\n        }\n\n        if (input.UseMachineColor) {\n            grd.addColorStop(0, this.innerColor);\n        } else {\n            grd.addColorStop(0, input.Channel);\n            grd.addColorStop(0.9, input.Channel);\n            grd.addColorStop(0.9, this.backgroundColor);\n        }\n        grd.addColorStop(1, this.backgroundColor);\n        this.ctx.fillStyle = grd;\n        this.ctx.fill();\n    }\n}","import React, { useRef, useEffect } from \"react\";\nimport { DrawModel } from \"./DrawModel\";\nimport { MachineCircleDrawer } from \"./MachineCircleDrawer\";\nimport { MachineDrawer } from \"./MachineDrawer\";\nimport { MachineSquareDrawer } from \"./MachineSquareDrawer\";\n\nexport const MachineCanvasHolder: React.FC<DrawModel> = (props) => {\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n\n    useEffect(() => {\n        if (canvasRef.current) {\n            const ctx = canvasRef.current.getContext(\"2d\")!;\n            ctx.clearRect(0, 0, props.CellSize, props.CellSize);\n            let drawer: MachineDrawer;\n            if (props.IsDefault) {\n                drawer = new MachineCircleDrawer(ctx, props);\n            } else {\n                drawer = new MachineSquareDrawer(ctx, props);\n            }\n\n            drawer.DrawMachine();\n        }\n    });\n\n    return <div style={{\n        height: props.CellSize,\n        width: props.CellSize,\n        position: \"absolute\"\n    }}>\n        <canvas ref={canvasRef} style={{ position: \"absolute\" }} height={props.CellSize} width={props.CellSize}></canvas>\n    </div>;\n};","import React from \"react\";\nimport { DirectionEnum } from \"../../../../../Models/DirectionEnum\";\nimport { Props } from \"./Props\";\n\nexport class InputChannelClickArea extends React.Component<Props> {\n\n    constructor(props: Props) {\n        super(props);\n        this.onClicked = this.onClicked.bind(this);\n    }\n    public render() {\n\n        const cellSize = this.props.cellSize - 2;\n\n        const channelStyle: React.CSSProperties = {\n            position: \"absolute\",\n            height: cellSize * 0.20,\n            width: cellSize * 0.4,\n            marginLeft: cellSize * 0.3,\n            marginTop: cellSize * 0.05,\n            pointerEvents: \"all\",\n        };\n\n        let rotate: string = \"\";\n        switch (this.props.Direction) {\n            case DirectionEnum.Left:\n                rotate = \"rotate(90deg)\";\n                break;\n            case DirectionEnum.Up:\n                rotate = \"rotate(180deg)\";\n                break;\n            case DirectionEnum.Right:\n                rotate = \"rotate(270deg)\";\n                break;\n        }\n\n        const rotation: React.CSSProperties = {\n            transform: rotate,\n            height: cellSize,\n            width: cellSize,\n            position: \"absolute\",\n            pointerEvents: \"none\"\n        };\n\n        return (\n            <div style={rotation}>\n                <div style={channelStyle} onClick={this.onClicked}></div>\n            </div>\n        );\n    }\n\n    public onClicked(event: React.MouseEvent<HTMLDivElement, MouseEvent>): void {\n        this.props.OnClick(this.props.Direction);\n    }\n}","import React, { Dispatch } from \"react\";\r\nimport { useDrag } from \"react-dnd\";\r\nimport { connect } from \"react-redux\";\r\nimport { MachineStore } from \"../../../../MachineStore/MachineStore\";\r\nimport { ChannelModel } from \"../../../../Models/ChannelModel\";\r\nimport { ChangeChannel, MachineInstanceActionTypes, RemoveMachine, FixMachine, ChangeInputChannel } from \"../../../../Redux/GameDataReducer/PlayerReducer/GridSetup/MachineInstances/Actions\";\r\nimport { DragItemTypes } from \"../../../DragItemTypes\";\r\nimport { ChannelGroup } from \"./ChannelClickArea/ChannelGroup\";\r\nimport { Props } from \"./Props\";\r\nimport { GetLighterColor } from \"../../../../Helper/ColorHelper\";\r\nimport { MachineCanvasHolder } from \"./MachineDrawer/MachineCanvasHolder\";\r\nimport { DirectionEnum } from \"../../../../Models/DirectionEnum\";\r\nimport { InputChannelModel } from \"./MachineDrawer/InputChannelModel\";\r\nimport { InputChannelClickArea } from \"./InputChannelClickArea/InputChannelClickArea\";\r\nimport * as dc from \"./MachineDrawer/DrawConstants\";\r\nimport { IsDefaultMachine } from \"../../../../MachineStore/IMachine\";\r\nimport { GameData } from \"../../../../Redux/GameDataReducer/GameModel\";\r\nimport { GetActiveMachine, GetActivePlayer } from \"../../../../Helper/StoreHelper\";\r\n\r\nconst MachineInstanceInternal: React.FC<Props> = (props) => {\r\n    const [{ isDragging }, drag, preview] = useDrag({\r\n        item: { type: DragItemTypes.MachineInstance, id: props.MachineInstanceId },\r\n        end: (dropResult, monitor) => {\r\n            if (!monitor.didDrop()) {\r\n\r\n                const xyCoord = monitor.getDifferenceFromInitialOffset();\r\n                if (xyCoord !== null) {\r\n                    const distanceSquared = Math.pow(xyCoord.x, 2) + Math.pow(xyCoord.y, 2);\r\n                    if (distanceSquared > Math.pow(props.CellSize * 0.5, 2)) {\r\n                        props.OnRemoved();\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        collect: (monitor) => ({\r\n            isDragging: !!monitor.isDragging(),\r\n        }),\r\n    });\r\n\r\n    const OnClick = () => {\r\n        if (props.MachineInstance.Status !== \"Valid\") {\r\n            props.FixMachine();\r\n        }\r\n    };\r\n\r\n    const api = MachineStore.GetStore().GetMachineType(props.MachineInstance.MachineId).Api;\r\n    const onInputChannelClick = (direction: DirectionEnum) => {\r\n\r\n        const channelIndex = props.MachineInstance.InputChannels.findIndex((ic) => ic.Direction === direction)!;\r\n        const channel = props.MachineInstance.InputChannels[channelIndex];\r\n        const currentIndex = api.InputChannels.indexOf(channel.Channel);\r\n        const newChannel: ChannelModel = {\r\n            Channel: currentIndex === api.InputChannels.length - 1 ? api.InputChannels[0] : api.InputChannels[currentIndex + 1],\r\n            Direction: channel.Direction,\r\n            Status: channel.Status\r\n        };\r\n\r\n        props.ChangeInputChannel(channelIndex, newChannel);\r\n    };\r\n\r\n    const machineStyle = props.MachineStyle ?? MachineStore.GetStore().GetMachineType(props.MachineInstance.MachineId).Style;\r\n\r\n    const hasMultipleInputs = api.InputChannels.length > 1 || props.MachineInstance.InputChannels.some((ic) => ic.Status === \"Exists\" && ic.Channel !== api.InputChannels[0]);\r\n\r\n    const inputChannels: InputChannelModel[] = props.MachineInstance.InputChannels.filter((ic) => ic.Status !== \"DoesNotExist\").map((c) =>\r\n    ({\r\n        UseMachineColor: !hasMultipleInputs,\r\n        ...c\r\n    })\r\n    );\r\n\r\n    const machineSize: React.CSSProperties = { height: props.CellSize, width: props.CellSize, margin: 1 };\r\n\r\n    switch (props.MachineInstance.Status) {\r\n        case \"Deleted\":\r\n            machineSize.borderBottom = props.CellSize / 18 + \"px dotted red\";\r\n            machineSize.boxSizing = \"border-box\";\r\n            machineSize.opacity = 0.4;\r\n            break;\r\n        case \"ChannelsInvalid\":\r\n            machineSize.borderBottom = props.CellSize / 18 + \"px dotted orange\";\r\n            machineSize.boxSizing = \"border-box\";\r\n            break;\r\n    }\r\n\r\n    const outputChannels: ChannelModel[][] = [];\r\n    for (const channel of props.MachineInstance.OutputChannels) {\r\n        const group = outputChannels.find((o) => o[0].Direction === channel.Direction);\r\n        if (group === undefined) {\r\n            outputChannels.push([channel]);\r\n        } else {\r\n            group.push(channel);\r\n        }\r\n    }\r\n\r\n    const machineMargin = props.CellSize * 0.5 - dc.halfSquareFactor * props.CellSize;\r\n\r\n    return (\r\n        <div ref={preview} style={machineSize}>\r\n            {!isDragging && <MachineCanvasHolder\r\n                MachineStyle={machineStyle}\r\n                IsDefault={IsDefaultMachine(props.MachineInstance.MachineId)}\r\n                BackgroundColor={props.BackgroundColor}\r\n                InputChannels={inputChannels}\r\n                OutputChannels={outputChannels}\r\n                MovingOutput={props.MovingOutput !== undefined ? props.MovingOutput : undefined}\r\n                CellSize={props.CellSize}\r\n            />}\r\n            <div style={{ position: \"absolute\", marginLeft: machineMargin, marginTop: machineMargin, height: dc.halfSquareFactor * props.CellSize * 2, width: dc.halfSquareFactor * props.CellSize * 2 }} ref={drag} onClick={OnClick}></div>\r\n            {inputChannels.filter((ic) => !ic.UseMachineColor).map((ic, index) => <InputChannelClickArea key={index} Direction={ic.Direction} OnClick={onInputChannelClick} cellSize={props.CellSize} />)}\r\n            {outputChannels.map((oc, index) => <ChannelGroup key={index} ChannelModels={oc} OnChanged={props.ChangeOwnChannel} MachineInstanceId={props.MachineInstanceId} cellSize={props.CellSize}/>)}\r\n        </div >\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: GameData, ownProps: { MachineInstanceId: number }) => {\r\n    const activeMachine = GetActiveMachine(state);\r\n\r\n    const background = GetLighterColor(activeMachine!.Style.Color, 0.3);\r\n    const MachineInstanceProp = activeMachine!.Setup.MachineInstances.find((mi) => mi.Id === ownProps.MachineInstanceId)!;\r\n    const machineStyle = IsDefaultMachine(MachineInstanceProp.MachineId) ? undefined\r\n        : MachineInstanceProp.Status === \"Deleted\" ? GetActivePlayer(state)!.deletedMachines.find((dm) => dm.Id === MachineInstanceProp.MachineId)!.Style\r\n            : GetActivePlayer(state)!.machines.find((m) => m.Id === MachineInstanceProp.MachineId)!.Style;\r\n    const MovingOutput = state.movingOutput?.machineInstanceId === ownProps.MachineInstanceId ? state.movingOutput : undefined;\r\n\r\n    return {\r\n        MachineInstance: MachineInstanceProp,\r\n        MachineStyle: machineStyle,\r\n        BackgroundColor: background,\r\n        MovingOutput\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<MachineInstanceActionTypes>, ownProps: { MachineInstanceId: number }) => {\r\n\r\n    return {\r\n        ChangeOwnChannel: (channel: ChannelModel, angle?: number) => dispatch(ChangeChannel(ownProps.MachineInstanceId, channel, angle)),\r\n        ChangeChannel: (machineInstanceId: number, channel: ChannelModel, angle?: number) => dispatch(ChangeChannel(machineInstanceId, channel, angle)),\r\n        ChangeInputChannel: (index: number, channel: ChannelModel) => dispatch(ChangeInputChannel(ownProps.MachineInstanceId, index, channel)),\r\n        OnRemoved: () => dispatch(RemoveMachine(ownProps.MachineInstanceId)),\r\n        FixMachine: () => dispatch(FixMachine(ownProps.MachineInstanceId))\r\n    };\r\n};\r\n\r\nexport const MachineInstance = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(MachineInstanceInternal);\r\n","import React from \"react\";\r\nimport { useDrop } from \"react-dnd\";\r\nimport { connect } from \"react-redux\";\r\nimport { AreEqual, CellModel } from \"../../../Models/CellModel\";\r\nimport { DirectionEnum } from \"../../../Models/DirectionEnum\";\r\nimport { AddMachine, MoveMachine, ChangeChannel } from \"../../../Redux/GameDataReducer/PlayerReducer/GridSetup/MachineInstances/Actions\";\r\nimport { DragItemTypes, DraggedOutputChannel } from \"../../DragItemTypes\";\r\nimport { FormatMessage } from \"../../MessageFormatter\";\r\nimport { MachineInstance } from \"./MachineInstance/MachineInstance\";\r\nimport { Props } from \"./Props\";\r\nimport { MachineStore } from \"../../../MachineStore/MachineStore\";\r\nimport { GetAngleFromMonitor } from \"../../../Helper/AngleHelper\";\r\nimport { GameData } from \"../../../Redux/GameDataReducer/GameModel\";\r\nimport { GetActiveMachine, GetActivePlayer } from \"../../../Helper/StoreHelper\";\r\n\r\nconst CellInternal: React.FC<Props> = (props) => {\r\n\r\n    const [, drop] = useDrop({\r\n        accept: [DragItemTypes.MachineInstance, DragItemTypes.NewMachine, DragItemTypes.OutputChannel],\r\n        drop: (item, monitor) => {\r\n            switch (item.type) {\r\n                case DragItemTypes.MachineInstance:\r\n                    props.OnMovedMachine(monitor.getItem().id, props.cellId);\r\n                    break;\r\n                case DragItemTypes.NewMachine:\r\n                    const itemProps = monitor.getItem() as { id: string };\r\n                    const machineType = MachineStore.GetStore().GetMachineType(itemProps.id);\r\n                    props.OnNewMachine(itemProps.id, machineType.Api, props.cellId);\r\n                    break;\r\n                case DragItemTypes.OutputChannel:\r\n                    const outputItem = monitor.getItem() as DraggedOutputChannel;\r\n                    const angle = GetAngleFromMonitor(monitor, outputItem.offsetX, outputItem.offsetY);\r\n                    if (angle !== undefined) {\r\n                        const adjustedAngle = angle + Math.PI * 2.75;\r\n                        const direction = Math.floor(adjustedAngle / (Math.PI * 0.5)) % 4;\r\n                        props.ChangeChannel(outputItem.machineInstanceId, { Direction: direction, Channel: outputItem.channel.Channel, Status: outputItem.channel.Status }, angle);\r\n                    }\r\n                    break;\r\n            }\r\n        },\r\n    });\r\n\r\n    const style: React.CSSProperties = {\r\n        height: props.smallHeigth ? props.CellSize * 0.625 : props.CellSize,\r\n        width: props.smallWidth ? props.CellSize * 0.625 : props.CellSize,\r\n        border: \"1px solid black\",\r\n        float: \"left\",\r\n        marginTop: -1,\r\n        marginLeft: -1,\r\n        position: \"relative\"\r\n    };\r\n\r\n    const ExitThickness = props.CellSize * 0.2;\r\n\r\n    if (props.Exit !== undefined) {\r\n        switch (props.Exit) {\r\n            case DirectionEnum.Up:\r\n                style.borderRight = \"1px solid black\";\r\n                style.borderBottom = \"1px solid black\";\r\n                style.borderLeft = \"1px solid black\";\r\n                style.borderTop = ExitThickness + \"px solid blue\";\r\n                style.marginTop = -ExitThickness;\r\n                break;\r\n            case DirectionEnum.Down:\r\n                style.borderRight = \"1px solid black\";\r\n                style.borderTop = \"1px solid black\";\r\n                style.borderLeft = \"1px solid black\";\r\n                style.borderBottom = ExitThickness + \"px solid red\";\r\n                style.marginBottom = -ExitThickness + 1;\r\n                break;\r\n            case DirectionEnum.Right:\r\n                style.borderTop = \"1px solid black\";\r\n                style.borderBottom = \"1px solid black\";\r\n                style.borderLeft = \"1px solid black\";\r\n                style.borderRight = ExitThickness + \"px solid green\";\r\n                style.marginRight = -ExitThickness + 1;\r\n                break;\r\n            case DirectionEnum.Left:\r\n                style.borderRight = \"1px solid black\";\r\n                style.borderBottom = \"1px solid black\";\r\n                style.borderTop = \"1px solid black\";\r\n                style.borderLeft = ExitThickness + \"px solid #fff020\";\r\n                style.marginLeft = -ExitThickness;\r\n                break;\r\n        }\r\n    } else {\r\n        style.borderRight = \"1px solid black\";\r\n        style.borderBottom = \"1px solid black\";\r\n        style.borderLeft = \"1px solid black\";\r\n        style.borderTop = \"1px solid black\";\r\n    }\r\n\r\n    let formattedMessage: string | undefined;\r\n    if (props.Message !== undefined) {\r\n        formattedMessage = FormatMessage(props.Message);\r\n    }\r\n\r\n    return (\r\n        <div style={style} ref={drop}>\r\n            {formattedMessage !== undefined && formattedMessage}\r\n            {props.MachineInstanceId !== undefined ? <MachineInstance MachineInstanceId={props.MachineInstanceId} CellSize={props.CellSize - 2} /> : \"\"}\r\n        </div >\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: GameData, ownProps: { cellId: CellModel }) => {\r\n    const activeMachine = GetActiveMachine(state);\r\n    const machineInstance = activeMachine!.Setup.MachineInstances.find((mi) => AreEqual(mi.Cell, ownProps.cellId));\r\n    const exit = activeMachine!.ExitCells.find((ec) => AreEqual(ec.Cell, ownProps.cellId));\r\n    const message = state.messages.find((m) => AreEqual(m.Cell!, ownProps.cellId));\r\n    const CellSize = GetActivePlayer(state).cellSize;\r\n\r\n    return {\r\n        Exit: exit === undefined ? undefined : exit.Direction,\r\n        Message: message === undefined ? undefined : message.Content,\r\n        MachineInstanceId: machineInstance === undefined ? undefined : machineInstance.Id,\r\n        CellSize\r\n    };\r\n};\r\n\r\nexport const Cell = connect(\r\n    mapStateToProps,\r\n    {\r\n        OnNewMachine: AddMachine,\r\n        OnMovedMachine: MoveMachine,\r\n        ChangeChannel\r\n    }\r\n\r\n)(CellInternal);","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Cell } from \"./Cell/Cell\";\r\nimport { GetLighterColor } from \"../../Helper/ColorHelper\";\r\nimport { GameData } from \"../../Redux/GameDataReducer/GameModel\";\r\nimport { GetActiveMachine, GetActivePlayer } from \"../../Helper/StoreHelper\";\r\nimport { MachineStyleModel } from \"../../Models/MachineStyleModel\";\r\n\r\nconst GridInternal: React.FC<{\r\n    Rows: number;\r\n    Columns: number;\r\n    CellSize: number;\r\n    Style: MachineStyleModel;\r\n}> = (props) => {\r\n    const rows = [];\r\n    for (let rowIndex = 0; rowIndex < props.Rows; rowIndex++) {\r\n        const row = [];\r\n        for (let columnIndex = 0; columnIndex < props.Columns; columnIndex++) {\r\n\r\n            row.push(<Cell key={columnIndex} cellId={{ Row: rowIndex, Column: columnIndex }} smallHeigth={rowIndex === 0 || rowIndex === props.Rows - 1} smallWidth={columnIndex === 0 || columnIndex === props.Columns - 1} />);\r\n        }\r\n        rows.push(<div key={rowIndex} style={{ display: \"flex\", flexDirection: \"row\", opacity: 1 }}>{row}</div>);\r\n    }\r\n\r\n    return (\r\n        <div style={{ position: \"absolute\", borderColor: GetLighterColor(props.Style.BorderColor, 0.4), borderWidth: props.CellSize * 0.2, borderStyle: \"solid\", marginBottom: 0 }}>\r\n            <div style={{ display: \"flex\", flexDirection: \"column\", backgroundColor: GetLighterColor(props.Style.Color, 0.3) }}>\r\n                {rows}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nfunction mapStateToProps(state: GameData) {\r\n    const activeMachine = GetActiveMachine(state);\r\n    const CellSize = GetActivePlayer(state).cellSize;\r\n    return {\r\n        Rows: activeMachine!.Setup.NumberOfRows,\r\n        Columns: activeMachine!.Setup.NumberOfColumns,\r\n        Style: activeMachine!.Style,\r\n        CellSize\r\n    };\r\n}\r\n\r\nexport const Grid = connect(\r\n    mapStateToProps\r\n)(GridInternal);","export enum OutputStatus {\n    NotChecked,\n    NotFullfilled,\n    Fullfilled,\n    NotMatched\n}","import React from \"react\";\nimport { FormatMessage } from \"../../../MessageFormatter\";\nimport { Props } from \"./Props\";\nimport { OutputStatus } from \"../../../../Models/OutputStatusEnum\";\nimport { ChannelColorEnum } from \"../../../../Models/ChannelColorsEnum\";\n\nexport const MessageDisplay: React.FC<Props> = (props) => {\n    const onContentChanged: ((event: React.ChangeEvent<HTMLInputElement>) => void) = (event: React.ChangeEvent<HTMLInputElement>) => {\n        if (props.OnMessageChanged !== undefined) {\n            props.OnMessageChanged({ Content: event.target.value, Channel: props.Message.Channel });\n        }\n    };\n    const onChannelChanged = (event: React.ChangeEvent<HTMLSelectElement>) => {\n        if (props.OnMessageChanged !== undefined) {\n            props.OnMessageChanged({ Content: props.Message.Content, Channel: event.target.value as ChannelColorEnum });\n        }\n    };\n\n    const style: React.CSSProperties = { display: \"flex\", flexFlow: \"row\", justifyContent: props.Input ? \"flex-start\" : \"flex-end\", marginBottom: 1 };\n    const statusStyle: React.CSSProperties = { display: \"flex\", flexFlow: \"row\" };\n    switch (props.Status) {\n        case OutputStatus.Fullfilled:\n            statusStyle.backgroundColor = \"#d9ffb3\";\n            if (props.Editable) {\n                statusStyle.borderRight = \"solid green\";\n                statusStyle.borderBottom = \"solid green\";\n            }\n            break;\n        case OutputStatus.NotFullfilled:\n            // statusStyle.backgroundColor = \"#ffb3b3\";\n            break;\n        case OutputStatus.NotMatched:\n            statusStyle.border = \"solid red\";\n            statusStyle.backgroundColor = \"#ffb3b3\";\n            break;\n        default:\n            break;\n    }\n\n    return (<div style={style}>\n        <div style={statusStyle}>\n            {props.Input && props.Editable && <button onClick={props.Remove}>-</button>}\n            {props.Input && (props.Editable && props.AllowedInputColors.length > 1 ? <select value={props.Message.Channel} style={{ backgroundColor: props.Message.Channel }} onChange={onChannelChanged}>\n                {props.AllowedInputColors.map((cc, index) => <option value={cc} key={index} style={{ backgroundColor: cc }}></option>)}\n            </select> : <div style={{ backgroundColor: props.Message.Channel, width: 10 }} />)}\n            {props.Editable ?\n                <input value={props.Message.Content} onChange={onContentChanged}></input>\n                :\n                <label>{FormatMessage(props.Message.Content)}</label>}\n            {!props.Input && <div style={{ backgroundColor: props.Message.Channel, width: 10 }} /> }\n        </div>\n    </div>);\n};","import React, { useState } from \"react\";\r\nimport { OrderedMessageModel } from \"../../../Models/OrderedMessageModel\";\r\nimport { OutputStatus } from \"../../../Models/OutputStatusEnum\";\r\nimport { MessageDisplay } from \"./MessageDisplay/MessageDisplay\";\r\nimport { Props } from \"./Props\";\r\nimport { AppStore, AppState } from \"../../../Redux/Store\";\r\nimport { RemoveTest, RemoveInput, UpdateInput, AddInput } from \"../../../Redux/GameDataReducer/Level/Actions\";\r\nimport { connect } from \"react-redux\";\r\nimport { ChannelColorEnum } from \"../../../Models/ChannelColorsEnum\";\r\nimport { Computer } from \"../../../Computing/Computer\";\r\nimport { GetActiveMachine } from \"../../../Helper/StoreHelper\";\r\n\r\nconst TestDisplayInternal: React.FC<Props> = (props) => {\r\n\r\n    const [error, setError] = useState<string | undefined>(undefined);\r\n    const PlayTest = () => {\r\n        setError(undefined);\r\n        const activeMachine = GetActiveMachine(AppState());\r\n\r\n        if (activeMachine !== undefined) {\r\n            const computer = new Computer(activeMachine.Setup, true);\r\n            computer.RunComputation(props.Test.id, AppStore).catch((reason) => {\r\n                setError(reason.toString());\r\n            });\r\n        }\r\n    };\r\n\r\n    const inputs = props.Test.inputs;\r\n    const outputs = props.Test.expectedOutputs;\r\n    let messages: JSX.Element[] = [];\r\n    let index = 0;\r\n\r\n    for (let i = 0; i < inputs.length; i++) {\r\n        messages.push(\r\n            <div key={index++} style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\" }}>\r\n                <MessageDisplay Message={inputs[i]} Input={true} Status={OutputStatus.NotChecked} Editable={props.Test.editable} AllowedInputColors={[ChannelColorEnum.Green, ChannelColorEnum.Blue, ChannelColorEnum.Red, ChannelColorEnum.Yellow]} Remove={() => props.RemoveInput(props.Test.id, i)} OnMessageChanged={(message) => props.UpdateInput({ ...message, Order: i }, props.Test.id)} />\r\n            </div>\r\n        );\r\n        const expectedOutputs = outputs.filter((o) => o.Order === i);\r\n        let actuals: OrderedMessageModel[] | undefined;\r\n\r\n        if (props.Test.actualOutputs !== undefined) {\r\n            actuals = props.Test.actualOutputs.filter((o) => o.Order === i);\r\n        }\r\n\r\n        for (let j = 0; j < expectedOutputs.length; j++) {\r\n            const expected = expectedOutputs[j];\r\n            let valid = OutputStatus.NotChecked;\r\n            if (actuals !== undefined) {\r\n                const indexActual = (actuals.findIndex((o) => o.Channel === expected.Channel && o.Content === expected.Content));\r\n                if (indexActual > -1) {\r\n                    valid = OutputStatus.Fullfilled;\r\n                    actuals.splice(indexActual, 1);\r\n                } else {\r\n                    valid = OutputStatus.NotFullfilled;\r\n                }\r\n            }\r\n\r\n            /* eslint-disable */\r\n            messages = messages.concat(<MessageDisplay Message={expectedOutputs[j]} Input={false} key={index++} Status={valid} Editable={props.Test.editable} AllowedInputColors={[ChannelColorEnum.Green, ChannelColorEnum.Blue, ChannelColorEnum.Red, ChannelColorEnum.Yellow]}/>);\r\n        }\r\n\r\n        if (actuals !== undefined) {\r\n            messages = messages.concat(actuals.map((o) => <MessageDisplay Message={o} Input={false} key={index++} Status={props.Test.editable ? OutputStatus.NotFullfilled : OutputStatus.NotMatched} AllowedInputColors={[ChannelColorEnum.Green]} Editable={false} />));\r\n        }\r\n    }\r\n    /* eslint-enable */\r\n\r\n    const style: React.CSSProperties = { display: \"flex\", flexDirection: \"row\", borderBottom: \"solid 0.5px\", marginTop: 5 };\r\n    const verticalStyle: React.CSSProperties = { display: \"flex\", flexDirection: \"column\", flexGrow: 1 };\r\n\r\n    return (\r\n        <div style={style}>\r\n            {props.Test.editable && <button onClick={() => props.RemoveTest(props.Test.id)}>-</button>}\r\n            <button onClick={PlayTest}>Play</button>\r\n            <div style={verticalStyle}>\r\n                {error !== undefined && <div style={{ backgroundColor: \"red\", color: \"white\" }}>\r\n                    <label>{error}</label>\r\n                </div>}\r\n                {messages}\r\n                {props.Test.editable && <button style={{ alignSelf: \"start\" }} onClick={() => props.AddInput(props.Test.id)}>+</button>}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const TestDisplay = connect(\r\n    undefined,\r\n    { RemoveTest, RemoveInput, UpdateInput, AddInput }\r\n)(TestDisplayInternal);","import React from \"react\";\r\nimport { Props } from \"./Props\";\r\nimport { State } from \"./State\";\r\nimport { TestDisplay } from \"./TestDisplay/TestDisplay\";\r\nimport { connect } from \"react-redux\";\r\nimport { AddTest } from \"../../Redux/GameDataReducer/Level/Actions\";\r\nimport { GameData } from \"../../Redux/GameDataReducer/GameModel\";\r\nimport { GetActivePlayer } from \"../../Helper/StoreHelper\";\r\nimport { LevelState } from \"../../Redux/GameDataReducer/PlayerReducer/LevelData\";\r\n\r\nclass LevelDisplayInternal extends React.Component<Props, State> {\r\n\r\n    public render() {\r\n        const tests = this.props.Level.tests.map((t, index) => <TestDisplay Test={t} key={index} />);\r\n        \r\n        return (\r\n            <>\r\n                <div>\r\n                    <b>{this.props.Level.name}</b>\r\n                    <br />\r\n                    <i>{this.props.Level.description}</i>\r\n                </div>\r\n                {tests}\r\n                {this.props.Level.id === \"12\" && <><button onClick={this.props.AddTest}>Add custom test</button><br/></>}\r\n                {this.props.Status === LevelState.Completed && <b style={{color: \"green\"}}>Level completed!</b>}\r\n                {this.props.Status === LevelState.NonValidMachineUsed && <b style={{color: \"red\"}}>Machine used that is not allowed this level</b>}\r\n\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: GameData) => {\r\n    return {\r\n        Level: state.activeLevel!,\r\n        Status: GetActivePlayer(state)!.levelData.find((l) => l.Id === state.activeLevel!.id)!.State\r\n    };\r\n};\r\n\r\nexport const LevelDisplay = connect(\r\n    mapStateToProps,\r\n    { AddTest }\r\n)(LevelDisplayInternal);","import React from \"react\";\nimport { Constants } from \"../../../Constants\";\nimport { Props } from \"./Props\";\nimport { GetDirectedChannelSet } from \"../../../../Helper/NewChannelSet\";\nimport { MachineCanvasHolder } from \"../../../Grid/Cell/MachineInstance/MachineDrawer/MachineCanvasHolder\";\n\nconst size = Constants.CellSize * 0.33;\nexport const MachineDisplay: React.FC<Props> = (props) => {\n\n    const { inputChannels, outputChannels } = GetDirectedChannelSet(props.MachineType.Api);\n    \n    return (\n        <div style={{display:\"flex\"}}>\n            <div style={{height:size , width: size}}>\n                <MachineCanvasHolder\n                    MachineStyle={props.MachineType.Style}\n                    IsDefault={props.IsDefault}\n                    BackgroundColor={\"White\"}\n                    InputChannels={inputChannels}\n                    OutputChannels={outputChannels}\n                    CellSize={size}\n                />\n            </div>\n            <label>{props.MachineType.Style.Name}</label>\n        </div>);\n};\n","import { GridSetupActionTypes } from \"./GridSetup/Actions\";\r\n\r\ninterface AddNewMachineActionType {\r\n    type: \"AddNewMachineActionType\";\r\n}\r\n\r\nexport function AddNewMachine(): CustomMachinesActionTypes {\r\n    return {\r\n        type: \"AddNewMachineActionType\",\r\n    };\r\n}\r\n\r\ninterface DeleteMachineActionType {\r\n    type: \"DeleteMachineActionType\";\r\n    machineId: string;\r\n}\r\n\r\nexport function DeleteMachine(machineId: string): CustomMachinesActionTypes {\r\n    return {\r\n        type: \"DeleteMachineActionType\",\r\n        machineId\r\n    };\r\n}\r\n\r\ninterface LoadCustomMachineActionType {\r\n    type: \"LoadCustomMachineActionType\";\r\n    machineId: string;\r\n}\r\n\r\nexport function LoadCustomMachine(machineId: string): CustomMachinesActionTypes {\r\n    return {\r\n        type: \"LoadCustomMachineActionType\",\r\n        machineId\r\n    };\r\n}\r\n\r\ninterface ChangeCellSizeActionType {\r\n    type: \"ChangeCellSizeActionType\";\r\n    cellSize: number;\r\n}\r\n\r\nexport function ChangeCellSize(cellSize: number): ChangeCellSizeActionType {\r\n    return {\r\n        type: \"ChangeCellSizeActionType\",\r\n        cellSize\r\n    };\r\n}\r\n\r\nexport type CustomMachinesActionTypes = AddNewMachineActionType\r\n    | LoadCustomMachineActionType\r\n    | DeleteMachineActionType\r\n    | GridSetupActionTypes\r\n    | ChangeCellSizeActionType;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useDrag } from \"react-dnd\";\r\nimport { DraggedNewMachine, DragItemTypes } from \"../../DragItemTypes\";\r\nimport { MachineDisplay } from \"./MachineDisplay/MachineDisplay\";\r\nimport { Props } from \"./Props\";\r\nimport { MachineStore } from \"../../../MachineStore/MachineStore\";\r\nimport { LoadCustomMachine, DeleteMachine } from \"../../../Redux/GameDataReducer/PlayerReducer/Actions\";\r\nimport { connect } from \"react-redux\";\r\nimport { Constants } from \"../../Constants\";\r\nimport { GameData } from \"../../../Redux/GameDataReducer/GameModel\";\r\nimport { IsDefaultMachine } from \"../../../MachineStore/IMachine\";\r\nimport { GetActivePlayer } from \"../../../Helper/StoreHelper\";\r\nimport { getEmptyImage } from \"react-dnd-html5-backend\";\r\n\r\nconst StoredMachineInternal: React.FC<Props> = (props) => {\r\n    const [, drag, preview] = useDrag<DraggedNewMachine, unknown, unknown>({\r\n        item: { type: DragItemTypes.NewMachine, id: props.machine },\r\n        collect: (monitor) => ({\r\n            isDragging: !!monitor.isDragging(),\r\n        }),\r\n    });\r\n    const [showMenu, changeShow] = useState(false);\r\n    useEffect(() => {\r\n        preview(getEmptyImage(), { captureDraggingState: true })\r\n    }, [preview])\r\n\r\n    const machineType = MachineStore.GetStore().GetMachineType(props.machine);\r\n\r\n    const isDefault = IsDefaultMachine(props.machine);\r\n    const machineStyle: React.CSSProperties = props.status === \"Invalid\" ? { borderBottom: Constants.CellSize / 18 + \"px dotted orange\", boxSizing: \"border-box\" } : {};\r\n\r\n    return (\r\n        <div ref={drag} title={machineType.Style.Description} onClick={() => changeShow(!showMenu)}>\r\n            <div style={machineStyle}>\r\n                <MachineDisplay MachineType={machineType} IsDefault={isDefault} />\r\n            </div>\r\n            {!isDefault && showMenu && <div style={{ display: \"flex\" }}>\r\n                <button onClick={(event) => props.LoadCustomMachine(props.machine)}>Edit</button>\r\n                <button onClick={(event) => {\r\n                    event.stopPropagation();\r\n                    props.DeleteMachine(props.machine);\r\n                }}>Delete</button>\r\n            </div>}\r\n        </div>);\r\n};\r\n\r\nconst mapStateToProps = (state: GameData, ownProps: { machine: string }) => {\r\n    return {\r\n        status: IsDefaultMachine(ownProps.machine) ? \"Valid\" : GetActivePlayer(state)!.machines.find((m) => m.Id === ownProps.machine)!.Status\r\n    };\r\n};\r\n\r\nexport const StoredMachine = connect(\r\n    mapStateToProps,\r\n    {\r\n        LoadCustomMachine, DeleteMachine\r\n    }\r\n)(StoredMachineInternal);","import React from \"react\";\nimport { Props } from \"./Props\";\nimport { StoredMachine } from \"./StoredMachine/StoredMachine\";\nimport { AddNewMachine } from \"../../Redux/GameDataReducer/PlayerReducer/Actions\";\nimport { connect } from \"react-redux\";\nimport { MachineStore } from \"../../MachineStore/MachineStore\";\nimport { GameData } from \"../../Redux/GameDataReducer/GameModel\";\nimport { GetActiveMachine, GetActivePlayer } from \"../../Helper/StoreHelper\";\nimport { IsStartMachine, IsDefaultMachine } from \"../../MachineStore/IMachine\";\n\nconst MachineCollectionInternal: React.FC<Props> = (props) => {\n\n    const storedMachines = props.allowedMachines.map((m, index) => <div key={index}><StoredMachine machine={m} /></div>);\n\n    return (\n        <div style={{ overflow: \"auto\", height: props.height, position: \"absolute\" }}>\n            <button onClick={props.AddNewMachine}>Create new machine</button>\n            {storedMachines}\n        </div>\n    );\n};\n\nconst mapStateToProps = (state: GameData) => {\n    const store = MachineStore.GetStore();\n    const machines = store.GetAllMachines();\n    let allowedMachines: string[] = [];\n    const disallowedMachines: string[] = [];\n    const allowedStartMachines: string[] = [];\n\n    for (const machine of machines) {\n        if (state.activeLevel!.allowedMachines.some((am) => machine === am)) {\n            if (IsStartMachine(machine)) {\n                allowedStartMachines.push(machine);\n            }\n            else {\n                allowedMachines.push(machine);\n            }\n        } else {\n            disallowedMachines.push(machine);\n        }\n    }\n\n    const activeMachine = GetActiveMachine(state);\n    if (activeMachine !== undefined) {\n        const usedStartMachines = activeMachine.Setup.MachineInstances.filter((m) => IsStartMachine(m.MachineId));\n\n        const nextStartMachine = allowedStartMachines.find((m) => !usedStartMachines.some((s) => s.MachineId === m));\n        if (nextStartMachine !== undefined) {\n            allowedMachines = [nextStartMachine, ...allowedMachines];\n        }\n    }\n\n    const allowedCustomMachines: string[] = GetActivePlayer(state)!.machines.filter((customMachine) => !customMachine.DependingOn.some((dm) => IsDefaultMachine(dm) && disallowedMachines.some((dis) => dis === dm))).map((cm) => cm.Id);\n    allowedMachines = allowedMachines.concat(allowedCustomMachines);\n\n    return {\n        allowedMachines\n    };\n};\n\nexport const MachineCollection = connect(\n    mapStateToProps,\n    { AddNewMachine }\n)(MachineCollectionInternal);","export function StopPropagation(event: React.MouseEvent<HTMLDivElement, MouseEvent>): void{\r\n    event.stopPropagation();\r\n}","import React, { useState } from \"react\";\r\nimport { ChangeCellSize } from \"../../../Redux/GameDataReducer/PlayerReducer/Actions\";\r\nimport { connect } from \"react-redux\";\r\nimport { IMachineType } from \"../../../MachineStore/IMachineType\";\r\nimport { GetDirectedChannelSet } from \"../../../Helper/NewChannelSet\";\r\nimport { MachineCanvasHolder } from \"../../Grid/Cell/MachineInstance/MachineDrawer/MachineCanvasHolder\";\r\nimport { GetActiveMachine, GetActivePlayer } from \"../../../Helper/StoreHelper\";\r\nimport { GameData } from \"../../../Redux/GameDataReducer/GameModel\";\r\nimport { GetLighterColor, GetRandomColor } from \"../../../Helper/ColorHelper\";\r\nimport { MachineApi } from \"../../../Models/MachineApi\";\r\nimport { ChannelColorEnum } from \"../../../Models/ChannelColorsEnum\";\r\nimport { MachineStyleModel } from \"../../../Models/MachineStyleModel\";\r\n\r\nconst ChangeSizeInternal: React.FC<{ MachineType: IMachineType | undefined; CellSize: number; ChangeCellSize: typeof ChangeCellSize; Close(): void }> = (props) => {\r\n\r\n    const [size, setSize] = useState(props.CellSize);\r\n    const [borderColor] = useState(GetRandomColor());\r\n    const [backgroundColor] = useState(GetLighterColor(GetRandomColor(), 0.3));\r\n\r\n    function SizeChanged(newSize: number) {\r\n        props.ChangeCellSize(newSize);\r\n        setSize(newSize);\r\n    }\r\n\r\n    const api: MachineApi = props.MachineType?.Api ?? { OutputChannels: [ChannelColorEnum.Green], InputChannels: [ChannelColorEnum.Green] };\r\n    const style: MachineStyleModel = props.MachineType?.Style ?? { BorderColor: \"red\", Color: \"green\", Name: \"Dummy\", Description: \"dummy\" }\r\n    const channels = GetDirectedChannelSet(api);\r\n    return (\r\n        <div style={{ margin: 10, width: 500, borderColor, backgroundColor, borderWidth: 20, borderStyle: \"solid\", padding: 30 }}>\r\n            <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                <div style={{ height: props.CellSize, width: props.CellSize, alignSelf: \"center\" }}>\r\n                    <MachineCanvasHolder MachineStyle={style}\r\n                        IsDefault={false}\r\n                        BackgroundColor={backgroundColor}\r\n                        InputChannels={channels.inputChannels}\r\n                        OutputChannels={channels.outputChannels}\r\n                        MovingOutput={undefined}\r\n                        CellSize={props.CellSize} />\r\n                </div>\r\n                <input type=\"range\" min=\"10\" max=\"200\" onChange={(event) => SizeChanged(Number(event.currentTarget.value))} value={size} />\r\n                {size}\r\n            </div>\r\n            <button className=\"startMenu\" onClick={props.Close}>Close</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: GameData) => {\r\n    const activeMachine = GetActiveMachine(state);\r\n    const cellSize = GetActivePlayer(state).cellSize;\r\n    return ({\r\n        MachineType: activeMachine,\r\n        CellSize: cellSize\r\n    });\r\n};\r\n\r\nexport const ChangeSizeComponent = connect(\r\n    mapStateToProps,\r\n    { ChangeCellSize }\r\n)(ChangeSizeInternal);\r\n","import React, { useState } from \"react\";\r\nimport { SetName, SetDescription, SetColor, SetBorderColor } from \"../../../../Redux/GameDataReducer/PlayerReducer/GridSetup/Actions\";\r\nimport { Props } from \"./Props\";\r\nimport { connect } from \"react-redux\";\r\nimport { GameData } from \"../../../../Redux/GameDataReducer/GameModel\";\r\nimport { GetActiveMachine, GetActivePlayer } from \"../../../../Helper/StoreHelper\";\r\nimport { MachineCanvasHolder } from \"../../../Grid/Cell/MachineInstance/MachineDrawer/MachineCanvasHolder\";\r\nimport { GetDirectedChannelSet } from \"../../../../Helper/NewChannelSet\";\r\nimport { GetLighterColor, GetRandomColor } from \"../../../../Helper/ColorHelper\";\r\n\r\nconst EditMachineInternal: React.FC<Props> = (props) => {\r\n    const [color, setColor] = useState<string>(props.MachineType.Style.Color);\r\n    const [borderColor, setBorderColor] = useState<string>(props.MachineType.Style.BorderColor);\r\n    const [dialogBorderColor] = useState(GetRandomColor());\r\n    const [backgroundColor] = useState(GetLighterColor(GetRandomColor(), 0.3));\r\n\r\n    function colorChanged(color: string): void {\r\n        setColor(color);\r\n        props.SetColor(color);\r\n    }\r\n\r\n    function borderChanged(borderColor: string): void {\r\n        setBorderColor(borderColor);\r\n        props.SetBorderColor(borderColor);\r\n    }\r\n\r\n    const channels = GetDirectedChannelSet(props.MachineType.Api);\r\n    return (\r\n        <div style={{ margin: 10, width: 500, borderColor: dialogBorderColor, backgroundColor, borderWidth: 20, borderStyle: \"solid\", padding: 30 }}>\r\n            {props.MachineType !== undefined &&\r\n                <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                    <div style={{ height: props.CellSize, width: props.CellSize, alignSelf: \"center\" }}>\r\n                        <MachineCanvasHolder MachineStyle={props.MachineType.Style}\r\n                            IsDefault={false}\r\n                            BackgroundColor={backgroundColor}\r\n                            InputChannels={channels.inputChannels}\r\n                            OutputChannels={channels.outputChannels}\r\n                            MovingOutput={undefined}\r\n                            CellSize={props.CellSize} />\r\n                    </div>\r\n                    <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\" }}>\r\n                        <label>Name</label>\r\n                        <input onChange={(event) => props.SetName(event.target.value)} value={props.MachineType.Style.Name}></input>\r\n                    </div>\r\n                    <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\" }}>\r\n                        <label>Color</label>\r\n                        <input onChange={(event) => colorChanged(event.target.value)} value={color}></input>\r\n                    </div>\r\n                    <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\" }}>\r\n                        <label>BorderColor</label>\r\n                        <input onChange={(event) => borderChanged(event.target.value)} value={borderColor}></input>\r\n                    </div>\r\n                    <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\" }}>\r\n                        <label>Description</label>\r\n                        <textarea cols={50} rows={5} onChange={(event) => props.SetDescription(event.target.value)} value={props.MachineType.Style.Description}></textarea>\r\n                    </div>\r\n                </div>}\r\n                <button className=\"startMenu\" onClick={props.Close}>Close</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: GameData) => {\r\n    const activeMachine = GetActiveMachine(state);\r\n    const cellSize = GetActivePlayer(state).cellSize;\r\n    return ({\r\n        MachineType: activeMachine!,\r\n        CellSize: cellSize\r\n    });\r\n};\r\n\r\nexport const EditMachine = connect(\r\n    mapStateToProps,\r\n    { SetName, SetDescription, SetColor, SetBorderColor }\r\n)(EditMachineInternal);\r\n","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { StopPropagation } from \"../../../Helper/ClickHelper\";\r\nimport { GetLighterColor, GetRandomColor } from \"../../../Helper/ColorHelper\";\r\nimport { GetActiveMachine } from \"../../../Helper/StoreHelper\";\r\nimport { SwitchScreen } from \"../../../Redux/GameDataReducer/Actions\";\r\nimport { GameData } from \"../../../Redux/GameDataReducer/GameModel\";\r\nimport { ChangeSizeComponent } from \"./ChangeSizeComponent\";\r\nimport { EditMachine } from \"./EditMachine/EditMachine\";\r\n\r\n\r\nconst GameMenuInternal: React.FC<{ SwitchScreen: typeof SwitchScreen; Close(): void, hasActiveMachine: boolean }> = (props) => {\r\n\r\n    const [dialog, setdialog] = useState<\"none\" | \"editMachine\" | \"changeCellSize\">(\"none\");\r\n\r\n    const [borderColor] = useState(GetRandomColor());\r\n    const [backgroundColor] = useState(GetLighterColor(GetRandomColor(), 0.3));\r\n\r\n    return (\r\n        <div style={{ display: \"flex\", flexDirection: \"row\", alignItems: \"center\" }} onClick={StopPropagation}>\r\n            {dialog !== \"none\" && <div style={{ width: 220 }} ></div>}\r\n            <div style={{ borderColor, backgroundColor, borderWidth: 20, borderStyle: \"solid\", padding: 30, display: \"flex\", flexDirection: \"column\" }}>\r\n                <button className=\"startMenu\" onClick={() => props.SwitchScreen(\"startMenu\")}>Back to menu</button>\r\n                {props.hasActiveMachine && <button className=\"startMenu\" onClick={() => setdialog(\"editMachine\")}>Edit machine style</button>}\r\n                <button className=\"startMenu\" onClick={() => setdialog(\"changeCellSize\")}>Change cell size</button>\r\n\r\n                <button className=\"startMenu\" onClick={props.Close}>Continue playing</button>\r\n            </div>\r\n            {dialog === \"editMachine\" && <EditMachine Close={() => setdialog(\"none\")}/>}\r\n            {dialog === \"changeCellSize\" && <ChangeSizeComponent Close={() => setdialog(\"none\")}/>}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nfunction mapStateToProps(state: GameData){\r\n    const activeMachine = GetActiveMachine(state);\r\n    return {hasActiveMachine: activeMachine !== undefined}\r\n}\r\n\r\nexport const GameMenu = connect(\r\n    mapStateToProps,\r\n    { SwitchScreen }\r\n)(GameMenuInternal);\r\n","import React from \"react\";\r\nimport { XYCoord } from \"react-dnd\";\r\nimport { connect } from \"react-redux\";\r\nimport { GetDirectedChannelSet } from \"../../../Helper/NewChannelSet\";\r\nimport { GetActivePlayer } from \"../../../Helper/StoreHelper\";\r\nimport { IsDefaultMachine } from \"../../../MachineStore/IMachine\";\r\nimport { MachineStore } from \"../../../MachineStore/MachineStore\";\r\nimport { GameData } from \"../../../Redux/GameDataReducer/GameModel\";\r\nimport { MachineCanvasHolder } from \"../../Grid/Cell/MachineInstance/MachineDrawer/MachineCanvasHolder\";\r\n\r\nconst DraggedMachineInternal: React.FC<{ machineId: string, offset: XYCoord, cellSize: number }> = (props) => {\r\n    const machineType = MachineStore.GetStore().GetMachineType(props.machineId);\r\n    const { inputChannels, outputChannels } = GetDirectedChannelSet(machineType.Api);\r\n    const transform = `translate(${props.offset.x - props.cellSize / 2}px, ${props.offset.y - props.cellSize / 2}px)`\r\n    return <div style={{ position: \"absolute\", transform, pointerEvents: \"none\" }}>\r\n        <MachineCanvasHolder InputChannels={inputChannels}\r\n            OutputChannels={outputChannels}\r\n            MachineStyle={machineType.Style}\r\n            BackgroundColor={\"white\"}\r\n            CellSize={props.cellSize}\r\n            IsDefault={IsDefaultMachine(props.machineId)} />\r\n    </div>\r\n};\r\n\r\nconst mapStateToProps = (state: GameData) => {\r\n\r\n    return {\r\n        cellSize: GetActivePlayer(state).cellSize\r\n    };\r\n};\r\nexport const DraggedMachine = connect(\r\n    mapStateToProps,\r\n    {}\r\n)(DraggedMachineInternal);","import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { GameData } from \"../../Redux/GameDataReducer/GameModel\";\r\nimport { GetActiveMachine, GetActivePlayer } from \"../../Helper/StoreHelper\";\r\nimport { useDrag, useDragLayer, XYCoord } from \"react-dnd\";\r\nimport { DragItemTypes } from \"../DragItemTypes\";\r\nimport { getEmptyImage } from \"react-dnd-html5-backend\";\r\n\r\nconst MovingElementInternal: React.FC<{\r\n    Rows: number;\r\n    Columns: number;\r\n    CellSize: number;\r\n    WindowHeight: number;\r\n    WindowWidth: number; \r\n    children?: React.ReactNode;\r\n}> = (props) => {\r\n    const calculatedHeight = props.CellSize * (props.Rows - .35);\r\n    const calculatedWidth = props.CellSize * (props.Columns - 0.35);\r\n\r\n    const [leftStart, setLeftStart] = useState((props.WindowWidth - calculatedWidth) / 2);\r\n    const [topStart, setTopStart] = useState((props.WindowHeight - calculatedHeight) / 2);\r\n    const [finalOffset, setFinalOffset] = useState<XYCoord>({ x: 0, y: 0 });\r\n    const [{ isDragging }, drag, preview] = useDrag({\r\n        item: { type: DragItemTypes.Grid },\r\n        end: (result, monitor) => {\r\n            const offSet = monitor.getDifferenceFromInitialOffset();\r\n            if (offSet !== null) {\r\n                setFinalOffset(offSet);\r\n            }\r\n        },\r\n        collect: (monitor) => ({ isDragging: monitor.isDragging() })\r\n    });\r\n\r\n    useEffect(() => {\r\n        setLeftStart((l) => l + finalOffset.x);\r\n        setTopStart((t) => t + finalOffset.y);\r\n    }, [finalOffset])\r\n\r\n    const offSet = useDragLayer((monitor) => {\r\n        if (monitor.getItemType() === DragItemTypes.Grid) {\r\n            const offSet = monitor.getDifferenceFromInitialOffset();\r\n            if (offSet !== null) {\r\n                return offSet;\r\n            } else {\r\n                return undefined;\r\n            }\r\n        }\r\n    });\r\n\r\n    useEffect(() => {\r\n        preview(getEmptyImage(), { captureDraggingState: true })\r\n    }, [preview])\r\n\r\n    const left = isDragging && offSet !== undefined ? leftStart + offSet.x : leftStart;\r\n    const top = isDragging && offSet !== undefined ? topStart + offSet.y : topStart;\r\n\r\n    return (\r\n        <div ref={drag} style={{ position: \"absolute\", top, left, height: calculatedHeight, width: calculatedWidth }}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nfunction mapStateToProps(state: GameData) {\r\n    const activeMachine = GetActiveMachine(state);\r\n    const CellSize = GetActivePlayer(state).cellSize;\r\n    return {\r\n        Rows: activeMachine!.Setup.NumberOfRows,\r\n        Columns: activeMachine!.Setup.NumberOfColumns,\r\n        Style: activeMachine!.Style,\r\n        CellSize\r\n    };\r\n}\r\n\r\nexport const MovingElement = connect(\r\n    mapStateToProps\r\n)(MovingElementInternal);","import React, { useEffect, useState } from \"react\";\nimport { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\nimport { Dashboard } from \"../Dashboard/Dashboard\";\nimport { Grid } from \"../Grid/Grid\";\nimport { LevelDisplay } from \"../LevelDisplay/LevelDisplay\";\nimport { MachineCollection } from \"../MachineCollection/MachineCollection\";\nimport { Computer } from \"../../Computing/Computer\";\nimport { AddNewMachine } from \"../../Redux/GameDataReducer/PlayerReducer/Actions\";\nimport { connect } from \"react-redux\";\nimport { Props } from \"./Props\";\nimport { ClearMessages } from \"../../Redux/GameDataReducer/PlayerReducer/GridSetup/Actions\";\nimport { GetActiveMachine } from \"../../Helper/StoreHelper\";\nimport { GameData } from \"../../Redux/GameDataReducer/GameModel\";\nimport { SwitchScreen } from \"../../Redux/GameDataReducer/Actions\";\nimport { useDragLayer } from \"react-dnd\";\nimport { DraggedNewMachine, DraggedOutputChannel, DragItemTypes } from \"../DragItemTypes\";\nimport { GetAngleFromMonitor } from \"../../Helper/AngleHelper\";\nimport { SetMovingOutput } from \"../../Redux/GameDataReducer/Actions\";\nimport { GameMenu } from \"./GameMenu/GameMenu\";\nimport { Constants } from \"../Constants\";\nimport { DraggedMachine } from \"../MachineCollection/DraggedMachine/DraggedMachine\";\nimport { MovingElement } from \"../Grid/MovingElement\";\n\nconst GameInternal: React.FC<Props> = (props) => {\n    const [menu, setMenu] = useState<\"none\" | \"options\">(\"none\");\n\n    const [height, setHeight] = useState(window.innerHeight);\n    const [width, setWidth] = useState(window.innerWidth);\n\n    useEffect(() => {\n        document.addEventListener(\"keyup\", handleKeyPress, false);\n        window.addEventListener(\"resize\", handleResize);\n        return () => {\n            document.removeEventListener(\"keyup\", handleKeyPress, false);\n            window.removeEventListener(\"resize\", handleResize, false);\n\n        }\n    })\n\n    const dragPreviewElement = useDragLayer((monitor) => {\n        switch (monitor.getItemType()) {\n            case DragItemTypes.OutputChannel:\n\n                const outputItem: DraggedOutputChannel = monitor.getItem() as DraggedOutputChannel;\n                const draggedOutputAngle = GetAngleFromMonitor(monitor, outputItem.offsetX, outputItem.offsetY);\n                if (draggedOutputAngle !== undefined) {\n                    props.SetMovingOutput({ angle: draggedOutputAngle, ...outputItem });\n                }\n                break;\n            case DragItemTypes.NewMachine:\n                if (monitor.isDragging()) {\n                    const offset = monitor.getClientOffset();\n                    if (offset !== null) {\n                        const item = monitor.getItem() as DraggedNewMachine;\n                        return <DraggedMachine machineId={item.id} offset={offset} />\n                    }\n                }\n                break\n        }\n        return null;\n    });\n\n    function handleKeyPress(event: KeyboardEvent): void {\n        switch (event.key) {\n            case \" \":\n                Computer.StopComputation();\n                props.ClearMessages();\n                event.stopPropagation();\n                break;\n            default:\n                break;\n        }\n    }\n\n    function handleResize(): void {\n        setHeight(window.innerHeight);\n        setWidth(window.innerWidth);\n    }\n\n    const allowedInputColors = [ChannelColorEnum.Green];\n    const opagueBackground = \"rgba(255,255,255,.8)\";\n    return (\n        <div style={{ position: \"absolute\", height, width,  overflow: \"hidden\" }}>\n            <div style={{ position: \"absolute\", height: \"100%\", width: \"100%\" }}>\n                {!props.HasActiveMachine ?\n                    <div style={{ display: \"flex\", height: \"100%\", width: \"100%\", justifyContent: \"center\", alignItems: \"center\" }}>\n                        <button title={\"Add new machine\"} onClick={props.AddNewMachine}>Create new machine</button>\n                    </div>\n                    :\n                    <MovingElement WindowHeight={height} WindowWidth={width}><Grid/></MovingElement>\n                }\n            </div >\n            <div style={{ position: \"absolute\", left: width / 2 - 150, padding: 10, width: 300, backgroundColor: opagueBackground }}>\n                <h2 style={{ textAlign: \"center\", margin: 0 }}>{props.MachineName}</h2>\n            </div>\n            <div style={{ position: \"absolute\", padding: 10, left: width - 220, width: 180, height: height - 20, backgroundColor: opagueBackground }}>\n                <button onClick={() => setMenu(\"options\")} title=\"Options\">Options</button>\n                <MachineCollection height={height-40}/>\n            </div>\n            <div style={{ position: \"absolute\", padding: 10, left: 10, top: 50, width: 300, backgroundColor: opagueBackground }}>\n                <LevelDisplay MultipleInputsAllowed={false} AllowedInputs={allowedInputColors} />\n            </div>\n            <div style={{ position: \"absolute\", padding: 10, height: 80, width: 240, left: width / 2 - 150, top: height - 80, backgroundColor: opagueBackground }}>\n                <Dashboard />\n            </div>\n            {menu === \"options\" &&\n                <div onClick={() => setMenu(\"none\")} style={{ position: \"absolute\", height: \"100%\", width: \"100%\", display: \"flex\", justifyContent: \"center\", alignItems: \"center\", background: Constants.MenuBackGround }}>\n                    <GameMenu Close={() => setMenu(\"none\")} />\n                </div>\n            }\n            {dragPreviewElement}\n        </div>\n    );\n}\n\nconst mapStateToProps = (state: GameData) => {\n    const activeMachine = GetActiveMachine(state);\n\n    return {\n        HasActiveMachine: activeMachine !== undefined,\n        MachineName: activeMachine?.Style.Name      \n    };\n};\nexport const Game = connect(\n    mapStateToProps,\n    { AddNewMachine, ClearMessages, SwitchScreen, SetMovingOutput }\n)(GameInternal);","import React, { useState } from \"react\";\r\nimport { Props } from \"./Props\";\r\n\r\nexport const Dialog: React.FC<Props> = (props) => {\r\n    const [name, setName] = useState(props.name);\r\n\r\n    function handleKeyUp(event: React.KeyboardEvent<HTMLInputElement>): void\r\n    {\r\n        switch (event.key) {\r\n            case \"Enter\":\r\n                props.close(name);\r\n                break;        \r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    return <div style={{width: 200, margin: 10}}>\r\n        <input onChange={(value) => setName(value.target.value)} onKeyUp={handleKeyUp} value={name} ></input>\r\n        <button onClick={() => props.close(name)}>OK</button>\r\n    </div>;\r\n};","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { SwitchScreen, ChangePlayerName } from \"../../Redux/GameDataReducer/Actions\";\r\nimport { LoadLevel } from \"../../Redux/GameDataReducer/Level/Actions\";\r\nimport { Props } from \"./Props\";\r\nimport { GetActivePlayer } from \"../../Helper/StoreHelper\";\r\nimport { GameData } from \"../../Redux/GameDataReducer/GameModel\";\r\nimport { GetRandomColor, GetLighterColor } from \"../../Helper/ColorHelper\";\r\nimport { Dialog } from \"./Dialog/Dialog\";\r\nimport { LevelState } from \"../../Redux/GameDataReducer/PlayerReducer/LevelData\";\r\nimport { LevelStore } from \"../../Levels/LevelStore\";\r\nimport { LevelModel } from \"../../Levels/LevelModel\";\r\n\r\nconst StartMenuInternal: React.FC<Props> = (props) => {\r\n\r\n    const [borderColor] = useState(GetRandomColor());\r\n    const [dialog, setdialog] = useState<\"none\" | \"changeName\">(\"none\");\r\n    const [backgroundColor] = useState(GetLighterColor(GetRandomColor(), 0.3));\r\n\r\n    return (\r\n        <div style={{ height: \"100%\", width: \"100%\", display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }}>\r\n            {dialog !== \"none\" && <div style={{ width: 220 }} />}\r\n            <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\r\n                <h1>Contextion</h1>\r\n\r\n                <div style={{ borderColor, backgroundColor, borderWidth: 20, borderStyle: \"solid\", padding: 30, display: \"flex\", flexDirection: \"column\" }}>\r\n                    {props.continueLevel !== undefined && <button className=\"startMenu\" onClick={() => props.LoadLevel(props.continueLevel!.Id)}>Continue with {props.continueLevel.Name}</button>}\r\n                    <button className=\"startMenu\" onClick={() => props.SwitchScreen(\"levelSelect\")}>Select level</button>\r\n                    <button className=\"startMenu\" onClick={() => props.LoadLevel(\"12\")}>Sandbox</button>\r\n                    <button className=\"startMenu\" onClick={() => setdialog(\"changeName\")}>Change player name</button>\r\n                </div>\r\n                <h4> Playing as {props.playerName}</h4>\r\n            </div>\r\n            {dialog === \"changeName\" && <Dialog name={props.playerName} close={(name) => {\r\n                props.ChangePlayerName(name);\r\n                setdialog(\"none\");\r\n            }}></Dialog>}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: GameData) => {\r\n    const player = GetActivePlayer(state);\r\n    let continueLevel: LevelModel | undefined = undefined;\r\n    if (player.activeLevel !== undefined) {     \r\n        const data = player.levelData.find((ld) => ld.Id === player.activeLevel);\r\n        if (data?.State === LevelState.InProgress || data?.State === LevelState.NonValidMachineUsed) {\r\n            continueLevel = LevelStore.GetStore().GetLevel(player.activeLevel);\r\n        }\r\n    }\r\n\r\n    return {\r\n        playerName: player.name,\r\n        continueLevel\r\n    };\r\n};\r\n\r\nexport const StartMenu = connect(\r\n    mapStateToProps,\r\n    { SwitchScreen, ChangePlayerName, LoadLevel }\r\n)(StartMenuInternal);\r\n","import { Props } from \"./Props\";\r\nimport React, { useState } from \"react\";\r\nimport { LoadLevel } from \"../../../Redux/GameDataReducer/Level/Actions\";\r\nimport { connect } from \"react-redux\";\r\nimport { LevelState } from \"../../../Redux/GameDataReducer/PlayerReducer/LevelData\";\r\nimport { MachineCanvasHolder } from \"../../Grid/Cell/MachineInstance/MachineDrawer/MachineCanvasHolder\";\r\nimport { GetGrayScaleColor, GetLighterColor, GetOpaqueColor } from \"../../../Helper/ColorHelper\";\r\nimport { Constants } from \"../../Constants\";\r\nimport { MachineStore } from \"../../../MachineStore/MachineStore\";\r\nimport { ChannelModel } from \"../../../Models/ChannelModel\";\r\n\r\nconst LevelPreviewInternal: React.FC<Props> = (props) => {\r\n    const OnClick = () => props.LoadLevel(props.Level.Id);\r\n    const [showLabel, setShowLabel] = useState(props.Data?.LastUsedMachineId !== undefined || props.Level.InputChannels.length !== 0);\r\n\r\n    let color: string;\r\n    let borderColor: string;\r\n\r\n    let outputChannels: ChannelModel[][] = [];\r\n\r\n    if (props.Data?.LastUsedMachineId === undefined) {\r\n        color = \"rgb(200,200,200)\";\r\n        borderColor = \"rgb(160,160,160)\";\r\n    } else {\r\n        var machine = MachineStore.GetStore().GetMachineType(props.Data!.LastUsedMachineId);\r\n        switch (props.Data.State) {\r\n            case LevelState.Completed:\r\n                color = machine.Style.Color;\r\n                borderColor = machine.Style.BorderColor;\r\n                outputChannels = props.Level.OutputChannels.map((oc) => [oc]);\r\n                break;\r\n            case LevelState.InProgress:\r\n            case LevelState.NonValidMachineUsed:\r\n                color = GetLighterColor(GetGrayScaleColor(machine.Style.Color, 0.2), 0.6);\r\n                borderColor = GetLighterColor(GetGrayScaleColor(machine.Style.BorderColor, 0.2), 0.6);\r\n                break;\r\n            case LevelState.NoMachineLinked:\r\n                throw Error(\"State is not linked, but there is a machine linked\")\r\n        }\r\n    }\r\n\r\n    function onHover() {\r\n        if (props.Data?.LastUsedMachineId === undefined && props.Level.InputChannels.length === 0) {\r\n            setShowLabel(true);\r\n        }\r\n    }\r\n\r\n    function onExit() {\r\n        if (props.Data?.LastUsedMachineId === undefined && props.Level.InputChannels.length === 0) {\r\n            setShowLabel(false);\r\n        }\r\n    }\r\n\r\n    const machineStyle = {\r\n        Color: color,\r\n        BorderColor: borderColor,\r\n    }\r\n\r\n    return (<div style={{ position: \"absolute\", marginLeft: props.Level.Cell.Column * 140 + 50, marginTop: props.Level.Cell.Row * 115 + 20 }}>\r\n        <div onClick={OnClick} onMouseOver={onHover} onMouseOut={onExit} title={props.Level.LevelDescription} style={{ height: Constants.CellSize - 2, width: Constants.CellSize - 2 }}>\r\n            <MachineCanvasHolder IsDefault={false} MachineStyle={machineStyle} BackgroundColor={\"white\"} InputChannels={props.Level.InputChannels} OutputChannels={outputChannels} CellSize={Constants.CellSize} />\r\n            {showLabel && <div style={{ display: \"flex\", position: \"absolute\", height: \"10%\", width: \"100%\", justifyContent: \"center\", alignItems: \"center\" }}>\r\n                <label style={{ fontFamily: \"Comic Sans MS\", background: GetOpaqueColor(\"White\", 0.7) }}>{props.Level.Name}</label>\r\n            </div>}\r\n        </div>\r\n    </div>);\r\n};\r\n\r\nexport const LevelPreview = connect(\r\n    undefined,\r\n    { LoadLevel }\r\n)(LevelPreviewInternal);","import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { GameData } from \"../../Redux/GameDataReducer/GameModel\";\r\nimport { Props } from \"./Props\";\r\nimport { SwitchScreen } from \"../../Redux/GameDataReducer/Actions\";\r\nimport { GetActivePlayer } from \"../../Helper/StoreHelper\";\r\nimport { LevelStore } from \"../../Levels/LevelStore\";\r\nimport { LevelModel } from \"../../Levels/LevelModel\";\r\nimport { LevelData, LevelState } from \"../../Redux/GameDataReducer/PlayerReducer/LevelData\";\r\nimport { LevelPreview } from \"./LevelPreview/LevelPreview\";\r\nimport { Move } from \"../../Helper/SetupHelper\";\r\nimport { AreEqual } from \"../../Models/CellModel\";\r\nimport { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\n\r\nconst LevelSelectScreenInternal: React.FC<Props> = (props) => {\r\n    const [levelModels, setLevelModels] = useState<{ model: LevelModel; data: LevelData | undefined }[]>([]);\r\n    useEffect(() => {\r\n        const levels = LevelStore.GetStore().GetAllLevels();\r\n        const models = levels.filter((l) => l.Cell.Row >= 0).map((l) => {\r\n            const levelData = props.levels.find((ld) => ld.Id === l.Id);\r\n            return { model: l, data: levelData };\r\n        });\r\n\r\n        const maxColumn = Math.max(...levels.map((l) => l.Cell.Column));\r\n        const maxRow = Math.max(...levels.map((l) => l.Cell.Column));\r\n        const setup = { NumberOfRows: maxRow, NumberOfColumns: maxColumn };\r\n        const completedLevels = models.filter((lm) => lm.data?.State === LevelState.Completed).map((lm) => lm.model);\r\n        for (const completedLevel of completedLevels) {\r\n            for (const direction of completedLevel.OutputChannels.map((oc) => oc.Direction)) {\r\n                let newCell = Move(setup, completedLevel.Cell, direction);\r\n                while (newCell !== undefined) {\r\n                    // eslint-disable-next-line\r\n                    const nextLevel = models.find((cl) => AreEqual(cl.model.Cell, newCell!));\r\n                    if (nextLevel !== undefined) {\r\n                        nextLevel.model.InputChannels.push({ Channel: ChannelColorEnum.Green, Direction: direction, Status: \"Exists\", UseMachineColor: true });\r\n                        break;\r\n                    }\r\n\r\n                    newCell = Move(setup, newCell, direction);\r\n                }\r\n            }\r\n        }\r\n        setLevelModels(models);\r\n    }, [props.levels]);\r\n\r\n    return <div style={{ position: \"absolute\" }}>\r\n        {levelModels.map((lm) => <LevelPreview Level={lm.model} Data={lm.data} key={lm.model.Id} />)}\r\n    </div>\r\n}\r\n\r\nconst mapStateToProps = (state: GameData) => {\r\n    var levels = GetActivePlayer(state)!.levelData;\r\n    return {\r\n        levels\r\n    };\r\n};\r\n\r\nexport const LevelSelectScreen = connect(\r\n    mapStateToProps,\r\n    { SwitchScreen }\r\n)(LevelSelectScreenInternal);","import React from \"react\";\r\nimport { DndProvider } from \"react-dnd\";\r\nimport HTML5Backend from \"react-dnd-html5-backend\";\r\nimport { Game } from \"./Components/Game/Game\";\r\nimport { connect } from \"react-redux\";\r\nimport { GameData } from \"./Redux/GameDataReducer/GameModel\";\r\nimport { Props } from \"./Props\";\r\nimport { StartMenu } from \"./Components/StartMenu/StartMenu\";\r\nimport { LevelSelectScreen } from \"./Components/LevelSelectsScreen/LevelSelectScreen\";\r\n\r\nconst AppInternal: React.FC<Props> = (props) => {\r\n  return (\r\n    <DndProvider backend={HTML5Backend}>\r\n      {props.screen === \"startMenu\" && <StartMenu />}\r\n      {props.screen === \"levelSelect\" && <LevelSelectScreen />}\r\n      {props.screen === \"playing\" && <Game />}\r\n\r\n    </DndProvider>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: GameData) => {\r\n  return {\r\n      screen: state.screen,\r\n    };\r\n};\r\n\r\nexport const App = connect(\r\n  mapStateToProps\r\n)(AppInternal);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport {App} from \"./App\";\r\nimport \"./index.css\";\r\nimport { AppStore } from \"./Redux/Store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={AppStore}>\r\n        <App />\r\n    </Provider>\r\n    , document.getElementById(\"root\"));\r\n"],"sourceRoot":""}