{"version":3,"sources":["Models/DirectionEnum.ts","Models/ChannelColorsEnum.ts","Computing/Setup.ts","Components/Constants.ts","Components/Machine/Machine.tsx","Components/Channel/Channel.tsx","Components/DragItemTypes.ts","MachineStore/DefaultMachines/MoveMachine.ts","MachineStore/DefaultMachines/StartMachine.ts","MachineStore/DefaultMachines/CopyMachine.ts","MachineStore/DefaultMachines/DeleteMachine.ts","MachineStore/DefaultMachines/RotateMachine.ts","MachineStore/DefaultMachines/CompareMachine.ts","MachineStore/MachineStore.ts","Components/MachineInstance/MachineInstance.tsx","Components/Cell/Cell.tsx","Components/Grid/Grid.tsx","Components/StoredMachine/StoredMachine.tsx","Components/MachineStore/MachineStore.tsx","Computing/Computer.ts","Components/Settings/Settings.tsx","Components/Game/Game.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["DirectionEnum","ChannelColorEnum","Setup","GridSetup","this","LoadSetup","undefined","Error","NumberOfRows","NumberOfColumns","MachineInstances","Cell","Row","Column","Channels","Channel","Green","Direction","Down","InputChannels","MachineId","Id","Type","Right","Constants","CellSize","Machine","machineSize","borderSize","machineStyle","height","width","backgroundColor","props","Color","borderStyle","borderColor","BorderColor","borderWidth","borderRadius","marginLeft","marginTop","style","React","Component","onClicked","bind","channelStyle","position","ChannelMap","border","pointerEvents","rotate","Left","Up","rotation","transform","onClick","event","newDirection","console","log","OnChanged","DragItemTypes","MoveMachine","actor","Act","message","returnValue","push","Content","NumberOfOutputs","NumberOfInputs","Name","StartMachine","CopyMachine","content","length","DeleteMachine","slice","RotateMachine","CompareMachine","channel","Red","MachineStore","machines","init","id","machine","find","m","FindMachine","GetActor","GetType","machineStore","MachineInstance","useDrag","item","type","end","dropResult","monitor","didDrop","OnRemoved","collect","isDragging","drag","channels","map","c","index","key","channelMap","machineInstance","i","OnChannelChanged","machineType","GetStore","GetMachineType","ref","useDrop","accept","drop","OnMovedMachine","getItem","location","itemProps","OnNewMachine","float","marginRight","Message","OnMachineRemoved","Grid","store","ChannelChanged","MachineMoved","MachineAdded","MachineRemoved","rows","rowIndex","row","columnIndex","foundMachineInstance","foundMessage","Messages","newGridSetup","mi","findIndex","filter","Blue","Yellow","Math","max","StoredMachine","channelComponents","cm","absoluteStyle","Store","GetAllMachine","relativeStyle","storedMachines","disallowedMachines","some","Computer","setup","GetMachines","startMachines","Input","messageLocations","GetStartMachines","messageLocation","messages","nextMessages","messageCell","Move","nextContents","nextContent","cell","direction","Settings","StepTimeChanged","ShowSetupString","SetupStringChanged","state","SetupString","setupString","ShowSetup","display","flexWrap","flexDirection","justifyContent","alignItems","value","StepTime","title","onChange","setState","target","stringValue","numValue","Number","OnStepTimeChanged","JSON","stringify","OnShowingSetup","setupModel","parse","OnSetupChanged","Game","computer","runningComputation","inputChanged","startComputation","CalculateNextMessages","GridSetupChanged","gridSetup","LoadGridSetup","Computing","Output","ShowingSetup","e","StartComputation","setTimeout","GetNextMessages","doneMessages","mm","newSetup","disallowedStartMachines","gridSizeStyle","verticalFlex","className","NewSetup","newStepTime","App","backend","HTML5Backend","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2b89da65.chunk.js","sourcesContent":["export enum DirectionEnum {\r\n    Up = \"UP\",\r\n    Down = \"DOWN\",\r\n    Left = \"LEFT\",\r\n    Right = \"RIGHT\",\r\n}","export enum ChannelColorEnum {\r\n    Green = \"green\",\r\n    Red = \"red\",\r\n    Blue = \"blue\",\r\n    Yellow = \"yellow\",\r\n}","import { GridSetupModel } from \"../Models/GridSetupModel\";\r\nimport { DirectionEnum } from \"../Models/DirectionEnum\";\r\nimport { ChannelColorEnum } from \"../Models/ChannelColorsEnum\";\r\n\r\nexport class Setup {\r\n\r\n    private GridSetup: GridSetupModel | undefined;\r\n    constructor() {\r\n        this.LoadSetup();\r\n    }\r\n\r\n    public LoadGridSetup(): GridSetupModel {\r\n        if (this.GridSetup === undefined) {\r\n            throw new Error(\"Setup not loaded\");\r\n        }\r\n\r\n        return this.GridSetup;\r\n    }\r\n\r\n    LoadSetup(): void {\r\n        this.GridSetup = {\r\n            NumberOfRows: 5,\r\n            NumberOfColumns: 6,\r\n            MachineInstances: [{\r\n                Cell: { Row: 0, Column: 1 },\r\n                Channels: [{ Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Down }],\r\n                InputChannels: undefined,\r\n                MachineId: {Id: 1, Type: \"Default\"},\r\n                Id: 1\r\n            },\r\n            {\r\n                Cell: { Row: 1, Column: 1 },\r\n                Channels: [{ Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Right }],\r\n                InputChannels: undefined,\r\n                MachineId: {Id: 5, Type: \"Default\"},\r\n                Id: 2\r\n            },{\r\n                Cell: { Row: 1, Column: 2 },\r\n                Channels: [{ Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Down }],\r\n                InputChannels: undefined,\r\n                MachineId: {Id: 5, Type: \"Default\"},\r\n                Id: 3\r\n            }]\r\n        };\r\n\r\n    }\r\n}\r\n","export class Constants {\r\n    public static CellSize = 100;\r\n}","import React from \"react\";\r\nimport { Props } from \"./Props\";\r\nimport { Constants } from \"../Constants\";\r\n\r\nexport class Machine extends React.Component<Props>\r\n{\r\n    public render() {\r\n        const machineSize = Constants.CellSize / 5 * 3\r\n        const borderSize = machineSize/10;\r\n\r\n        const machineStyle: React.CSSProperties = {\r\n            // position: \"absolute\",\r\n            height: machineSize,\r\n            width: machineSize,\r\n            backgroundColor: this.props.Machine.Color,\r\n            borderStyle: \"solid\",\r\n            borderColor: this.props.Machine.BorderColor,\r\n            borderWidth: borderSize,\r\n            borderRadius: \"50%\",\r\n            marginLeft: ((Constants.CellSize - machineSize)/2 - borderSize),\r\n            marginTop: ((Constants.CellSize - machineSize)/2 - borderSize)\r\n        };\r\n\r\n        return (\r\n            <div style={machineStyle}>\r\n               \r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport { Props } from \"./Props\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { Constants } from \"../Constants\";\r\n\r\nexport class Channel extends React.Component<Props>{\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.onClicked = this.onClicked.bind(this);\r\n    }\r\n    public render() {\r\n\r\n        const width = 19;\r\n        const height = 4;\r\n        const border = 1\r\n        const channelStyle: React.CSSProperties = {\r\n            position: \"absolute\",\r\n            height: Constants.CellSize / 50 * height,\r\n            width: Constants.CellSize / 50 * width,\r\n            marginLeft: Constants.CellSize / 50 * (25 + (height + border) / 2),\r\n            marginTop: Constants.CellSize / 50 * (25 - (height + border) / 2),\r\n            backgroundColor: this.props.ChannelMap.Channel,\r\n            borderStyle: \"solid\",\r\n            borderWidth: border + \"px\",\r\n            pointerEvents: \"visible\"\r\n        }\r\n\r\n        let rotate: string = \"\";\r\n        switch (this.props.ChannelMap.Direction) {\r\n            case DirectionEnum.Down:\r\n                rotate = \"rotate(90deg)\";\r\n                break;\r\n            case DirectionEnum.Left:\r\n                rotate = \"rotate(180deg)\";\r\n                break;\r\n            case DirectionEnum.Up:\r\n                rotate = \"rotate(270deg)\";\r\n                break;\r\n            case DirectionEnum.Right:\r\n                rotate = \"rotate(0deg)\";\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        const rotation: React.CSSProperties = {\r\n            transform: rotate,\r\n            height: Constants.CellSize,\r\n            width: Constants.CellSize,\r\n            position: \"absolute\",\r\n            pointerEvents: \"none\"\r\n        }\r\n\r\n        return (\r\n            <div style={rotation}>\r\n                <div style={channelStyle} onClick={this.onClicked}></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public onClicked(event: React.MouseEvent<HTMLDivElement, MouseEvent>): void {\r\n        let newDirection: DirectionEnum = DirectionEnum.Left;\r\n        switch (this.props.ChannelMap.Direction) {\r\n            case DirectionEnum.Down:\r\n                newDirection = DirectionEnum.Left;\r\n                break;\r\n            case DirectionEnum.Left:\r\n                newDirection = DirectionEnum.Up;\r\n                break;\r\n            case DirectionEnum.Up:\r\n                newDirection = DirectionEnum.Right;\r\n                break;\r\n            case DirectionEnum.Right:\r\n                newDirection = DirectionEnum.Down;\r\n                break;\r\n        }\r\n\r\n        console.log(\"Clicked\" + this.props.ChannelMap.Channel)\r\n        this.props.OnChanged({ Direction: newDirection, Channel: this.props.ChannelMap.Channel });\r\n\r\n    }\r\n}","export const DragItemTypes = {\r\n    MachineInstance: \"MachineInstance\",\r\n    NewMachine: \"NewMachine\"\r\n  }","import { IMachine } from \"../IMachine\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MachineId } from \"../MachineId\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachineType } from \"../IMachineType\";\r\n\r\nexport class MoveMachine implements IMachine {\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            returnValue.push({ Content: message.Content, Channel: ChannelColorEnum.Green });\r\n            return returnValue;\r\n        }\r\n    }\r\n    GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    GetType(): IMachineType {\r\n        return {\r\n            Color: \"green\",\r\n            BorderColor: \"lightgreen\",\r\n            NumberOfOutputs: 1,\r\n            NumberOfInputs: 1,\r\n            Name: \"Move\"\r\n        }\r\n    }\r\n    public readonly Id: MachineId = { Id: 5, Type: \"Default\" };\r\n}","import { IMachine } from \"../IMachine\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { MachineId } from \"../MachineId\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachineType } from \"../IMachineType\";\r\n\r\nexport class StartMachine implements IMachine {\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            returnValue.push({ Content: message.Content, Channel: ChannelColorEnum.Green });\r\n            return returnValue;\r\n        }\r\n    }\r\n    GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    GetType(): IMachineType {\r\n        return {\r\n            Color: \"white\",\r\n            BorderColor: \"red\",\r\n            NumberOfOutputs: 1,\r\n            NumberOfInputs: 1,\r\n            Name: \"Start\"\r\n        }\r\n    }\r\n    public readonly Id: MachineId = { Id: 1, Type: \"Default\" };    \r\n}","import { IMachine } from \"../IMachine\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { MachineId } from \"../MachineId\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\n\r\nexport class CopyMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            const content = message.Content.length > 0 ? message.Content[0] + message.Content : \"\";\r\n\r\n            returnValue.push({ Content: content, Channel: ChannelColorEnum.Green });\r\n            return returnValue;\r\n        }\r\n    }\r\n    GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    GetType(): IMachineType {\r\n        return {\r\n            BorderColor: \"green\",\r\n            Color: \"yellow\",\r\n            Name: \"Copy\",\r\n            NumberOfInputs: 1,\r\n            NumberOfOutputs: 1\r\n        }\r\n    }\r\n    Id: MachineId = {\r\n        Id: 6,\r\n        Type: \"Default\"\r\n    }\r\n}\r\n\r\n","import { IMachine } from \"../IMachine\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { MachineId } from \"../MachineId\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\n\r\nexport class DeleteMachine implements IMachine {\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            const content = message.Content.length > 0 ? message.Content.slice(1): \"\";\r\n\r\n            returnValue.push({ Content: content, Channel: ChannelColorEnum.Green });\r\n            return returnValue;\r\n        }\r\n    }\r\n    GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    GetType(): IMachineType {\r\n        return {\r\n            BorderColor: \"red\",\r\n            Color: \"red\",\r\n            Name: \"Delete\",\r\n            NumberOfInputs: 1,\r\n            NumberOfOutputs: 1\r\n        }\r\n    }\r\n    Id: MachineId = {\r\n        Id: 7,\r\n        Type: \"Default\"\r\n    }\r\n}\r\n\r\n","import { IMachine } from \"../IMachine\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { MachineId } from \"../MachineId\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\n\r\nexport class RotateMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            let content: string;\r\n            if ( message.Content.length > 1){\r\n                content = message.Content.slice(1) + message.Content.slice(0,1);\r\n            }\r\n            else{\r\n                content = message.Content;\r\n            }\r\n\r\n            returnValue.push({ Content: content, Channel: ChannelColorEnum.Green });\r\n            return returnValue;\r\n        }\r\n    }\r\n    GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    GetType(): IMachineType {\r\n        return {\r\n            BorderColor: \"blue\",\r\n            Color: \"cyan\",\r\n            Name: \"Rotate\",\r\n            NumberOfInputs: 1,\r\n            NumberOfOutputs: 1\r\n        }\r\n    }\r\n    Id: MachineId = {\r\n        Id: 8,\r\n        Type: \"Default\"\r\n    }\r\n}\r\n\r\n","import { IMachine } from \"../IMachine\";\r\nimport { IActor } from \"../IActor\";\r\nimport { IMachineType } from \"../IMachineType\";\r\nimport { MachineId } from \"../MachineId\";\r\nimport { MessageModel } from \"../../Models/MessageModel\";\r\nimport { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\n\r\nexport class CompareMachine implements IMachine {\r\n\r\n    private actor: IActor = {\r\n        Act: (message) => {\r\n            const returnValue: MessageModel[] = [];\r\n            const channel: ChannelColorEnum = message.Content.length > 1 && message.Content[0] === message.Content[1] ? ChannelColorEnum.Green : ChannelColorEnum.Red;\r\n\r\n            returnValue.push({ Content: message.Content, Channel: channel });\r\n            return returnValue;\r\n        }\r\n    }\r\n    GetActor(): IActor {\r\n        return this.actor;\r\n    }\r\n    GetType(): IMachineType {\r\n        return {\r\n            BorderColor: \"red\",\r\n            Color: \"green\",\r\n            Name: \"Compare\",\r\n            NumberOfInputs: 2,\r\n            NumberOfOutputs: 1\r\n        }\r\n    }\r\n    Id: MachineId = {\r\n        Id: 9,\r\n        Type: \"Default\"\r\n    }\r\n}\r\n\r\n","import { MoveMachine } from \"./DefaultMachines/MoveMachine\";\r\nimport { IMachine } from \"./IMachine\";\r\nimport { StartMachine } from \"./DefaultMachines/StartMachine\";\r\nimport { MachineId } from \"./MachineId\";\r\nimport { IMachineType } from \"./IMachineType\";\r\nimport { IActor } from \"./IActor\";\r\nimport { CopyMachine } from \"./DefaultMachines/CopyMachine\";\r\nimport { DeleteMachine } from \"./DefaultMachines/DeleteMachine\";\r\nimport { RotateMachine } from \"./DefaultMachines/RotateMachine\";\r\nimport { CompareMachine } from \"./DefaultMachines/CompareMachine\";\r\n\r\nexport class MachineStore {\r\n    private static machineStore: MachineStore;\r\n    private machines: IMachine[];\r\n\r\n    private constructor() {\r\n        this.machines = [];\r\n        this.init();\r\n    }\r\n\r\n    public static GetStore(): MachineStore{\r\n        if (MachineStore.machineStore === undefined)        {\r\n            MachineStore.machineStore = new MachineStore();\r\n        }\r\n\r\n        return MachineStore.machineStore;\r\n    }\r\n\r\n    private init(): void {\r\n        this.machines = [];\r\n        this.machines.push(new StartMachine());\r\n        this.machines.push(new MoveMachine());\r\n        this.machines.push(new CopyMachine());\r\n        this.machines.push(new DeleteMachine());\r\n        this.machines.push(new RotateMachine());\r\n        this.machines.push(new CompareMachine());\r\n    }\r\n\r\n    private FindMachine(id: MachineId): IMachine {\r\n        const machine = this.machines.find(m => m.Id.Id === id.Id && m.Id.Type === id.Type);\r\n        if (machine === undefined){\r\n            throw new Error(\"No machine found with id \" + id.Id + \" and type \" + id.Type);\r\n        }\r\n\r\n        return machine;\r\n    }\r\n\r\n    public GetActor(id: MachineId): IActor {\r\n        return this.FindMachine(id).GetActor();\r\n    }\r\n\r\n    public GetMachineType(id: MachineId): IMachineType {\r\n        return this.FindMachine(id).GetType();       \r\n    }\r\n\r\n    public GetAllMachine(): IMachine[] {\r\n        return this.machines;\r\n    }\r\n}","import React from \"react\";\r\nimport { Props } from \"./Props\";\r\nimport { Machine } from \"../Machine/Machine\";\r\nimport { Channel } from \"../Channel/Channel\";\r\nimport { ChannelModel } from \"../../Models/ChannelMapModel\";\r\nimport { MachineInstanceModel } from \"../../Models/MachineInstanceModel\";\r\nimport { useDrag } from \"react-dnd\";\r\nimport { DragItemTypes } from \"../DragItemTypes\";\r\nimport {MachineStore} from \"../../MachineStore/MachineStore\";\r\n\r\nconst MachineInstance: React.FC<Props> = (props) => {\r\n    const [, drag] = useDrag({\r\n        item: { type: DragItemTypes.MachineInstance, id: props.MachineInstance.Id },\r\n        end: (dropResult, monitor) => {\r\n            if (!monitor.didDrop()) {\r\n                props.OnRemoved(props.MachineInstance.Id);\r\n            }\r\n        },\r\n        collect: monitor => ({\r\n            isDragging: !!monitor.isDragging(),\r\n        }),\r\n    })\r\n\r\n    const OnChannelChanged = (channel: ChannelModel, index: Number) => {\r\n        const machineInstance: MachineInstanceModel = {\r\n            Cell: props.MachineInstance.Cell,\r\n            MachineId: props.MachineInstance.MachineId,\r\n            Channels: props.MachineInstance.Channels.map((c, i) => (i === index) ? channel : c),\r\n            InputChannels: props.MachineInstance.InputChannels,\r\n            Id: props.MachineInstance.Id\r\n        }\r\n\r\n        props.OnChanged(machineInstance);\r\n    }\r\n\r\n    const channels = props.MachineInstance.Channels.map((c, index) => <div key={index}><Channel OnChanged={(channelMap) => OnChannelChanged(channelMap, index)} ChannelMap={c} /></div>);\r\n    const absoluteStyle: React.CSSProperties = {\r\n        position: \"absolute\",\r\n    };\r\n\r\n    const machineType = MachineStore.GetStore().GetMachineType(props.MachineInstance.MachineId);\r\n    return (\r\n        <div ref={drag}>\r\n            <div style={absoluteStyle}>\r\n                <Machine Machine={machineType} />\r\n            </div>\r\n            {channels}\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default MachineInstance;\r\n\r\n","import React from \"react\";\r\nimport { Props } from \"./Props\";\r\nimport \"../../App.css\";\r\nimport MachineInstance from \"../MachineInstance/MachineInstance\";\r\nimport { Constants } from \"../Constants\";\r\nimport { useDrop } from \"react-dnd\";\r\nimport { DragItemTypes } from \"../DragItemTypes\";\r\nimport { MachineId } from \"../../MachineStore/MachineId\";\r\n\r\nconst Cell: React.FC<Props> = (props) => {\r\n\r\n    const [, drop] = useDrop({\r\n        accept: [DragItemTypes.MachineInstance, DragItemTypes.NewMachine],\r\n        drop: (item, monitor) => {\r\n            switch (item.type) {\r\n                case DragItemTypes.MachineInstance:\r\n                    props.OnMovedMachine(monitor.getItem().id, props.location);\r\n                    break;\r\n                case DragItemTypes.NewMachine: \r\n                    const itemProps = monitor.getItem() as {id: MachineId};                  \r\n                    props.OnNewMachine(itemProps.id, props.location);\r\n                    break;\r\n            }\r\n        },\r\n    })\r\n\r\n    const style: React.CSSProperties = {\r\n        height: Constants.CellSize,\r\n        width: Constants.CellSize,\r\n        border: \"1px solid #999\",\r\n        float: \"left\",\r\n        marginTop: -1,\r\n        marginRight: -1,\r\n        position: \"relative\"\r\n    }\r\n\r\n    return (\r\n        <div style={style} ref={drop}>\r\n            {props.message !== undefined ? props.message.Message : \"\"}\r\n            {props.machineInstance !== undefined ? <MachineInstance MachineInstance={props.machineInstance} OnChanged={props.OnChanged} OnRemoved={props.OnMachineRemoved}/> : \"\"}\r\n\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default Cell;","import React from 'react';\r\nimport '../../App.css';\r\nimport { GridProps } from './Props';\r\nimport Cell from '../Cell/Cell';\r\nimport { MachineInstanceModel } from '../../Models/MachineInstanceModel';\r\nimport { MessageLocationModel } from '../../Models/MessageLocationModel';\r\nimport { GridSetupModel } from '../../Models/GridSetupModel';\r\nimport { CellModel } from '../../Models/CellModel';\r\nimport { ChannelModel } from '../../Models/ChannelMapModel';\r\nimport { ChannelColorEnum } from '../../Models/ChannelColorsEnum';\r\nimport { DirectionEnum } from '../../Models/DirectionEnum';\r\nimport { MachineId } from '../../MachineStore/MachineId';\r\nimport { MachineStore } from '../../MachineStore/MachineStore';\r\n\r\nexport class Grid extends React.Component<GridProps>{\r\n\r\n    private store: MachineStore;\r\n    constructor(props: GridProps) {\r\n        super(props);\r\n        this.ChannelChanged = this.ChannelChanged.bind(this);\r\n        this.MachineMoved = this.MachineMoved.bind(this);\r\n        this.MachineAdded = this.MachineAdded.bind(this);\r\n        this.MachineRemoved = this.MachineRemoved.bind(this);\r\n        this.store = MachineStore.GetStore();\r\n    }\r\n\r\n    public render() {\r\n        var rows = [];\r\n        for (var rowIndex = 0; rowIndex < this.props.GridSetup.NumberOfRows; rowIndex++) {\r\n            var row = [];\r\n            for (var columnIndex = 0; columnIndex < this.props.GridSetup.NumberOfColumns; columnIndex++) {\r\n                let foundMachineInstance: MachineInstanceModel | undefined = undefined;\r\n                let foundMessage: MessageLocationModel | undefined = undefined;\r\n\r\n                for (const machineInstance of this.props.GridSetup.MachineInstances) {\r\n                    if (machineInstance.Cell.Column === columnIndex && machineInstance.Cell.Row === rowIndex) {\r\n                        foundMachineInstance = machineInstance;\r\n                    }\r\n                }\r\n\r\n                for (const message of this.props.Messages) {\r\n                    if (message.Cell!.Column === columnIndex && message.Cell!.Row === rowIndex) {\r\n                        foundMessage = message;\r\n                    }\r\n                }\r\n\r\n                row.push(<Cell \r\n                    key={columnIndex} \r\n                    machineInstance={foundMachineInstance} \r\n                    message={foundMessage} \r\n                    OnChanged={this.ChannelChanged} \r\n                    OnMovedMachine={this.MachineMoved} \r\n                    OnNewMachine={this.MachineAdded} \r\n                    OnMachineRemoved={this.MachineRemoved}\r\n                    location={{ Row: rowIndex, Column: columnIndex }} />);\r\n            }\r\n            rows.push(<div key={rowIndex}>{row}</div>);\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                {rows}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private ChannelChanged(machineInstance: MachineInstanceModel) {\r\n        const newGridSetup: GridSetupModel = {\r\n            NumberOfColumns: this.props.GridSetup.NumberOfColumns,\r\n            NumberOfRows: this.props.GridSetup.NumberOfRows,\r\n            MachineInstances: this.props.GridSetup.MachineInstances.map((mi) =>\r\n                (mi.Cell.Column === machineInstance.Cell.Column && mi.Cell.Row === machineInstance.Cell.Row) ?\r\n                    machineInstance\r\n                    :\r\n                    mi)\r\n        };\r\n\r\n        this.props.OnChanged(newGridSetup);\r\n    }\r\n\r\n    private MachineMoved(id: number, location: CellModel): void {\r\n        const index = this.props.GridSetup.MachineInstances.findIndex((mi) => mi.Id === id);\r\n        this.props.GridSetup.MachineInstances[index].Cell = location;\r\n        this.props.OnChanged(this.props.GridSetup);\r\n    }\r\n    private MachineRemoved(id: number): void {\r\n        this.props.GridSetup.MachineInstances = this.props.GridSetup.MachineInstances.filter((mi) => mi.Id !== id);\r\n        this.props.OnChanged(this.props.GridSetup);\r\n    }\r\n    private MachineAdded(id: MachineId,location: CellModel): void {\r\n        const machine = this.store.GetMachineType(id);\r\n        const channels: ChannelModel[] = [];\r\n        if (machine.NumberOfInputs > 0) {\r\n            channels.push({ Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Up });\r\n        }\r\n        if (machine.NumberOfInputs > 1) {\r\n            channels.push({ Channel: ChannelColorEnum.Red, Direction: DirectionEnum.Down });\r\n        }\r\n        if (machine.NumberOfInputs > 2) {\r\n            channels.push({ Channel: ChannelColorEnum.Blue, Direction: DirectionEnum.Right });\r\n        }\r\n        if (machine.NumberOfInputs > 3) {\r\n            channels.push({ Channel: ChannelColorEnum.Yellow, Direction: DirectionEnum.Left });\r\n        }\r\n\r\n        const maxId =  (this.props.GridSetup.MachineInstances.length===0)? 0 : Math.max(...this.props.GridSetup.MachineInstances.map(mi => mi.Id));\r\n        \r\n        const machineInstance: MachineInstanceModel = {\r\n            Cell: location,\r\n            MachineId: id,\r\n            Channels: channels,\r\n            InputChannels: [],\r\n            Id: maxId + 1\r\n        }\r\n        this.props.GridSetup.MachineInstances.push(machineInstance);\r\n        this.props.OnChanged(this.props.GridSetup);\r\n    }\r\n}\r\n\r\n\r\n","import React from \"react\";\r\nimport { Props } from \"./Props\";\r\nimport { Machine } from \"../Machine/Machine\";\r\nimport { useDrag } from \"react-dnd\";\r\nimport { DragItemTypes } from \"../DragItemTypes\";\r\nimport { ChannelModel } from \"../../Models/ChannelMapModel\";\r\nimport { ChannelColorEnum } from \"../../Models/ChannelColorsEnum\";\r\nimport { DirectionEnum } from \"../../Models/DirectionEnum\";\r\nimport { Channel } from \"../Channel/Channel\";\r\n\r\nconst StoredMachine: React.FC<Props> = (props) => {\r\n    const [, drag] = useDrag({\r\n        item: { type: DragItemTypes.NewMachine, id: props.machine.Id },\r\n        collect: monitor => ({\r\n            isDragging: !!monitor.isDragging(),\r\n        }),\r\n    })\r\n\r\n    const machineType = props.machine.GetType();\r\n    const channels: ChannelModel[] = [];\r\n    if (machineType.NumberOfInputs > 0) {\r\n        channels.push({ Channel: ChannelColorEnum.Green, Direction: DirectionEnum.Up });\r\n    }\r\n    if (machineType.NumberOfInputs > 1) {\r\n        channels.push({ Channel: ChannelColorEnum.Red, Direction: DirectionEnum.Down });\r\n    }\r\n    if (machineType.NumberOfInputs > 2) {\r\n        channels.push({ Channel: ChannelColorEnum.Blue, Direction: DirectionEnum.Right });\r\n    }\r\n    if (machineType.NumberOfInputs > 3) {\r\n        channels.push({ Channel: ChannelColorEnum.Yellow, Direction: DirectionEnum.Left });\r\n    }\r\n\r\n    const channelComponents = channels.map((c, index) => <Channel key={index} ChannelMap={c} OnChanged={(cm) => { }} />);\r\n    const absoluteStyle: React.CSSProperties = {\r\n        position: \"absolute\",\r\n    };\r\n    return (\r\n        <div ref={drag}>\r\n            <div style={absoluteStyle}>\r\n                <Machine Machine={props.machine.GetType()} />\r\n            </div>\r\n            <div style={absoluteStyle}>\r\n                {channelComponents}\r\n            </div>\r\n            <label>{machineType.Name}</label>\r\n        </div>)\r\n}\r\n\r\nexport default StoredMachine","import { Props } from \"./Props\";\r\nimport React from \"react\";\r\nimport StoredMachine from \"../StoredMachine/StoredMachine\";\r\nimport {MachineStore as Store} from \"../../MachineStore/MachineStore\";\r\nimport { Constants } from \"../Constants\";\r\n\r\nconst MachineStore: React.FC<Props> = (props) => {\r\n\r\n    const machines = Store.GetStore().GetAllMachine();\r\n    const relativeStyle: React.CSSProperties = {\r\n        position: \"relative\",\r\n        height: Constants.CellSize,\r\n        width: Constants.CellSize\r\n    };\r\n\r\n    const filteredMachines= machines.filter((m) => !props.disallowedMachines.some((mi) => mi.Id === m.Id.Id && mi.Type === m.Id.Type));\r\n    const storedMachines = filteredMachines.map((m, index) => <div style={relativeStyle} key={index}><StoredMachine machine={m} /></div>);\r\n\r\n    return (\r\n        <div>\r\n            {storedMachines}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MachineStore","import { GridSetupModel } from \"../Models/GridSetupModel\";\r\nimport { MachineInstanceModel } from \"../Models/MachineInstanceModel\";\r\nimport { MessageLocationModel } from \"../Models/MessageLocationModel\";\r\nimport { CellModel } from \"../Models/CellModel\";\r\nimport { ChannelColorEnum } from \"../Models/ChannelColorsEnum\";\r\nimport { MachineStore } from \"../MachineStore/MachineStore\";\r\nimport { IActor } from \"../MachineStore/IActor\";\r\nimport { DirectionEnum } from \"../Models/DirectionEnum\";\r\n\r\nexport class Computer {\r\n    private setup: GridSetupModel;\r\n    private machines: { id: number, actor: IActor }[] = [];\r\n    private store: MachineStore;\r\n\r\n    constructor(setup: GridSetupModel) {\r\n        this.setup = setup;\r\n        this.store = MachineStore.GetStore();\r\n        this.GetMachines()\r\n    }\r\n\r\n    public NewSetup(setup: GridSetupModel){\r\n        this.setup = setup;\r\n        this.GetMachines();\r\n    }\r\n\r\n    private GetMachines(): void {\r\n        this.machines = this.setup.MachineInstances.map(mi => { return { id: mi.Id, actor: this.store.GetActor(mi.MachineId) }; });\r\n    }\r\n\r\n    public GetStartMachines() {\r\n        const startMachines: MachineInstanceModel[] = [];\r\n        for (const machineInstance of this.setup.MachineInstances) {\r\n            if (machineInstance.MachineId.Id < 4 && machineInstance.MachineId.Type === \"Default\") {\r\n                startMachines.push(machineInstance);\r\n            }\r\n        }\r\n\r\n        return startMachines;\r\n    }\r\n\r\n    public StartComputation(Input: string): MessageLocationModel[] {\r\n        const messageLocations: MessageLocationModel[] = [];\r\n        for (const machineInstance of this.GetStartMachines()) {\r\n            const direction = machineInstance.Channels[0].Direction;\r\n            const messageLocation: MessageLocationModel = { Message: Input, Direction: direction, Cell: machineInstance.Cell };\r\n            messageLocations.push(messageLocation);\r\n        }\r\n\r\n        return messageLocations;\r\n    }\r\n\r\n    public GetNextMessages(messages: MessageLocationModel[]): MessageLocationModel[]{\r\n        const nextMessages: MessageLocationModel[] = [];\r\n        for (const message of messages) {\r\n            let machine: MachineInstanceModel | undefined;\r\n            let messageCell: CellModel | undefined = message.Cell;\r\n\r\n            while (machine === undefined) {\r\n                messageCell = this.Move(messageCell!, message.Direction);\r\n                if (messageCell === undefined){\r\n                    break;\r\n                }\r\n\r\n                machine = this.setup.MachineInstances.find((mi) => mi.Cell.Column === messageCell!.Column && mi.Cell.Row === messageCell!.Row);\r\n            }\r\n\r\n            if (messageCell === undefined) {\r\n                nextMessages.push({ Cell: messageCell, Direction: message.Direction, Message: message.Message })\r\n                break;\r\n            }\r\n\r\n            let channel = ChannelColorEnum.Green;\r\n\r\n            const actor = this.machines.find((m) => m.id === machine!.Id)!.actor;\r\n            const nextContents = actor.Act({ Content: message.Message, Channel: channel });\r\n            for (const nextContent of nextContents) {\r\n                const channelMap = machine!.Channels.find((cm) => cm.Channel === nextContent.Channel);\r\n                if (channelMap === undefined) {\r\n                    throw Error(\"Channelmap \" + nextContent.Channel + \"undefined\");\r\n                }\r\n\r\n                const messageLocation: MessageLocationModel = { Cell: machine!.Cell, Message: nextContent.Content, Direction: channelMap.Direction }\r\n                nextMessages.push(messageLocation);\r\n            }\r\n        }\r\n\r\n        return nextMessages;\r\n    }\r\n\r\n    private Move(cell: CellModel, direction: DirectionEnum): CellModel | undefined {\r\n        switch (direction) {\r\n            case DirectionEnum.Down:\r\n                if (cell.Row === this.setup.NumberOfRows - 1) {\r\n                    return;\r\n                }\r\n                return { Column: cell.Column, Row: cell.Row + 1 };\r\n            case DirectionEnum.Up:\r\n                if (cell.Row === 0) {\r\n                    return;\r\n                }\r\n                return { Column: cell.Column, Row: cell.Row - 1 };\r\n            case DirectionEnum.Right:\r\n                if (cell.Column === this.setup.NumberOfColumns - 1) {\r\n                    return;\r\n                }\r\n                return { Column: cell.Column + 1, Row: cell.Row };\r\n            case DirectionEnum.Left:\r\n                if (cell.Row === 0) {\r\n                    return;\r\n                }\r\n                return { Column: cell.Column - 1, Row: cell.Row };\r\n        }\r\n    }\r\n\r\n}","import React from \"react\";\r\nimport { Props } from \"./Props\";\r\nimport { State } from \"./State\";\r\nimport { GridSetupModel } from \"../../Models/GridSetupModel\";\r\n\r\nexport class Settings extends React.Component<Props, State>{\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.StepTimeChanged = this.StepTimeChanged.bind(this);\r\n        this.ShowSetupString = this.ShowSetupString.bind(this);\r\n        this.LoadSetup = this.LoadSetup.bind(this);\r\n        this.SetupStringChanged = this.SetupStringChanged.bind(this);\r\n\r\n        this.state = { SetupString: \"\" }\r\n    }\r\n    public render() {\r\n        const verticalFlex: React.CSSProperties = { display: \"flex\", flexWrap: \"wrap\", flexDirection: \"column\", justifyContent: \"center\", alignItems: \"center\" }\r\n        const setupString = this.props.ShowSetup ? this.state.SetupString : \"\";\r\n        return (\r\n            <div style={verticalFlex}>\r\n                <label>Step Time</label>\r\n                <input value={this.props.StepTime} title=\"Step time\" onChange={this.StepTimeChanged} />\r\n                <button title={\"Show setup string\"} onClick={this.ShowSetupString}>Show setup string</button>\r\n                <input value={setupString} onChange={this.SetupStringChanged} />\r\n                <button title={\"Load Setup\"} onClick={this.LoadSetup}>Load setup</button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    private SetupStringChanged(event: React.ChangeEvent<HTMLInputElement>): void {\r\n        this.setState({ SetupString: event.target.value });\r\n    }\r\n\r\n    private StepTimeChanged(event: React.ChangeEvent<HTMLInputElement>): void {\r\n        const stringValue = event.target.value;\r\n        const numValue = Number(stringValue);\r\n        this.props.OnStepTimeChanged(numValue);\r\n    }\r\n\r\n    private ShowSetupString(): void {\r\n        this.setState({ SetupString: JSON.stringify(this.props.Setup) });\r\n        this.props.OnShowingSetup();\r\n    }\r\n\r\n    private LoadSetup(): void {\r\n        const setupModel = JSON.parse(this.state.SetupString) as GridSetupModel;\r\n        if (setupModel !== undefined) {\r\n            this.props.OnSetupChanged(setupModel);\r\n        }\r\n    }\r\n}\r\n","import { Props } from \"./Props\";\r\nimport React from \"react\";\r\nimport { Setup } from \"../../Computing/Setup\";\r\nimport { Grid } from \"../Grid/Grid\";\r\nimport { State } from \"./State\";\r\nimport { MessageLocationModel } from \"../../Models/MessageLocationModel\";\r\nimport { Constants } from \"../Constants\";\r\nimport { GridSetupModel } from \"../../Models/GridSetupModel\";\r\nimport MachineStore from \"../MachineStore/MachineStore\";\r\nimport { Computer } from \"../../Computing/Computer\";\r\nimport { Settings } from \"../Settings/Settings\";\r\n\r\nexport class Game extends React.Component<Props, State>{\r\n    private computer: Computer;\r\n    private runningComputation: NodeJS.Timeout | undefined;\r\n    startMachines: any;\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.inputChanged = this.inputChanged.bind(this);\r\n        this.startComputation = this.startComputation.bind(this);\r\n        this.CalculateNextMessages = this.CalculateNextMessages.bind(this);\r\n        this.GridSetupChanged = this.GridSetupChanged.bind(this);\r\n        this.LoadSetup = this.LoadSetup.bind(this);\r\n        this.StepTimeChanged = this.StepTimeChanged.bind(this);\r\n        this.OnShowingSetup = this.OnShowingSetup.bind(this);\r\n\r\n        const setup = new Setup();\r\n        const gridSetup = setup.LoadGridSetup();\r\n        this.computer = new Computer(gridSetup);\r\n        this.state = { Computing: false, Messages: [], GridSetup: gridSetup, Input: \"\", Output: \"\", StepTime: 600, ShowingSetup: false };\r\n    }\r\n    private inputChanged(e: React.ChangeEvent<HTMLInputElement>): void {\r\n        this.setState({ Input: e.target.value });\r\n    }\r\n    private startComputation(): void {\r\n        const messageLocations: MessageLocationModel[] = this.computer.StartComputation(this.state.Input);\r\n\r\n        this.setState({ Computing: true, Messages: messageLocations });\r\n        setTimeout(this.CalculateNextMessages, this.state.StepTime);\r\n    }\r\n\r\n    private CalculateNextMessages(): void {\r\n        const messages = this.computer.GetNextMessages(this.state.Messages);\r\n\r\n        const doneMessages = messages.filter(mm => mm.Cell === undefined);\r\n        if (doneMessages.length > 0) {\r\n            this.setState({ Output: doneMessages[0].Message });\r\n        }\r\n\r\n        const nextMessages = messages.filter(mm => mm.Cell !== undefined);\r\n        this.setState({ Messages: nextMessages });\r\n        if (nextMessages.length > 0) {\r\n            this.runningComputation = setTimeout(this.CalculateNextMessages, this.state.StepTime);\r\n        } else {\r\n            this.setState({ Computing: false });\r\n        }\r\n    }\r\n\r\n    private LoadSetup(event: React.ChangeEvent<HTMLInputElement>): void {\r\n        const newValue = JSON.parse(event.target.value);\r\n        const newSetup = newValue as GridSetupModel;\r\n        if (newSetup !== undefined) {\r\n            this.GridSetupChanged(newSetup);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        const startMachines = this.computer.GetStartMachines();\r\n\r\n        const disallowedStartMachines = startMachines.map((m) => m.MachineId);\r\n        const height = this.state.GridSetup.NumberOfRows * (Constants.CellSize + 2);\r\n        const width = this.state.GridSetup.NumberOfColumns * (Constants.CellSize + 2);\r\n        const gridSizeStyle: React.CSSProperties = { height: height, width: width };\r\n        const verticalFlex: React.CSSProperties = { display: \"flex\", flexWrap: \"wrap\", flexDirection: \"column\", justifyContent: \"center\", alignItems: \"center\" }\r\n        const horizontalFlex: React.CSSProperties = { display: \"flex\", flexWrap: \"wrap\", flexDirection: \"row\", justifyContent: \"space-between\" }\r\n\r\n        return (\r\n            <div style={verticalFlex} >\r\n                <h2>StringCalculator</h2>\r\n                <div style={horizontalFlex}>\r\n                    <div>\r\n                        <Settings\r\n                            Setup={this.state.GridSetup}\r\n                            OnSetupChanged={this.GridSetupChanged}\r\n                            StepTime={this.state.StepTime}\r\n                            OnStepTimeChanged={this.StepTimeChanged}\r\n                            ShowSetup = {this.state.ShowingSetup}\r\n                            OnShowingSetup={this.OnShowingSetup} />\r\n                    </div>\r\n                    <div style={verticalFlex}>\r\n                        <div className=\"App\" style={gridSizeStyle}>\r\n                            <Grid\r\n                                GridSetup={this.state.GridSetup}\r\n                                Computing={this.state.Computing}\r\n                                Messages={this.state.Messages}\r\n                                OnChanged={this.GridSetupChanged} />\r\n                        </div>\r\n                        <div>\r\n                            <input\r\n                                value={this.state.Input}\r\n                                onChange={this.inputChanged} />\r\n                            <button onClick={this.startComputation} title={\"start\"}>Start</button>\r\n                        </div>\r\n                        <label>Output: {this.state.Output}</label>\r\n                    </div>\r\n                    <div>\r\n                        <MachineStore disallowedMachines={disallowedStartMachines} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n    private GridSetupChanged(newGridSetup: GridSetupModel): void {\r\n        this.computer.NewSetup(newGridSetup);\r\n        this.setState({ GridSetup: newGridSetup, ShowingSetup: false });\r\n    }\r\n\r\n    private StepTimeChanged(newStepTime: number): void {\r\n        this.setState({ StepTime: newStepTime });\r\n    }\r\n\r\n    private OnShowingSetup()\r\n    {\r\n        this.setState({ShowingSetup: true});\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport { Game } from './Components/Game/Game';\nimport { DndProvider } from 'react-dnd'\nimport HTML5Backend from 'react-dnd-html5-backend'\n\nconst App: React.FC = () => {\n  \n  return (\n    <DndProvider backend={HTML5Backend}><Game/></DndProvider>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}